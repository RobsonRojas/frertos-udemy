
Example013.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052e0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000852e0  000852e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000852e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a224  200709a8  00085c90  000209a4  2**3
                  ALLOC
  4 .stack        00002004  2007abcc  0008feb4  000209a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000ca68  00000000  00000000  00020a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027bb  00000000  00000000  0002d48e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000727f  00000000  00000000  0002fc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c68  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc8  00000000  00000000  00037b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001842a  00000000  00000000  000386f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000de06  00000000  00000000  00050b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068e7c  00000000  00000000  0005e928  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000293c  00000000  00000000  000c77a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cbd0 	.word	0x2007cbd0
   80004:	00081c79 	.word	0x00081c79
   80008:	00081c75 	.word	0x00081c75
   8000c:	00081c75 	.word	0x00081c75
   80010:	00081c75 	.word	0x00081c75
   80014:	00081c75 	.word	0x00081c75
   80018:	00081c75 	.word	0x00081c75
	...
   8002c:	00080289 	.word	0x00080289
   80030:	00081c75 	.word	0x00081c75
   80034:	00000000 	.word	0x00000000
   80038:	00080305 	.word	0x00080305
   8003c:	00080341 	.word	0x00080341
   80040:	00081c75 	.word	0x00081c75
   80044:	00081c75 	.word	0x00081c75
   80048:	00081c75 	.word	0x00081c75
   8004c:	00081c75 	.word	0x00081c75
   80050:	00081c75 	.word	0x00081c75
   80054:	00081c75 	.word	0x00081c75
   80058:	00081c75 	.word	0x00081c75
   8005c:	00081c75 	.word	0x00081c75
   80060:	00081c75 	.word	0x00081c75
   80064:	00081c75 	.word	0x00081c75
   80068:	00000000 	.word	0x00000000
   8006c:	00081ae5 	.word	0x00081ae5
   80070:	00081af9 	.word	0x00081af9
   80074:	00081b0d 	.word	0x00081b0d
   80078:	00081b21 	.word	0x00081b21
	...
   80084:	00081c75 	.word	0x00081c75
   80088:	00081c75 	.word	0x00081c75
   8008c:	00081c75 	.word	0x00081c75
   80090:	00081c75 	.word	0x00081c75
   80094:	00081c75 	.word	0x00081c75
   80098:	00081c75 	.word	0x00081c75
   8009c:	00081c75 	.word	0x00081c75
   800a0:	00081c75 	.word	0x00081c75
   800a4:	00000000 	.word	0x00000000
   800a8:	00081c75 	.word	0x00081c75
   800ac:	00081c75 	.word	0x00081c75
   800b0:	00081c75 	.word	0x00081c75
   800b4:	00081c75 	.word	0x00081c75
   800b8:	00081c75 	.word	0x00081c75
   800bc:	00081c75 	.word	0x00081c75
   800c0:	00081c75 	.word	0x00081c75
   800c4:	00081c75 	.word	0x00081c75
   800c8:	00081c75 	.word	0x00081c75
   800cc:	00081c75 	.word	0x00081c75
   800d0:	00081c75 	.word	0x00081c75
   800d4:	00081c75 	.word	0x00081c75
   800d8:	00081c75 	.word	0x00081c75
   800dc:	00081c75 	.word	0x00081c75
   800e0:	00081c75 	.word	0x00081c75
   800e4:	00081c75 	.word	0x00081c75
   800e8:	00081c75 	.word	0x00081c75
   800ec:	00081c75 	.word	0x00081c75
   800f0:	00081c75 	.word	0x00081c75

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	000852e8 	.word	0x000852e8

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709ac 	.word	0x200709ac
   80144:	000852e8 	.word	0x000852e8
   80148:	000852e8 	.word	0x000852e8
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b990      	cbnz	r0, 80178 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0f      	ble.n	8017e <_read+0x2e>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42a7      	cmp	r7, r4
   80170:	d1f8      	bne.n	80164 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80172:	4640      	mov	r0, r8
   80174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80178:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8017c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8017e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80184:	2007abbc 	.word	0x2007abbc
   80188:	2007abb4 	.word	0x2007abb4

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   801b8:	f100 0308 	add.w	r3, r0, #8
   801bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   801be:	f04f 32ff 	mov.w	r2, #4294967295
   801c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   801c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   801c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   801c8:	2300      	movs	r3, #0
   801ca:	6003      	str	r3, [r0, #0]
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop

000801d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   801d0:	2300      	movs	r3, #0
   801d2:	6103      	str	r3, [r0, #16]
   801d4:	4770      	bx	lr
   801d6:	bf00      	nop

000801d8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   801d8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   801de:	6842      	ldr	r2, [r0, #4]
   801e0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801e2:	685a      	ldr	r2, [r3, #4]
   801e4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   801e6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   801e8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801ec:	6803      	ldr	r3, [r0, #0]
   801ee:	3301      	adds	r3, #1
   801f0:	6003      	str	r3, [r0, #0]
   801f2:	4770      	bx	lr

000801f4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   801f4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   801f6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   801f8:	f1b4 3fff 	cmp.w	r4, #4294967295
   801fc:	d101      	bne.n	80202 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   801fe:	6903      	ldr	r3, [r0, #16]
   80200:	e00a      	b.n	80218 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80202:	f100 0308 	add.w	r3, r0, #8
   80206:	68c2      	ldr	r2, [r0, #12]
   80208:	6812      	ldr	r2, [r2, #0]
   8020a:	4294      	cmp	r4, r2
   8020c:	d304      	bcc.n	80218 <vListInsert+0x24>
   8020e:	685b      	ldr	r3, [r3, #4]
   80210:	685a      	ldr	r2, [r3, #4]
   80212:	6812      	ldr	r2, [r2, #0]
   80214:	4294      	cmp	r4, r2
   80216:	d2fa      	bcs.n	8020e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80218:	685a      	ldr	r2, [r3, #4]
   8021a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8021c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8021e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80220:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80222:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80224:	6803      	ldr	r3, [r0, #0]
   80226:	3301      	adds	r3, #1
   80228:	6003      	str	r3, [r0, #0]
}
   8022a:	bc10      	pop	{r4}
   8022c:	4770      	bx	lr
   8022e:	bf00      	nop

00080230 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80230:	6843      	ldr	r3, [r0, #4]
   80232:	6882      	ldr	r2, [r0, #8]
   80234:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80236:	6883      	ldr	r3, [r0, #8]
   80238:	6842      	ldr	r2, [r0, #4]
   8023a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8023c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8023e:	685a      	ldr	r2, [r3, #4]
   80240:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80242:	bf04      	itt	eq
   80244:	6882      	ldreq	r2, [r0, #8]
   80246:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80248:	2200      	movs	r2, #0
   8024a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8024c:	681a      	ldr	r2, [r3, #0]
   8024e:	3a01      	subs	r2, #1
   80250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80252:	6818      	ldr	r0, [r3, #0]
}
   80254:	4770      	bx	lr
   80256:	bf00      	nop

00080258 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80258:	4803      	ldr	r0, [pc, #12]	; (80268 <prvPortStartFirstTask+0x10>)
   8025a:	6800      	ldr	r0, [r0, #0]
   8025c:	6800      	ldr	r0, [r0, #0]
   8025e:	f380 8808 	msr	MSP, r0
   80262:	b662      	cpsie	i
   80264:	df00      	svc	0
   80266:	bf00      	nop
   80268:	e000ed08 	.word	0xe000ed08

0008026c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8026c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80270:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80274:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80278:	2300      	movs	r3, #0
   8027a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8027e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80282:	3840      	subs	r0, #64	; 0x40
   80284:	4770      	bx	lr
   80286:	bf00      	nop

00080288 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80288:	4b06      	ldr	r3, [pc, #24]	; (802a4 <pxCurrentTCBConst2>)
   8028a:	6819      	ldr	r1, [r3, #0]
   8028c:	6808      	ldr	r0, [r1, #0]
   8028e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80292:	f380 8809 	msr	PSP, r0
   80296:	f04f 0000 	mov.w	r0, #0
   8029a:	f380 8811 	msr	BASEPRI, r0
   8029e:	f04e 0e0d 	orr.w	lr, lr, #13
   802a2:	4770      	bx	lr

000802a4 <pxCurrentTCBConst2>:
   802a4:	2007aa8c 	.word	0x2007aa8c

000802a8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802ac:	4b01      	ldr	r3, [pc, #4]	; (802b4 <vPortYieldFromISR+0xc>)
   802ae:	601a      	str	r2, [r3, #0]
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop
   802b4:	e000ed04 	.word	0xe000ed04

000802b8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802b8:	f3ef 8011 	mrs	r0, BASEPRI
   802bc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802c0:	f381 8811 	msr	BASEPRI, r1
   802c4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802c6:	2000      	movs	r0, #0

000802c8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   802c8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   802ca:	4b03      	ldr	r3, [pc, #12]	; (802d8 <vPortEnterCritical+0x10>)
   802cc:	4798      	blx	r3
	uxCriticalNesting++;
   802ce:	4a03      	ldr	r2, [pc, #12]	; (802dc <vPortEnterCritical+0x14>)
   802d0:	6813      	ldr	r3, [r2, #0]
   802d2:	3301      	adds	r3, #1
   802d4:	6013      	str	r3, [r2, #0]
   802d6:	bd08      	pop	{r3, pc}
   802d8:	000802b9 	.word	0x000802b9
   802dc:	2007012c 	.word	0x2007012c

000802e0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802e0:	f380 8811 	msr	BASEPRI, r0
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop

000802e8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   802e8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   802ea:	4a04      	ldr	r2, [pc, #16]	; (802fc <vPortExitCritical+0x14>)
   802ec:	6813      	ldr	r3, [r2, #0]
   802ee:	3b01      	subs	r3, #1
   802f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   802f2:	b913      	cbnz	r3, 802fa <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   802f4:	2000      	movs	r0, #0
   802f6:	4b02      	ldr	r3, [pc, #8]	; (80300 <vPortExitCritical+0x18>)
   802f8:	4798      	blx	r3
   802fa:	bd08      	pop	{r3, pc}
   802fc:	2007012c 	.word	0x2007012c
   80300:	000802e1 	.word	0x000802e1

00080304 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80304:	f3ef 8009 	mrs	r0, PSP
   80308:	4b0c      	ldr	r3, [pc, #48]	; (8033c <pxCurrentTCBConst>)
   8030a:	681a      	ldr	r2, [r3, #0]
   8030c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80310:	6010      	str	r0, [r2, #0]
   80312:	e92d 4008 	stmdb	sp!, {r3, lr}
   80316:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8031a:	f380 8811 	msr	BASEPRI, r0
   8031e:	f000 fe6f 	bl	81000 <vTaskSwitchContext>
   80322:	f04f 0000 	mov.w	r0, #0
   80326:	f380 8811 	msr	BASEPRI, r0
   8032a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8032e:	6819      	ldr	r1, [r3, #0]
   80330:	6808      	ldr	r0, [r1, #0]
   80332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80336:	f380 8809 	msr	PSP, r0
   8033a:	4770      	bx	lr

0008033c <pxCurrentTCBConst>:
   8033c:	2007aa8c 	.word	0x2007aa8c

00080340 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80340:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80346:	4b05      	ldr	r3, [pc, #20]	; (8035c <SysTick_Handler+0x1c>)
   80348:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8034a:	4b05      	ldr	r3, [pc, #20]	; (80360 <SysTick_Handler+0x20>)
   8034c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8034e:	4b05      	ldr	r3, [pc, #20]	; (80364 <SysTick_Handler+0x24>)
   80350:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80352:	2000      	movs	r0, #0
   80354:	4b04      	ldr	r3, [pc, #16]	; (80368 <SysTick_Handler+0x28>)
   80356:	4798      	blx	r3
   80358:	bd08      	pop	{r3, pc}
   8035a:	bf00      	nop
   8035c:	e000ed04 	.word	0xe000ed04
   80360:	000802b9 	.word	0x000802b9
   80364:	00080d59 	.word	0x00080d59
   80368:	000802e1 	.word	0x000802e1

0008036c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8036c:	4a03      	ldr	r2, [pc, #12]	; (8037c <vPortSetupTimerInterrupt+0x10>)
   8036e:	4b04      	ldr	r3, [pc, #16]	; (80380 <vPortSetupTimerInterrupt+0x14>)
   80370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80372:	2207      	movs	r2, #7
   80374:	3b04      	subs	r3, #4
   80376:	601a      	str	r2, [r3, #0]
   80378:	4770      	bx	lr
   8037a:	bf00      	nop
   8037c:	0001481f 	.word	0x0001481f
   80380:	e000e014 	.word	0xe000e014

00080384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80384:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80386:	4b09      	ldr	r3, [pc, #36]	; (803ac <xPortStartScheduler+0x28>)
   80388:	681a      	ldr	r2, [r3, #0]
   8038a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8038e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80390:	681a      	ldr	r2, [r3, #0]
   80392:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80396:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80398:	4b05      	ldr	r3, [pc, #20]	; (803b0 <xPortStartScheduler+0x2c>)
   8039a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8039c:	2400      	movs	r4, #0
   8039e:	4b05      	ldr	r3, [pc, #20]	; (803b4 <xPortStartScheduler+0x30>)
   803a0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <xPortStartScheduler+0x34>)
   803a4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   803a6:	4620      	mov	r0, r4
   803a8:	bd10      	pop	{r4, pc}
   803aa:	bf00      	nop
   803ac:	e000ed20 	.word	0xe000ed20
   803b0:	0008036d 	.word	0x0008036d
   803b4:	2007012c 	.word	0x2007012c
   803b8:	00080259 	.word	0x00080259

000803bc <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   803bc:	4a12      	ldr	r2, [pc, #72]	; (80408 <prvInsertBlockIntoFreeList+0x4c>)
   803be:	e000      	b.n	803c2 <prvInsertBlockIntoFreeList+0x6>
   803c0:	461a      	mov	r2, r3
   803c2:	6813      	ldr	r3, [r2, #0]
   803c4:	4283      	cmp	r3, r0
   803c6:	d3fb      	bcc.n	803c0 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   803c8:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   803ca:	6851      	ldr	r1, [r2, #4]
   803cc:	1854      	adds	r4, r2, r1
   803ce:	42a0      	cmp	r0, r4
   803d0:	d103      	bne.n	803da <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   803d2:	6840      	ldr	r0, [r0, #4]
   803d4:	4401      	add	r1, r0
   803d6:	6051      	str	r1, [r2, #4]
   803d8:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   803da:	6841      	ldr	r1, [r0, #4]
   803dc:	1844      	adds	r4, r0, r1
   803de:	42a3      	cmp	r3, r4
   803e0:	d10c      	bne.n	803fc <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   803e2:	4b0a      	ldr	r3, [pc, #40]	; (8040c <prvInsertBlockIntoFreeList+0x50>)
   803e4:	681b      	ldr	r3, [r3, #0]
   803e6:	429c      	cmp	r4, r3
   803e8:	d006      	beq.n	803f8 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   803ea:	6863      	ldr	r3, [r4, #4]
   803ec:	4419      	add	r1, r3
   803ee:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   803f0:	6813      	ldr	r3, [r2, #0]
   803f2:	681b      	ldr	r3, [r3, #0]
   803f4:	6003      	str	r3, [r0, #0]
   803f6:	e002      	b.n	803fe <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   803f8:	6004      	str	r4, [r0, #0]
   803fa:	e000      	b.n	803fe <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   803fc:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   803fe:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80400:	bf18      	it	ne
   80402:	6010      	strne	r0, [r2, #0]
	}
}
   80404:	bc10      	pop	{r4}
   80406:	4770      	bx	lr
   80408:	2007a9cc 	.word	0x2007a9cc
   8040c:	2007a9c8 	.word	0x2007a9c8

00080410 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   80410:	b538      	push	{r3, r4, r5, lr}
   80412:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80414:	4b2b      	ldr	r3, [pc, #172]	; (804c4 <pvPortMalloc+0xb4>)
   80416:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80418:	4b2b      	ldr	r3, [pc, #172]	; (804c8 <pvPortMalloc+0xb8>)
   8041a:	681b      	ldr	r3, [r3, #0]
   8041c:	b99b      	cbnz	r3, 80446 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8041e:	4a2b      	ldr	r2, [pc, #172]	; (804cc <pvPortMalloc+0xbc>)
   80420:	4b2b      	ldr	r3, [pc, #172]	; (804d0 <pvPortMalloc+0xc0>)
   80422:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80424:	2100      	movs	r1, #0
   80426:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80428:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   8042c:	1898      	adds	r0, r3, r2
   8042e:	4d26      	ldr	r5, [pc, #152]	; (804c8 <pvPortMalloc+0xb8>)
   80430:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80432:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80436:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80438:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8043a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8043c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8043e:	4a25      	ldr	r2, [pc, #148]	; (804d4 <pvPortMalloc+0xc4>)
   80440:	6813      	ldr	r3, [r2, #0]
   80442:	3b10      	subs	r3, #16
   80444:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80446:	2c00      	cmp	r4, #0
   80448:	d037      	beq.n	804ba <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8044a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8044e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80452:	bf1c      	itt	ne
   80454:	f022 0207 	bicne.w	r2, r2, #7
   80458:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8045a:	1e51      	subs	r1, r2, #1
   8045c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80460:	4299      	cmp	r1, r3
   80462:	d827      	bhi.n	804b4 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80464:	4919      	ldr	r1, [pc, #100]	; (804cc <pvPortMalloc+0xbc>)
   80466:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80468:	e001      	b.n	8046e <pvPortMalloc+0x5e>
   8046a:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   8046c:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8046e:	6863      	ldr	r3, [r4, #4]
   80470:	429a      	cmp	r2, r3
   80472:	d902      	bls.n	8047a <pvPortMalloc+0x6a>
   80474:	6823      	ldr	r3, [r4, #0]
   80476:	2b00      	cmp	r3, #0
   80478:	d1f7      	bne.n	8046a <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   8047a:	4b13      	ldr	r3, [pc, #76]	; (804c8 <pvPortMalloc+0xb8>)
   8047c:	681b      	ldr	r3, [r3, #0]
   8047e:	429c      	cmp	r4, r3
   80480:	d018      	beq.n	804b4 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80482:	680d      	ldr	r5, [r1, #0]
   80484:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80486:	6823      	ldr	r3, [r4, #0]
   80488:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8048a:	6863      	ldr	r3, [r4, #4]
   8048c:	1a9b      	subs	r3, r3, r2
   8048e:	2b20      	cmp	r3, #32
   80490:	d904      	bls.n	8049c <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80492:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80494:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80496:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80498:	4b0f      	ldr	r3, [pc, #60]	; (804d8 <pvPortMalloc+0xc8>)
   8049a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8049c:	4a0d      	ldr	r2, [pc, #52]	; (804d4 <pvPortMalloc+0xc4>)
   8049e:	6813      	ldr	r3, [r2, #0]
   804a0:	6861      	ldr	r1, [r4, #4]
   804a2:	1a5b      	subs	r3, r3, r1
   804a4:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
   804a6:	4b0d      	ldr	r3, [pc, #52]	; (804dc <pvPortMalloc+0xcc>)
   804a8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   804aa:	b94d      	cbnz	r5, 804c0 <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
   804ac:	4b0c      	ldr	r3, [pc, #48]	; (804e0 <pvPortMalloc+0xd0>)
   804ae:	4798      	blx	r3
   804b0:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
   804b2:	e005      	b.n	804c0 <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   804b4:	4b09      	ldr	r3, [pc, #36]	; (804dc <pvPortMalloc+0xcc>)
   804b6:	4798      	blx	r3
   804b8:	e7f8      	b.n	804ac <pvPortMalloc+0x9c>
   804ba:	4b08      	ldr	r3, [pc, #32]	; (804dc <pvPortMalloc+0xcc>)
   804bc:	4798      	blx	r3
   804be:	e7f5      	b.n	804ac <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
   804c0:	4628      	mov	r0, r5
   804c2:	bd38      	pop	{r3, r4, r5, pc}
   804c4:	00080d29 	.word	0x00080d29
   804c8:	2007a9c8 	.word	0x2007a9c8
   804cc:	2007a9cc 	.word	0x2007a9cc
   804d0:	200709c8 	.word	0x200709c8
   804d4:	20070130 	.word	0x20070130
   804d8:	000803bd 	.word	0x000803bd
   804dc:	00080e79 	.word	0x00080e79
   804e0:	000821c5 	.word	0x000821c5

000804e4 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   804e4:	b180      	cbz	r0, 80508 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   804e6:	b510      	push	{r4, lr}
   804e8:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   804ea:	4b08      	ldr	r3, [pc, #32]	; (8050c <vPortFree+0x28>)
   804ec:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   804ee:	4a08      	ldr	r2, [pc, #32]	; (80510 <vPortFree+0x2c>)
   804f0:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   804f4:	6813      	ldr	r3, [r2, #0]
   804f6:	440b      	add	r3, r1
   804f8:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   804fa:	f1a4 0010 	sub.w	r0, r4, #16
   804fe:	4b05      	ldr	r3, [pc, #20]	; (80514 <vPortFree+0x30>)
   80500:	4798      	blx	r3
		}
		xTaskResumeAll();
   80502:	4b05      	ldr	r3, [pc, #20]	; (80518 <vPortFree+0x34>)
   80504:	4798      	blx	r3
   80506:	bd10      	pop	{r4, pc}
   80508:	4770      	bx	lr
   8050a:	bf00      	nop
   8050c:	00080d29 	.word	0x00080d29
   80510:	20070130 	.word	0x20070130
   80514:	000803bd 	.word	0x000803bd
   80518:	00080e79 	.word	0x00080e79

0008051c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8051c:	b510      	push	{r4, lr}
   8051e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80520:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80522:	b93b      	cbnz	r3, 80534 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80524:	6803      	ldr	r3, [r0, #0]
   80526:	bb1b      	cbnz	r3, 80570 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80528:	6840      	ldr	r0, [r0, #4]
   8052a:	4b13      	ldr	r3, [pc, #76]	; (80578 <prvCopyDataToQueue+0x5c>)
   8052c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8052e:	2300      	movs	r3, #0
   80530:	6063      	str	r3, [r4, #4]
   80532:	e01d      	b.n	80570 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80534:	b96a      	cbnz	r2, 80552 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80536:	461a      	mov	r2, r3
   80538:	6880      	ldr	r0, [r0, #8]
   8053a:	4b10      	ldr	r3, [pc, #64]	; (8057c <prvCopyDataToQueue+0x60>)
   8053c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8053e:	68a2      	ldr	r2, [r4, #8]
   80540:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80542:	4413      	add	r3, r2
   80544:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80546:	6862      	ldr	r2, [r4, #4]
   80548:	4293      	cmp	r3, r2
   8054a:	d311      	bcc.n	80570 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8054c:	6823      	ldr	r3, [r4, #0]
   8054e:	60a3      	str	r3, [r4, #8]
   80550:	e00e      	b.n	80570 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80552:	461a      	mov	r2, r3
   80554:	68c0      	ldr	r0, [r0, #12]
   80556:	4b09      	ldr	r3, [pc, #36]	; (8057c <prvCopyDataToQueue+0x60>)
   80558:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8055a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8055c:	425b      	negs	r3, r3
   8055e:	68e2      	ldr	r2, [r4, #12]
   80560:	441a      	add	r2, r3
   80562:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80564:	6821      	ldr	r1, [r4, #0]
   80566:	428a      	cmp	r2, r1
   80568:	d202      	bcs.n	80570 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8056a:	6862      	ldr	r2, [r4, #4]
   8056c:	4413      	add	r3, r2
   8056e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80572:	3301      	adds	r3, #1
   80574:	63a3      	str	r3, [r4, #56]	; 0x38
   80576:	bd10      	pop	{r4, pc}
   80578:	00081331 	.word	0x00081331
   8057c:	00082241 	.word	0x00082241

00080580 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80580:	b538      	push	{r3, r4, r5, lr}
   80582:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80584:	6800      	ldr	r0, [r0, #0]
   80586:	b158      	cbz	r0, 805a0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8058a:	68dc      	ldr	r4, [r3, #12]
   8058c:	4414      	add	r4, r2
   8058e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80590:	685d      	ldr	r5, [r3, #4]
   80592:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80594:	bf28      	it	cs
   80596:	60d8      	strcs	r0, [r3, #12]
   80598:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   8059a:	68d9      	ldr	r1, [r3, #12]
   8059c:	4b01      	ldr	r3, [pc, #4]	; (805a4 <prvCopyDataFromQueue+0x24>)
   8059e:	4798      	blx	r3
   805a0:	bd38      	pop	{r3, r4, r5, pc}
   805a2:	bf00      	nop
   805a4:	00082241 	.word	0x00082241

000805a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   805a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805aa:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   805ac:	4b1e      	ldr	r3, [pc, #120]	; (80628 <prvUnlockQueue+0x80>)
   805ae:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805b2:	2b00      	cmp	r3, #0
   805b4:	dd13      	ble.n	805de <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   805b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805b8:	b91b      	cbnz	r3, 805c2 <prvUnlockQueue+0x1a>
   805ba:	e010      	b.n	805de <prvUnlockQueue+0x36>
   805bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805be:	b923      	cbnz	r3, 805ca <prvUnlockQueue+0x22>
   805c0:	e00d      	b.n	805de <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805c2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   805c6:	4d19      	ldr	r5, [pc, #100]	; (8062c <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805c8:	4f19      	ldr	r7, [pc, #100]	; (80630 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805ca:	4630      	mov	r0, r6
   805cc:	47a8      	blx	r5
   805ce:	b100      	cbz	r0, 805d2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805d0:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   805d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805d4:	3b01      	subs	r3, #1
   805d6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805da:	2b00      	cmp	r3, #0
   805dc:	dcee      	bgt.n	805bc <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   805de:	f04f 33ff 	mov.w	r3, #4294967295
   805e2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   805e4:	4b13      	ldr	r3, [pc, #76]	; (80634 <prvUnlockQueue+0x8c>)
   805e6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   805e8:	4b0f      	ldr	r3, [pc, #60]	; (80628 <prvUnlockQueue+0x80>)
   805ea:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   805ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
   805ee:	2b00      	cmp	r3, #0
   805f0:	dd13      	ble.n	8061a <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   805f2:	6923      	ldr	r3, [r4, #16]
   805f4:	b91b      	cbnz	r3, 805fe <prvUnlockQueue+0x56>
   805f6:	e010      	b.n	8061a <prvUnlockQueue+0x72>
   805f8:	6923      	ldr	r3, [r4, #16]
   805fa:	b923      	cbnz	r3, 80606 <prvUnlockQueue+0x5e>
   805fc:	e00d      	b.n	8061a <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   805fe:	f104 0610 	add.w	r6, r4, #16
   80602:	4d0a      	ldr	r5, [pc, #40]	; (8062c <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80604:	4f0a      	ldr	r7, [pc, #40]	; (80630 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80606:	4630      	mov	r0, r6
   80608:	47a8      	blx	r5
   8060a:	b100      	cbz	r0, 8060e <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   8060c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8060e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80610:	3b01      	subs	r3, #1
   80612:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80614:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80616:	2b00      	cmp	r3, #0
   80618:	dcee      	bgt.n	805f8 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8061a:	f04f 33ff 	mov.w	r3, #4294967295
   8061e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80620:	4b04      	ldr	r3, [pc, #16]	; (80634 <prvUnlockQueue+0x8c>)
   80622:	4798      	blx	r3
   80624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80626:	bf00      	nop
   80628:	000802c9 	.word	0x000802c9
   8062c:	00081149 	.word	0x00081149
   80630:	00081279 	.word	0x00081279
   80634:	000802e9 	.word	0x000802e9

00080638 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80638:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   8063a:	b918      	cbnz	r0, 80644 <xQueueGenericReset+0xc>
   8063c:	4b17      	ldr	r3, [pc, #92]	; (8069c <xQueueGenericReset+0x64>)
   8063e:	4798      	blx	r3
   80640:	bf00      	nop
   80642:	e7fd      	b.n	80640 <xQueueGenericReset+0x8>
   80644:	460d      	mov	r5, r1
   80646:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80648:	4b15      	ldr	r3, [pc, #84]	; (806a0 <xQueueGenericReset+0x68>)
   8064a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8064c:	6822      	ldr	r2, [r4, #0]
   8064e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80652:	fb03 f301 	mul.w	r3, r3, r1
   80656:	18d0      	adds	r0, r2, r3
   80658:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8065a:	2000      	movs	r0, #0
   8065c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8065e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80660:	1a5b      	subs	r3, r3, r1
   80662:	4413      	add	r3, r2
   80664:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80666:	f04f 33ff 	mov.w	r3, #4294967295
   8066a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8066c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8066e:	b955      	cbnz	r5, 80686 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80670:	6923      	ldr	r3, [r4, #16]
   80672:	b17b      	cbz	r3, 80694 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80674:	f104 0010 	add.w	r0, r4, #16
   80678:	4b0a      	ldr	r3, [pc, #40]	; (806a4 <xQueueGenericReset+0x6c>)
   8067a:	4798      	blx	r3
   8067c:	2801      	cmp	r0, #1
   8067e:	d109      	bne.n	80694 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80680:	4b09      	ldr	r3, [pc, #36]	; (806a8 <xQueueGenericReset+0x70>)
   80682:	4798      	blx	r3
   80684:	e006      	b.n	80694 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80686:	f104 0010 	add.w	r0, r4, #16
   8068a:	4d08      	ldr	r5, [pc, #32]	; (806ac <xQueueGenericReset+0x74>)
   8068c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8068e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80692:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80694:	4b06      	ldr	r3, [pc, #24]	; (806b0 <xQueueGenericReset+0x78>)
   80696:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80698:	2001      	movs	r0, #1
   8069a:	bd38      	pop	{r3, r4, r5, pc}
   8069c:	000802b9 	.word	0x000802b9
   806a0:	000802c9 	.word	0x000802c9
   806a4:	00081149 	.word	0x00081149
   806a8:	000802a9 	.word	0x000802a9
   806ac:	000801b9 	.word	0x000801b9
   806b0:	000802e9 	.word	0x000802e9

000806b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   806b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   806b6:	b1a0      	cbz	r0, 806e2 <xQueueGenericCreate+0x2e>
   806b8:	460d      	mov	r5, r1
   806ba:	4617      	mov	r7, r2
   806bc:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   806be:	2050      	movs	r0, #80	; 0x50
   806c0:	4b0e      	ldr	r3, [pc, #56]	; (806fc <xQueueGenericCreate+0x48>)
   806c2:	4798      	blx	r3
		if( pxNewQueue != NULL )
   806c4:	4604      	mov	r4, r0
   806c6:	b160      	cbz	r0, 806e2 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   806c8:	fb05 f006 	mul.w	r0, r5, r6
   806cc:	3001      	adds	r0, #1
   806ce:	4b0b      	ldr	r3, [pc, #44]	; (806fc <xQueueGenericCreate+0x48>)
   806d0:	4798      	blx	r3
   806d2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   806d4:	b940      	cbnz	r0, 806e8 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   806d6:	4620      	mov	r0, r4
   806d8:	4b09      	ldr	r3, [pc, #36]	; (80700 <xQueueGenericCreate+0x4c>)
   806da:	4798      	blx	r3
   806dc:	e001      	b.n	806e2 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   806de:	bf00      	nop
   806e0:	e7fd      	b.n	806de <xQueueGenericCreate+0x2a>
   806e2:	4b08      	ldr	r3, [pc, #32]	; (80704 <xQueueGenericCreate+0x50>)
   806e4:	4798      	blx	r3
   806e6:	e7fa      	b.n	806de <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   806e8:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   806ea:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   806ec:	2101      	movs	r1, #1
   806ee:	4620      	mov	r0, r4
   806f0:	4b05      	ldr	r3, [pc, #20]	; (80708 <xQueueGenericCreate+0x54>)
   806f2:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   806f4:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   806f8:	4620      	mov	r0, r4
   806fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806fc:	00080411 	.word	0x00080411
   80700:	000804e5 	.word	0x000804e5
   80704:	000802b9 	.word	0x000802b9
   80708:	00080639 	.word	0x00080639

0008070c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80710:	b085      	sub	sp, #20
   80712:	9201      	str	r2, [sp, #4]
   80714:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80716:	b918      	cbnz	r0, 80720 <xQueueGenericSend+0x14>
   80718:	4b38      	ldr	r3, [pc, #224]	; (807fc <xQueueGenericSend+0xf0>)
   8071a:	4798      	blx	r3
   8071c:	bf00      	nop
   8071e:	e7fd      	b.n	8071c <xQueueGenericSend+0x10>
   80720:	468a      	mov	sl, r1
   80722:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80724:	b929      	cbnz	r1, 80732 <xQueueGenericSend+0x26>
   80726:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80728:	b12b      	cbz	r3, 80736 <xQueueGenericSend+0x2a>
   8072a:	4b34      	ldr	r3, [pc, #208]	; (807fc <xQueueGenericSend+0xf0>)
   8072c:	4798      	blx	r3
   8072e:	bf00      	nop
   80730:	e7fd      	b.n	8072e <xQueueGenericSend+0x22>
   80732:	2700      	movs	r7, #0
   80734:	e000      	b.n	80738 <xQueueGenericSend+0x2c>
   80736:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80738:	4e31      	ldr	r6, [pc, #196]	; (80800 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8073a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80828 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8073e:	4d31      	ldr	r5, [pc, #196]	; (80804 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80740:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80742:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80746:	429a      	cmp	r2, r3
   80748:	d212      	bcs.n	80770 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8074a:	9a00      	ldr	r2, [sp, #0]
   8074c:	4651      	mov	r1, sl
   8074e:	4620      	mov	r0, r4
   80750:	4b2d      	ldr	r3, [pc, #180]	; (80808 <xQueueGenericSend+0xfc>)
   80752:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80754:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80756:	b13b      	cbz	r3, 80768 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80758:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8075c:	4b2b      	ldr	r3, [pc, #172]	; (8080c <xQueueGenericSend+0x100>)
   8075e:	4798      	blx	r3
   80760:	2801      	cmp	r0, #1
   80762:	d101      	bne.n	80768 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80764:	4b2a      	ldr	r3, [pc, #168]	; (80810 <xQueueGenericSend+0x104>)
   80766:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80768:	4b26      	ldr	r3, [pc, #152]	; (80804 <xQueueGenericSend+0xf8>)
   8076a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   8076c:	2001      	movs	r0, #1
   8076e:	e042      	b.n	807f6 <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80770:	9b01      	ldr	r3, [sp, #4]
   80772:	b91b      	cbnz	r3, 8077c <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80774:	4b23      	ldr	r3, [pc, #140]	; (80804 <xQueueGenericSend+0xf8>)
   80776:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80778:	2000      	movs	r0, #0
   8077a:	e03c      	b.n	807f6 <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
   8077c:	b917      	cbnz	r7, 80784 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8077e:	a802      	add	r0, sp, #8
   80780:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80782:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80784:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80786:	4b23      	ldr	r3, [pc, #140]	; (80814 <xQueueGenericSend+0x108>)
   80788:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8078a:	47b0      	blx	r6
   8078c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8078e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80792:	bf04      	itt	eq
   80794:	2300      	moveq	r3, #0
   80796:	6463      	streq	r3, [r4, #68]	; 0x44
   80798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8079a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8079e:	bf04      	itt	eq
   807a0:	2300      	moveq	r3, #0
   807a2:	64a3      	streq	r3, [r4, #72]	; 0x48
   807a4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   807a6:	a901      	add	r1, sp, #4
   807a8:	a802      	add	r0, sp, #8
   807aa:	4b1b      	ldr	r3, [pc, #108]	; (80818 <xQueueGenericSend+0x10c>)
   807ac:	4798      	blx	r3
   807ae:	b9e0      	cbnz	r0, 807ea <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   807b0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   807b2:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   807b6:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   807ba:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   807bc:	45c1      	cmp	r9, r8
   807be:	d10e      	bne.n	807de <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   807c0:	9901      	ldr	r1, [sp, #4]
   807c2:	f104 0010 	add.w	r0, r4, #16
   807c6:	4b15      	ldr	r3, [pc, #84]	; (8081c <xQueueGenericSend+0x110>)
   807c8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   807ca:	4620      	mov	r0, r4
   807cc:	4b14      	ldr	r3, [pc, #80]	; (80820 <xQueueGenericSend+0x114>)
   807ce:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   807d0:	4b14      	ldr	r3, [pc, #80]	; (80824 <xQueueGenericSend+0x118>)
   807d2:	4798      	blx	r3
   807d4:	2800      	cmp	r0, #0
   807d6:	d1b3      	bne.n	80740 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
   807d8:	4b0d      	ldr	r3, [pc, #52]	; (80810 <xQueueGenericSend+0x104>)
   807da:	4798      	blx	r3
   807dc:	e7b0      	b.n	80740 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   807de:	4620      	mov	r0, r4
   807e0:	4b0f      	ldr	r3, [pc, #60]	; (80820 <xQueueGenericSend+0x114>)
   807e2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   807e4:	4b0f      	ldr	r3, [pc, #60]	; (80824 <xQueueGenericSend+0x118>)
   807e6:	4798      	blx	r3
   807e8:	e7aa      	b.n	80740 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   807ea:	4620      	mov	r0, r4
   807ec:	4b0c      	ldr	r3, [pc, #48]	; (80820 <xQueueGenericSend+0x114>)
   807ee:	4798      	blx	r3
			( void ) xTaskResumeAll();
   807f0:	4b0c      	ldr	r3, [pc, #48]	; (80824 <xQueueGenericSend+0x118>)
   807f2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   807f4:	2000      	movs	r0, #0
		}
	}
}
   807f6:	b005      	add	sp, #20
   807f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807fc:	000802b9 	.word	0x000802b9
   80800:	000802c9 	.word	0x000802c9
   80804:	000802e9 	.word	0x000802e9
   80808:	0008051d 	.word	0x0008051d
   8080c:	00081149 	.word	0x00081149
   80810:	000802a9 	.word	0x000802a9
   80814:	00080d29 	.word	0x00080d29
   80818:	000811f5 	.word	0x000811f5
   8081c:	000810a5 	.word	0x000810a5
   80820:	000805a9 	.word	0x000805a9
   80824:	00080e79 	.word	0x00080e79
   80828:	000811cd 	.word	0x000811cd

0008082c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   8082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80830:	b918      	cbnz	r0, 8083a <xQueueGenericSendFromISR+0xe>
   80832:	4b1e      	ldr	r3, [pc, #120]	; (808ac <xQueueGenericSendFromISR+0x80>)
   80834:	4798      	blx	r3
   80836:	bf00      	nop
   80838:	e7fd      	b.n	80836 <xQueueGenericSendFromISR+0xa>
   8083a:	460e      	mov	r6, r1
   8083c:	4615      	mov	r5, r2
   8083e:	4698      	mov	r8, r3
   80840:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80842:	b929      	cbnz	r1, 80850 <xQueueGenericSendFromISR+0x24>
   80844:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80846:	b11b      	cbz	r3, 80850 <xQueueGenericSendFromISR+0x24>
   80848:	4b18      	ldr	r3, [pc, #96]	; (808ac <xQueueGenericSendFromISR+0x80>)
   8084a:	4798      	blx	r3
   8084c:	bf00      	nop
   8084e:	e7fd      	b.n	8084c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80850:	4b16      	ldr	r3, [pc, #88]	; (808ac <xQueueGenericSendFromISR+0x80>)
   80852:	4798      	blx	r3
   80854:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80856:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8085a:	429a      	cmp	r2, r3
   8085c:	d218      	bcs.n	80890 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8085e:	4642      	mov	r2, r8
   80860:	4631      	mov	r1, r6
   80862:	4620      	mov	r0, r4
   80864:	4b12      	ldr	r3, [pc, #72]	; (808b0 <xQueueGenericSendFromISR+0x84>)
   80866:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80868:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8086a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8086e:	d10a      	bne.n	80886 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80870:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80872:	b17b      	cbz	r3, 80894 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80874:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80878:	4b0e      	ldr	r3, [pc, #56]	; (808b4 <xQueueGenericSendFromISR+0x88>)
   8087a:	4798      	blx	r3
   8087c:	b160      	cbz	r0, 80898 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   8087e:	b16d      	cbz	r5, 8089c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80880:	2401      	movs	r4, #1
   80882:	602c      	str	r4, [r5, #0]
   80884:	e00b      	b.n	8089e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80886:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80888:	3301      	adds	r3, #1
   8088a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   8088c:	2401      	movs	r4, #1
   8088e:	e006      	b.n	8089e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80890:	2400      	movs	r4, #0
   80892:	e004      	b.n	8089e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80894:	2401      	movs	r4, #1
   80896:	e002      	b.n	8089e <xQueueGenericSendFromISR+0x72>
   80898:	2401      	movs	r4, #1
   8089a:	e000      	b.n	8089e <xQueueGenericSendFromISR+0x72>
   8089c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8089e:	4638      	mov	r0, r7
   808a0:	4b05      	ldr	r3, [pc, #20]	; (808b8 <xQueueGenericSendFromISR+0x8c>)
   808a2:	4798      	blx	r3

	return xReturn;
}
   808a4:	4620      	mov	r0, r4
   808a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808aa:	bf00      	nop
   808ac:	000802b9 	.word	0x000802b9
   808b0:	0008051d 	.word	0x0008051d
   808b4:	00081149 	.word	0x00081149
   808b8:	000802e1 	.word	0x000802e1

000808bc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   808bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808c0:	b085      	sub	sp, #20
   808c2:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   808c4:	b918      	cbnz	r0, 808ce <xQueueGenericReceive+0x12>
   808c6:	4b46      	ldr	r3, [pc, #280]	; (809e0 <xQueueGenericReceive+0x124>)
   808c8:	4798      	blx	r3
   808ca:	bf00      	nop
   808cc:	e7fd      	b.n	808ca <xQueueGenericReceive+0xe>
   808ce:	4689      	mov	r9, r1
   808d0:	469a      	mov	sl, r3
   808d2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   808d4:	b929      	cbnz	r1, 808e2 <xQueueGenericReceive+0x26>
   808d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   808d8:	b12b      	cbz	r3, 808e6 <xQueueGenericReceive+0x2a>
   808da:	4b41      	ldr	r3, [pc, #260]	; (809e0 <xQueueGenericReceive+0x124>)
   808dc:	4798      	blx	r3
   808de:	bf00      	nop
   808e0:	e7fd      	b.n	808de <xQueueGenericReceive+0x22>
   808e2:	2700      	movs	r7, #0
   808e4:	e000      	b.n	808e8 <xQueueGenericReceive+0x2c>
   808e6:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   808e8:	4e3e      	ldr	r6, [pc, #248]	; (809e4 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   808ea:	f8df b128 	ldr.w	fp, [pc, #296]	; 80a14 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   808ee:	4d3e      	ldr	r5, [pc, #248]	; (809e8 <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   808f0:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   808f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   808f4:	b343      	cbz	r3, 80948 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   808f6:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   808f8:	4649      	mov	r1, r9
   808fa:	4620      	mov	r0, r4
   808fc:	4b3b      	ldr	r3, [pc, #236]	; (809ec <xQueueGenericReceive+0x130>)
   808fe:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80900:	f1ba 0f00 	cmp.w	sl, #0
   80904:	d112      	bne.n	8092c <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80908:	3b01      	subs	r3, #1
   8090a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8090c:	6823      	ldr	r3, [r4, #0]
   8090e:	b913      	cbnz	r3, 80916 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80910:	4b37      	ldr	r3, [pc, #220]	; (809f0 <xQueueGenericReceive+0x134>)
   80912:	4798      	blx	r3
   80914:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80916:	6923      	ldr	r3, [r4, #16]
   80918:	b193      	cbz	r3, 80940 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8091a:	f104 0010 	add.w	r0, r4, #16
   8091e:	4b35      	ldr	r3, [pc, #212]	; (809f4 <xQueueGenericReceive+0x138>)
   80920:	4798      	blx	r3
   80922:	2801      	cmp	r0, #1
   80924:	d10c      	bne.n	80940 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   80926:	4b34      	ldr	r3, [pc, #208]	; (809f8 <xQueueGenericReceive+0x13c>)
   80928:	4798      	blx	r3
   8092a:	e009      	b.n	80940 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8092c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8092e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80930:	b133      	cbz	r3, 80940 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80932:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80936:	4b2f      	ldr	r3, [pc, #188]	; (809f4 <xQueueGenericReceive+0x138>)
   80938:	4798      	blx	r3
   8093a:	b108      	cbz	r0, 80940 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   8093c:	4b2e      	ldr	r3, [pc, #184]	; (809f8 <xQueueGenericReceive+0x13c>)
   8093e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80940:	4b29      	ldr	r3, [pc, #164]	; (809e8 <xQueueGenericReceive+0x12c>)
   80942:	4798      	blx	r3
				return pdPASS;
   80944:	2001      	movs	r0, #1
   80946:	e048      	b.n	809da <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80948:	9b01      	ldr	r3, [sp, #4]
   8094a:	b91b      	cbnz	r3, 80954 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8094c:	4b26      	ldr	r3, [pc, #152]	; (809e8 <xQueueGenericReceive+0x12c>)
   8094e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80950:	2000      	movs	r0, #0
   80952:	e042      	b.n	809da <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   80954:	b917      	cbnz	r7, 8095c <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80956:	a802      	add	r0, sp, #8
   80958:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   8095a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8095c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8095e:	4b27      	ldr	r3, [pc, #156]	; (809fc <xQueueGenericReceive+0x140>)
   80960:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80962:	47b0      	blx	r6
   80964:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80966:	f1b3 3fff 	cmp.w	r3, #4294967295
   8096a:	bf04      	itt	eq
   8096c:	2300      	moveq	r3, #0
   8096e:	6463      	streq	r3, [r4, #68]	; 0x44
   80970:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80972:	f1b3 3fff 	cmp.w	r3, #4294967295
   80976:	bf04      	itt	eq
   80978:	2300      	moveq	r3, #0
   8097a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8097c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8097e:	a901      	add	r1, sp, #4
   80980:	a802      	add	r0, sp, #8
   80982:	4b1f      	ldr	r3, [pc, #124]	; (80a00 <xQueueGenericReceive+0x144>)
   80984:	4798      	blx	r3
   80986:	bb10      	cbnz	r0, 809ce <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80988:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   8098a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   8098e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80990:	f1b8 0f00 	cmp.w	r8, #0
   80994:	d115      	bne.n	809c2 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80996:	6823      	ldr	r3, [r4, #0]
   80998:	b923      	cbnz	r3, 809a4 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   8099a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8099c:	6860      	ldr	r0, [r4, #4]
   8099e:	4b19      	ldr	r3, [pc, #100]	; (80a04 <xQueueGenericReceive+0x148>)
   809a0:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   809a2:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   809a4:	9901      	ldr	r1, [sp, #4]
   809a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   809aa:	4b17      	ldr	r3, [pc, #92]	; (80a08 <xQueueGenericReceive+0x14c>)
   809ac:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   809ae:	4620      	mov	r0, r4
   809b0:	4b16      	ldr	r3, [pc, #88]	; (80a0c <xQueueGenericReceive+0x150>)
   809b2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   809b4:	4b16      	ldr	r3, [pc, #88]	; (80a10 <xQueueGenericReceive+0x154>)
   809b6:	4798      	blx	r3
   809b8:	2800      	cmp	r0, #0
   809ba:	d199      	bne.n	808f0 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   809bc:	4b0e      	ldr	r3, [pc, #56]	; (809f8 <xQueueGenericReceive+0x13c>)
   809be:	4798      	blx	r3
   809c0:	e796      	b.n	808f0 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   809c2:	4620      	mov	r0, r4
   809c4:	4b11      	ldr	r3, [pc, #68]	; (80a0c <xQueueGenericReceive+0x150>)
   809c6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   809c8:	4b11      	ldr	r3, [pc, #68]	; (80a10 <xQueueGenericReceive+0x154>)
   809ca:	4798      	blx	r3
   809cc:	e790      	b.n	808f0 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   809ce:	4620      	mov	r0, r4
   809d0:	4b0e      	ldr	r3, [pc, #56]	; (80a0c <xQueueGenericReceive+0x150>)
   809d2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   809d4:	4b0e      	ldr	r3, [pc, #56]	; (80a10 <xQueueGenericReceive+0x154>)
   809d6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   809d8:	2000      	movs	r0, #0
		}
	}
}
   809da:	b005      	add	sp, #20
   809dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   809e0:	000802b9 	.word	0x000802b9
   809e4:	000802c9 	.word	0x000802c9
   809e8:	000802e9 	.word	0x000802e9
   809ec:	00080581 	.word	0x00080581
   809f0:	00081285 	.word	0x00081285
   809f4:	00081149 	.word	0x00081149
   809f8:	000802a9 	.word	0x000802a9
   809fc:	00080d29 	.word	0x00080d29
   80a00:	000811f5 	.word	0x000811f5
   80a04:	000812b1 	.word	0x000812b1
   80a08:	000810a5 	.word	0x000810a5
   80a0c:	000805a9 	.word	0x000805a9
   80a10:	00080e79 	.word	0x00080e79
   80a14:	000811cd 	.word	0x000811cd

00080a18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80a18:	b538      	push	{r3, r4, r5, lr}
   80a1a:	4604      	mov	r4, r0
   80a1c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80a1e:	4b0d      	ldr	r3, [pc, #52]	; (80a54 <vQueueWaitForMessageRestricted+0x3c>)
   80a20:	4798      	blx	r3
   80a22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a24:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a28:	bf04      	itt	eq
   80a2a:	2300      	moveq	r3, #0
   80a2c:	6463      	streq	r3, [r4, #68]	; 0x44
   80a2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a30:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a34:	bf04      	itt	eq
   80a36:	2300      	moveq	r3, #0
   80a38:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a3a:	4b07      	ldr	r3, [pc, #28]	; (80a58 <vQueueWaitForMessageRestricted+0x40>)
   80a3c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80a40:	b923      	cbnz	r3, 80a4c <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80a42:	4629      	mov	r1, r5
   80a44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a48:	4b04      	ldr	r3, [pc, #16]	; (80a5c <vQueueWaitForMessageRestricted+0x44>)
   80a4a:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80a4c:	4620      	mov	r0, r4
   80a4e:	4b04      	ldr	r3, [pc, #16]	; (80a60 <vQueueWaitForMessageRestricted+0x48>)
   80a50:	4798      	blx	r3
   80a52:	bd38      	pop	{r3, r4, r5, pc}
   80a54:	000802c9 	.word	0x000802c9
   80a58:	000802e9 	.word	0x000802e9
   80a5c:	00081105 	.word	0x00081105
   80a60:	000805a9 	.word	0x000805a9

00080a64 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80a64:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80a66:	4b0f      	ldr	r3, [pc, #60]	; (80aa4 <prvAddCurrentTaskToDelayedList+0x40>)
   80a68:	681b      	ldr	r3, [r3, #0]
   80a6a:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80a6c:	4b0e      	ldr	r3, [pc, #56]	; (80aa8 <prvAddCurrentTaskToDelayedList+0x44>)
   80a6e:	681b      	ldr	r3, [r3, #0]
   80a70:	4298      	cmp	r0, r3
   80a72:	d207      	bcs.n	80a84 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80a74:	4b0d      	ldr	r3, [pc, #52]	; (80aac <prvAddCurrentTaskToDelayedList+0x48>)
   80a76:	6818      	ldr	r0, [r3, #0]
   80a78:	4b0a      	ldr	r3, [pc, #40]	; (80aa4 <prvAddCurrentTaskToDelayedList+0x40>)
   80a7a:	6819      	ldr	r1, [r3, #0]
   80a7c:	3104      	adds	r1, #4
   80a7e:	4b0c      	ldr	r3, [pc, #48]	; (80ab0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80a80:	4798      	blx	r3
   80a82:	bd10      	pop	{r4, pc}
   80a84:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80a86:	4b0b      	ldr	r3, [pc, #44]	; (80ab4 <prvAddCurrentTaskToDelayedList+0x50>)
   80a88:	6818      	ldr	r0, [r3, #0]
   80a8a:	4b06      	ldr	r3, [pc, #24]	; (80aa4 <prvAddCurrentTaskToDelayedList+0x40>)
   80a8c:	6819      	ldr	r1, [r3, #0]
   80a8e:	3104      	adds	r1, #4
   80a90:	4b07      	ldr	r3, [pc, #28]	; (80ab0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80a92:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80a94:	4b08      	ldr	r3, [pc, #32]	; (80ab8 <prvAddCurrentTaskToDelayedList+0x54>)
   80a96:	681b      	ldr	r3, [r3, #0]
   80a98:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80a9a:	bf3c      	itt	cc
   80a9c:	4b06      	ldrcc	r3, [pc, #24]	; (80ab8 <prvAddCurrentTaskToDelayedList+0x54>)
   80a9e:	601c      	strcc	r4, [r3, #0]
   80aa0:	bd10      	pop	{r4, pc}
   80aa2:	bf00      	nop
   80aa4:	2007aa8c 	.word	0x2007aa8c
   80aa8:	2007aaa8 	.word	0x2007aaa8
   80aac:	2007aaac 	.word	0x2007aaac
   80ab0:	000801f5 	.word	0x000801f5
   80ab4:	2007a9e8 	.word	0x2007a9e8
   80ab8:	20070134 	.word	0x20070134

00080abc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ac0:	b083      	sub	sp, #12
   80ac2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   80ac4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   80ac8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80aca:	9001      	str	r0, [sp, #4]
   80acc:	b918      	cbnz	r0, 80ad6 <xTaskGenericCreate+0x1a>
   80ace:	4b62      	ldr	r3, [pc, #392]	; (80c58 <xTaskGenericCreate+0x19c>)
   80ad0:	4798      	blx	r3
   80ad2:	bf00      	nop
   80ad4:	e7fd      	b.n	80ad2 <xTaskGenericCreate+0x16>
   80ad6:	4689      	mov	r9, r1
   80ad8:	4615      	mov	r5, r2
   80ada:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80adc:	2f04      	cmp	r7, #4
   80ade:	d903      	bls.n	80ae8 <xTaskGenericCreate+0x2c>
   80ae0:	4b5d      	ldr	r3, [pc, #372]	; (80c58 <xTaskGenericCreate+0x19c>)
   80ae2:	4798      	blx	r3
   80ae4:	bf00      	nop
   80ae6:	e7fd      	b.n	80ae4 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80ae8:	204c      	movs	r0, #76	; 0x4c
   80aea:	4b5c      	ldr	r3, [pc, #368]	; (80c5c <xTaskGenericCreate+0x1a0>)
   80aec:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80aee:	4604      	mov	r4, r0
   80af0:	2800      	cmp	r0, #0
   80af2:	f000 80ab 	beq.w	80c4c <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80af6:	2e00      	cmp	r6, #0
   80af8:	f040 80a5 	bne.w	80c46 <xTaskGenericCreate+0x18a>
   80afc:	00a8      	lsls	r0, r5, #2
   80afe:	4b57      	ldr	r3, [pc, #348]	; (80c5c <xTaskGenericCreate+0x1a0>)
   80b00:	4798      	blx	r3
   80b02:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80b04:	b918      	cbnz	r0, 80b0e <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80b06:	4620      	mov	r0, r4
   80b08:	4b55      	ldr	r3, [pc, #340]	; (80c60 <xTaskGenericCreate+0x1a4>)
   80b0a:	4798      	blx	r3
   80b0c:	e09e      	b.n	80c4c <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80b0e:	00aa      	lsls	r2, r5, #2
   80b10:	21a5      	movs	r1, #165	; 0xa5
   80b12:	4b54      	ldr	r3, [pc, #336]	; (80c64 <xTaskGenericCreate+0x1a8>)
   80b14:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80b16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80b1a:	3d01      	subs	r5, #1
   80b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80b1e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   80b22:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80b26:	220a      	movs	r2, #10
   80b28:	4649      	mov	r1, r9
   80b2a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80b2e:	4b4e      	ldr	r3, [pc, #312]	; (80c68 <xTaskGenericCreate+0x1ac>)
   80b30:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80b32:	2300      	movs	r3, #0
   80b34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80b38:	463e      	mov	r6, r7
   80b3a:	2f04      	cmp	r7, #4
   80b3c:	bf28      	it	cs
   80b3e:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80b40:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80b42:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80b44:	f104 0904 	add.w	r9, r4, #4
   80b48:	4648      	mov	r0, r9
   80b4a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80cb8 <xTaskGenericCreate+0x1fc>
   80b4e:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80b50:	f104 0018 	add.w	r0, r4, #24
   80b54:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80b56:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80b58:	f1c6 0605 	rsb	r6, r6, #5
   80b5c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80b5e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80b60:	465a      	mov	r2, fp
   80b62:	9901      	ldr	r1, [sp, #4]
   80b64:	4628      	mov	r0, r5
   80b66:	4b41      	ldr	r3, [pc, #260]	; (80c6c <xTaskGenericCreate+0x1b0>)
   80b68:	4798      	blx	r3
   80b6a:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80b6c:	f010 0f07 	tst.w	r0, #7
   80b70:	d003      	beq.n	80b7a <xTaskGenericCreate+0xbe>
   80b72:	4b39      	ldr	r3, [pc, #228]	; (80c58 <xTaskGenericCreate+0x19c>)
   80b74:	4798      	blx	r3
   80b76:	bf00      	nop
   80b78:	e7fd      	b.n	80b76 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   80b7a:	f1b8 0f00 	cmp.w	r8, #0
   80b7e:	d001      	beq.n	80b84 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80b80:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80b84:	4b3a      	ldr	r3, [pc, #232]	; (80c70 <xTaskGenericCreate+0x1b4>)
   80b86:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80b88:	4a3a      	ldr	r2, [pc, #232]	; (80c74 <xTaskGenericCreate+0x1b8>)
   80b8a:	6813      	ldr	r3, [r2, #0]
   80b8c:	3301      	adds	r3, #1
   80b8e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80b90:	4b39      	ldr	r3, [pc, #228]	; (80c78 <xTaskGenericCreate+0x1bc>)
   80b92:	681b      	ldr	r3, [r3, #0]
   80b94:	bb0b      	cbnz	r3, 80bda <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80b96:	4b38      	ldr	r3, [pc, #224]	; (80c78 <xTaskGenericCreate+0x1bc>)
   80b98:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80b9a:	6813      	ldr	r3, [r2, #0]
   80b9c:	2b01      	cmp	r3, #1
   80b9e:	d126      	bne.n	80bee <xTaskGenericCreate+0x132>
   80ba0:	4d36      	ldr	r5, [pc, #216]	; (80c7c <xTaskGenericCreate+0x1c0>)
   80ba2:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80ba6:	4e36      	ldr	r6, [pc, #216]	; (80c80 <xTaskGenericCreate+0x1c4>)
   80ba8:	4628      	mov	r0, r5
   80baa:	47b0      	blx	r6
   80bac:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80bae:	4545      	cmp	r5, r8
   80bb0:	d1fa      	bne.n	80ba8 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80bb2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80cbc <xTaskGenericCreate+0x200>
   80bb6:	4640      	mov	r0, r8
   80bb8:	4d31      	ldr	r5, [pc, #196]	; (80c80 <xTaskGenericCreate+0x1c4>)
   80bba:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80bbc:	4e31      	ldr	r6, [pc, #196]	; (80c84 <xTaskGenericCreate+0x1c8>)
   80bbe:	4630      	mov	r0, r6
   80bc0:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80bc2:	4831      	ldr	r0, [pc, #196]	; (80c88 <xTaskGenericCreate+0x1cc>)
   80bc4:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80bc6:	4831      	ldr	r0, [pc, #196]	; (80c8c <xTaskGenericCreate+0x1d0>)
   80bc8:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80bca:	4831      	ldr	r0, [pc, #196]	; (80c90 <xTaskGenericCreate+0x1d4>)
   80bcc:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80bce:	4b31      	ldr	r3, [pc, #196]	; (80c94 <xTaskGenericCreate+0x1d8>)
   80bd0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80bd4:	4b30      	ldr	r3, [pc, #192]	; (80c98 <xTaskGenericCreate+0x1dc>)
   80bd6:	601e      	str	r6, [r3, #0]
   80bd8:	e009      	b.n	80bee <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80bda:	4b30      	ldr	r3, [pc, #192]	; (80c9c <xTaskGenericCreate+0x1e0>)
   80bdc:	681b      	ldr	r3, [r3, #0]
   80bde:	b933      	cbnz	r3, 80bee <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80be0:	4b25      	ldr	r3, [pc, #148]	; (80c78 <xTaskGenericCreate+0x1bc>)
   80be2:	681b      	ldr	r3, [r3, #0]
   80be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80be6:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   80be8:	bf24      	itt	cs
   80bea:	4b23      	ldrcs	r3, [pc, #140]	; (80c78 <xTaskGenericCreate+0x1bc>)
   80bec:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80bee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80bf0:	4b2b      	ldr	r3, [pc, #172]	; (80ca0 <xTaskGenericCreate+0x1e4>)
   80bf2:	681b      	ldr	r3, [r3, #0]
   80bf4:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80bf6:	bf84      	itt	hi
   80bf8:	4b29      	ldrhi	r3, [pc, #164]	; (80ca0 <xTaskGenericCreate+0x1e4>)
   80bfa:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80bfc:	4a29      	ldr	r2, [pc, #164]	; (80ca4 <xTaskGenericCreate+0x1e8>)
   80bfe:	6813      	ldr	r3, [r2, #0]
   80c00:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   80c02:	3301      	adds	r3, #1
   80c04:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80c06:	4b28      	ldr	r3, [pc, #160]	; (80ca8 <xTaskGenericCreate+0x1ec>)
   80c08:	681b      	ldr	r3, [r3, #0]
   80c0a:	4298      	cmp	r0, r3
   80c0c:	bf84      	itt	hi
   80c0e:	4b26      	ldrhi	r3, [pc, #152]	; (80ca8 <xTaskGenericCreate+0x1ec>)
   80c10:	6018      	strhi	r0, [r3, #0]
   80c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80c16:	4649      	mov	r1, r9
   80c18:	4b18      	ldr	r3, [pc, #96]	; (80c7c <xTaskGenericCreate+0x1c0>)
   80c1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80c1e:	4b23      	ldr	r3, [pc, #140]	; (80cac <xTaskGenericCreate+0x1f0>)
   80c20:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   80c22:	4b23      	ldr	r3, [pc, #140]	; (80cb0 <xTaskGenericCreate+0x1f4>)
   80c24:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   80c26:	4b1d      	ldr	r3, [pc, #116]	; (80c9c <xTaskGenericCreate+0x1e0>)
   80c28:	681b      	ldr	r3, [r3, #0]
   80c2a:	b143      	cbz	r3, 80c3e <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80c2c:	4b12      	ldr	r3, [pc, #72]	; (80c78 <xTaskGenericCreate+0x1bc>)
   80c2e:	681b      	ldr	r3, [r3, #0]
   80c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80c32:	429f      	cmp	r7, r3
   80c34:	d905      	bls.n	80c42 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   80c36:	4b1f      	ldr	r3, [pc, #124]	; (80cb4 <xTaskGenericCreate+0x1f8>)
   80c38:	4798      	blx	r3
   80c3a:	2001      	movs	r0, #1
   80c3c:	e008      	b.n	80c50 <xTaskGenericCreate+0x194>
   80c3e:	2001      	movs	r0, #1
   80c40:	e006      	b.n	80c50 <xTaskGenericCreate+0x194>
   80c42:	2001      	movs	r0, #1
   80c44:	e004      	b.n	80c50 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80c46:	6306      	str	r6, [r0, #48]	; 0x30
   80c48:	4630      	mov	r0, r6
   80c4a:	e760      	b.n	80b0e <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80c4c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   80c50:	b003      	add	sp, #12
   80c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c56:	bf00      	nop
   80c58:	000802b9 	.word	0x000802b9
   80c5c:	00080411 	.word	0x00080411
   80c60:	000804e5 	.word	0x000804e5
   80c64:	0008232d 	.word	0x0008232d
   80c68:	000825d9 	.word	0x000825d9
   80c6c:	0008026d 	.word	0x0008026d
   80c70:	000802c9 	.word	0x000802c9
   80c74:	2007aacc 	.word	0x2007aacc
   80c78:	2007aa8c 	.word	0x2007aa8c
   80c7c:	2007aa24 	.word	0x2007aa24
   80c80:	000801b9 	.word	0x000801b9
   80c84:	2007aa0c 	.word	0x2007aa0c
   80c88:	2007aa90 	.word	0x2007aa90
   80c8c:	2007a9f8 	.word	0x2007a9f8
   80c90:	2007a9d4 	.word	0x2007a9d4
   80c94:	2007a9e8 	.word	0x2007a9e8
   80c98:	2007aaac 	.word	0x2007aaac
   80c9c:	2007a9f0 	.word	0x2007a9f0
   80ca0:	2007aad0 	.word	0x2007aad0
   80ca4:	2007aab0 	.word	0x2007aab0
   80ca8:	2007aa20 	.word	0x2007aa20
   80cac:	000801d9 	.word	0x000801d9
   80cb0:	000802e9 	.word	0x000802e9
   80cb4:	000802a9 	.word	0x000802a9
   80cb8:	000801d1 	.word	0x000801d1
   80cbc:	2007aab4 	.word	0x2007aab4

00080cc0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   80cc0:	b510      	push	{r4, lr}
   80cc2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80cc4:	2300      	movs	r3, #0
   80cc6:	9303      	str	r3, [sp, #12]
   80cc8:	9302      	str	r3, [sp, #8]
   80cca:	9301      	str	r3, [sp, #4]
   80ccc:	9300      	str	r3, [sp, #0]
   80cce:	2282      	movs	r2, #130	; 0x82
   80cd0:	490d      	ldr	r1, [pc, #52]	; (80d08 <vTaskStartScheduler+0x48>)
   80cd2:	480e      	ldr	r0, [pc, #56]	; (80d0c <vTaskStartScheduler+0x4c>)
   80cd4:	4c0e      	ldr	r4, [pc, #56]	; (80d10 <vTaskStartScheduler+0x50>)
   80cd6:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   80cd8:	2801      	cmp	r0, #1
   80cda:	d10e      	bne.n	80cfa <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   80cdc:	4b0d      	ldr	r3, [pc, #52]	; (80d14 <vTaskStartScheduler+0x54>)
   80cde:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   80ce0:	2801      	cmp	r0, #1
   80ce2:	d10a      	bne.n	80cfa <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   80ce4:	4b0c      	ldr	r3, [pc, #48]	; (80d18 <vTaskStartScheduler+0x58>)
   80ce6:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   80ce8:	2201      	movs	r2, #1
   80cea:	4b0c      	ldr	r3, [pc, #48]	; (80d1c <vTaskStartScheduler+0x5c>)
   80cec:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80cee:	2200      	movs	r2, #0
   80cf0:	4b0b      	ldr	r3, [pc, #44]	; (80d20 <vTaskStartScheduler+0x60>)
   80cf2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   80cf4:	4b0b      	ldr	r3, [pc, #44]	; (80d24 <vTaskStartScheduler+0x64>)
   80cf6:	4798      	blx	r3
   80cf8:	e004      	b.n	80d04 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   80cfa:	b918      	cbnz	r0, 80d04 <vTaskStartScheduler+0x44>
   80cfc:	4b06      	ldr	r3, [pc, #24]	; (80d18 <vTaskStartScheduler+0x58>)
   80cfe:	4798      	blx	r3
   80d00:	bf00      	nop
   80d02:	e7fd      	b.n	80d00 <vTaskStartScheduler+0x40>
}
   80d04:	b004      	add	sp, #16
   80d06:	bd10      	pop	{r4, pc}
   80d08:	000851c8 	.word	0x000851c8
   80d0c:	00080f7d 	.word	0x00080f7d
   80d10:	00080abd 	.word	0x00080abd
   80d14:	00081429 	.word	0x00081429
   80d18:	000802b9 	.word	0x000802b9
   80d1c:	2007a9f0 	.word	0x2007a9f0
   80d20:	2007aaa8 	.word	0x2007aaa8
   80d24:	00080385 	.word	0x00080385

00080d28 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   80d28:	4a02      	ldr	r2, [pc, #8]	; (80d34 <vTaskSuspendAll+0xc>)
   80d2a:	6813      	ldr	r3, [r2, #0]
   80d2c:	3301      	adds	r3, #1
   80d2e:	6013      	str	r3, [r2, #0]
   80d30:	4770      	bx	lr
   80d32:	bf00      	nop
   80d34:	2007aa88 	.word	0x2007aa88

00080d38 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   80d38:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   80d3a:	4b04      	ldr	r3, [pc, #16]	; (80d4c <xTaskGetTickCount+0x14>)
   80d3c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   80d3e:	4b04      	ldr	r3, [pc, #16]	; (80d50 <xTaskGetTickCount+0x18>)
   80d40:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   80d42:	4b04      	ldr	r3, [pc, #16]	; (80d54 <xTaskGetTickCount+0x1c>)
   80d44:	4798      	blx	r3

	return xTicks;
}
   80d46:	4620      	mov	r0, r4
   80d48:	bd10      	pop	{r4, pc}
   80d4a:	bf00      	nop
   80d4c:	000802c9 	.word	0x000802c9
   80d50:	2007aaa8 	.word	0x2007aaa8
   80d54:	000802e9 	.word	0x000802e9

00080d58 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80d5c:	4b3a      	ldr	r3, [pc, #232]	; (80e48 <vTaskIncrementTick+0xf0>)
   80d5e:	681b      	ldr	r3, [r3, #0]
   80d60:	2b00      	cmp	r3, #0
   80d62:	d16b      	bne.n	80e3c <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   80d64:	4b39      	ldr	r3, [pc, #228]	; (80e4c <vTaskIncrementTick+0xf4>)
   80d66:	681a      	ldr	r2, [r3, #0]
   80d68:	3201      	adds	r2, #1
   80d6a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80d6c:	681b      	ldr	r3, [r3, #0]
   80d6e:	bb03      	cbnz	r3, 80db2 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80d70:	4b37      	ldr	r3, [pc, #220]	; (80e50 <vTaskIncrementTick+0xf8>)
   80d72:	681b      	ldr	r3, [r3, #0]
   80d74:	681b      	ldr	r3, [r3, #0]
   80d76:	b11b      	cbz	r3, 80d80 <vTaskIncrementTick+0x28>
   80d78:	4b36      	ldr	r3, [pc, #216]	; (80e54 <vTaskIncrementTick+0xfc>)
   80d7a:	4798      	blx	r3
   80d7c:	bf00      	nop
   80d7e:	e7fd      	b.n	80d7c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   80d80:	4b33      	ldr	r3, [pc, #204]	; (80e50 <vTaskIncrementTick+0xf8>)
   80d82:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80d84:	4a34      	ldr	r2, [pc, #208]	; (80e58 <vTaskIncrementTick+0x100>)
   80d86:	6810      	ldr	r0, [r2, #0]
   80d88:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80d8a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80d8c:	4933      	ldr	r1, [pc, #204]	; (80e5c <vTaskIncrementTick+0x104>)
   80d8e:	680a      	ldr	r2, [r1, #0]
   80d90:	3201      	adds	r2, #1
   80d92:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80d94:	681b      	ldr	r3, [r3, #0]
   80d96:	681b      	ldr	r3, [r3, #0]
   80d98:	b923      	cbnz	r3, 80da4 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80d9a:	f04f 32ff 	mov.w	r2, #4294967295
   80d9e:	4b30      	ldr	r3, [pc, #192]	; (80e60 <vTaskIncrementTick+0x108>)
   80da0:	601a      	str	r2, [r3, #0]
   80da2:	e006      	b.n	80db2 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80da4:	4b2a      	ldr	r3, [pc, #168]	; (80e50 <vTaskIncrementTick+0xf8>)
   80da6:	681b      	ldr	r3, [r3, #0]
   80da8:	68db      	ldr	r3, [r3, #12]
   80daa:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80dac:	685a      	ldr	r2, [r3, #4]
   80dae:	4b2c      	ldr	r3, [pc, #176]	; (80e60 <vTaskIncrementTick+0x108>)
   80db0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80db2:	4b26      	ldr	r3, [pc, #152]	; (80e4c <vTaskIncrementTick+0xf4>)
   80db4:	681a      	ldr	r2, [r3, #0]
   80db6:	4b2a      	ldr	r3, [pc, #168]	; (80e60 <vTaskIncrementTick+0x108>)
   80db8:	681b      	ldr	r3, [r3, #0]
   80dba:	429a      	cmp	r2, r3
   80dbc:	d342      	bcc.n	80e44 <vTaskIncrementTick+0xec>
   80dbe:	4b24      	ldr	r3, [pc, #144]	; (80e50 <vTaskIncrementTick+0xf8>)
   80dc0:	681b      	ldr	r3, [r3, #0]
   80dc2:	681b      	ldr	r3, [r3, #0]
   80dc4:	b16b      	cbz	r3, 80de2 <vTaskIncrementTick+0x8a>
   80dc6:	4b22      	ldr	r3, [pc, #136]	; (80e50 <vTaskIncrementTick+0xf8>)
   80dc8:	681b      	ldr	r3, [r3, #0]
   80dca:	68db      	ldr	r3, [r3, #12]
   80dcc:	68dc      	ldr	r4, [r3, #12]
   80dce:	6863      	ldr	r3, [r4, #4]
   80dd0:	4a1e      	ldr	r2, [pc, #120]	; (80e4c <vTaskIncrementTick+0xf4>)
   80dd2:	6812      	ldr	r2, [r2, #0]
   80dd4:	4293      	cmp	r3, r2
   80dd6:	d813      	bhi.n	80e00 <vTaskIncrementTick+0xa8>
   80dd8:	4e22      	ldr	r6, [pc, #136]	; (80e64 <vTaskIncrementTick+0x10c>)
   80dda:	4f23      	ldr	r7, [pc, #140]	; (80e68 <vTaskIncrementTick+0x110>)
   80ddc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80e74 <vTaskIncrementTick+0x11c>
   80de0:	e012      	b.n	80e08 <vTaskIncrementTick+0xb0>
   80de2:	f04f 32ff 	mov.w	r2, #4294967295
   80de6:	4b1e      	ldr	r3, [pc, #120]	; (80e60 <vTaskIncrementTick+0x108>)
   80de8:	601a      	str	r2, [r3, #0]
   80dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80dee:	4b18      	ldr	r3, [pc, #96]	; (80e50 <vTaskIncrementTick+0xf8>)
   80df0:	681b      	ldr	r3, [r3, #0]
   80df2:	68db      	ldr	r3, [r3, #12]
   80df4:	68dc      	ldr	r4, [r3, #12]
   80df6:	6863      	ldr	r3, [r4, #4]
   80df8:	4a14      	ldr	r2, [pc, #80]	; (80e4c <vTaskIncrementTick+0xf4>)
   80dfa:	6812      	ldr	r2, [r2, #0]
   80dfc:	4293      	cmp	r3, r2
   80dfe:	d903      	bls.n	80e08 <vTaskIncrementTick+0xb0>
   80e00:	4a17      	ldr	r2, [pc, #92]	; (80e60 <vTaskIncrementTick+0x108>)
   80e02:	6013      	str	r3, [r2, #0]
   80e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e08:	1d25      	adds	r5, r4, #4
   80e0a:	4628      	mov	r0, r5
   80e0c:	47b0      	blx	r6
   80e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80e10:	b113      	cbz	r3, 80e18 <vTaskIncrementTick+0xc0>
   80e12:	f104 0018 	add.w	r0, r4, #24
   80e16:	47b0      	blx	r6
   80e18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80e1a:	683b      	ldr	r3, [r7, #0]
   80e1c:	4298      	cmp	r0, r3
   80e1e:	bf88      	it	hi
   80e20:	6038      	strhi	r0, [r7, #0]
   80e22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80e26:	4629      	mov	r1, r5
   80e28:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80e2c:	4b0f      	ldr	r3, [pc, #60]	; (80e6c <vTaskIncrementTick+0x114>)
   80e2e:	4798      	blx	r3
   80e30:	4b07      	ldr	r3, [pc, #28]	; (80e50 <vTaskIncrementTick+0xf8>)
   80e32:	681b      	ldr	r3, [r3, #0]
   80e34:	681b      	ldr	r3, [r3, #0]
   80e36:	2b00      	cmp	r3, #0
   80e38:	d1d9      	bne.n	80dee <vTaskIncrementTick+0x96>
   80e3a:	e7d2      	b.n	80de2 <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
   80e3c:	4a0c      	ldr	r2, [pc, #48]	; (80e70 <vTaskIncrementTick+0x118>)
   80e3e:	6813      	ldr	r3, [r2, #0]
   80e40:	3301      	adds	r3, #1
   80e42:	6013      	str	r3, [r2, #0]
   80e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e48:	2007aa88 	.word	0x2007aa88
   80e4c:	2007aaa8 	.word	0x2007aaa8
   80e50:	2007a9e8 	.word	0x2007a9e8
   80e54:	000802b9 	.word	0x000802b9
   80e58:	2007aaac 	.word	0x2007aaac
   80e5c:	2007aaa4 	.word	0x2007aaa4
   80e60:	20070134 	.word	0x20070134
   80e64:	00080231 	.word	0x00080231
   80e68:	2007aa20 	.word	0x2007aa20
   80e6c:	000801d9 	.word	0x000801d9
   80e70:	2007a9ec 	.word	0x2007a9ec
   80e74:	2007aa24 	.word	0x2007aa24

00080e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   80e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   80e7c:	4b30      	ldr	r3, [pc, #192]	; (80f40 <xTaskResumeAll+0xc8>)
   80e7e:	681b      	ldr	r3, [r3, #0]
   80e80:	b91b      	cbnz	r3, 80e8a <xTaskResumeAll+0x12>
   80e82:	4b30      	ldr	r3, [pc, #192]	; (80f44 <xTaskResumeAll+0xcc>)
   80e84:	4798      	blx	r3
   80e86:	bf00      	nop
   80e88:	e7fd      	b.n	80e86 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   80e8a:	4b2f      	ldr	r3, [pc, #188]	; (80f48 <xTaskResumeAll+0xd0>)
   80e8c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   80e8e:	4b2c      	ldr	r3, [pc, #176]	; (80f40 <xTaskResumeAll+0xc8>)
   80e90:	681a      	ldr	r2, [r3, #0]
   80e92:	3a01      	subs	r2, #1
   80e94:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80e96:	681b      	ldr	r3, [r3, #0]
   80e98:	2b00      	cmp	r3, #0
   80e9a:	d149      	bne.n	80f30 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   80e9c:	4b2b      	ldr	r3, [pc, #172]	; (80f4c <xTaskResumeAll+0xd4>)
   80e9e:	681b      	ldr	r3, [r3, #0]
   80ea0:	bb03      	cbnz	r3, 80ee4 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80ea2:	2400      	movs	r4, #0
   80ea4:	e047      	b.n	80f36 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   80ea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   80eaa:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   80eac:	f104 0018 	add.w	r0, r4, #24
   80eb0:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80eb2:	f104 0904 	add.w	r9, r4, #4
   80eb6:	4648      	mov	r0, r9
   80eb8:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   80eba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80ebc:	6833      	ldr	r3, [r6, #0]
   80ebe:	4298      	cmp	r0, r3
   80ec0:	bf88      	it	hi
   80ec2:	6030      	strhi	r0, [r6, #0]
   80ec4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80ec8:	4649      	mov	r1, r9
   80eca:	4b21      	ldr	r3, [pc, #132]	; (80f50 <xTaskResumeAll+0xd8>)
   80ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80ed0:	4b20      	ldr	r3, [pc, #128]	; (80f54 <xTaskResumeAll+0xdc>)
   80ed2:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   80ed4:	4b20      	ldr	r3, [pc, #128]	; (80f58 <xTaskResumeAll+0xe0>)
   80ed6:	681b      	ldr	r3, [r3, #0]
   80ed8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   80eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   80edc:	429a      	cmp	r2, r3
   80ede:	bf28      	it	cs
   80ee0:	2501      	movcs	r5, #1
   80ee2:	e004      	b.n	80eee <xTaskResumeAll+0x76>
   80ee4:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80ee6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80f78 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   80eea:	4f1c      	ldr	r7, [pc, #112]	; (80f5c <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   80eec:	4e1c      	ldr	r6, [pc, #112]	; (80f60 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80eee:	f8d8 3000 	ldr.w	r3, [r8]
   80ef2:	2b00      	cmp	r3, #0
   80ef4:	d1d7      	bne.n	80ea6 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80ef6:	4b1b      	ldr	r3, [pc, #108]	; (80f64 <xTaskResumeAll+0xec>)
   80ef8:	681b      	ldr	r3, [r3, #0]
   80efa:	b163      	cbz	r3, 80f16 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80efc:	4b19      	ldr	r3, [pc, #100]	; (80f64 <xTaskResumeAll+0xec>)
   80efe:	681b      	ldr	r3, [r3, #0]
   80f00:	b17b      	cbz	r3, 80f22 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   80f02:	4d19      	ldr	r5, [pc, #100]	; (80f68 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   80f04:	4c17      	ldr	r4, [pc, #92]	; (80f64 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   80f06:	47a8      	blx	r5
						--uxMissedTicks;
   80f08:	6823      	ldr	r3, [r4, #0]
   80f0a:	3b01      	subs	r3, #1
   80f0c:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f0e:	6823      	ldr	r3, [r4, #0]
   80f10:	2b00      	cmp	r3, #0
   80f12:	d1f8      	bne.n	80f06 <xTaskResumeAll+0x8e>
   80f14:	e005      	b.n	80f22 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   80f16:	2d01      	cmp	r5, #1
   80f18:	d003      	beq.n	80f22 <xTaskResumeAll+0xaa>
   80f1a:	4b14      	ldr	r3, [pc, #80]	; (80f6c <xTaskResumeAll+0xf4>)
   80f1c:	681b      	ldr	r3, [r3, #0]
   80f1e:	2b01      	cmp	r3, #1
   80f20:	d108      	bne.n	80f34 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   80f22:	2200      	movs	r2, #0
   80f24:	4b11      	ldr	r3, [pc, #68]	; (80f6c <xTaskResumeAll+0xf4>)
   80f26:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   80f28:	4b11      	ldr	r3, [pc, #68]	; (80f70 <xTaskResumeAll+0xf8>)
   80f2a:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   80f2c:	2401      	movs	r4, #1
   80f2e:	e002      	b.n	80f36 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80f30:	2400      	movs	r4, #0
   80f32:	e000      	b.n	80f36 <xTaskResumeAll+0xbe>
   80f34:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   80f36:	4b0f      	ldr	r3, [pc, #60]	; (80f74 <xTaskResumeAll+0xfc>)
   80f38:	4798      	blx	r3

	return xAlreadyYielded;
}
   80f3a:	4620      	mov	r0, r4
   80f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80f40:	2007aa88 	.word	0x2007aa88
   80f44:	000802b9 	.word	0x000802b9
   80f48:	000802c9 	.word	0x000802c9
   80f4c:	2007aacc 	.word	0x2007aacc
   80f50:	2007aa24 	.word	0x2007aa24
   80f54:	000801d9 	.word	0x000801d9
   80f58:	2007aa8c 	.word	0x2007aa8c
   80f5c:	00080231 	.word	0x00080231
   80f60:	2007aa20 	.word	0x2007aa20
   80f64:	2007a9ec 	.word	0x2007a9ec
   80f68:	00080d59 	.word	0x00080d59
   80f6c:	2007aac8 	.word	0x2007aac8
   80f70:	000802a9 	.word	0x000802a9
   80f74:	000802e9 	.word	0x000802e9
   80f78:	2007aa90 	.word	0x2007aa90

00080f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   80f7c:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   80f7e:	4d15      	ldr	r5, [pc, #84]	; (80fd4 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   80f80:	4f15      	ldr	r7, [pc, #84]	; (80fd8 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   80f82:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80ff8 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   80f86:	4e15      	ldr	r6, [pc, #84]	; (80fdc <prvIdleTask+0x60>)
   80f88:	e019      	b.n	80fbe <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   80f8a:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   80f8c:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
   80f8e:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
   80f90:	b1ac      	cbz	r4, 80fbe <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   80f92:	4b13      	ldr	r3, [pc, #76]	; (80fe0 <prvIdleTask+0x64>)
   80f94:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   80f96:	68fb      	ldr	r3, [r7, #12]
   80f98:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80f9a:	1d20      	adds	r0, r4, #4
   80f9c:	4b11      	ldr	r3, [pc, #68]	; (80fe4 <prvIdleTask+0x68>)
   80f9e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   80fa0:	4a11      	ldr	r2, [pc, #68]	; (80fe8 <prvIdleTask+0x6c>)
   80fa2:	6813      	ldr	r3, [r2, #0]
   80fa4:	3b01      	subs	r3, #1
   80fa6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   80fa8:	682b      	ldr	r3, [r5, #0]
   80faa:	3b01      	subs	r3, #1
   80fac:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   80fae:	4b0f      	ldr	r3, [pc, #60]	; (80fec <prvIdleTask+0x70>)
   80fb0:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   80fb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   80fb4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80ffc <prvIdleTask+0x80>
   80fb8:	47c8      	blx	r9
		vPortFree( pxTCB );
   80fba:	4620      	mov	r0, r4
   80fbc:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   80fbe:	682b      	ldr	r3, [r5, #0]
   80fc0:	2b00      	cmp	r3, #0
   80fc2:	d1e2      	bne.n	80f8a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   80fc4:	4b0a      	ldr	r3, [pc, #40]	; (80ff0 <prvIdleTask+0x74>)
   80fc6:	681b      	ldr	r3, [r3, #0]
   80fc8:	2b01      	cmp	r3, #1
   80fca:	d9dc      	bls.n	80f86 <prvIdleTask+0xa>
			{
				taskYIELD();
   80fcc:	4b09      	ldr	r3, [pc, #36]	; (80ff4 <prvIdleTask+0x78>)
   80fce:	4798      	blx	r3
   80fd0:	e7d7      	b.n	80f82 <prvIdleTask+0x6>
   80fd2:	bf00      	nop
   80fd4:	2007a9f4 	.word	0x2007a9f4
   80fd8:	2007a9f8 	.word	0x2007a9f8
   80fdc:	00080e79 	.word	0x00080e79
   80fe0:	000802c9 	.word	0x000802c9
   80fe4:	00080231 	.word	0x00080231
   80fe8:	2007aacc 	.word	0x2007aacc
   80fec:	000802e9 	.word	0x000802e9
   80ff0:	2007aa24 	.word	0x2007aa24
   80ff4:	000802a9 	.word	0x000802a9
   80ff8:	00080d29 	.word	0x00080d29
   80ffc:	000804e5 	.word	0x000804e5

00081000 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81000:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81002:	4b22      	ldr	r3, [pc, #136]	; (8108c <vTaskSwitchContext+0x8c>)
   81004:	681b      	ldr	r3, [r3, #0]
   81006:	b96b      	cbnz	r3, 81024 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81008:	4b21      	ldr	r3, [pc, #132]	; (81090 <vTaskSwitchContext+0x90>)
   8100a:	681b      	ldr	r3, [r3, #0]
   8100c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81010:	009b      	lsls	r3, r3, #2
   81012:	4a20      	ldr	r2, [pc, #128]	; (81094 <vTaskSwitchContext+0x94>)
   81014:	58d3      	ldr	r3, [r2, r3]
   81016:	b9cb      	cbnz	r3, 8104c <vTaskSwitchContext+0x4c>
   81018:	4b1d      	ldr	r3, [pc, #116]	; (81090 <vTaskSwitchContext+0x90>)
   8101a:	681b      	ldr	r3, [r3, #0]
   8101c:	b143      	cbz	r3, 81030 <vTaskSwitchContext+0x30>
   8101e:	4a1c      	ldr	r2, [pc, #112]	; (81090 <vTaskSwitchContext+0x90>)
   81020:	491c      	ldr	r1, [pc, #112]	; (81094 <vTaskSwitchContext+0x94>)
   81022:	e009      	b.n	81038 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81024:	2201      	movs	r2, #1
   81026:	4b1c      	ldr	r3, [pc, #112]	; (81098 <vTaskSwitchContext+0x98>)
   81028:	601a      	str	r2, [r3, #0]
   8102a:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8102c:	6813      	ldr	r3, [r2, #0]
   8102e:	b91b      	cbnz	r3, 81038 <vTaskSwitchContext+0x38>
   81030:	4b1a      	ldr	r3, [pc, #104]	; (8109c <vTaskSwitchContext+0x9c>)
   81032:	4798      	blx	r3
   81034:	bf00      	nop
   81036:	e7fd      	b.n	81034 <vTaskSwitchContext+0x34>
   81038:	6813      	ldr	r3, [r2, #0]
   8103a:	3b01      	subs	r3, #1
   8103c:	6013      	str	r3, [r2, #0]
   8103e:	6813      	ldr	r3, [r2, #0]
   81040:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81044:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81048:	2b00      	cmp	r3, #0
   8104a:	d0ef      	beq.n	8102c <vTaskSwitchContext+0x2c>
   8104c:	4b10      	ldr	r3, [pc, #64]	; (81090 <vTaskSwitchContext+0x90>)
   8104e:	681b      	ldr	r3, [r3, #0]
   81050:	4a10      	ldr	r2, [pc, #64]	; (81094 <vTaskSwitchContext+0x94>)
   81052:	0099      	lsls	r1, r3, #2
   81054:	18c8      	adds	r0, r1, r3
   81056:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   8105a:	6844      	ldr	r4, [r0, #4]
   8105c:	6864      	ldr	r4, [r4, #4]
   8105e:	6044      	str	r4, [r0, #4]
   81060:	4602      	mov	r2, r0
   81062:	3208      	adds	r2, #8
   81064:	4294      	cmp	r4, r2
   81066:	d106      	bne.n	81076 <vTaskSwitchContext+0x76>
   81068:	6860      	ldr	r0, [r4, #4]
   8106a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   8106e:	4a09      	ldr	r2, [pc, #36]	; (81094 <vTaskSwitchContext+0x94>)
   81070:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81074:	6050      	str	r0, [r2, #4]
   81076:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8107a:	4a06      	ldr	r2, [pc, #24]	; (81094 <vTaskSwitchContext+0x94>)
   8107c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81080:	685b      	ldr	r3, [r3, #4]
   81082:	68da      	ldr	r2, [r3, #12]
   81084:	4b06      	ldr	r3, [pc, #24]	; (810a0 <vTaskSwitchContext+0xa0>)
   81086:	601a      	str	r2, [r3, #0]
   81088:	bd10      	pop	{r4, pc}
   8108a:	bf00      	nop
   8108c:	2007aa88 	.word	0x2007aa88
   81090:	2007aa20 	.word	0x2007aa20
   81094:	2007aa24 	.word	0x2007aa24
   81098:	2007aac8 	.word	0x2007aac8
   8109c:	000802b9 	.word	0x000802b9
   810a0:	2007aa8c 	.word	0x2007aa8c

000810a4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   810a4:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   810a6:	b918      	cbnz	r0, 810b0 <vTaskPlaceOnEventList+0xc>
   810a8:	4b0e      	ldr	r3, [pc, #56]	; (810e4 <vTaskPlaceOnEventList+0x40>)
   810aa:	4798      	blx	r3
   810ac:	bf00      	nop
   810ae:	e7fd      	b.n	810ac <vTaskPlaceOnEventList+0x8>
   810b0:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   810b2:	4d0d      	ldr	r5, [pc, #52]	; (810e8 <vTaskPlaceOnEventList+0x44>)
   810b4:	6829      	ldr	r1, [r5, #0]
   810b6:	3118      	adds	r1, #24
   810b8:	4b0c      	ldr	r3, [pc, #48]	; (810ec <vTaskPlaceOnEventList+0x48>)
   810ba:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   810bc:	6828      	ldr	r0, [r5, #0]
   810be:	3004      	adds	r0, #4
   810c0:	4b0b      	ldr	r3, [pc, #44]	; (810f0 <vTaskPlaceOnEventList+0x4c>)
   810c2:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   810c4:	f1b4 3fff 	cmp.w	r4, #4294967295
   810c8:	d105      	bne.n	810d6 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   810ca:	6829      	ldr	r1, [r5, #0]
   810cc:	3104      	adds	r1, #4
   810ce:	4809      	ldr	r0, [pc, #36]	; (810f4 <vTaskPlaceOnEventList+0x50>)
   810d0:	4b09      	ldr	r3, [pc, #36]	; (810f8 <vTaskPlaceOnEventList+0x54>)
   810d2:	4798      	blx	r3
   810d4:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   810d6:	4b09      	ldr	r3, [pc, #36]	; (810fc <vTaskPlaceOnEventList+0x58>)
   810d8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   810da:	4420      	add	r0, r4
   810dc:	4b08      	ldr	r3, [pc, #32]	; (81100 <vTaskPlaceOnEventList+0x5c>)
   810de:	4798      	blx	r3
   810e0:	bd38      	pop	{r3, r4, r5, pc}
   810e2:	bf00      	nop
   810e4:	000802b9 	.word	0x000802b9
   810e8:	2007aa8c 	.word	0x2007aa8c
   810ec:	000801f5 	.word	0x000801f5
   810f0:	00080231 	.word	0x00080231
   810f4:	2007a9d4 	.word	0x2007a9d4
   810f8:	000801d9 	.word	0x000801d9
   810fc:	2007aaa8 	.word	0x2007aaa8
   81100:	00080a65 	.word	0x00080a65

00081104 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81104:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81106:	b918      	cbnz	r0, 81110 <vTaskPlaceOnEventListRestricted+0xc>
   81108:	4b09      	ldr	r3, [pc, #36]	; (81130 <vTaskPlaceOnEventListRestricted+0x2c>)
   8110a:	4798      	blx	r3
   8110c:	bf00      	nop
   8110e:	e7fd      	b.n	8110c <vTaskPlaceOnEventListRestricted+0x8>
   81110:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81112:	4c08      	ldr	r4, [pc, #32]	; (81134 <vTaskPlaceOnEventListRestricted+0x30>)
   81114:	6821      	ldr	r1, [r4, #0]
   81116:	3118      	adds	r1, #24
   81118:	4b07      	ldr	r3, [pc, #28]	; (81138 <vTaskPlaceOnEventListRestricted+0x34>)
   8111a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8111c:	6820      	ldr	r0, [r4, #0]
   8111e:	3004      	adds	r0, #4
   81120:	4b06      	ldr	r3, [pc, #24]	; (8113c <vTaskPlaceOnEventListRestricted+0x38>)
   81122:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81124:	4b06      	ldr	r3, [pc, #24]	; (81140 <vTaskPlaceOnEventListRestricted+0x3c>)
   81126:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81128:	4428      	add	r0, r5
   8112a:	4b06      	ldr	r3, [pc, #24]	; (81144 <vTaskPlaceOnEventListRestricted+0x40>)
   8112c:	4798      	blx	r3
   8112e:	bd38      	pop	{r3, r4, r5, pc}
   81130:	000802b9 	.word	0x000802b9
   81134:	2007aa8c 	.word	0x2007aa8c
   81138:	000801d9 	.word	0x000801d9
   8113c:	00080231 	.word	0x00080231
   81140:	2007aaa8 	.word	0x2007aaa8
   81144:	00080a65 	.word	0x00080a65

00081148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81148:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8114a:	68c3      	ldr	r3, [r0, #12]
   8114c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8114e:	b91c      	cbnz	r4, 81158 <xTaskRemoveFromEventList+0x10>
   81150:	4b16      	ldr	r3, [pc, #88]	; (811ac <xTaskRemoveFromEventList+0x64>)
   81152:	4798      	blx	r3
   81154:	bf00      	nop
   81156:	e7fd      	b.n	81154 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81158:	f104 0518 	add.w	r5, r4, #24
   8115c:	4628      	mov	r0, r5
   8115e:	4b14      	ldr	r3, [pc, #80]	; (811b0 <xTaskRemoveFromEventList+0x68>)
   81160:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81162:	4b14      	ldr	r3, [pc, #80]	; (811b4 <xTaskRemoveFromEventList+0x6c>)
   81164:	681b      	ldr	r3, [r3, #0]
   81166:	b99b      	cbnz	r3, 81190 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81168:	1d25      	adds	r5, r4, #4
   8116a:	4628      	mov	r0, r5
   8116c:	4b10      	ldr	r3, [pc, #64]	; (811b0 <xTaskRemoveFromEventList+0x68>)
   8116e:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81172:	4b11      	ldr	r3, [pc, #68]	; (811b8 <xTaskRemoveFromEventList+0x70>)
   81174:	681b      	ldr	r3, [r3, #0]
   81176:	4298      	cmp	r0, r3
   81178:	bf84      	itt	hi
   8117a:	4b0f      	ldrhi	r3, [pc, #60]	; (811b8 <xTaskRemoveFromEventList+0x70>)
   8117c:	6018      	strhi	r0, [r3, #0]
   8117e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81182:	4629      	mov	r1, r5
   81184:	4b0d      	ldr	r3, [pc, #52]	; (811bc <xTaskRemoveFromEventList+0x74>)
   81186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8118a:	4b0d      	ldr	r3, [pc, #52]	; (811c0 <xTaskRemoveFromEventList+0x78>)
   8118c:	4798      	blx	r3
   8118e:	e003      	b.n	81198 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81190:	4629      	mov	r1, r5
   81192:	480c      	ldr	r0, [pc, #48]	; (811c4 <xTaskRemoveFromEventList+0x7c>)
   81194:	4b0a      	ldr	r3, [pc, #40]	; (811c0 <xTaskRemoveFromEventList+0x78>)
   81196:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81198:	4b0b      	ldr	r3, [pc, #44]	; (811c8 <xTaskRemoveFromEventList+0x80>)
   8119a:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
   8119c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   811a0:	4298      	cmp	r0, r3
   811a2:	bf34      	ite	cc
   811a4:	2000      	movcc	r0, #0
   811a6:	2001      	movcs	r0, #1
   811a8:	bd38      	pop	{r3, r4, r5, pc}
   811aa:	bf00      	nop
   811ac:	000802b9 	.word	0x000802b9
   811b0:	00080231 	.word	0x00080231
   811b4:	2007aa88 	.word	0x2007aa88
   811b8:	2007aa20 	.word	0x2007aa20
   811bc:	2007aa24 	.word	0x2007aa24
   811c0:	000801d9 	.word	0x000801d9
   811c4:	2007aa90 	.word	0x2007aa90
   811c8:	2007aa8c 	.word	0x2007aa8c

000811cc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   811cc:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   811ce:	b918      	cbnz	r0, 811d8 <vTaskSetTimeOutState+0xc>
   811d0:	4b05      	ldr	r3, [pc, #20]	; (811e8 <vTaskSetTimeOutState+0x1c>)
   811d2:	4798      	blx	r3
   811d4:	bf00      	nop
   811d6:	e7fd      	b.n	811d4 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   811d8:	4a04      	ldr	r2, [pc, #16]	; (811ec <vTaskSetTimeOutState+0x20>)
   811da:	6812      	ldr	r2, [r2, #0]
   811dc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   811de:	4a04      	ldr	r2, [pc, #16]	; (811f0 <vTaskSetTimeOutState+0x24>)
   811e0:	6812      	ldr	r2, [r2, #0]
   811e2:	6042      	str	r2, [r0, #4]
   811e4:	bd08      	pop	{r3, pc}
   811e6:	bf00      	nop
   811e8:	000802b9 	.word	0x000802b9
   811ec:	2007aaa4 	.word	0x2007aaa4
   811f0:	2007aaa8 	.word	0x2007aaa8

000811f4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   811f4:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   811f6:	b918      	cbnz	r0, 81200 <xTaskCheckForTimeOut+0xc>
   811f8:	4b19      	ldr	r3, [pc, #100]	; (81260 <xTaskCheckForTimeOut+0x6c>)
   811fa:	4798      	blx	r3
   811fc:	bf00      	nop
   811fe:	e7fd      	b.n	811fc <xTaskCheckForTimeOut+0x8>
   81200:	460d      	mov	r5, r1
   81202:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81204:	b919      	cbnz	r1, 8120e <xTaskCheckForTimeOut+0x1a>
   81206:	4b16      	ldr	r3, [pc, #88]	; (81260 <xTaskCheckForTimeOut+0x6c>)
   81208:	4798      	blx	r3
   8120a:	bf00      	nop
   8120c:	e7fd      	b.n	8120a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8120e:	4b15      	ldr	r3, [pc, #84]	; (81264 <xTaskCheckForTimeOut+0x70>)
   81210:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81212:	682b      	ldr	r3, [r5, #0]
   81214:	f1b3 3fff 	cmp.w	r3, #4294967295
   81218:	d018      	beq.n	8124c <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8121a:	4a13      	ldr	r2, [pc, #76]	; (81268 <xTaskCheckForTimeOut+0x74>)
   8121c:	6812      	ldr	r2, [r2, #0]
   8121e:	6821      	ldr	r1, [r4, #0]
   81220:	4291      	cmp	r1, r2
   81222:	d004      	beq.n	8122e <xTaskCheckForTimeOut+0x3a>
   81224:	4a11      	ldr	r2, [pc, #68]	; (8126c <xTaskCheckForTimeOut+0x78>)
   81226:	6812      	ldr	r2, [r2, #0]
   81228:	6861      	ldr	r1, [r4, #4]
   8122a:	4291      	cmp	r1, r2
   8122c:	d910      	bls.n	81250 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8122e:	4a0f      	ldr	r2, [pc, #60]	; (8126c <xTaskCheckForTimeOut+0x78>)
   81230:	6811      	ldr	r1, [r2, #0]
   81232:	6860      	ldr	r0, [r4, #4]
   81234:	1a09      	subs	r1, r1, r0
   81236:	428b      	cmp	r3, r1
   81238:	d90c      	bls.n	81254 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8123a:	6812      	ldr	r2, [r2, #0]
   8123c:	1a12      	subs	r2, r2, r0
   8123e:	1a9b      	subs	r3, r3, r2
   81240:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81242:	4620      	mov	r0, r4
   81244:	4b0a      	ldr	r3, [pc, #40]	; (81270 <xTaskCheckForTimeOut+0x7c>)
   81246:	4798      	blx	r3
			xReturn = pdFALSE;
   81248:	2400      	movs	r4, #0
   8124a:	e004      	b.n	81256 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   8124c:	2400      	movs	r4, #0
   8124e:	e002      	b.n	81256 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81250:	2401      	movs	r4, #1
   81252:	e000      	b.n	81256 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81254:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81256:	4b07      	ldr	r3, [pc, #28]	; (81274 <xTaskCheckForTimeOut+0x80>)
   81258:	4798      	blx	r3

	return xReturn;
}
   8125a:	4620      	mov	r0, r4
   8125c:	bd38      	pop	{r3, r4, r5, pc}
   8125e:	bf00      	nop
   81260:	000802b9 	.word	0x000802b9
   81264:	000802c9 	.word	0x000802c9
   81268:	2007aaa4 	.word	0x2007aaa4
   8126c:	2007aaa8 	.word	0x2007aaa8
   81270:	000811cd 	.word	0x000811cd
   81274:	000802e9 	.word	0x000802e9

00081278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81278:	2201      	movs	r2, #1
   8127a:	4b01      	ldr	r3, [pc, #4]	; (81280 <vTaskMissedYield+0x8>)
   8127c:	601a      	str	r2, [r3, #0]
   8127e:	4770      	bx	lr
   81280:	2007aac8 	.word	0x2007aac8

00081284 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81284:	4b01      	ldr	r3, [pc, #4]	; (8128c <xTaskGetCurrentTaskHandle+0x8>)
   81286:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81288:	4770      	bx	lr
   8128a:	bf00      	nop
   8128c:	2007aa8c 	.word	0x2007aa8c

00081290 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81290:	4b05      	ldr	r3, [pc, #20]	; (812a8 <xTaskGetSchedulerState+0x18>)
   81292:	681b      	ldr	r3, [r3, #0]
   81294:	b133      	cbz	r3, 812a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81296:	4b05      	ldr	r3, [pc, #20]	; (812ac <xTaskGetSchedulerState+0x1c>)
   81298:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8129a:	2b00      	cmp	r3, #0
   8129c:	bf0c      	ite	eq
   8129e:	2001      	moveq	r0, #1
   812a0:	2002      	movne	r0, #2
   812a2:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   812a4:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   812a6:	4770      	bx	lr
   812a8:	2007a9f0 	.word	0x2007a9f0
   812ac:	2007aa88 	.word	0x2007aa88

000812b0 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   812b0:	2800      	cmp	r0, #0
   812b2:	d031      	beq.n	81318 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   812b4:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   812b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   812b8:	4918      	ldr	r1, [pc, #96]	; (8131c <vTaskPriorityInherit+0x6c>)
   812ba:	6809      	ldr	r1, [r1, #0]
   812bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   812be:	428b      	cmp	r3, r1
   812c0:	d229      	bcs.n	81316 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   812c2:	4916      	ldr	r1, [pc, #88]	; (8131c <vTaskPriorityInherit+0x6c>)
   812c4:	6809      	ldr	r1, [r1, #0]
   812c6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   812c8:	f1c1 0105 	rsb	r1, r1, #5
   812cc:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   812ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   812d2:	4913      	ldr	r1, [pc, #76]	; (81320 <vTaskPriorityInherit+0x70>)
   812d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   812d8:	6941      	ldr	r1, [r0, #20]
   812da:	4299      	cmp	r1, r3
   812dc:	d117      	bne.n	8130e <vTaskPriorityInherit+0x5e>
   812de:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   812e0:	1d04      	adds	r4, r0, #4
   812e2:	4620      	mov	r0, r4
   812e4:	4b0f      	ldr	r3, [pc, #60]	; (81324 <vTaskPriorityInherit+0x74>)
   812e6:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   812e8:	4b0c      	ldr	r3, [pc, #48]	; (8131c <vTaskPriorityInherit+0x6c>)
   812ea:	681b      	ldr	r3, [r3, #0]
   812ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   812ee:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   812f0:	4b0d      	ldr	r3, [pc, #52]	; (81328 <vTaskPriorityInherit+0x78>)
   812f2:	681b      	ldr	r3, [r3, #0]
   812f4:	4298      	cmp	r0, r3
   812f6:	bf84      	itt	hi
   812f8:	4b0b      	ldrhi	r3, [pc, #44]	; (81328 <vTaskPriorityInherit+0x78>)
   812fa:	6018      	strhi	r0, [r3, #0]
   812fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81300:	4621      	mov	r1, r4
   81302:	4b07      	ldr	r3, [pc, #28]	; (81320 <vTaskPriorityInherit+0x70>)
   81304:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81308:	4b08      	ldr	r3, [pc, #32]	; (8132c <vTaskPriorityInherit+0x7c>)
   8130a:	4798      	blx	r3
   8130c:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8130e:	4b03      	ldr	r3, [pc, #12]	; (8131c <vTaskPriorityInherit+0x6c>)
   81310:	681b      	ldr	r3, [r3, #0]
   81312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81314:	62c3      	str	r3, [r0, #44]	; 0x2c
   81316:	bd38      	pop	{r3, r4, r5, pc}
   81318:	4770      	bx	lr
   8131a:	bf00      	nop
   8131c:	2007aa8c 	.word	0x2007aa8c
   81320:	2007aa24 	.word	0x2007aa24
   81324:	00080231 	.word	0x00080231
   81328:	2007aa20 	.word	0x2007aa20
   8132c:	000801d9 	.word	0x000801d9

00081330 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81330:	b1e8      	cbz	r0, 8136e <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81332:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81334:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81336:	6c82      	ldr	r2, [r0, #72]	; 0x48
   81338:	4291      	cmp	r1, r2
   8133a:	d017      	beq.n	8136c <vTaskPriorityDisinherit+0x3c>
   8133c:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8133e:	1d05      	adds	r5, r0, #4
   81340:	4628      	mov	r0, r5
   81342:	4b0b      	ldr	r3, [pc, #44]	; (81370 <vTaskPriorityDisinherit+0x40>)
   81344:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81346:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81348:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8134a:	f1c0 0305 	rsb	r3, r0, #5
   8134e:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81350:	4b08      	ldr	r3, [pc, #32]	; (81374 <vTaskPriorityDisinherit+0x44>)
   81352:	681b      	ldr	r3, [r3, #0]
   81354:	4298      	cmp	r0, r3
   81356:	bf84      	itt	hi
   81358:	4b06      	ldrhi	r3, [pc, #24]	; (81374 <vTaskPriorityDisinherit+0x44>)
   8135a:	6018      	strhi	r0, [r3, #0]
   8135c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81360:	4629      	mov	r1, r5
   81362:	4b05      	ldr	r3, [pc, #20]	; (81378 <vTaskPriorityDisinherit+0x48>)
   81364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81368:	4b04      	ldr	r3, [pc, #16]	; (8137c <vTaskPriorityDisinherit+0x4c>)
   8136a:	4798      	blx	r3
   8136c:	bd38      	pop	{r3, r4, r5, pc}
   8136e:	4770      	bx	lr
   81370:	00080231 	.word	0x00080231
   81374:	2007aa20 	.word	0x2007aa20
   81378:	2007aa24 	.word	0x2007aa24
   8137c:	000801d9 	.word	0x000801d9

00081380 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81380:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81382:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81384:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81386:	4291      	cmp	r1, r2
   81388:	d80a      	bhi.n	813a0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8138a:	1ad2      	subs	r2, r2, r3
   8138c:	6983      	ldr	r3, [r0, #24]
   8138e:	429a      	cmp	r2, r3
   81390:	d211      	bcs.n	813b6 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81392:	1d01      	adds	r1, r0, #4
   81394:	4b0a      	ldr	r3, [pc, #40]	; (813c0 <prvInsertTimerInActiveList+0x40>)
   81396:	6818      	ldr	r0, [r3, #0]
   81398:	4b0a      	ldr	r3, [pc, #40]	; (813c4 <prvInsertTimerInActiveList+0x44>)
   8139a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8139c:	2000      	movs	r0, #0
   8139e:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   813a0:	429a      	cmp	r2, r3
   813a2:	d201      	bcs.n	813a8 <prvInsertTimerInActiveList+0x28>
   813a4:	4299      	cmp	r1, r3
   813a6:	d208      	bcs.n	813ba <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   813a8:	1d01      	adds	r1, r0, #4
   813aa:	4b07      	ldr	r3, [pc, #28]	; (813c8 <prvInsertTimerInActiveList+0x48>)
   813ac:	6818      	ldr	r0, [r3, #0]
   813ae:	4b05      	ldr	r3, [pc, #20]	; (813c4 <prvInsertTimerInActiveList+0x44>)
   813b0:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   813b2:	2000      	movs	r0, #0
   813b4:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   813b6:	2001      	movs	r0, #1
   813b8:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   813ba:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   813bc:	bd08      	pop	{r3, pc}
   813be:	bf00      	nop
   813c0:	2007ab08 	.word	0x2007ab08
   813c4:	000801f5 	.word	0x000801f5
   813c8:	2007aad4 	.word	0x2007aad4

000813cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   813cc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   813ce:	4b0d      	ldr	r3, [pc, #52]	; (81404 <prvCheckForValidListAndQueue+0x38>)
   813d0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   813d2:	4b0d      	ldr	r3, [pc, #52]	; (81408 <prvCheckForValidListAndQueue+0x3c>)
   813d4:	681b      	ldr	r3, [r3, #0]
   813d6:	b98b      	cbnz	r3, 813fc <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   813d8:	4d0c      	ldr	r5, [pc, #48]	; (8140c <prvCheckForValidListAndQueue+0x40>)
   813da:	4628      	mov	r0, r5
   813dc:	4e0c      	ldr	r6, [pc, #48]	; (81410 <prvCheckForValidListAndQueue+0x44>)
   813de:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   813e0:	4c0c      	ldr	r4, [pc, #48]	; (81414 <prvCheckForValidListAndQueue+0x48>)
   813e2:	4620      	mov	r0, r4
   813e4:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   813e6:	4b0c      	ldr	r3, [pc, #48]	; (81418 <prvCheckForValidListAndQueue+0x4c>)
   813e8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   813ea:	4b0c      	ldr	r3, [pc, #48]	; (8141c <prvCheckForValidListAndQueue+0x50>)
   813ec:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   813ee:	2200      	movs	r2, #0
   813f0:	210c      	movs	r1, #12
   813f2:	2005      	movs	r0, #5
   813f4:	4b0a      	ldr	r3, [pc, #40]	; (81420 <prvCheckForValidListAndQueue+0x54>)
   813f6:	4798      	blx	r3
   813f8:	4b03      	ldr	r3, [pc, #12]	; (81408 <prvCheckForValidListAndQueue+0x3c>)
   813fa:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   813fc:	4b09      	ldr	r3, [pc, #36]	; (81424 <prvCheckForValidListAndQueue+0x58>)
   813fe:	4798      	blx	r3
   81400:	bd70      	pop	{r4, r5, r6, pc}
   81402:	bf00      	nop
   81404:	000802c9 	.word	0x000802c9
   81408:	2007ab04 	.word	0x2007ab04
   8140c:	2007aad8 	.word	0x2007aad8
   81410:	000801b9 	.word	0x000801b9
   81414:	2007aaec 	.word	0x2007aaec
   81418:	2007aad4 	.word	0x2007aad4
   8141c:	2007ab08 	.word	0x2007ab08
   81420:	000806b5 	.word	0x000806b5
   81424:	000802e9 	.word	0x000802e9

00081428 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81428:	b510      	push	{r4, lr}
   8142a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   8142c:	4b0b      	ldr	r3, [pc, #44]	; (8145c <xTimerCreateTimerTask+0x34>)
   8142e:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81430:	4b0b      	ldr	r3, [pc, #44]	; (81460 <xTimerCreateTimerTask+0x38>)
   81432:	681b      	ldr	r3, [r3, #0]
   81434:	b163      	cbz	r3, 81450 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81436:	2300      	movs	r3, #0
   81438:	9303      	str	r3, [sp, #12]
   8143a:	9302      	str	r3, [sp, #8]
   8143c:	9301      	str	r3, [sp, #4]
   8143e:	2204      	movs	r2, #4
   81440:	9200      	str	r2, [sp, #0]
   81442:	f44f 7282 	mov.w	r2, #260	; 0x104
   81446:	4907      	ldr	r1, [pc, #28]	; (81464 <xTimerCreateTimerTask+0x3c>)
   81448:	4807      	ldr	r0, [pc, #28]	; (81468 <xTimerCreateTimerTask+0x40>)
   8144a:	4c08      	ldr	r4, [pc, #32]	; (8146c <xTimerCreateTimerTask+0x44>)
   8144c:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   8144e:	b918      	cbnz	r0, 81458 <xTimerCreateTimerTask+0x30>
   81450:	4b07      	ldr	r3, [pc, #28]	; (81470 <xTimerCreateTimerTask+0x48>)
   81452:	4798      	blx	r3
   81454:	bf00      	nop
   81456:	e7fd      	b.n	81454 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81458:	b004      	add	sp, #16
   8145a:	bd10      	pop	{r4, pc}
   8145c:	000813cd 	.word	0x000813cd
   81460:	2007ab04 	.word	0x2007ab04
   81464:	000851d4 	.word	0x000851d4
   81468:	0008157d 	.word	0x0008157d
   8146c:	00080abd 	.word	0x00080abd
   81470:	000802b9 	.word	0x000802b9

00081474 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81474:	b530      	push	{r4, r5, lr}
   81476:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81478:	4c0f      	ldr	r4, [pc, #60]	; (814b8 <xTimerGenericCommand+0x44>)
   8147a:	6825      	ldr	r5, [r4, #0]
   8147c:	b1cd      	cbz	r5, 814b2 <xTimerGenericCommand+0x3e>
   8147e:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81480:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81482:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81484:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81486:	b96c      	cbnz	r4, 814a4 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81488:	4b0c      	ldr	r3, [pc, #48]	; (814bc <xTimerGenericCommand+0x48>)
   8148a:	4798      	blx	r3
   8148c:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8148e:	f04f 0300 	mov.w	r3, #0
   81492:	bf0c      	ite	eq
   81494:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81496:	461a      	movne	r2, r3
   81498:	a901      	add	r1, sp, #4
   8149a:	4807      	ldr	r0, [pc, #28]	; (814b8 <xTimerGenericCommand+0x44>)
   8149c:	6800      	ldr	r0, [r0, #0]
   8149e:	4c08      	ldr	r4, [pc, #32]	; (814c0 <xTimerGenericCommand+0x4c>)
   814a0:	47a0      	blx	r4
   814a2:	e007      	b.n	814b4 <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   814a4:	2300      	movs	r3, #0
   814a6:	4622      	mov	r2, r4
   814a8:	a901      	add	r1, sp, #4
   814aa:	4628      	mov	r0, r5
   814ac:	4c05      	ldr	r4, [pc, #20]	; (814c4 <xTimerGenericCommand+0x50>)
   814ae:	47a0      	blx	r4
   814b0:	e000      	b.n	814b4 <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   814b2:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   814b4:	b005      	add	sp, #20
   814b6:	bd30      	pop	{r4, r5, pc}
   814b8:	2007ab04 	.word	0x2007ab04
   814bc:	00081291 	.word	0x00081291
   814c0:	0008070d 	.word	0x0008070d
   814c4:	0008082d 	.word	0x0008082d

000814c8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   814c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   814cc:	b082      	sub	sp, #8
   814ce:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   814d0:	4b22      	ldr	r3, [pc, #136]	; (8155c <prvSampleTimeNow+0x94>)
   814d2:	4798      	blx	r3
   814d4:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   814d6:	4b22      	ldr	r3, [pc, #136]	; (81560 <prvSampleTimeNow+0x98>)
   814d8:	681b      	ldr	r3, [r3, #0]
   814da:	4298      	cmp	r0, r3
   814dc:	d234      	bcs.n	81548 <prvSampleTimeNow+0x80>
   814de:	e024      	b.n	8152a <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   814e0:	68da      	ldr	r2, [r3, #12]
   814e2:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   814e6:	68db      	ldr	r3, [r3, #12]
   814e8:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   814ea:	1d25      	adds	r5, r4, #4
   814ec:	4628      	mov	r0, r5
   814ee:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   814f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   814f2:	4620      	mov	r0, r4
   814f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   814f6:	69e3      	ldr	r3, [r4, #28]
   814f8:	2b01      	cmp	r3, #1
   814fa:	d118      	bne.n	8152e <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   814fc:	69a3      	ldr	r3, [r4, #24]
   814fe:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81500:	459a      	cmp	sl, r3
   81502:	d206      	bcs.n	81512 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81504:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81506:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81508:	4629      	mov	r1, r5
   8150a:	6830      	ldr	r0, [r6, #0]
   8150c:	4b15      	ldr	r3, [pc, #84]	; (81564 <prvSampleTimeNow+0x9c>)
   8150e:	4798      	blx	r3
   81510:	e00d      	b.n	8152e <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81512:	2100      	movs	r1, #0
   81514:	9100      	str	r1, [sp, #0]
   81516:	460b      	mov	r3, r1
   81518:	4652      	mov	r2, sl
   8151a:	4620      	mov	r0, r4
   8151c:	4c12      	ldr	r4, [pc, #72]	; (81568 <prvSampleTimeNow+0xa0>)
   8151e:	47a0      	blx	r4
				configASSERT( xResult );
   81520:	b928      	cbnz	r0, 8152e <prvSampleTimeNow+0x66>
   81522:	4b12      	ldr	r3, [pc, #72]	; (8156c <prvSampleTimeNow+0xa4>)
   81524:	4798      	blx	r3
   81526:	bf00      	nop
   81528:	e7fd      	b.n	81526 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8152a:	4e11      	ldr	r6, [pc, #68]	; (81570 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8152c:	4f11      	ldr	r7, [pc, #68]	; (81574 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8152e:	6833      	ldr	r3, [r6, #0]
   81530:	681a      	ldr	r2, [r3, #0]
   81532:	2a00      	cmp	r2, #0
   81534:	d1d4      	bne.n	814e0 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81536:	4a10      	ldr	r2, [pc, #64]	; (81578 <prvSampleTimeNow+0xb0>)
   81538:	6810      	ldr	r0, [r2, #0]
   8153a:	490d      	ldr	r1, [pc, #52]	; (81570 <prvSampleTimeNow+0xa8>)
   8153c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   8153e:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81540:	2301      	movs	r3, #1
   81542:	f8c9 3000 	str.w	r3, [r9]
   81546:	e002      	b.n	8154e <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81548:	2300      	movs	r3, #0
   8154a:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   8154e:	4b04      	ldr	r3, [pc, #16]	; (81560 <prvSampleTimeNow+0x98>)
   81550:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81554:	4640      	mov	r0, r8
   81556:	b002      	add	sp, #8
   81558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8155c:	00080d39 	.word	0x00080d39
   81560:	2007ab00 	.word	0x2007ab00
   81564:	000801f5 	.word	0x000801f5
   81568:	00081475 	.word	0x00081475
   8156c:	000802b9 	.word	0x000802b9
   81570:	2007aad4 	.word	0x2007aad4
   81574:	00080231 	.word	0x00080231
   81578:	2007ab08 	.word	0x2007ab08

0008157c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   8157c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81580:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81582:	4d4d      	ldr	r5, [pc, #308]	; (816b8 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81584:	f8df 8160 	ldr.w	r8, [pc, #352]	; 816e8 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81588:	4b4c      	ldr	r3, [pc, #304]	; (816bc <prvTimerTask+0x140>)
   8158a:	681b      	ldr	r3, [r3, #0]
   8158c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8158e:	2a00      	cmp	r2, #0
   81590:	f000 8088 	beq.w	816a4 <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81594:	68db      	ldr	r3, [r3, #12]
   81596:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81598:	4b49      	ldr	r3, [pc, #292]	; (816c0 <prvTimerTask+0x144>)
   8159a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8159c:	a803      	add	r0, sp, #12
   8159e:	4b49      	ldr	r3, [pc, #292]	; (816c4 <prvTimerTask+0x148>)
   815a0:	4798      	blx	r3
   815a2:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   815a4:	9b03      	ldr	r3, [sp, #12]
   815a6:	2b00      	cmp	r3, #0
   815a8:	d130      	bne.n	8160c <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   815aa:	4286      	cmp	r6, r0
   815ac:	d824      	bhi.n	815f8 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   815ae:	4b46      	ldr	r3, [pc, #280]	; (816c8 <prvTimerTask+0x14c>)
   815b0:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   815b2:	4b42      	ldr	r3, [pc, #264]	; (816bc <prvTimerTask+0x140>)
   815b4:	681b      	ldr	r3, [r3, #0]
   815b6:	68db      	ldr	r3, [r3, #12]
   815b8:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   815ba:	1d20      	adds	r0, r4, #4
   815bc:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   815be:	69e3      	ldr	r3, [r4, #28]
   815c0:	2b01      	cmp	r3, #1
   815c2:	d114      	bne.n	815ee <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   815c4:	69a1      	ldr	r1, [r4, #24]
   815c6:	4633      	mov	r3, r6
   815c8:	463a      	mov	r2, r7
   815ca:	4431      	add	r1, r6
   815cc:	4620      	mov	r0, r4
   815ce:	4f3f      	ldr	r7, [pc, #252]	; (816cc <prvTimerTask+0x150>)
   815d0:	47b8      	blx	r7
   815d2:	2801      	cmp	r0, #1
   815d4:	d10b      	bne.n	815ee <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   815d6:	2100      	movs	r1, #0
   815d8:	9100      	str	r1, [sp, #0]
   815da:	460b      	mov	r3, r1
   815dc:	4632      	mov	r2, r6
   815de:	4620      	mov	r0, r4
   815e0:	4e3b      	ldr	r6, [pc, #236]	; (816d0 <prvTimerTask+0x154>)
   815e2:	47b0      	blx	r6
			configASSERT( xResult );
   815e4:	b918      	cbnz	r0, 815ee <prvTimerTask+0x72>
   815e6:	4b3b      	ldr	r3, [pc, #236]	; (816d4 <prvTimerTask+0x158>)
   815e8:	4798      	blx	r3
   815ea:	bf00      	nop
   815ec:	e7fd      	b.n	815ea <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   815ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   815f0:	4620      	mov	r0, r4
   815f2:	4798      	blx	r3
   815f4:	e00c      	b.n	81610 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   815f6:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   815f8:	1bf1      	subs	r1, r6, r7
   815fa:	6828      	ldr	r0, [r5, #0]
   815fc:	4b36      	ldr	r3, [pc, #216]	; (816d8 <prvTimerTask+0x15c>)
   815fe:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81600:	4b31      	ldr	r3, [pc, #196]	; (816c8 <prvTimerTask+0x14c>)
   81602:	4798      	blx	r3
   81604:	b920      	cbnz	r0, 81610 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81606:	4b35      	ldr	r3, [pc, #212]	; (816dc <prvTimerTask+0x160>)
   81608:	4798      	blx	r3
   8160a:	e001      	b.n	81610 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8160c:	4b2e      	ldr	r3, [pc, #184]	; (816c8 <prvTimerTask+0x14c>)
   8160e:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81610:	a802      	add	r0, sp, #8
   81612:	4b2c      	ldr	r3, [pc, #176]	; (816c4 <prvTimerTask+0x148>)
   81614:	4798      	blx	r3
   81616:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81618:	4e31      	ldr	r6, [pc, #196]	; (816e0 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8161a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 816cc <prvTimerTask+0x150>
   8161e:	e039      	b.n	81694 <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81620:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81622:	b11c      	cbz	r4, 8162c <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81624:	6963      	ldr	r3, [r4, #20]
   81626:	b10b      	cbz	r3, 8162c <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81628:	1d20      	adds	r0, r4, #4
   8162a:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8162c:	9b03      	ldr	r3, [sp, #12]
   8162e:	2b02      	cmp	r3, #2
   81630:	d020      	beq.n	81674 <prvTimerTask+0xf8>
   81632:	2b03      	cmp	r3, #3
   81634:	d02b      	beq.n	8168e <prvTimerTask+0x112>
   81636:	2b00      	cmp	r3, #0
   81638:	d12c      	bne.n	81694 <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   8163a:	9904      	ldr	r1, [sp, #16]
   8163c:	69a0      	ldr	r0, [r4, #24]
   8163e:	460b      	mov	r3, r1
   81640:	463a      	mov	r2, r7
   81642:	4401      	add	r1, r0
   81644:	4620      	mov	r0, r4
   81646:	47c8      	blx	r9
   81648:	2801      	cmp	r0, #1
   8164a:	d123      	bne.n	81694 <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8164c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8164e:	4620      	mov	r0, r4
   81650:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81652:	69e3      	ldr	r3, [r4, #28]
   81654:	2b01      	cmp	r3, #1
   81656:	d11d      	bne.n	81694 <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81658:	69a2      	ldr	r2, [r4, #24]
   8165a:	2100      	movs	r1, #0
   8165c:	9100      	str	r1, [sp, #0]
   8165e:	460b      	mov	r3, r1
   81660:	9804      	ldr	r0, [sp, #16]
   81662:	4402      	add	r2, r0
   81664:	4620      	mov	r0, r4
   81666:	4c1a      	ldr	r4, [pc, #104]	; (816d0 <prvTimerTask+0x154>)
   81668:	47a0      	blx	r4
						configASSERT( xResult );
   8166a:	b998      	cbnz	r0, 81694 <prvTimerTask+0x118>
   8166c:	4b19      	ldr	r3, [pc, #100]	; (816d4 <prvTimerTask+0x158>)
   8166e:	4798      	blx	r3
   81670:	bf00      	nop
   81672:	e7fd      	b.n	81670 <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81674:	9904      	ldr	r1, [sp, #16]
   81676:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81678:	b919      	cbnz	r1, 81682 <prvTimerTask+0x106>
   8167a:	4b16      	ldr	r3, [pc, #88]	; (816d4 <prvTimerTask+0x158>)
   8167c:	4798      	blx	r3
   8167e:	bf00      	nop
   81680:	e7fd      	b.n	8167e <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81682:	463b      	mov	r3, r7
   81684:	463a      	mov	r2, r7
   81686:	4439      	add	r1, r7
   81688:	4620      	mov	r0, r4
   8168a:	47c8      	blx	r9
   8168c:	e002      	b.n	81694 <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8168e:	4620      	mov	r0, r4
   81690:	4b14      	ldr	r3, [pc, #80]	; (816e4 <prvTimerTask+0x168>)
   81692:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81694:	2300      	movs	r3, #0
   81696:	461a      	mov	r2, r3
   81698:	a903      	add	r1, sp, #12
   8169a:	6828      	ldr	r0, [r5, #0]
   8169c:	47b0      	blx	r6
   8169e:	2800      	cmp	r0, #0
   816a0:	d1be      	bne.n	81620 <prvTimerTask+0xa4>
   816a2:	e771      	b.n	81588 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   816a4:	4b06      	ldr	r3, [pc, #24]	; (816c0 <prvTimerTask+0x144>)
   816a6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   816a8:	a803      	add	r0, sp, #12
   816aa:	4b06      	ldr	r3, [pc, #24]	; (816c4 <prvTimerTask+0x148>)
   816ac:	4798      	blx	r3
   816ae:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   816b0:	9b03      	ldr	r3, [sp, #12]
   816b2:	2b00      	cmp	r3, #0
   816b4:	d09f      	beq.n	815f6 <prvTimerTask+0x7a>
   816b6:	e7a9      	b.n	8160c <prvTimerTask+0x90>
   816b8:	2007ab04 	.word	0x2007ab04
   816bc:	2007aad4 	.word	0x2007aad4
   816c0:	00080d29 	.word	0x00080d29
   816c4:	000814c9 	.word	0x000814c9
   816c8:	00080e79 	.word	0x00080e79
   816cc:	00081381 	.word	0x00081381
   816d0:	00081475 	.word	0x00081475
   816d4:	000802b9 	.word	0x000802b9
   816d8:	00080a19 	.word	0x00080a19
   816dc:	000802a9 	.word	0x000802a9
   816e0:	000808bd 	.word	0x000808bd
   816e4:	000804e5 	.word	0x000804e5
   816e8:	00080231 	.word	0x00080231

000816ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   816ec:	3801      	subs	r0, #1
   816ee:	2802      	cmp	r0, #2
   816f0:	d815      	bhi.n	8171e <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   816f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   816f6:	460e      	mov	r6, r1
   816f8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   816fa:	b19a      	cbz	r2, 81724 <_write+0x38>
   816fc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   816fe:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81738 <_write+0x4c>
   81702:	4f0c      	ldr	r7, [pc, #48]	; (81734 <_write+0x48>)
   81704:	f8d8 0000 	ldr.w	r0, [r8]
   81708:	f815 1b01 	ldrb.w	r1, [r5], #1
   8170c:	683b      	ldr	r3, [r7, #0]
   8170e:	4798      	blx	r3
   81710:	2800      	cmp	r0, #0
   81712:	db0a      	blt.n	8172a <_write+0x3e>
   81714:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81716:	3c01      	subs	r4, #1
   81718:	d1f4      	bne.n	81704 <_write+0x18>
   8171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8171e:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   81722:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81724:	2000      	movs	r0, #0
   81726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8172a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8172e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81732:	bf00      	nop
   81734:	2007abb8 	.word	0x2007abb8
   81738:	2007abbc 	.word	0x2007abbc

0008173c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8173c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8173e:	23ac      	movs	r3, #172	; 0xac
   81740:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81742:	680b      	ldr	r3, [r1, #0]
   81744:	684a      	ldr	r2, [r1, #4]
   81746:	fbb3 f3f2 	udiv	r3, r3, r2
   8174a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8174c:	1e5c      	subs	r4, r3, #1
   8174e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81752:	4294      	cmp	r4, r2
   81754:	d80a      	bhi.n	8176c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81756:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81758:	688b      	ldr	r3, [r1, #8]
   8175a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8175c:	f240 2302 	movw	r3, #514	; 0x202
   81760:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81764:	2350      	movs	r3, #80	; 0x50
   81766:	6003      	str	r3, [r0, #0]

	return 0;
   81768:	2000      	movs	r0, #0
   8176a:	e000      	b.n	8176e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   8176c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8176e:	bc10      	pop	{r4}
   81770:	4770      	bx	lr
   81772:	bf00      	nop

00081774 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81774:	6943      	ldr	r3, [r0, #20]
   81776:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8177a:	bf1a      	itte	ne
   8177c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8177e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81780:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81782:	4770      	bx	lr

00081784 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81784:	6943      	ldr	r3, [r0, #20]
   81786:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8178a:	bf1d      	ittte	ne
   8178c:	6983      	ldrne	r3, [r0, #24]
   8178e:	700b      	strbne	r3, [r1, #0]
	return 0;
   81790:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81792:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81794:	4770      	bx	lr
   81796:	bf00      	nop

00081798 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81798:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8179a:	480e      	ldr	r0, [pc, #56]	; (817d4 <sysclk_init+0x3c>)
   8179c:	4b0e      	ldr	r3, [pc, #56]	; (817d8 <sysclk_init+0x40>)
   8179e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   817a0:	213e      	movs	r1, #62	; 0x3e
   817a2:	2000      	movs	r0, #0
   817a4:	4b0d      	ldr	r3, [pc, #52]	; (817dc <sysclk_init+0x44>)
   817a6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   817a8:	4c0d      	ldr	r4, [pc, #52]	; (817e0 <sysclk_init+0x48>)
   817aa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   817ac:	2800      	cmp	r0, #0
   817ae:	d0fc      	beq.n	817aa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   817b0:	4b0c      	ldr	r3, [pc, #48]	; (817e4 <sysclk_init+0x4c>)
   817b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   817b4:	4a0c      	ldr	r2, [pc, #48]	; (817e8 <sysclk_init+0x50>)
   817b6:	4b0d      	ldr	r3, [pc, #52]	; (817ec <sysclk_init+0x54>)
   817b8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   817ba:	4c0d      	ldr	r4, [pc, #52]	; (817f0 <sysclk_init+0x58>)
   817bc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   817be:	2800      	cmp	r0, #0
   817c0:	d0fc      	beq.n	817bc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   817c2:	2010      	movs	r0, #16
   817c4:	4b0b      	ldr	r3, [pc, #44]	; (817f4 <sysclk_init+0x5c>)
   817c6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   817c8:	4b0b      	ldr	r3, [pc, #44]	; (817f8 <sysclk_init+0x60>)
   817ca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   817cc:	4801      	ldr	r0, [pc, #4]	; (817d4 <sysclk_init+0x3c>)
   817ce:	4b02      	ldr	r3, [pc, #8]	; (817d8 <sysclk_init+0x40>)
   817d0:	4798      	blx	r3
   817d2:	bd10      	pop	{r4, pc}
   817d4:	0501bd00 	.word	0x0501bd00
   817d8:	200700a5 	.word	0x200700a5
   817dc:	00081b9d 	.word	0x00081b9d
   817e0:	00081bf1 	.word	0x00081bf1
   817e4:	00081c01 	.word	0x00081c01
   817e8:	200d3f01 	.word	0x200d3f01
   817ec:	400e0600 	.word	0x400e0600
   817f0:	00081c11 	.word	0x00081c11
   817f4:	00081b35 	.word	0x00081b35
   817f8:	00081d25 	.word	0x00081d25

000817fc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   817fc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   817fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81802:	4b16      	ldr	r3, [pc, #88]	; (8185c <board_init+0x60>)
   81804:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81806:	200b      	movs	r0, #11
   81808:	4c15      	ldr	r4, [pc, #84]	; (81860 <board_init+0x64>)
   8180a:	47a0      	blx	r4
   8180c:	200c      	movs	r0, #12
   8180e:	47a0      	blx	r4
   81810:	200d      	movs	r0, #13
   81812:	47a0      	blx	r4
   81814:	200e      	movs	r0, #14
   81816:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81818:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8181c:	203b      	movs	r0, #59	; 0x3b
   8181e:	4c11      	ldr	r4, [pc, #68]	; (81864 <board_init+0x68>)
   81820:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81822:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81826:	2055      	movs	r0, #85	; 0x55
   81828:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8182a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8182e:	2056      	movs	r0, #86	; 0x56
   81830:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81832:	490d      	ldr	r1, [pc, #52]	; (81868 <board_init+0x6c>)
   81834:	2068      	movs	r0, #104	; 0x68
   81836:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81838:	490c      	ldr	r1, [pc, #48]	; (8186c <board_init+0x70>)
   8183a:	205c      	movs	r0, #92	; 0x5c
   8183c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8183e:	4a0c      	ldr	r2, [pc, #48]	; (81870 <board_init+0x74>)
   81840:	f44f 7140 	mov.w	r1, #768	; 0x300
   81844:	480b      	ldr	r0, [pc, #44]	; (81874 <board_init+0x78>)
   81846:	4b0c      	ldr	r3, [pc, #48]	; (81878 <board_init+0x7c>)
   81848:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8184a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8184e:	202b      	movs	r0, #43	; 0x2b
   81850:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81852:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81856:	202a      	movs	r0, #42	; 0x2a
   81858:	47a0      	blx	r4
   8185a:	bd10      	pop	{r4, pc}
   8185c:	400e1a50 	.word	0x400e1a50
   81860:	00081c21 	.word	0x00081c21
   81864:	00081921 	.word	0x00081921
   81868:	28000079 	.word	0x28000079
   8186c:	28000001 	.word	0x28000001
   81870:	08000001 	.word	0x08000001
   81874:	400e0e00 	.word	0x400e0e00
   81878:	000819f5 	.word	0x000819f5

0008187c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8187c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8187e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81882:	d016      	beq.n	818b2 <pio_set_peripheral+0x36>
   81884:	d804      	bhi.n	81890 <pio_set_peripheral+0x14>
   81886:	b1c1      	cbz	r1, 818ba <pio_set_peripheral+0x3e>
   81888:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8188c:	d00a      	beq.n	818a4 <pio_set_peripheral+0x28>
   8188e:	e013      	b.n	818b8 <pio_set_peripheral+0x3c>
   81890:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81894:	d011      	beq.n	818ba <pio_set_peripheral+0x3e>
   81896:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8189a:	d00e      	beq.n	818ba <pio_set_peripheral+0x3e>
   8189c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   818a0:	d10a      	bne.n	818b8 <pio_set_peripheral+0x3c>
   818a2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   818a4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   818a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
   818a8:	400b      	ands	r3, r1
   818aa:	ea23 0302 	bic.w	r3, r3, r2
   818ae:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   818b0:	e002      	b.n	818b8 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   818b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   818b4:	4313      	orrs	r3, r2
   818b6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   818b8:	6042      	str	r2, [r0, #4]
   818ba:	4770      	bx	lr

000818bc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   818bc:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   818be:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   818c2:	bf14      	ite	ne
   818c4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   818c6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   818c8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   818cc:	bf14      	ite	ne
   818ce:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   818d0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   818d2:	f012 0f02 	tst.w	r2, #2
   818d6:	d002      	beq.n	818de <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   818d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   818dc:	e004      	b.n	818e8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   818de:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   818e2:	bf18      	it	ne
   818e4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   818e8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   818ea:	6001      	str	r1, [r0, #0]
   818ec:	4770      	bx	lr
   818ee:	bf00      	nop

000818f0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   818f0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   818f2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   818f4:	9c01      	ldr	r4, [sp, #4]
   818f6:	b10c      	cbz	r4, 818fc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   818f8:	6641      	str	r1, [r0, #100]	; 0x64
   818fa:	e000      	b.n	818fe <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   818fc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   818fe:	b10b      	cbz	r3, 81904 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81900:	6501      	str	r1, [r0, #80]	; 0x50
   81902:	e000      	b.n	81906 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81904:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81906:	b10a      	cbz	r2, 8190c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81908:	6301      	str	r1, [r0, #48]	; 0x30
   8190a:	e000      	b.n	8190e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8190c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8190e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81910:	6001      	str	r1, [r0, #0]
}
   81912:	bc10      	pop	{r4}
   81914:	4770      	bx	lr
   81916:	bf00      	nop

00081918 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81918:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8191a:	4770      	bx	lr

0008191c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8191c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8191e:	4770      	bx	lr

00081920 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81920:	b570      	push	{r4, r5, r6, lr}
   81922:	b082      	sub	sp, #8
   81924:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81926:	0943      	lsrs	r3, r0, #5
   81928:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8192c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81930:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81932:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81936:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8193a:	d030      	beq.n	8199e <pio_configure_pin+0x7e>
   8193c:	d806      	bhi.n	8194c <pio_configure_pin+0x2c>
   8193e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81942:	d00a      	beq.n	8195a <pio_configure_pin+0x3a>
   81944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81948:	d018      	beq.n	8197c <pio_configure_pin+0x5c>
   8194a:	e049      	b.n	819e0 <pio_configure_pin+0xc0>
   8194c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81950:	d030      	beq.n	819b4 <pio_configure_pin+0x94>
   81952:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81956:	d02d      	beq.n	819b4 <pio_configure_pin+0x94>
   81958:	e042      	b.n	819e0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8195a:	f000 001f 	and.w	r0, r0, #31
   8195e:	2601      	movs	r6, #1
   81960:	4086      	lsls	r6, r0
   81962:	4632      	mov	r2, r6
   81964:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81968:	4620      	mov	r0, r4
   8196a:	4b1f      	ldr	r3, [pc, #124]	; (819e8 <pio_configure_pin+0xc8>)
   8196c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8196e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81972:	bf14      	ite	ne
   81974:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81976:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81978:	2001      	movs	r0, #1
   8197a:	e032      	b.n	819e2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8197c:	f000 001f 	and.w	r0, r0, #31
   81980:	2601      	movs	r6, #1
   81982:	4086      	lsls	r6, r0
   81984:	4632      	mov	r2, r6
   81986:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8198a:	4620      	mov	r0, r4
   8198c:	4b16      	ldr	r3, [pc, #88]	; (819e8 <pio_configure_pin+0xc8>)
   8198e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81990:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81994:	bf14      	ite	ne
   81996:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81998:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8199a:	2001      	movs	r0, #1
   8199c:	e021      	b.n	819e2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8199e:	f000 011f 	and.w	r1, r0, #31
   819a2:	2601      	movs	r6, #1
   819a4:	462a      	mov	r2, r5
   819a6:	fa06 f101 	lsl.w	r1, r6, r1
   819aa:	4620      	mov	r0, r4
   819ac:	4b0f      	ldr	r3, [pc, #60]	; (819ec <pio_configure_pin+0xcc>)
   819ae:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   819b0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   819b2:	e016      	b.n	819e2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   819b4:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   819b8:	f000 011f 	and.w	r1, r0, #31
   819bc:	2601      	movs	r6, #1
   819be:	ea05 0306 	and.w	r3, r5, r6
   819c2:	9300      	str	r3, [sp, #0]
   819c4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   819c8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   819cc:	bf14      	ite	ne
   819ce:	2200      	movne	r2, #0
   819d0:	2201      	moveq	r2, #1
   819d2:	fa06 f101 	lsl.w	r1, r6, r1
   819d6:	4620      	mov	r0, r4
   819d8:	4c05      	ldr	r4, [pc, #20]	; (819f0 <pio_configure_pin+0xd0>)
   819da:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   819dc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   819de:	e000      	b.n	819e2 <pio_configure_pin+0xc2>

	default:
		return 0;
   819e0:	2000      	movs	r0, #0
	}

	return 1;
}
   819e2:	b002      	add	sp, #8
   819e4:	bd70      	pop	{r4, r5, r6, pc}
   819e6:	bf00      	nop
   819e8:	0008187d 	.word	0x0008187d
   819ec:	000818bd 	.word	0x000818bd
   819f0:	000818f1 	.word	0x000818f1

000819f4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   819f4:	b570      	push	{r4, r5, r6, lr}
   819f6:	b082      	sub	sp, #8
   819f8:	4605      	mov	r5, r0
   819fa:	460e      	mov	r6, r1
   819fc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   819fe:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81a02:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81a06:	d026      	beq.n	81a56 <pio_configure_pin_group+0x62>
   81a08:	d806      	bhi.n	81a18 <pio_configure_pin_group+0x24>
   81a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81a0e:	d00a      	beq.n	81a26 <pio_configure_pin_group+0x32>
   81a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81a14:	d013      	beq.n	81a3e <pio_configure_pin_group+0x4a>
   81a16:	e034      	b.n	81a82 <pio_configure_pin_group+0x8e>
   81a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81a1c:	d01f      	beq.n	81a5e <pio_configure_pin_group+0x6a>
   81a1e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81a22:	d01c      	beq.n	81a5e <pio_configure_pin_group+0x6a>
   81a24:	e02d      	b.n	81a82 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81a26:	460a      	mov	r2, r1
   81a28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a2c:	4b16      	ldr	r3, [pc, #88]	; (81a88 <pio_configure_pin_group+0x94>)
   81a2e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a30:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81a34:	bf14      	ite	ne
   81a36:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a38:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a3a:	2001      	movs	r0, #1
   81a3c:	e022      	b.n	81a84 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81a3e:	460a      	mov	r2, r1
   81a40:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81a44:	4b10      	ldr	r3, [pc, #64]	; (81a88 <pio_configure_pin_group+0x94>)
   81a46:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a48:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81a4c:	bf14      	ite	ne
   81a4e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a50:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a52:	2001      	movs	r0, #1
   81a54:	e016      	b.n	81a84 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81a56:	4b0d      	ldr	r3, [pc, #52]	; (81a8c <pio_configure_pin_group+0x98>)
   81a58:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81a5a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81a5c:	e012      	b.n	81a84 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81a5e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   81a62:	f004 0301 	and.w	r3, r4, #1
   81a66:	9300      	str	r3, [sp, #0]
   81a68:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81a6c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81a70:	bf14      	ite	ne
   81a72:	2200      	movne	r2, #0
   81a74:	2201      	moveq	r2, #1
   81a76:	4631      	mov	r1, r6
   81a78:	4628      	mov	r0, r5
   81a7a:	4c05      	ldr	r4, [pc, #20]	; (81a90 <pio_configure_pin_group+0x9c>)
   81a7c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81a7e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81a80:	e000      	b.n	81a84 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81a82:	2000      	movs	r0, #0
	}

	return 1;
}
   81a84:	b002      	add	sp, #8
   81a86:	bd70      	pop	{r4, r5, r6, pc}
   81a88:	0008187d 	.word	0x0008187d
   81a8c:	000818bd 	.word	0x000818bd
   81a90:	000818f1 	.word	0x000818f1

00081a94 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a98:	4604      	mov	r4, r0
   81a9a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81a9c:	4b0e      	ldr	r3, [pc, #56]	; (81ad8 <pio_handler_process+0x44>)
   81a9e:	4798      	blx	r3
   81aa0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81aa2:	4620      	mov	r0, r4
   81aa4:	4b0d      	ldr	r3, [pc, #52]	; (81adc <pio_handler_process+0x48>)
   81aa6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81aa8:	4005      	ands	r5, r0
   81aaa:	d013      	beq.n	81ad4 <pio_handler_process+0x40>
   81aac:	4c0c      	ldr	r4, [pc, #48]	; (81ae0 <pio_handler_process+0x4c>)
   81aae:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81ab2:	6823      	ldr	r3, [r4, #0]
   81ab4:	4543      	cmp	r3, r8
   81ab6:	d108      	bne.n	81aca <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81ab8:	6861      	ldr	r1, [r4, #4]
   81aba:	4229      	tst	r1, r5
   81abc:	d005      	beq.n	81aca <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81abe:	68e3      	ldr	r3, [r4, #12]
   81ac0:	4640      	mov	r0, r8
   81ac2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81ac4:	6863      	ldr	r3, [r4, #4]
   81ac6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81aca:	42b4      	cmp	r4, r6
   81acc:	d002      	beq.n	81ad4 <pio_handler_process+0x40>
   81ace:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81ad0:	2d00      	cmp	r5, #0
   81ad2:	d1ee      	bne.n	81ab2 <pio_handler_process+0x1e>
   81ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ad8:	00081919 	.word	0x00081919
   81adc:	0008191d 	.word	0x0008191d
   81ae0:	2007ab0c 	.word	0x2007ab0c

00081ae4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81ae4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81ae6:	210b      	movs	r1, #11
   81ae8:	4801      	ldr	r0, [pc, #4]	; (81af0 <PIOA_Handler+0xc>)
   81aea:	4b02      	ldr	r3, [pc, #8]	; (81af4 <PIOA_Handler+0x10>)
   81aec:	4798      	blx	r3
   81aee:	bd08      	pop	{r3, pc}
   81af0:	400e0e00 	.word	0x400e0e00
   81af4:	00081a95 	.word	0x00081a95

00081af8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81af8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81afa:	210c      	movs	r1, #12
   81afc:	4801      	ldr	r0, [pc, #4]	; (81b04 <PIOB_Handler+0xc>)
   81afe:	4b02      	ldr	r3, [pc, #8]	; (81b08 <PIOB_Handler+0x10>)
   81b00:	4798      	blx	r3
   81b02:	bd08      	pop	{r3, pc}
   81b04:	400e1000 	.word	0x400e1000
   81b08:	00081a95 	.word	0x00081a95

00081b0c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81b0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81b0e:	210d      	movs	r1, #13
   81b10:	4801      	ldr	r0, [pc, #4]	; (81b18 <PIOC_Handler+0xc>)
   81b12:	4b02      	ldr	r3, [pc, #8]	; (81b1c <PIOC_Handler+0x10>)
   81b14:	4798      	blx	r3
   81b16:	bd08      	pop	{r3, pc}
   81b18:	400e1200 	.word	0x400e1200
   81b1c:	00081a95 	.word	0x00081a95

00081b20 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81b20:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81b22:	210e      	movs	r1, #14
   81b24:	4801      	ldr	r0, [pc, #4]	; (81b2c <PIOD_Handler+0xc>)
   81b26:	4b02      	ldr	r3, [pc, #8]	; (81b30 <PIOD_Handler+0x10>)
   81b28:	4798      	blx	r3
   81b2a:	bd08      	pop	{r3, pc}
   81b2c:	400e1400 	.word	0x400e1400
   81b30:	00081a95 	.word	0x00081a95

00081b34 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81b34:	4a18      	ldr	r2, [pc, #96]	; (81b98 <pmc_switch_mck_to_pllack+0x64>)
   81b36:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81b3c:	4318      	orrs	r0, r3
   81b3e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b40:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81b42:	f013 0f08 	tst.w	r3, #8
   81b46:	d003      	beq.n	81b50 <pmc_switch_mck_to_pllack+0x1c>
   81b48:	e009      	b.n	81b5e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81b4a:	3b01      	subs	r3, #1
   81b4c:	d103      	bne.n	81b56 <pmc_switch_mck_to_pllack+0x22>
   81b4e:	e01e      	b.n	81b8e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b54:	4910      	ldr	r1, [pc, #64]	; (81b98 <pmc_switch_mck_to_pllack+0x64>)
   81b56:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81b58:	f012 0f08 	tst.w	r2, #8
   81b5c:	d0f5      	beq.n	81b4a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81b5e:	4a0e      	ldr	r2, [pc, #56]	; (81b98 <pmc_switch_mck_to_pllack+0x64>)
   81b60:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81b62:	f023 0303 	bic.w	r3, r3, #3
   81b66:	f043 0302 	orr.w	r3, r3, #2
   81b6a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b6c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   81b6e:	f010 0008 	ands.w	r0, r0, #8
   81b72:	d004      	beq.n	81b7e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81b74:	2000      	movs	r0, #0
   81b76:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   81b78:	3b01      	subs	r3, #1
   81b7a:	d103      	bne.n	81b84 <pmc_switch_mck_to_pllack+0x50>
   81b7c:	e009      	b.n	81b92 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b82:	4905      	ldr	r1, [pc, #20]	; (81b98 <pmc_switch_mck_to_pllack+0x64>)
   81b84:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81b86:	f012 0f08 	tst.w	r2, #8
   81b8a:	d0f5      	beq.n	81b78 <pmc_switch_mck_to_pllack+0x44>
   81b8c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81b8e:	2001      	movs	r0, #1
   81b90:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81b92:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81b94:	4770      	bx	lr
   81b96:	bf00      	nop
   81b98:	400e0600 	.word	0x400e0600

00081b9c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81b9c:	b138      	cbz	r0, 81bae <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81b9e:	4911      	ldr	r1, [pc, #68]	; (81be4 <pmc_switch_mainck_to_xtal+0x48>)
   81ba0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81ba2:	4a11      	ldr	r2, [pc, #68]	; (81be8 <pmc_switch_mainck_to_xtal+0x4c>)
   81ba4:	401a      	ands	r2, r3
   81ba6:	4b11      	ldr	r3, [pc, #68]	; (81bec <pmc_switch_mainck_to_xtal+0x50>)
   81ba8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81baa:	620b      	str	r3, [r1, #32]
   81bac:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81bae:	480d      	ldr	r0, [pc, #52]	; (81be4 <pmc_switch_mainck_to_xtal+0x48>)
   81bb0:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81bb2:	0209      	lsls	r1, r1, #8
   81bb4:	b289      	uxth	r1, r1
   81bb6:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   81bba:	f023 0303 	bic.w	r3, r3, #3
   81bbe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81bc2:	f043 0301 	orr.w	r3, r3, #1
   81bc6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81bc8:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81bca:	4602      	mov	r2, r0
   81bcc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81bce:	f013 0f01 	tst.w	r3, #1
   81bd2:	d0fb      	beq.n	81bcc <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81bd4:	4a03      	ldr	r2, [pc, #12]	; (81be4 <pmc_switch_mainck_to_xtal+0x48>)
   81bd6:	6a13      	ldr	r3, [r2, #32]
   81bd8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81be0:	6213      	str	r3, [r2, #32]
   81be2:	4770      	bx	lr
   81be4:	400e0600 	.word	0x400e0600
   81be8:	fec8fffc 	.word	0xfec8fffc
   81bec:	01370002 	.word	0x01370002

00081bf0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81bf0:	4b02      	ldr	r3, [pc, #8]	; (81bfc <pmc_osc_is_ready_mainck+0xc>)
   81bf2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81bf4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81bf8:	4770      	bx	lr
   81bfa:	bf00      	nop
   81bfc:	400e0600 	.word	0x400e0600

00081c00 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81c00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81c04:	4b01      	ldr	r3, [pc, #4]	; (81c0c <pmc_disable_pllack+0xc>)
   81c06:	629a      	str	r2, [r3, #40]	; 0x28
   81c08:	4770      	bx	lr
   81c0a:	bf00      	nop
   81c0c:	400e0600 	.word	0x400e0600

00081c10 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81c10:	4b02      	ldr	r3, [pc, #8]	; (81c1c <pmc_is_locked_pllack+0xc>)
   81c12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81c14:	f000 0002 	and.w	r0, r0, #2
   81c18:	4770      	bx	lr
   81c1a:	bf00      	nop
   81c1c:	400e0600 	.word	0x400e0600

00081c20 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81c20:	282c      	cmp	r0, #44	; 0x2c
   81c22:	d81e      	bhi.n	81c62 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81c24:	281f      	cmp	r0, #31
   81c26:	d80c      	bhi.n	81c42 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81c28:	4b11      	ldr	r3, [pc, #68]	; (81c70 <pmc_enable_periph_clk+0x50>)
   81c2a:	699a      	ldr	r2, [r3, #24]
   81c2c:	2301      	movs	r3, #1
   81c2e:	4083      	lsls	r3, r0
   81c30:	4393      	bics	r3, r2
   81c32:	d018      	beq.n	81c66 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81c34:	2301      	movs	r3, #1
   81c36:	fa03 f000 	lsl.w	r0, r3, r0
   81c3a:	4b0d      	ldr	r3, [pc, #52]	; (81c70 <pmc_enable_periph_clk+0x50>)
   81c3c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81c3e:	2000      	movs	r0, #0
   81c40:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   81c42:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81c44:	4b0a      	ldr	r3, [pc, #40]	; (81c70 <pmc_enable_periph_clk+0x50>)
   81c46:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81c4a:	2301      	movs	r3, #1
   81c4c:	4083      	lsls	r3, r0
   81c4e:	4393      	bics	r3, r2
   81c50:	d00b      	beq.n	81c6a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81c52:	2301      	movs	r3, #1
   81c54:	fa03 f000 	lsl.w	r0, r3, r0
   81c58:	4b05      	ldr	r3, [pc, #20]	; (81c70 <pmc_enable_periph_clk+0x50>)
   81c5a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81c5e:	2000      	movs	r0, #0
   81c60:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81c62:	2001      	movs	r0, #1
   81c64:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81c66:	2000      	movs	r0, #0
   81c68:	4770      	bx	lr
   81c6a:	2000      	movs	r0, #0
}
   81c6c:	4770      	bx	lr
   81c6e:	bf00      	nop
   81c70:	400e0600 	.word	0x400e0600

00081c74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81c74:	e7fe      	b.n	81c74 <Dummy_Handler>
   81c76:	bf00      	nop

00081c78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81c78:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81c7a:	4b1e      	ldr	r3, [pc, #120]	; (81cf4 <Reset_Handler+0x7c>)
   81c7c:	4a1e      	ldr	r2, [pc, #120]	; (81cf8 <Reset_Handler+0x80>)
   81c7e:	429a      	cmp	r2, r3
   81c80:	d003      	beq.n	81c8a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81c82:	4b1e      	ldr	r3, [pc, #120]	; (81cfc <Reset_Handler+0x84>)
   81c84:	4a1b      	ldr	r2, [pc, #108]	; (81cf4 <Reset_Handler+0x7c>)
   81c86:	429a      	cmp	r2, r3
   81c88:	d304      	bcc.n	81c94 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81c8a:	4b1d      	ldr	r3, [pc, #116]	; (81d00 <Reset_Handler+0x88>)
   81c8c:	4a1d      	ldr	r2, [pc, #116]	; (81d04 <Reset_Handler+0x8c>)
   81c8e:	429a      	cmp	r2, r3
   81c90:	d30f      	bcc.n	81cb2 <Reset_Handler+0x3a>
   81c92:	e01a      	b.n	81cca <Reset_Handler+0x52>
   81c94:	4917      	ldr	r1, [pc, #92]	; (81cf4 <Reset_Handler+0x7c>)
   81c96:	4b1c      	ldr	r3, [pc, #112]	; (81d08 <Reset_Handler+0x90>)
   81c98:	1a5b      	subs	r3, r3, r1
   81c9a:	f023 0303 	bic.w	r3, r3, #3
   81c9e:	3304      	adds	r3, #4
   81ca0:	4a15      	ldr	r2, [pc, #84]	; (81cf8 <Reset_Handler+0x80>)
   81ca2:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81ca4:	f852 0b04 	ldr.w	r0, [r2], #4
   81ca8:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81cac:	429a      	cmp	r2, r3
   81cae:	d1f9      	bne.n	81ca4 <Reset_Handler+0x2c>
   81cb0:	e7eb      	b.n	81c8a <Reset_Handler+0x12>
   81cb2:	4b16      	ldr	r3, [pc, #88]	; (81d0c <Reset_Handler+0x94>)
   81cb4:	4a16      	ldr	r2, [pc, #88]	; (81d10 <Reset_Handler+0x98>)
   81cb6:	1ad2      	subs	r2, r2, r3
   81cb8:	f022 0203 	bic.w	r2, r2, #3
   81cbc:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81cbe:	3b04      	subs	r3, #4
		*pDest++ = 0;
   81cc0:	2100      	movs	r1, #0
   81cc2:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81cc6:	4293      	cmp	r3, r2
   81cc8:	d1fb      	bne.n	81cc2 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81cca:	4b12      	ldr	r3, [pc, #72]	; (81d14 <Reset_Handler+0x9c>)
   81ccc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81cd0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81cd4:	4910      	ldr	r1, [pc, #64]	; (81d18 <Reset_Handler+0xa0>)
   81cd6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81cd8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81ce0:	d203      	bcs.n	81cea <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81ce2:	688b      	ldr	r3, [r1, #8]
   81ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81ce8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81cea:	4b0c      	ldr	r3, [pc, #48]	; (81d1c <Reset_Handler+0xa4>)
   81cec:	4798      	blx	r3

	/* Branch to main function */
	main();
   81cee:	4b0c      	ldr	r3, [pc, #48]	; (81d20 <Reset_Handler+0xa8>)
   81cf0:	4798      	blx	r3
   81cf2:	e7fe      	b.n	81cf2 <Reset_Handler+0x7a>
   81cf4:	20070000 	.word	0x20070000
   81cf8:	000852e8 	.word	0x000852e8
   81cfc:	200709a4 	.word	0x200709a4
   81d00:	2007abcc 	.word	0x2007abcc
   81d04:	200709a8 	.word	0x200709a8
   81d08:	200709a3 	.word	0x200709a3
   81d0c:	200709ac 	.word	0x200709ac
   81d10:	2007abcf 	.word	0x2007abcf
   81d14:	00080000 	.word	0x00080000
   81d18:	e000ed00 	.word	0xe000ed00
   81d1c:	000821c9 	.word	0x000821c9
   81d20:	0008203d 	.word	0x0008203d

00081d24 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81d24:	4b3e      	ldr	r3, [pc, #248]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81d28:	f003 0303 	and.w	r3, r3, #3
   81d2c:	2b03      	cmp	r3, #3
   81d2e:	d85f      	bhi.n	81df0 <SystemCoreClockUpdate+0xcc>
   81d30:	e8df f003 	tbb	[pc, r3]
   81d34:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81d38:	4b3a      	ldr	r3, [pc, #232]	; (81e24 <SystemCoreClockUpdate+0x100>)
   81d3a:	695b      	ldr	r3, [r3, #20]
   81d3c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81d40:	bf14      	ite	ne
   81d42:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81d46:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81d4a:	4b37      	ldr	r3, [pc, #220]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81d4c:	601a      	str	r2, [r3, #0]
   81d4e:	e04f      	b.n	81df0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81d50:	4b33      	ldr	r3, [pc, #204]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81d52:	6a1b      	ldr	r3, [r3, #32]
   81d54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81d58:	d003      	beq.n	81d62 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81d5a:	4a34      	ldr	r2, [pc, #208]	; (81e2c <SystemCoreClockUpdate+0x108>)
   81d5c:	4b32      	ldr	r3, [pc, #200]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81d5e:	601a      	str	r2, [r3, #0]
   81d60:	e046      	b.n	81df0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81d62:	4a33      	ldr	r2, [pc, #204]	; (81e30 <SystemCoreClockUpdate+0x10c>)
   81d64:	4b30      	ldr	r3, [pc, #192]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81d66:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81d68:	4b2d      	ldr	r3, [pc, #180]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81d6a:	6a1b      	ldr	r3, [r3, #32]
   81d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81d70:	2b10      	cmp	r3, #16
   81d72:	d002      	beq.n	81d7a <SystemCoreClockUpdate+0x56>
   81d74:	2b20      	cmp	r3, #32
   81d76:	d004      	beq.n	81d82 <SystemCoreClockUpdate+0x5e>
   81d78:	e03a      	b.n	81df0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81d7a:	4a2e      	ldr	r2, [pc, #184]	; (81e34 <SystemCoreClockUpdate+0x110>)
   81d7c:	4b2a      	ldr	r3, [pc, #168]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81d7e:	601a      	str	r2, [r3, #0]
				break;
   81d80:	e036      	b.n	81df0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81d82:	4a2a      	ldr	r2, [pc, #168]	; (81e2c <SystemCoreClockUpdate+0x108>)
   81d84:	4b28      	ldr	r3, [pc, #160]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81d86:	601a      	str	r2, [r3, #0]
				break;
   81d88:	e032      	b.n	81df0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81d8a:	4b25      	ldr	r3, [pc, #148]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81d8c:	6a1b      	ldr	r3, [r3, #32]
   81d8e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81d92:	d003      	beq.n	81d9c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81d94:	4a25      	ldr	r2, [pc, #148]	; (81e2c <SystemCoreClockUpdate+0x108>)
   81d96:	4b24      	ldr	r3, [pc, #144]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81d98:	601a      	str	r2, [r3, #0]
   81d9a:	e012      	b.n	81dc2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81d9c:	4a24      	ldr	r2, [pc, #144]	; (81e30 <SystemCoreClockUpdate+0x10c>)
   81d9e:	4b22      	ldr	r3, [pc, #136]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81da0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81da2:	4b1f      	ldr	r3, [pc, #124]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81da4:	6a1b      	ldr	r3, [r3, #32]
   81da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81daa:	2b10      	cmp	r3, #16
   81dac:	d002      	beq.n	81db4 <SystemCoreClockUpdate+0x90>
   81dae:	2b20      	cmp	r3, #32
   81db0:	d004      	beq.n	81dbc <SystemCoreClockUpdate+0x98>
   81db2:	e006      	b.n	81dc2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81db4:	4a1f      	ldr	r2, [pc, #124]	; (81e34 <SystemCoreClockUpdate+0x110>)
   81db6:	4b1c      	ldr	r3, [pc, #112]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81db8:	601a      	str	r2, [r3, #0]
				break;
   81dba:	e002      	b.n	81dc2 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81dbc:	4a1b      	ldr	r2, [pc, #108]	; (81e2c <SystemCoreClockUpdate+0x108>)
   81dbe:	4b1a      	ldr	r3, [pc, #104]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81dc0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81dc2:	4b17      	ldr	r3, [pc, #92]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81dc6:	f003 0303 	and.w	r3, r3, #3
   81dca:	2b02      	cmp	r3, #2
   81dcc:	d10d      	bne.n	81dea <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81dce:	4a14      	ldr	r2, [pc, #80]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81dd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81dd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81dd4:	4814      	ldr	r0, [pc, #80]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81dd6:	f3c3 410a 	ubfx	r1, r3, #16, #11
   81dda:	6803      	ldr	r3, [r0, #0]
   81ddc:	fb01 3303 	mla	r3, r1, r3, r3
   81de0:	b2d2      	uxtb	r2, r2
   81de2:	fbb3 f3f2 	udiv	r3, r3, r2
   81de6:	6003      	str	r3, [r0, #0]
   81de8:	e002      	b.n	81df0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81dea:	4a13      	ldr	r2, [pc, #76]	; (81e38 <SystemCoreClockUpdate+0x114>)
   81dec:	4b0e      	ldr	r3, [pc, #56]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81dee:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81df0:	4b0b      	ldr	r3, [pc, #44]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81df8:	2b70      	cmp	r3, #112	; 0x70
   81dfa:	d107      	bne.n	81e0c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81dfc:	4a0a      	ldr	r2, [pc, #40]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81dfe:	6813      	ldr	r3, [r2, #0]
   81e00:	490e      	ldr	r1, [pc, #56]	; (81e3c <SystemCoreClockUpdate+0x118>)
   81e02:	fba1 1303 	umull	r1, r3, r1, r3
   81e06:	085b      	lsrs	r3, r3, #1
   81e08:	6013      	str	r3, [r2, #0]
   81e0a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81e0c:	4b04      	ldr	r3, [pc, #16]	; (81e20 <SystemCoreClockUpdate+0xfc>)
   81e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e10:	4905      	ldr	r1, [pc, #20]	; (81e28 <SystemCoreClockUpdate+0x104>)
   81e12:	f3c3 1202 	ubfx	r2, r3, #4, #3
   81e16:	680b      	ldr	r3, [r1, #0]
   81e18:	40d3      	lsrs	r3, r2
   81e1a:	600b      	str	r3, [r1, #0]
   81e1c:	4770      	bx	lr
   81e1e:	bf00      	nop
   81e20:	400e0600 	.word	0x400e0600
   81e24:	400e1a10 	.word	0x400e1a10
   81e28:	20070138 	.word	0x20070138
   81e2c:	00b71b00 	.word	0x00b71b00
   81e30:	003d0900 	.word	0x003d0900
   81e34:	007a1200 	.word	0x007a1200
   81e38:	0e4e1c00 	.word	0x0e4e1c00
   81e3c:	aaaaaaab 	.word	0xaaaaaaab

00081e40 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81e40:	4b09      	ldr	r3, [pc, #36]	; (81e68 <_sbrk+0x28>)
   81e42:	681b      	ldr	r3, [r3, #0]
   81e44:	b913      	cbnz	r3, 81e4c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81e46:	4a09      	ldr	r2, [pc, #36]	; (81e6c <_sbrk+0x2c>)
   81e48:	4b07      	ldr	r3, [pc, #28]	; (81e68 <_sbrk+0x28>)
   81e4a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81e4c:	4b06      	ldr	r3, [pc, #24]	; (81e68 <_sbrk+0x28>)
   81e4e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81e50:	181a      	adds	r2, r3, r0
   81e52:	4907      	ldr	r1, [pc, #28]	; (81e70 <_sbrk+0x30>)
   81e54:	4291      	cmp	r1, r2
   81e56:	db04      	blt.n	81e62 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81e58:	4610      	mov	r0, r2
   81e5a:	4a03      	ldr	r2, [pc, #12]	; (81e68 <_sbrk+0x28>)
   81e5c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81e5e:	4618      	mov	r0, r3
   81e60:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81e62:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81e66:	4770      	bx	lr
   81e68:	2007ab7c 	.word	0x2007ab7c
   81e6c:	2007cbd0 	.word	0x2007cbd0
   81e70:	20087ffc 	.word	0x20087ffc

00081e74 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81e74:	f04f 30ff 	mov.w	r0, #4294967295
   81e78:	4770      	bx	lr
   81e7a:	bf00      	nop

00081e7c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81e80:	604b      	str	r3, [r1, #4]

	return 0;
}
   81e82:	2000      	movs	r0, #0
   81e84:	4770      	bx	lr
   81e86:	bf00      	nop

00081e88 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81e88:	2001      	movs	r0, #1
   81e8a:	4770      	bx	lr

00081e8c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81e8c:	2000      	movs	r0, #0
   81e8e:	4770      	bx	lr

00081e90 <vManagerTask>:
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vManagerTask( void *pvParameters )
{
   81e90:	b570      	push	{r4, r5, r6, lr}
   81e92:	b082      	sub	sp, #8
unsigned int xWorkTicketId;
portBASE_TYPE xStatus;
    /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
    xSemaphoreGive( xBinarySemaphore);
   81e94:	2300      	movs	r3, #0
   81e96:	461a      	mov	r2, r3
   81e98:	4619      	mov	r1, r3
   81e9a:	4810      	ldr	r0, [pc, #64]	; (81edc <vManagerTask+0x4c>)
   81e9c:	6800      	ldr	r0, [r0, #0]
   81e9e:	4c10      	ldr	r4, [pc, #64]	; (81ee0 <vManagerTask+0x50>)
   81ea0:	47a0      	blx	r4

    for( ;; )
    {	
        /* get a work ticket id */
        xWorkTicketId = ( rand() & 0x1FF );
   81ea2:	4e10      	ldr	r6, [pc, #64]	; (81ee4 <vManagerTask+0x54>)
		
		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY );
   81ea4:	4d10      	ldr	r5, [pc, #64]	; (81ee8 <vManagerTask+0x58>)
    xSemaphoreGive( xBinarySemaphore);

    for( ;; )
    {	
        /* get a work ticket id */
        xWorkTicketId = ( rand() & 0x1FF );
   81ea6:	47b0      	blx	r6
   81ea8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   81eac:	a902      	add	r1, sp, #8
   81eae:	f841 0d04 	str.w	r0, [r1, #-4]!
		
		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY );
   81eb2:	2300      	movs	r3, #0
   81eb4:	f04f 32ff 	mov.w	r2, #4294967295
   81eb8:	6828      	ldr	r0, [r5, #0]
   81eba:	47a0      	blx	r4
		
		if( xStatus != pdPASS )
   81ebc:	2801      	cmp	r0, #1
   81ebe:	d003      	beq.n	81ec8 <vManagerTask+0x38>
		{
			printf( "Could not send to the queue.\n" );
   81ec0:	480a      	ldr	r0, [pc, #40]	; (81eec <vManagerTask+0x5c>)
   81ec2:	4b0b      	ldr	r3, [pc, #44]	; (81ef0 <vManagerTask+0x60>)
   81ec4:	4798      	blx	r3
   81ec6:	e7ee      	b.n	81ea6 <vManagerTask+0x16>
			
		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xBinarySemaphore);
   81ec8:	2300      	movs	r3, #0
   81eca:	461a      	mov	r2, r3
   81ecc:	4619      	mov	r1, r3
   81ece:	4803      	ldr	r0, [pc, #12]	; (81edc <vManagerTask+0x4c>)
   81ed0:	6800      	ldr	r0, [r0, #0]
   81ed2:	47a0      	blx	r4
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
   81ed4:	4b07      	ldr	r3, [pc, #28]	; (81ef4 <vManagerTask+0x64>)
   81ed6:	4798      	blx	r3
   81ed8:	e7e5      	b.n	81ea6 <vManagerTask+0x16>
   81eda:	bf00      	nop
   81edc:	2007abc0 	.word	0x2007abc0
   81ee0:	0008070d 	.word	0x0008070d
   81ee4:	000823dd 	.word	0x000823dd
   81ee8:	2007abc4 	.word	0x2007abc4
   81eec:	000851dc 	.word	0x000851dc
   81ef0:	00082219 	.word	0x00082219
   81ef4:	000802a9 	.word	0x000802a9

00081ef8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   81efa:	b083      	sub	sp, #12
   81efc:	4604      	mov	r4, r0
   81efe:	460d      	mov	r5, r1
	uint32_t val = 0;
   81f00:	2300      	movs	r3, #0
   81f02:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81f04:	4b1f      	ldr	r3, [pc, #124]	; (81f84 <usart_serial_getchar+0x8c>)
   81f06:	4298      	cmp	r0, r3
   81f08:	d107      	bne.n	81f1a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81f0a:	461f      	mov	r7, r3
   81f0c:	4e1e      	ldr	r6, [pc, #120]	; (81f88 <usart_serial_getchar+0x90>)
   81f0e:	4629      	mov	r1, r5
   81f10:	4638      	mov	r0, r7
   81f12:	47b0      	blx	r6
   81f14:	2800      	cmp	r0, #0
   81f16:	d1fa      	bne.n	81f0e <usart_serial_getchar+0x16>
   81f18:	e019      	b.n	81f4e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81f1a:	4b1c      	ldr	r3, [pc, #112]	; (81f8c <usart_serial_getchar+0x94>)
   81f1c:	4298      	cmp	r0, r3
   81f1e:	d109      	bne.n	81f34 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81f20:	461f      	mov	r7, r3
   81f22:	4e1b      	ldr	r6, [pc, #108]	; (81f90 <usart_serial_getchar+0x98>)
   81f24:	a901      	add	r1, sp, #4
   81f26:	4638      	mov	r0, r7
   81f28:	47b0      	blx	r6
   81f2a:	2800      	cmp	r0, #0
   81f2c:	d1fa      	bne.n	81f24 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81f2e:	9b01      	ldr	r3, [sp, #4]
   81f30:	702b      	strb	r3, [r5, #0]
   81f32:	e019      	b.n	81f68 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81f34:	4b17      	ldr	r3, [pc, #92]	; (81f94 <usart_serial_getchar+0x9c>)
   81f36:	4298      	cmp	r0, r3
   81f38:	d109      	bne.n	81f4e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81f3a:	461e      	mov	r6, r3
   81f3c:	4c14      	ldr	r4, [pc, #80]	; (81f90 <usart_serial_getchar+0x98>)
   81f3e:	a901      	add	r1, sp, #4
   81f40:	4630      	mov	r0, r6
   81f42:	47a0      	blx	r4
   81f44:	2800      	cmp	r0, #0
   81f46:	d1fa      	bne.n	81f3e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81f48:	9b01      	ldr	r3, [sp, #4]
   81f4a:	702b      	strb	r3, [r5, #0]
   81f4c:	e018      	b.n	81f80 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81f4e:	4b12      	ldr	r3, [pc, #72]	; (81f98 <usart_serial_getchar+0xa0>)
   81f50:	429c      	cmp	r4, r3
   81f52:	d109      	bne.n	81f68 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81f54:	461e      	mov	r6, r3
   81f56:	4c0e      	ldr	r4, [pc, #56]	; (81f90 <usart_serial_getchar+0x98>)
   81f58:	a901      	add	r1, sp, #4
   81f5a:	4630      	mov	r0, r6
   81f5c:	47a0      	blx	r4
   81f5e:	2800      	cmp	r0, #0
   81f60:	d1fa      	bne.n	81f58 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   81f62:	9b01      	ldr	r3, [sp, #4]
   81f64:	702b      	strb	r3, [r5, #0]
   81f66:	e00b      	b.n	81f80 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81f68:	4b0c      	ldr	r3, [pc, #48]	; (81f9c <usart_serial_getchar+0xa4>)
   81f6a:	429c      	cmp	r4, r3
   81f6c:	d108      	bne.n	81f80 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81f6e:	461e      	mov	r6, r3
   81f70:	4c07      	ldr	r4, [pc, #28]	; (81f90 <usart_serial_getchar+0x98>)
   81f72:	a901      	add	r1, sp, #4
   81f74:	4630      	mov	r0, r6
   81f76:	47a0      	blx	r4
   81f78:	2800      	cmp	r0, #0
   81f7a:	d1fa      	bne.n	81f72 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81f7c:	9b01      	ldr	r3, [sp, #4]
   81f7e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81f80:	b003      	add	sp, #12
   81f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81f84:	400e0800 	.word	0x400e0800
   81f88:	00081785 	.word	0x00081785
   81f8c:	40098000 	.word	0x40098000
   81f90:	000801a1 	.word	0x000801a1
   81f94:	4009c000 	.word	0x4009c000
   81f98:	400a0000 	.word	0x400a0000
   81f9c:	400a4000 	.word	0x400a4000

00081fa0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81fa0:	b570      	push	{r4, r5, r6, lr}
   81fa2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81fa4:	4b1e      	ldr	r3, [pc, #120]	; (82020 <usart_serial_putchar+0x80>)
   81fa6:	4298      	cmp	r0, r3
   81fa8:	d108      	bne.n	81fbc <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   81faa:	461e      	mov	r6, r3
   81fac:	4d1d      	ldr	r5, [pc, #116]	; (82024 <usart_serial_putchar+0x84>)
   81fae:	4621      	mov	r1, r4
   81fb0:	4630      	mov	r0, r6
   81fb2:	47a8      	blx	r5
   81fb4:	2800      	cmp	r0, #0
   81fb6:	d1fa      	bne.n	81fae <usart_serial_putchar+0xe>
		return 1;
   81fb8:	2001      	movs	r0, #1
   81fba:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81fbc:	4b1a      	ldr	r3, [pc, #104]	; (82028 <usart_serial_putchar+0x88>)
   81fbe:	4298      	cmp	r0, r3
   81fc0:	d108      	bne.n	81fd4 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   81fc2:	461e      	mov	r6, r3
   81fc4:	4d19      	ldr	r5, [pc, #100]	; (8202c <usart_serial_putchar+0x8c>)
   81fc6:	4621      	mov	r1, r4
   81fc8:	4630      	mov	r0, r6
   81fca:	47a8      	blx	r5
   81fcc:	2800      	cmp	r0, #0
   81fce:	d1fa      	bne.n	81fc6 <usart_serial_putchar+0x26>
		return 1;
   81fd0:	2001      	movs	r0, #1
   81fd2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81fd4:	4b16      	ldr	r3, [pc, #88]	; (82030 <usart_serial_putchar+0x90>)
   81fd6:	4298      	cmp	r0, r3
   81fd8:	d108      	bne.n	81fec <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   81fda:	461e      	mov	r6, r3
   81fdc:	4d13      	ldr	r5, [pc, #76]	; (8202c <usart_serial_putchar+0x8c>)
   81fde:	4621      	mov	r1, r4
   81fe0:	4630      	mov	r0, r6
   81fe2:	47a8      	blx	r5
   81fe4:	2800      	cmp	r0, #0
   81fe6:	d1fa      	bne.n	81fde <usart_serial_putchar+0x3e>
		return 1;
   81fe8:	2001      	movs	r0, #1
   81fea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81fec:	4b11      	ldr	r3, [pc, #68]	; (82034 <usart_serial_putchar+0x94>)
   81fee:	4298      	cmp	r0, r3
   81ff0:	d108      	bne.n	82004 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   81ff2:	461e      	mov	r6, r3
   81ff4:	4d0d      	ldr	r5, [pc, #52]	; (8202c <usart_serial_putchar+0x8c>)
   81ff6:	4621      	mov	r1, r4
   81ff8:	4630      	mov	r0, r6
   81ffa:	47a8      	blx	r5
   81ffc:	2800      	cmp	r0, #0
   81ffe:	d1fa      	bne.n	81ff6 <usart_serial_putchar+0x56>
		return 1;
   82000:	2001      	movs	r0, #1
   82002:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82004:	4b0c      	ldr	r3, [pc, #48]	; (82038 <usart_serial_putchar+0x98>)
   82006:	4298      	cmp	r0, r3
   82008:	d108      	bne.n	8201c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   8200a:	461e      	mov	r6, r3
   8200c:	4d07      	ldr	r5, [pc, #28]	; (8202c <usart_serial_putchar+0x8c>)
   8200e:	4621      	mov	r1, r4
   82010:	4630      	mov	r0, r6
   82012:	47a8      	blx	r5
   82014:	2800      	cmp	r0, #0
   82016:	d1fa      	bne.n	8200e <usart_serial_putchar+0x6e>
		return 1;
   82018:	2001      	movs	r0, #1
   8201a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8201c:	2000      	movs	r0, #0
}
   8201e:	bd70      	pop	{r4, r5, r6, pc}
   82020:	400e0800 	.word	0x400e0800
   82024:	00081775 	.word	0x00081775
   82028:	40098000 	.word	0x40098000
   8202c:	0008018d 	.word	0x0008018d
   82030:	4009c000 	.word	0x4009c000
   82034:	400a0000 	.word	0x400a0000
   82038:	400a4000 	.word	0x400a4000

0008203c <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main( void )
{
   8203c:	b500      	push	{lr}
   8203e:	b089      	sub	sp, #36	; 0x24
	/* This function initializes the MCU clock  */
	sysclk_init();
   82040:	4b2f      	ldr	r3, [pc, #188]	; (82100 <main+0xc4>)
   82042:	4798      	blx	r3

	/* Board initialization */
	board_init();
   82044:	4b2f      	ldr	r3, [pc, #188]	; (82104 <main+0xc8>)
   82046:	4798      	blx	r3
   82048:	2008      	movs	r0, #8
   8204a:	4d2f      	ldr	r5, [pc, #188]	; (82108 <main+0xcc>)
   8204c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8204e:	4c2f      	ldr	r4, [pc, #188]	; (8210c <main+0xd0>)
   82050:	4b2f      	ldr	r3, [pc, #188]	; (82110 <main+0xd4>)
   82052:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82054:	4a2f      	ldr	r2, [pc, #188]	; (82114 <main+0xd8>)
   82056:	4b30      	ldr	r3, [pc, #192]	; (82118 <main+0xdc>)
   82058:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8205a:	4a30      	ldr	r2, [pc, #192]	; (8211c <main+0xe0>)
   8205c:	4b30      	ldr	r3, [pc, #192]	; (82120 <main+0xe4>)
   8205e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82060:	4b30      	ldr	r3, [pc, #192]	; (82124 <main+0xe8>)
   82062:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   82064:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82068:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   8206a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8206e:	9307      	str	r3, [sp, #28]
   82070:	2008      	movs	r0, #8
   82072:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82074:	a905      	add	r1, sp, #20
   82076:	4620      	mov	r0, r4
   82078:	4b2b      	ldr	r3, [pc, #172]	; (82128 <main+0xec>)
   8207a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8207c:	4d2b      	ldr	r5, [pc, #172]	; (8212c <main+0xf0>)
   8207e:	682b      	ldr	r3, [r5, #0]
   82080:	2100      	movs	r1, #0
   82082:	6898      	ldr	r0, [r3, #8]
   82084:	4c2a      	ldr	r4, [pc, #168]	; (82130 <main+0xf4>)
   82086:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82088:	682b      	ldr	r3, [r5, #0]
   8208a:	2100      	movs	r1, #0
   8208c:	6858      	ldr	r0, [r3, #4]
   8208e:	47a0      	blx	r4
	
	/* Initialize the serial I/O(console ) */
	configure_console();

    /* Before a semaphore is used it must be explicitly created.  In this example a binary semaphore is created. */
    vSemaphoreCreateBinary( xBinarySemaphore );
   82090:	2203      	movs	r2, #3
   82092:	2100      	movs	r1, #0
   82094:	2001      	movs	r0, #1
   82096:	4b27      	ldr	r3, [pc, #156]	; (82134 <main+0xf8>)
   82098:	4798      	blx	r3
   8209a:	4b27      	ldr	r3, [pc, #156]	; (82138 <main+0xfc>)
   8209c:	6018      	str	r0, [r3, #0]
   8209e:	b120      	cbz	r0, 820aa <main+0x6e>
   820a0:	2300      	movs	r3, #0
   820a2:	461a      	mov	r2, r3
   820a4:	4619      	mov	r1, r3
   820a6:	4c25      	ldr	r4, [pc, #148]	; (8213c <main+0x100>)
   820a8:	47a0      	blx	r4
	
	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
   820aa:	2200      	movs	r2, #0
   820ac:	2104      	movs	r1, #4
   820ae:	2001      	movs	r0, #1
   820b0:	4b20      	ldr	r3, [pc, #128]	; (82134 <main+0xf8>)
   820b2:	4798      	blx	r3
   820b4:	4b22      	ldr	r3, [pc, #136]	; (82140 <main+0x104>)
   820b6:	6018      	str	r0, [r3, #0]
	
	/* The tasks are going to use a pseudo random delay, seed the random number generator. */
	srand( 567 );
   820b8:	f240 2037 	movw	r0, #567	; 0x237
   820bc:	4b21      	ldr	r3, [pc, #132]	; (82144 <main+0x108>)
   820be:	4798      	blx	r3

    /* Check the semaphore and queue was created successfully. */
    if( (xBinarySemaphore != NULL) && (xWorkQueue != NULL) )
   820c0:	4b1d      	ldr	r3, [pc, #116]	; (82138 <main+0xfc>)
   820c2:	681b      	ldr	r3, [r3, #0]
   820c4:	b1d3      	cbz	r3, 820fc <main+0xc0>
   820c6:	4b1e      	ldr	r3, [pc, #120]	; (82140 <main+0x104>)
   820c8:	681b      	ldr	r3, [r3, #0]
   820ca:	b1bb      	cbz	r3, 820fc <main+0xc0>
    {

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
        xTaskCreate( vManagerTask, "Manager", 240, NULL, 3, NULL );
   820cc:	2400      	movs	r4, #0
   820ce:	9403      	str	r4, [sp, #12]
   820d0:	9402      	str	r4, [sp, #8]
   820d2:	9401      	str	r4, [sp, #4]
   820d4:	2303      	movs	r3, #3
   820d6:	9300      	str	r3, [sp, #0]
   820d8:	4623      	mov	r3, r4
   820da:	22f0      	movs	r2, #240	; 0xf0
   820dc:	491a      	ldr	r1, [pc, #104]	; (82148 <main+0x10c>)
   820de:	481b      	ldr	r0, [pc, #108]	; (8214c <main+0x110>)
   820e0:	4d1b      	ldr	r5, [pc, #108]	; (82150 <main+0x114>)
   820e2:	47a8      	blx	r5

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 240, NULL, 1, NULL );
   820e4:	9403      	str	r4, [sp, #12]
   820e6:	9402      	str	r4, [sp, #8]
   820e8:	9401      	str	r4, [sp, #4]
   820ea:	2301      	movs	r3, #1
   820ec:	9300      	str	r3, [sp, #0]
   820ee:	4623      	mov	r3, r4
   820f0:	22f0      	movs	r2, #240	; 0xf0
   820f2:	4918      	ldr	r1, [pc, #96]	; (82154 <main+0x118>)
   820f4:	4818      	ldr	r0, [pc, #96]	; (82158 <main+0x11c>)
   820f6:	47a8      	blx	r5

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
   820f8:	4b18      	ldr	r3, [pc, #96]	; (8215c <main+0x120>)
   820fa:	4798      	blx	r3
   820fc:	e7fe      	b.n	820fc <main+0xc0>
   820fe:	bf00      	nop
   82100:	00081799 	.word	0x00081799
   82104:	000817fd 	.word	0x000817fd
   82108:	00081c21 	.word	0x00081c21
   8210c:	400e0800 	.word	0x400e0800
   82110:	2007abbc 	.word	0x2007abbc
   82114:	00081fa1 	.word	0x00081fa1
   82118:	2007abb8 	.word	0x2007abb8
   8211c:	00081ef9 	.word	0x00081ef9
   82120:	2007abb4 	.word	0x2007abb4
   82124:	0501bd00 	.word	0x0501bd00
   82128:	0008173d 	.word	0x0008173d
   8212c:	20070568 	.word	0x20070568
   82130:	0008241d 	.word	0x0008241d
   82134:	000806b5 	.word	0x000806b5
   82138:	2007abc0 	.word	0x2007abc0
   8213c:	0008070d 	.word	0x0008070d
   82140:	2007abc4 	.word	0x2007abc4
   82144:	000823c9 	.word	0x000823c9
   82148:	000851fc 	.word	0x000851fc
   8214c:	00081e91 	.word	0x00081e91
   82150:	00080abd 	.word	0x00080abd
   82154:	00085204 	.word	0x00085204
   82158:	00082175 	.word	0x00082175
   8215c:	00080cc1 	.word	0x00080cc1

00082160 <EmployeeDoWork>:
    }
}
/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
   82160:	b508      	push	{r3, lr}
	
	/* implement the work according to TickedID */
	printf ( " Employee : Working on Ticked id : %d\n",TicketId);
   82162:	4601      	mov	r1, r0
   82164:	4801      	ldr	r0, [pc, #4]	; (8216c <EmployeeDoWork+0xc>)
   82166:	4b02      	ldr	r3, [pc, #8]	; (82170 <EmployeeDoWork+0x10>)
   82168:	4798      	blx	r3
   8216a:	bd08      	pop	{r3, pc}
   8216c:	00085210 	.word	0x00085210
   82170:	00082219 	.word	0x00082219

00082174 <vEmployeeTask>:
	
}

static void vEmployeeTask( void *pvParameters )
{
   82174:	b570      	push	{r4, r5, r6, lr}
   82176:	b082      	sub	sp, #8
portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xBinarySemaphore, 0 );
   82178:	4e0c      	ldr	r6, [pc, #48]	; (821ac <vEmployeeTask+0x38>)
   8217a:	2500      	movs	r5, #0
   8217c:	4c0c      	ldr	r4, [pc, #48]	; (821b0 <vEmployeeTask+0x3c>)
   8217e:	462b      	mov	r3, r5
   82180:	462a      	mov	r2, r5
   82182:	4629      	mov	r1, r5
   82184:	6830      	ldr	r0, [r6, #0]
   82186:	47a0      	blx	r4
		
		/*if we are here means, Semaphore take successfull. So, get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
   82188:	462b      	mov	r3, r5
   8218a:	462a      	mov	r2, r5
   8218c:	f10d 0107 	add.w	r1, sp, #7
   82190:	4808      	ldr	r0, [pc, #32]	; (821b4 <vEmployeeTask+0x40>)
   82192:	6800      	ldr	r0, [r0, #0]
   82194:	47a0      	blx	r4

		if( xStatus == pdPASS )
   82196:	2801      	cmp	r0, #1
   82198:	d104      	bne.n	821a4 <vEmployeeTask+0x30>
		{
		  /* employe may decode the xWorkTicketId in thish function to do the work*/
			EmployeeDoWork(xWorkTicketId);
   8219a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   8219e:	4b06      	ldr	r3, [pc, #24]	; (821b8 <vEmployeeTask+0x44>)
   821a0:	4798      	blx	r3
   821a2:	e7ec      	b.n	8217e <vEmployeeTask+0xa>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			printf( "Error getting the xWorkTicketId from queue\n" );
   821a4:	4805      	ldr	r0, [pc, #20]	; (821bc <vEmployeeTask+0x48>)
   821a6:	4b06      	ldr	r3, [pc, #24]	; (821c0 <vEmployeeTask+0x4c>)
   821a8:	4798      	blx	r3
   821aa:	e7e8      	b.n	8217e <vEmployeeTask+0xa>
   821ac:	2007abc0 	.word	0x2007abc0
   821b0:	000808bd 	.word	0x000808bd
   821b4:	2007abc4 	.word	0x2007abc4
   821b8:	00082161 	.word	0x00082161
   821bc:	00085238 	.word	0x00085238
   821c0:	00082219 	.word	0x00082219

000821c4 <vApplicationMallocFailedHook>:
    }
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   821c4:	e7fe      	b.n	821c4 <vApplicationMallocFailedHook>
   821c6:	bf00      	nop

000821c8 <__libc_init_array>:
   821c8:	b570      	push	{r4, r5, r6, lr}
   821ca:	4e0f      	ldr	r6, [pc, #60]	; (82208 <__libc_init_array+0x40>)
   821cc:	4d0f      	ldr	r5, [pc, #60]	; (8220c <__libc_init_array+0x44>)
   821ce:	1b76      	subs	r6, r6, r5
   821d0:	10b6      	asrs	r6, r6, #2
   821d2:	bf18      	it	ne
   821d4:	2400      	movne	r4, #0
   821d6:	d005      	beq.n	821e4 <__libc_init_array+0x1c>
   821d8:	3401      	adds	r4, #1
   821da:	f855 3b04 	ldr.w	r3, [r5], #4
   821de:	4798      	blx	r3
   821e0:	42a6      	cmp	r6, r4
   821e2:	d1f9      	bne.n	821d8 <__libc_init_array+0x10>
   821e4:	4e0a      	ldr	r6, [pc, #40]	; (82210 <__libc_init_array+0x48>)
   821e6:	4d0b      	ldr	r5, [pc, #44]	; (82214 <__libc_init_array+0x4c>)
   821e8:	f003 f868 	bl	852bc <_init>
   821ec:	1b76      	subs	r6, r6, r5
   821ee:	10b6      	asrs	r6, r6, #2
   821f0:	bf18      	it	ne
   821f2:	2400      	movne	r4, #0
   821f4:	d006      	beq.n	82204 <__libc_init_array+0x3c>
   821f6:	3401      	adds	r4, #1
   821f8:	f855 3b04 	ldr.w	r3, [r5], #4
   821fc:	4798      	blx	r3
   821fe:	42a6      	cmp	r6, r4
   82200:	d1f9      	bne.n	821f6 <__libc_init_array+0x2e>
   82202:	bd70      	pop	{r4, r5, r6, pc}
   82204:	bd70      	pop	{r4, r5, r6, pc}
   82206:	bf00      	nop
   82208:	000852c8 	.word	0x000852c8
   8220c:	000852c8 	.word	0x000852c8
   82210:	000852d0 	.word	0x000852d0
   82214:	000852c8 	.word	0x000852c8

00082218 <iprintf>:
   82218:	b40f      	push	{r0, r1, r2, r3}
   8221a:	b510      	push	{r4, lr}
   8221c:	4b07      	ldr	r3, [pc, #28]	; (8223c <iprintf+0x24>)
   8221e:	b082      	sub	sp, #8
   82220:	ac04      	add	r4, sp, #16
   82222:	f854 2b04 	ldr.w	r2, [r4], #4
   82226:	6818      	ldr	r0, [r3, #0]
   82228:	4623      	mov	r3, r4
   8222a:	6881      	ldr	r1, [r0, #8]
   8222c:	9401      	str	r4, [sp, #4]
   8222e:	f000 fa43 	bl	826b8 <_vfiprintf_r>
   82232:	b002      	add	sp, #8
   82234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82238:	b004      	add	sp, #16
   8223a:	4770      	bx	lr
   8223c:	20070568 	.word	0x20070568

00082240 <memcpy>:
   82240:	4684      	mov	ip, r0
   82242:	ea41 0300 	orr.w	r3, r1, r0
   82246:	f013 0303 	ands.w	r3, r3, #3
   8224a:	d149      	bne.n	822e0 <memcpy+0xa0>
   8224c:	3a40      	subs	r2, #64	; 0x40
   8224e:	d323      	bcc.n	82298 <memcpy+0x58>
   82250:	680b      	ldr	r3, [r1, #0]
   82252:	6003      	str	r3, [r0, #0]
   82254:	684b      	ldr	r3, [r1, #4]
   82256:	6043      	str	r3, [r0, #4]
   82258:	688b      	ldr	r3, [r1, #8]
   8225a:	6083      	str	r3, [r0, #8]
   8225c:	68cb      	ldr	r3, [r1, #12]
   8225e:	60c3      	str	r3, [r0, #12]
   82260:	690b      	ldr	r3, [r1, #16]
   82262:	6103      	str	r3, [r0, #16]
   82264:	694b      	ldr	r3, [r1, #20]
   82266:	6143      	str	r3, [r0, #20]
   82268:	698b      	ldr	r3, [r1, #24]
   8226a:	6183      	str	r3, [r0, #24]
   8226c:	69cb      	ldr	r3, [r1, #28]
   8226e:	61c3      	str	r3, [r0, #28]
   82270:	6a0b      	ldr	r3, [r1, #32]
   82272:	6203      	str	r3, [r0, #32]
   82274:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82276:	6243      	str	r3, [r0, #36]	; 0x24
   82278:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8227a:	6283      	str	r3, [r0, #40]	; 0x28
   8227c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8227e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82280:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82282:	6303      	str	r3, [r0, #48]	; 0x30
   82284:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82286:	6343      	str	r3, [r0, #52]	; 0x34
   82288:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8228a:	6383      	str	r3, [r0, #56]	; 0x38
   8228c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8228e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82290:	3040      	adds	r0, #64	; 0x40
   82292:	3140      	adds	r1, #64	; 0x40
   82294:	3a40      	subs	r2, #64	; 0x40
   82296:	d2db      	bcs.n	82250 <memcpy+0x10>
   82298:	3230      	adds	r2, #48	; 0x30
   8229a:	d30b      	bcc.n	822b4 <memcpy+0x74>
   8229c:	680b      	ldr	r3, [r1, #0]
   8229e:	6003      	str	r3, [r0, #0]
   822a0:	684b      	ldr	r3, [r1, #4]
   822a2:	6043      	str	r3, [r0, #4]
   822a4:	688b      	ldr	r3, [r1, #8]
   822a6:	6083      	str	r3, [r0, #8]
   822a8:	68cb      	ldr	r3, [r1, #12]
   822aa:	60c3      	str	r3, [r0, #12]
   822ac:	3010      	adds	r0, #16
   822ae:	3110      	adds	r1, #16
   822b0:	3a10      	subs	r2, #16
   822b2:	d2f3      	bcs.n	8229c <memcpy+0x5c>
   822b4:	320c      	adds	r2, #12
   822b6:	d305      	bcc.n	822c4 <memcpy+0x84>
   822b8:	f851 3b04 	ldr.w	r3, [r1], #4
   822bc:	f840 3b04 	str.w	r3, [r0], #4
   822c0:	3a04      	subs	r2, #4
   822c2:	d2f9      	bcs.n	822b8 <memcpy+0x78>
   822c4:	3204      	adds	r2, #4
   822c6:	d008      	beq.n	822da <memcpy+0x9a>
   822c8:	07d2      	lsls	r2, r2, #31
   822ca:	bf1c      	itt	ne
   822cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   822d0:	f800 3b01 	strbne.w	r3, [r0], #1
   822d4:	d301      	bcc.n	822da <memcpy+0x9a>
   822d6:	880b      	ldrh	r3, [r1, #0]
   822d8:	8003      	strh	r3, [r0, #0]
   822da:	4660      	mov	r0, ip
   822dc:	4770      	bx	lr
   822de:	bf00      	nop
   822e0:	2a08      	cmp	r2, #8
   822e2:	d313      	bcc.n	8230c <memcpy+0xcc>
   822e4:	078b      	lsls	r3, r1, #30
   822e6:	d0b1      	beq.n	8224c <memcpy+0xc>
   822e8:	f010 0303 	ands.w	r3, r0, #3
   822ec:	d0ae      	beq.n	8224c <memcpy+0xc>
   822ee:	f1c3 0304 	rsb	r3, r3, #4
   822f2:	1ad2      	subs	r2, r2, r3
   822f4:	07db      	lsls	r3, r3, #31
   822f6:	bf1c      	itt	ne
   822f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   822fc:	f800 3b01 	strbne.w	r3, [r0], #1
   82300:	d3a4      	bcc.n	8224c <memcpy+0xc>
   82302:	f831 3b02 	ldrh.w	r3, [r1], #2
   82306:	f820 3b02 	strh.w	r3, [r0], #2
   8230a:	e79f      	b.n	8224c <memcpy+0xc>
   8230c:	3a04      	subs	r2, #4
   8230e:	d3d9      	bcc.n	822c4 <memcpy+0x84>
   82310:	3a01      	subs	r2, #1
   82312:	f811 3b01 	ldrb.w	r3, [r1], #1
   82316:	f800 3b01 	strb.w	r3, [r0], #1
   8231a:	d2f9      	bcs.n	82310 <memcpy+0xd0>
   8231c:	780b      	ldrb	r3, [r1, #0]
   8231e:	7003      	strb	r3, [r0, #0]
   82320:	784b      	ldrb	r3, [r1, #1]
   82322:	7043      	strb	r3, [r0, #1]
   82324:	788b      	ldrb	r3, [r1, #2]
   82326:	7083      	strb	r3, [r0, #2]
   82328:	4660      	mov	r0, ip
   8232a:	4770      	bx	lr

0008232c <memset>:
   8232c:	b470      	push	{r4, r5, r6}
   8232e:	0784      	lsls	r4, r0, #30
   82330:	d046      	beq.n	823c0 <memset+0x94>
   82332:	1e54      	subs	r4, r2, #1
   82334:	2a00      	cmp	r2, #0
   82336:	d041      	beq.n	823bc <memset+0x90>
   82338:	b2cd      	uxtb	r5, r1
   8233a:	4603      	mov	r3, r0
   8233c:	e002      	b.n	82344 <memset+0x18>
   8233e:	1e62      	subs	r2, r4, #1
   82340:	b3e4      	cbz	r4, 823bc <memset+0x90>
   82342:	4614      	mov	r4, r2
   82344:	f803 5b01 	strb.w	r5, [r3], #1
   82348:	079a      	lsls	r2, r3, #30
   8234a:	d1f8      	bne.n	8233e <memset+0x12>
   8234c:	2c03      	cmp	r4, #3
   8234e:	d92e      	bls.n	823ae <memset+0x82>
   82350:	b2cd      	uxtb	r5, r1
   82352:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82356:	2c0f      	cmp	r4, #15
   82358:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8235c:	d919      	bls.n	82392 <memset+0x66>
   8235e:	4626      	mov	r6, r4
   82360:	f103 0210 	add.w	r2, r3, #16
   82364:	3e10      	subs	r6, #16
   82366:	2e0f      	cmp	r6, #15
   82368:	f842 5c10 	str.w	r5, [r2, #-16]
   8236c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82370:	f842 5c08 	str.w	r5, [r2, #-8]
   82374:	f842 5c04 	str.w	r5, [r2, #-4]
   82378:	f102 0210 	add.w	r2, r2, #16
   8237c:	d8f2      	bhi.n	82364 <memset+0x38>
   8237e:	f1a4 0210 	sub.w	r2, r4, #16
   82382:	f022 020f 	bic.w	r2, r2, #15
   82386:	f004 040f 	and.w	r4, r4, #15
   8238a:	3210      	adds	r2, #16
   8238c:	2c03      	cmp	r4, #3
   8238e:	4413      	add	r3, r2
   82390:	d90d      	bls.n	823ae <memset+0x82>
   82392:	461e      	mov	r6, r3
   82394:	4622      	mov	r2, r4
   82396:	3a04      	subs	r2, #4
   82398:	2a03      	cmp	r2, #3
   8239a:	f846 5b04 	str.w	r5, [r6], #4
   8239e:	d8fa      	bhi.n	82396 <memset+0x6a>
   823a0:	1f22      	subs	r2, r4, #4
   823a2:	f022 0203 	bic.w	r2, r2, #3
   823a6:	3204      	adds	r2, #4
   823a8:	4413      	add	r3, r2
   823aa:	f004 0403 	and.w	r4, r4, #3
   823ae:	b12c      	cbz	r4, 823bc <memset+0x90>
   823b0:	b2c9      	uxtb	r1, r1
   823b2:	441c      	add	r4, r3
   823b4:	f803 1b01 	strb.w	r1, [r3], #1
   823b8:	42a3      	cmp	r3, r4
   823ba:	d1fb      	bne.n	823b4 <memset+0x88>
   823bc:	bc70      	pop	{r4, r5, r6}
   823be:	4770      	bx	lr
   823c0:	4614      	mov	r4, r2
   823c2:	4603      	mov	r3, r0
   823c4:	e7c2      	b.n	8234c <memset+0x20>
   823c6:	bf00      	nop

000823c8 <srand>:
   823c8:	4b03      	ldr	r3, [pc, #12]	; (823d8 <srand+0x10>)
   823ca:	2200      	movs	r2, #0
   823cc:	681b      	ldr	r3, [r3, #0]
   823ce:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
   823d2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
   823d6:	4770      	bx	lr
   823d8:	20070568 	.word	0x20070568

000823dc <rand>:
   823dc:	b430      	push	{r4, r5}
   823de:	4b0c      	ldr	r3, [pc, #48]	; (82410 <rand+0x34>)
   823e0:	4c0c      	ldr	r4, [pc, #48]	; (82414 <rand+0x38>)
   823e2:	6819      	ldr	r1, [r3, #0]
   823e4:	4d0c      	ldr	r5, [pc, #48]	; (82418 <rand+0x3c>)
   823e6:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   823ea:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
   823ee:	fb04 f402 	mul.w	r4, r4, r2
   823f2:	fba2 2305 	umull	r2, r3, r2, r5
   823f6:	fb05 4000 	mla	r0, r5, r0, r4
   823fa:	3201      	adds	r2, #1
   823fc:	4403      	add	r3, r0
   823fe:	f143 0300 	adc.w	r3, r3, #0
   82402:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   82406:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   8240a:	bc30      	pop	{r4, r5}
   8240c:	4770      	bx	lr
   8240e:	bf00      	nop
   82410:	20070568 	.word	0x20070568
   82414:	5851f42d 	.word	0x5851f42d
   82418:	4c957f2d 	.word	0x4c957f2d

0008241c <setbuf>:
   8241c:	2900      	cmp	r1, #0
   8241e:	bf0c      	ite	eq
   82420:	2202      	moveq	r2, #2
   82422:	2200      	movne	r2, #0
   82424:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82428:	f000 b800 	b.w	8242c <setvbuf>

0008242c <setvbuf>:
   8242c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82430:	4d51      	ldr	r5, [pc, #324]	; (82578 <setvbuf+0x14c>)
   82432:	b083      	sub	sp, #12
   82434:	682d      	ldr	r5, [r5, #0]
   82436:	4604      	mov	r4, r0
   82438:	460f      	mov	r7, r1
   8243a:	4690      	mov	r8, r2
   8243c:	461e      	mov	r6, r3
   8243e:	b115      	cbz	r5, 82446 <setvbuf+0x1a>
   82440:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82442:	2b00      	cmp	r3, #0
   82444:	d079      	beq.n	8253a <setvbuf+0x10e>
   82446:	f1b8 0f02 	cmp.w	r8, #2
   8244a:	d004      	beq.n	82456 <setvbuf+0x2a>
   8244c:	f1b8 0f01 	cmp.w	r8, #1
   82450:	d87f      	bhi.n	82552 <setvbuf+0x126>
   82452:	2e00      	cmp	r6, #0
   82454:	db7d      	blt.n	82552 <setvbuf+0x126>
   82456:	4621      	mov	r1, r4
   82458:	4628      	mov	r0, r5
   8245a:	f001 f96f 	bl	8373c <_fflush_r>
   8245e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82460:	b141      	cbz	r1, 82474 <setvbuf+0x48>
   82462:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82466:	4299      	cmp	r1, r3
   82468:	d002      	beq.n	82470 <setvbuf+0x44>
   8246a:	4628      	mov	r0, r5
   8246c:	f001 fac2 	bl	839f4 <_free_r>
   82470:	2300      	movs	r3, #0
   82472:	6323      	str	r3, [r4, #48]	; 0x30
   82474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82478:	2200      	movs	r2, #0
   8247a:	61a2      	str	r2, [r4, #24]
   8247c:	6062      	str	r2, [r4, #4]
   8247e:	061a      	lsls	r2, r3, #24
   82480:	d454      	bmi.n	8252c <setvbuf+0x100>
   82482:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82486:	f023 0303 	bic.w	r3, r3, #3
   8248a:	f1b8 0f02 	cmp.w	r8, #2
   8248e:	81a3      	strh	r3, [r4, #12]
   82490:	d039      	beq.n	82506 <setvbuf+0xda>
   82492:	ab01      	add	r3, sp, #4
   82494:	466a      	mov	r2, sp
   82496:	4621      	mov	r1, r4
   82498:	4628      	mov	r0, r5
   8249a:	f001 fd49 	bl	83f30 <__swhatbuf_r>
   8249e:	89a3      	ldrh	r3, [r4, #12]
   824a0:	4318      	orrs	r0, r3
   824a2:	81a0      	strh	r0, [r4, #12]
   824a4:	b326      	cbz	r6, 824f0 <setvbuf+0xc4>
   824a6:	b327      	cbz	r7, 824f2 <setvbuf+0xc6>
   824a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   824aa:	2b00      	cmp	r3, #0
   824ac:	d04d      	beq.n	8254a <setvbuf+0x11e>
   824ae:	9b00      	ldr	r3, [sp, #0]
   824b0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   824b4:	429e      	cmp	r6, r3
   824b6:	bf1c      	itt	ne
   824b8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   824bc:	81a0      	strhne	r0, [r4, #12]
   824be:	f1b8 0f01 	cmp.w	r8, #1
   824c2:	bf08      	it	eq
   824c4:	f040 0001 	orreq.w	r0, r0, #1
   824c8:	b283      	uxth	r3, r0
   824ca:	bf08      	it	eq
   824cc:	81a0      	strheq	r0, [r4, #12]
   824ce:	f003 0008 	and.w	r0, r3, #8
   824d2:	b280      	uxth	r0, r0
   824d4:	6027      	str	r7, [r4, #0]
   824d6:	6127      	str	r7, [r4, #16]
   824d8:	6166      	str	r6, [r4, #20]
   824da:	b318      	cbz	r0, 82524 <setvbuf+0xf8>
   824dc:	f013 0001 	ands.w	r0, r3, #1
   824e0:	d02f      	beq.n	82542 <setvbuf+0x116>
   824e2:	2000      	movs	r0, #0
   824e4:	4276      	negs	r6, r6
   824e6:	61a6      	str	r6, [r4, #24]
   824e8:	60a0      	str	r0, [r4, #8]
   824ea:	b003      	add	sp, #12
   824ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   824f0:	9e00      	ldr	r6, [sp, #0]
   824f2:	4630      	mov	r0, r6
   824f4:	f001 fd90 	bl	84018 <malloc>
   824f8:	4607      	mov	r7, r0
   824fa:	b368      	cbz	r0, 82558 <setvbuf+0x12c>
   824fc:	89a3      	ldrh	r3, [r4, #12]
   824fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82502:	81a3      	strh	r3, [r4, #12]
   82504:	e7d0      	b.n	824a8 <setvbuf+0x7c>
   82506:	2000      	movs	r0, #0
   82508:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8250c:	f043 0302 	orr.w	r3, r3, #2
   82510:	2500      	movs	r5, #0
   82512:	2101      	movs	r1, #1
   82514:	81a3      	strh	r3, [r4, #12]
   82516:	60a5      	str	r5, [r4, #8]
   82518:	6022      	str	r2, [r4, #0]
   8251a:	6122      	str	r2, [r4, #16]
   8251c:	6161      	str	r1, [r4, #20]
   8251e:	b003      	add	sp, #12
   82520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82524:	60a0      	str	r0, [r4, #8]
   82526:	b003      	add	sp, #12
   82528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8252c:	6921      	ldr	r1, [r4, #16]
   8252e:	4628      	mov	r0, r5
   82530:	f001 fa60 	bl	839f4 <_free_r>
   82534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82538:	e7a3      	b.n	82482 <setvbuf+0x56>
   8253a:	4628      	mov	r0, r5
   8253c:	f001 f992 	bl	83864 <__sinit>
   82540:	e781      	b.n	82446 <setvbuf+0x1a>
   82542:	60a6      	str	r6, [r4, #8]
   82544:	b003      	add	sp, #12
   82546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8254a:	4628      	mov	r0, r5
   8254c:	f001 f98a 	bl	83864 <__sinit>
   82550:	e7ad      	b.n	824ae <setvbuf+0x82>
   82552:	f04f 30ff 	mov.w	r0, #4294967295
   82556:	e7e2      	b.n	8251e <setvbuf+0xf2>
   82558:	f8dd 9000 	ldr.w	r9, [sp]
   8255c:	45b1      	cmp	r9, r6
   8255e:	d006      	beq.n	8256e <setvbuf+0x142>
   82560:	4648      	mov	r0, r9
   82562:	f001 fd59 	bl	84018 <malloc>
   82566:	4607      	mov	r7, r0
   82568:	b108      	cbz	r0, 8256e <setvbuf+0x142>
   8256a:	464e      	mov	r6, r9
   8256c:	e7c6      	b.n	824fc <setvbuf+0xd0>
   8256e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82572:	f04f 30ff 	mov.w	r0, #4294967295
   82576:	e7c7      	b.n	82508 <setvbuf+0xdc>
   82578:	20070568 	.word	0x20070568

0008257c <strlen>:
   8257c:	f020 0103 	bic.w	r1, r0, #3
   82580:	f010 0003 	ands.w	r0, r0, #3
   82584:	f1c0 0000 	rsb	r0, r0, #0
   82588:	f851 3b04 	ldr.w	r3, [r1], #4
   8258c:	f100 0c04 	add.w	ip, r0, #4
   82590:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82594:	f06f 0200 	mvn.w	r2, #0
   82598:	bf1c      	itt	ne
   8259a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8259e:	4313      	orrne	r3, r2
   825a0:	f04f 0c01 	mov.w	ip, #1
   825a4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   825a8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   825ac:	eba3 020c 	sub.w	r2, r3, ip
   825b0:	ea22 0203 	bic.w	r2, r2, r3
   825b4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   825b8:	bf04      	itt	eq
   825ba:	f851 3b04 	ldreq.w	r3, [r1], #4
   825be:	3004      	addeq	r0, #4
   825c0:	d0f4      	beq.n	825ac <strlen+0x30>
   825c2:	f1c2 0100 	rsb	r1, r2, #0
   825c6:	ea02 0201 	and.w	r2, r2, r1
   825ca:	fab2 f282 	clz	r2, r2
   825ce:	f1c2 021f 	rsb	r2, r2, #31
   825d2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   825d6:	4770      	bx	lr

000825d8 <strncpy>:
   825d8:	ea40 0301 	orr.w	r3, r0, r1
   825dc:	079b      	lsls	r3, r3, #30
   825de:	b470      	push	{r4, r5, r6}
   825e0:	d12b      	bne.n	8263a <strncpy+0x62>
   825e2:	2a03      	cmp	r2, #3
   825e4:	d929      	bls.n	8263a <strncpy+0x62>
   825e6:	460c      	mov	r4, r1
   825e8:	4603      	mov	r3, r0
   825ea:	4621      	mov	r1, r4
   825ec:	f854 6b04 	ldr.w	r6, [r4], #4
   825f0:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   825f4:	ea25 0506 	bic.w	r5, r5, r6
   825f8:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   825fc:	d106      	bne.n	8260c <strncpy+0x34>
   825fe:	3a04      	subs	r2, #4
   82600:	2a03      	cmp	r2, #3
   82602:	f843 6b04 	str.w	r6, [r3], #4
   82606:	4621      	mov	r1, r4
   82608:	d8ef      	bhi.n	825ea <strncpy+0x12>
   8260a:	b1a2      	cbz	r2, 82636 <strncpy+0x5e>
   8260c:	780c      	ldrb	r4, [r1, #0]
   8260e:	3a01      	subs	r2, #1
   82610:	701c      	strb	r4, [r3, #0]
   82612:	3101      	adds	r1, #1
   82614:	3301      	adds	r3, #1
   82616:	b13c      	cbz	r4, 82628 <strncpy+0x50>
   82618:	b16a      	cbz	r2, 82636 <strncpy+0x5e>
   8261a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8261e:	3a01      	subs	r2, #1
   82620:	f803 4b01 	strb.w	r4, [r3], #1
   82624:	2c00      	cmp	r4, #0
   82626:	d1f7      	bne.n	82618 <strncpy+0x40>
   82628:	b12a      	cbz	r2, 82636 <strncpy+0x5e>
   8262a:	441a      	add	r2, r3
   8262c:	2100      	movs	r1, #0
   8262e:	f803 1b01 	strb.w	r1, [r3], #1
   82632:	429a      	cmp	r2, r3
   82634:	d1fb      	bne.n	8262e <strncpy+0x56>
   82636:	bc70      	pop	{r4, r5, r6}
   82638:	4770      	bx	lr
   8263a:	4603      	mov	r3, r0
   8263c:	e7e5      	b.n	8260a <strncpy+0x32>
   8263e:	bf00      	nop

00082640 <__sprint_r.part.0>:
   82640:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82646:	049c      	lsls	r4, r3, #18
   82648:	4692      	mov	sl, r2
   8264a:	d52c      	bpl.n	826a6 <__sprint_r.part.0+0x66>
   8264c:	6893      	ldr	r3, [r2, #8]
   8264e:	6812      	ldr	r2, [r2, #0]
   82650:	b33b      	cbz	r3, 826a2 <__sprint_r.part.0+0x62>
   82652:	460f      	mov	r7, r1
   82654:	4680      	mov	r8, r0
   82656:	f102 0908 	add.w	r9, r2, #8
   8265a:	e919 0060 	ldmdb	r9, {r5, r6}
   8265e:	08b6      	lsrs	r6, r6, #2
   82660:	d017      	beq.n	82692 <__sprint_r.part.0+0x52>
   82662:	3d04      	subs	r5, #4
   82664:	2400      	movs	r4, #0
   82666:	e001      	b.n	8266c <__sprint_r.part.0+0x2c>
   82668:	42a6      	cmp	r6, r4
   8266a:	d010      	beq.n	8268e <__sprint_r.part.0+0x4e>
   8266c:	463a      	mov	r2, r7
   8266e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82672:	4640      	mov	r0, r8
   82674:	f001 f95e 	bl	83934 <_fputwc_r>
   82678:	1c43      	adds	r3, r0, #1
   8267a:	f104 0401 	add.w	r4, r4, #1
   8267e:	d1f3      	bne.n	82668 <__sprint_r.part.0+0x28>
   82680:	2300      	movs	r3, #0
   82682:	f8ca 3008 	str.w	r3, [sl, #8]
   82686:	f8ca 3004 	str.w	r3, [sl, #4]
   8268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8268e:	f8da 3008 	ldr.w	r3, [sl, #8]
   82692:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   82696:	f8ca 3008 	str.w	r3, [sl, #8]
   8269a:	f109 0908 	add.w	r9, r9, #8
   8269e:	2b00      	cmp	r3, #0
   826a0:	d1db      	bne.n	8265a <__sprint_r.part.0+0x1a>
   826a2:	2000      	movs	r0, #0
   826a4:	e7ec      	b.n	82680 <__sprint_r.part.0+0x40>
   826a6:	f001 fa8d 	bl	83bc4 <__sfvwrite_r>
   826aa:	2300      	movs	r3, #0
   826ac:	f8ca 3008 	str.w	r3, [sl, #8]
   826b0:	f8ca 3004 	str.w	r3, [sl, #4]
   826b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000826b8 <_vfiprintf_r>:
   826b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826bc:	b0ab      	sub	sp, #172	; 0xac
   826be:	461c      	mov	r4, r3
   826c0:	9100      	str	r1, [sp, #0]
   826c2:	4690      	mov	r8, r2
   826c4:	9304      	str	r3, [sp, #16]
   826c6:	9005      	str	r0, [sp, #20]
   826c8:	b118      	cbz	r0, 826d2 <_vfiprintf_r+0x1a>
   826ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   826cc:	2b00      	cmp	r3, #0
   826ce:	f000 80de 	beq.w	8288e <_vfiprintf_r+0x1d6>
   826d2:	9800      	ldr	r0, [sp, #0]
   826d4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   826d8:	b28a      	uxth	r2, r1
   826da:	0495      	lsls	r5, r2, #18
   826dc:	d407      	bmi.n	826ee <_vfiprintf_r+0x36>
   826de:	6e43      	ldr	r3, [r0, #100]	; 0x64
   826e0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   826e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   826e8:	8182      	strh	r2, [r0, #12]
   826ea:	6643      	str	r3, [r0, #100]	; 0x64
   826ec:	b292      	uxth	r2, r2
   826ee:	0711      	lsls	r1, r2, #28
   826f0:	f140 80b1 	bpl.w	82856 <_vfiprintf_r+0x19e>
   826f4:	9b00      	ldr	r3, [sp, #0]
   826f6:	691b      	ldr	r3, [r3, #16]
   826f8:	2b00      	cmp	r3, #0
   826fa:	f000 80ac 	beq.w	82856 <_vfiprintf_r+0x19e>
   826fe:	f002 021a 	and.w	r2, r2, #26
   82702:	2a0a      	cmp	r2, #10
   82704:	f000 80b5 	beq.w	82872 <_vfiprintf_r+0x1ba>
   82708:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   8270c:	46d3      	mov	fp, sl
   8270e:	2300      	movs	r3, #0
   82710:	9302      	str	r3, [sp, #8]
   82712:	930f      	str	r3, [sp, #60]	; 0x3c
   82714:	930e      	str	r3, [sp, #56]	; 0x38
   82716:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   8271a:	f898 3000 	ldrb.w	r3, [r8]
   8271e:	4644      	mov	r4, r8
   82720:	b1fb      	cbz	r3, 82762 <_vfiprintf_r+0xaa>
   82722:	2b25      	cmp	r3, #37	; 0x25
   82724:	d102      	bne.n	8272c <_vfiprintf_r+0x74>
   82726:	e01c      	b.n	82762 <_vfiprintf_r+0xaa>
   82728:	2b25      	cmp	r3, #37	; 0x25
   8272a:	d003      	beq.n	82734 <_vfiprintf_r+0x7c>
   8272c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82730:	2b00      	cmp	r3, #0
   82732:	d1f9      	bne.n	82728 <_vfiprintf_r+0x70>
   82734:	ebc8 0504 	rsb	r5, r8, r4
   82738:	b19d      	cbz	r5, 82762 <_vfiprintf_r+0xaa>
   8273a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8273c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8273e:	3301      	adds	r3, #1
   82740:	442a      	add	r2, r5
   82742:	2b07      	cmp	r3, #7
   82744:	f8cb 8000 	str.w	r8, [fp]
   82748:	f8cb 5004 	str.w	r5, [fp, #4]
   8274c:	920f      	str	r2, [sp, #60]	; 0x3c
   8274e:	930e      	str	r3, [sp, #56]	; 0x38
   82750:	dd7b      	ble.n	8284a <_vfiprintf_r+0x192>
   82752:	2a00      	cmp	r2, #0
   82754:	f040 851f 	bne.w	83196 <_vfiprintf_r+0xade>
   82758:	46d3      	mov	fp, sl
   8275a:	9b02      	ldr	r3, [sp, #8]
   8275c:	920e      	str	r2, [sp, #56]	; 0x38
   8275e:	442b      	add	r3, r5
   82760:	9302      	str	r3, [sp, #8]
   82762:	7823      	ldrb	r3, [r4, #0]
   82764:	2b00      	cmp	r3, #0
   82766:	f000 843b 	beq.w	82fe0 <_vfiprintf_r+0x928>
   8276a:	f04f 0300 	mov.w	r3, #0
   8276e:	2100      	movs	r1, #0
   82770:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82774:	f104 0801 	add.w	r8, r4, #1
   82778:	7863      	ldrb	r3, [r4, #1]
   8277a:	4608      	mov	r0, r1
   8277c:	460e      	mov	r6, r1
   8277e:	460c      	mov	r4, r1
   82780:	f04f 32ff 	mov.w	r2, #4294967295
   82784:	9201      	str	r2, [sp, #4]
   82786:	f108 0801 	add.w	r8, r8, #1
   8278a:	f1a3 0220 	sub.w	r2, r3, #32
   8278e:	2a58      	cmp	r2, #88	; 0x58
   82790:	f200 838b 	bhi.w	82eaa <_vfiprintf_r+0x7f2>
   82794:	e8df f012 	tbh	[pc, r2, lsl #1]
   82798:	0389033d 	.word	0x0389033d
   8279c:	03450389 	.word	0x03450389
   827a0:	03890389 	.word	0x03890389
   827a4:	03890389 	.word	0x03890389
   827a8:	03890389 	.word	0x03890389
   827ac:	026b007e 	.word	0x026b007e
   827b0:	00860389 	.word	0x00860389
   827b4:	03890270 	.word	0x03890270
   827b8:	025d01cc 	.word	0x025d01cc
   827bc:	025d025d 	.word	0x025d025d
   827c0:	025d025d 	.word	0x025d025d
   827c4:	025d025d 	.word	0x025d025d
   827c8:	025d025d 	.word	0x025d025d
   827cc:	03890389 	.word	0x03890389
   827d0:	03890389 	.word	0x03890389
   827d4:	03890389 	.word	0x03890389
   827d8:	03890389 	.word	0x03890389
   827dc:	03890389 	.word	0x03890389
   827e0:	038901d1 	.word	0x038901d1
   827e4:	03890389 	.word	0x03890389
   827e8:	03890389 	.word	0x03890389
   827ec:	03890389 	.word	0x03890389
   827f0:	03890389 	.word	0x03890389
   827f4:	021a0389 	.word	0x021a0389
   827f8:	03890389 	.word	0x03890389
   827fc:	03890389 	.word	0x03890389
   82800:	02e50389 	.word	0x02e50389
   82804:	03890389 	.word	0x03890389
   82808:	03890308 	.word	0x03890308
   8280c:	03890389 	.word	0x03890389
   82810:	03890389 	.word	0x03890389
   82814:	03890389 	.word	0x03890389
   82818:	03890389 	.word	0x03890389
   8281c:	032b0389 	.word	0x032b0389
   82820:	03890382 	.word	0x03890382
   82824:	03890389 	.word	0x03890389
   82828:	0382035e 	.word	0x0382035e
   8282c:	03890389 	.word	0x03890389
   82830:	03890363 	.word	0x03890363
   82834:	028d0370 	.word	0x028d0370
   82838:	02e0008b 	.word	0x02e0008b
   8283c:	02930389 	.word	0x02930389
   82840:	02b20389 	.word	0x02b20389
   82844:	03890389 	.word	0x03890389
   82848:	034a      	.short	0x034a
   8284a:	f10b 0b08 	add.w	fp, fp, #8
   8284e:	9b02      	ldr	r3, [sp, #8]
   82850:	442b      	add	r3, r5
   82852:	9302      	str	r3, [sp, #8]
   82854:	e785      	b.n	82762 <_vfiprintf_r+0xaa>
   82856:	9900      	ldr	r1, [sp, #0]
   82858:	9805      	ldr	r0, [sp, #20]
   8285a:	f000 fe57 	bl	8350c <__swsetup_r>
   8285e:	2800      	cmp	r0, #0
   82860:	f040 8545 	bne.w	832ee <_vfiprintf_r+0xc36>
   82864:	9b00      	ldr	r3, [sp, #0]
   82866:	899a      	ldrh	r2, [r3, #12]
   82868:	f002 021a 	and.w	r2, r2, #26
   8286c:	2a0a      	cmp	r2, #10
   8286e:	f47f af4b 	bne.w	82708 <_vfiprintf_r+0x50>
   82872:	9900      	ldr	r1, [sp, #0]
   82874:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   82878:	2b00      	cmp	r3, #0
   8287a:	f6ff af45 	blt.w	82708 <_vfiprintf_r+0x50>
   8287e:	4623      	mov	r3, r4
   82880:	4642      	mov	r2, r8
   82882:	9805      	ldr	r0, [sp, #20]
   82884:	f000 fe0c 	bl	834a0 <__sbprintf>
   82888:	b02b      	add	sp, #172	; 0xac
   8288a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8288e:	f000 ffe9 	bl	83864 <__sinit>
   82892:	e71e      	b.n	826d2 <_vfiprintf_r+0x1a>
   82894:	9a04      	ldr	r2, [sp, #16]
   82896:	4613      	mov	r3, r2
   82898:	6814      	ldr	r4, [r2, #0]
   8289a:	3304      	adds	r3, #4
   8289c:	2c00      	cmp	r4, #0
   8289e:	9304      	str	r3, [sp, #16]
   828a0:	da02      	bge.n	828a8 <_vfiprintf_r+0x1f0>
   828a2:	4264      	negs	r4, r4
   828a4:	f046 0604 	orr.w	r6, r6, #4
   828a8:	f898 3000 	ldrb.w	r3, [r8]
   828ac:	e76b      	b.n	82786 <_vfiprintf_r+0xce>
   828ae:	f04f 0300 	mov.w	r3, #0
   828b2:	9804      	ldr	r0, [sp, #16]
   828b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   828b8:	4603      	mov	r3, r0
   828ba:	2130      	movs	r1, #48	; 0x30
   828bc:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   828c0:	9901      	ldr	r1, [sp, #4]
   828c2:	2278      	movs	r2, #120	; 0x78
   828c4:	2900      	cmp	r1, #0
   828c6:	9406      	str	r4, [sp, #24]
   828c8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   828cc:	6804      	ldr	r4, [r0, #0]
   828ce:	f103 0304 	add.w	r3, r3, #4
   828d2:	f04f 0500 	mov.w	r5, #0
   828d6:	f046 0202 	orr.w	r2, r6, #2
   828da:	f2c0 850c 	blt.w	832f6 <_vfiprintf_r+0xc3e>
   828de:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   828e2:	ea54 0205 	orrs.w	r2, r4, r5
   828e6:	f046 0602 	orr.w	r6, r6, #2
   828ea:	9304      	str	r3, [sp, #16]
   828ec:	f040 84b5 	bne.w	8325a <_vfiprintf_r+0xba2>
   828f0:	48b3      	ldr	r0, [pc, #716]	; (82bc0 <_vfiprintf_r+0x508>)
   828f2:	9b01      	ldr	r3, [sp, #4]
   828f4:	2b00      	cmp	r3, #0
   828f6:	f040 8462 	bne.w	831be <_vfiprintf_r+0xb06>
   828fa:	4699      	mov	r9, r3
   828fc:	4657      	mov	r7, sl
   828fe:	2300      	movs	r3, #0
   82900:	9301      	str	r3, [sp, #4]
   82902:	9303      	str	r3, [sp, #12]
   82904:	9b01      	ldr	r3, [sp, #4]
   82906:	9a03      	ldr	r2, [sp, #12]
   82908:	4293      	cmp	r3, r2
   8290a:	bfb8      	it	lt
   8290c:	4613      	movlt	r3, r2
   8290e:	461d      	mov	r5, r3
   82910:	f1b9 0f00 	cmp.w	r9, #0
   82914:	d000      	beq.n	82918 <_vfiprintf_r+0x260>
   82916:	3501      	adds	r5, #1
   82918:	f016 0302 	ands.w	r3, r6, #2
   8291c:	9307      	str	r3, [sp, #28]
   8291e:	bf18      	it	ne
   82920:	3502      	addne	r5, #2
   82922:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   82926:	9308      	str	r3, [sp, #32]
   82928:	f040 82e8 	bne.w	82efc <_vfiprintf_r+0x844>
   8292c:	9b06      	ldr	r3, [sp, #24]
   8292e:	1b5c      	subs	r4, r3, r5
   82930:	2c00      	cmp	r4, #0
   82932:	f340 82e3 	ble.w	82efc <_vfiprintf_r+0x844>
   82936:	2c10      	cmp	r4, #16
   82938:	f340 853c 	ble.w	833b4 <_vfiprintf_r+0xcfc>
   8293c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 82bc4 <_vfiprintf_r+0x50c>
   82940:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   82944:	46dc      	mov	ip, fp
   82946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82948:	46c3      	mov	fp, r8
   8294a:	2310      	movs	r3, #16
   8294c:	46a8      	mov	r8, r5
   8294e:	4670      	mov	r0, lr
   82950:	464d      	mov	r5, r9
   82952:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82956:	e007      	b.n	82968 <_vfiprintf_r+0x2b0>
   82958:	f100 0e02 	add.w	lr, r0, #2
   8295c:	4608      	mov	r0, r1
   8295e:	f10c 0c08 	add.w	ip, ip, #8
   82962:	3c10      	subs	r4, #16
   82964:	2c10      	cmp	r4, #16
   82966:	dd13      	ble.n	82990 <_vfiprintf_r+0x2d8>
   82968:	1c41      	adds	r1, r0, #1
   8296a:	3210      	adds	r2, #16
   8296c:	2907      	cmp	r1, #7
   8296e:	920f      	str	r2, [sp, #60]	; 0x3c
   82970:	f8cc 5000 	str.w	r5, [ip]
   82974:	f8cc 3004 	str.w	r3, [ip, #4]
   82978:	910e      	str	r1, [sp, #56]	; 0x38
   8297a:	dded      	ble.n	82958 <_vfiprintf_r+0x2a0>
   8297c:	2a00      	cmp	r2, #0
   8297e:	f040 82a5 	bne.w	82ecc <_vfiprintf_r+0x814>
   82982:	3c10      	subs	r4, #16
   82984:	2c10      	cmp	r4, #16
   82986:	4610      	mov	r0, r2
   82988:	f04f 0e01 	mov.w	lr, #1
   8298c:	46d4      	mov	ip, sl
   8298e:	dceb      	bgt.n	82968 <_vfiprintf_r+0x2b0>
   82990:	46a9      	mov	r9, r5
   82992:	4670      	mov	r0, lr
   82994:	4645      	mov	r5, r8
   82996:	46d8      	mov	r8, fp
   82998:	46e3      	mov	fp, ip
   8299a:	4422      	add	r2, r4
   8299c:	2807      	cmp	r0, #7
   8299e:	920f      	str	r2, [sp, #60]	; 0x3c
   829a0:	f8cb 9000 	str.w	r9, [fp]
   829a4:	f8cb 4004 	str.w	r4, [fp, #4]
   829a8:	900e      	str	r0, [sp, #56]	; 0x38
   829aa:	f300 836d 	bgt.w	83088 <_vfiprintf_r+0x9d0>
   829ae:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   829b2:	f10b 0b08 	add.w	fp, fp, #8
   829b6:	f100 0e01 	add.w	lr, r0, #1
   829ba:	2b00      	cmp	r3, #0
   829bc:	f040 82a7 	bne.w	82f0e <_vfiprintf_r+0x856>
   829c0:	9b07      	ldr	r3, [sp, #28]
   829c2:	2b00      	cmp	r3, #0
   829c4:	f000 82ba 	beq.w	82f3c <_vfiprintf_r+0x884>
   829c8:	3202      	adds	r2, #2
   829ca:	a90c      	add	r1, sp, #48	; 0x30
   829cc:	2302      	movs	r3, #2
   829ce:	f1be 0f07 	cmp.w	lr, #7
   829d2:	920f      	str	r2, [sp, #60]	; 0x3c
   829d4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   829d8:	e88b 000a 	stmia.w	fp, {r1, r3}
   829dc:	f340 8370 	ble.w	830c0 <_vfiprintf_r+0xa08>
   829e0:	2a00      	cmp	r2, #0
   829e2:	f040 8400 	bne.w	831e6 <_vfiprintf_r+0xb2e>
   829e6:	9b08      	ldr	r3, [sp, #32]
   829e8:	f04f 0e01 	mov.w	lr, #1
   829ec:	2b80      	cmp	r3, #128	; 0x80
   829ee:	4610      	mov	r0, r2
   829f0:	46d3      	mov	fp, sl
   829f2:	f040 82a7 	bne.w	82f44 <_vfiprintf_r+0x88c>
   829f6:	9b06      	ldr	r3, [sp, #24]
   829f8:	1b5c      	subs	r4, r3, r5
   829fa:	2c00      	cmp	r4, #0
   829fc:	f340 82a2 	ble.w	82f44 <_vfiprintf_r+0x88c>
   82a00:	2c10      	cmp	r4, #16
   82a02:	f340 84f8 	ble.w	833f6 <_vfiprintf_r+0xd3e>
   82a06:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 82bc8 <_vfiprintf_r+0x510>
   82a0a:	46de      	mov	lr, fp
   82a0c:	2310      	movs	r3, #16
   82a0e:	46c3      	mov	fp, r8
   82a10:	46a8      	mov	r8, r5
   82a12:	464d      	mov	r5, r9
   82a14:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82a18:	e007      	b.n	82a2a <_vfiprintf_r+0x372>
   82a1a:	f100 0c02 	add.w	ip, r0, #2
   82a1e:	4608      	mov	r0, r1
   82a20:	f10e 0e08 	add.w	lr, lr, #8
   82a24:	3c10      	subs	r4, #16
   82a26:	2c10      	cmp	r4, #16
   82a28:	dd13      	ble.n	82a52 <_vfiprintf_r+0x39a>
   82a2a:	1c41      	adds	r1, r0, #1
   82a2c:	3210      	adds	r2, #16
   82a2e:	2907      	cmp	r1, #7
   82a30:	920f      	str	r2, [sp, #60]	; 0x3c
   82a32:	f8ce 5000 	str.w	r5, [lr]
   82a36:	f8ce 3004 	str.w	r3, [lr, #4]
   82a3a:	910e      	str	r1, [sp, #56]	; 0x38
   82a3c:	dded      	ble.n	82a1a <_vfiprintf_r+0x362>
   82a3e:	2a00      	cmp	r2, #0
   82a40:	f040 830c 	bne.w	8305c <_vfiprintf_r+0x9a4>
   82a44:	3c10      	subs	r4, #16
   82a46:	2c10      	cmp	r4, #16
   82a48:	f04f 0c01 	mov.w	ip, #1
   82a4c:	4610      	mov	r0, r2
   82a4e:	46d6      	mov	lr, sl
   82a50:	dceb      	bgt.n	82a2a <_vfiprintf_r+0x372>
   82a52:	46a9      	mov	r9, r5
   82a54:	4645      	mov	r5, r8
   82a56:	46d8      	mov	r8, fp
   82a58:	46f3      	mov	fp, lr
   82a5a:	4422      	add	r2, r4
   82a5c:	f1bc 0f07 	cmp.w	ip, #7
   82a60:	920f      	str	r2, [sp, #60]	; 0x3c
   82a62:	f8cb 9000 	str.w	r9, [fp]
   82a66:	f8cb 4004 	str.w	r4, [fp, #4]
   82a6a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   82a6e:	f300 83c8 	bgt.w	83202 <_vfiprintf_r+0xb4a>
   82a72:	9b01      	ldr	r3, [sp, #4]
   82a74:	9903      	ldr	r1, [sp, #12]
   82a76:	f10b 0b08 	add.w	fp, fp, #8
   82a7a:	1a5c      	subs	r4, r3, r1
   82a7c:	2c00      	cmp	r4, #0
   82a7e:	f10c 0e01 	add.w	lr, ip, #1
   82a82:	4660      	mov	r0, ip
   82a84:	f300 8264 	bgt.w	82f50 <_vfiprintf_r+0x898>
   82a88:	9903      	ldr	r1, [sp, #12]
   82a8a:	f1be 0f07 	cmp.w	lr, #7
   82a8e:	440a      	add	r2, r1
   82a90:	920f      	str	r2, [sp, #60]	; 0x3c
   82a92:	f8cb 7000 	str.w	r7, [fp]
   82a96:	f8cb 1004 	str.w	r1, [fp, #4]
   82a9a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82a9e:	f340 82c5 	ble.w	8302c <_vfiprintf_r+0x974>
   82aa2:	2a00      	cmp	r2, #0
   82aa4:	f040 8332 	bne.w	8310c <_vfiprintf_r+0xa54>
   82aa8:	0770      	lsls	r0, r6, #29
   82aaa:	920e      	str	r2, [sp, #56]	; 0x38
   82aac:	d538      	bpl.n	82b20 <_vfiprintf_r+0x468>
   82aae:	9b06      	ldr	r3, [sp, #24]
   82ab0:	1b5c      	subs	r4, r3, r5
   82ab2:	2c00      	cmp	r4, #0
   82ab4:	dd34      	ble.n	82b20 <_vfiprintf_r+0x468>
   82ab6:	46d3      	mov	fp, sl
   82ab8:	2c10      	cmp	r4, #16
   82aba:	f340 8496 	ble.w	833ea <_vfiprintf_r+0xd32>
   82abe:	f8df 9104 	ldr.w	r9, [pc, #260]	; 82bc4 <_vfiprintf_r+0x50c>
   82ac2:	990e      	ldr	r1, [sp, #56]	; 0x38
   82ac4:	464f      	mov	r7, r9
   82ac6:	2610      	movs	r6, #16
   82ac8:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82acc:	e006      	b.n	82adc <_vfiprintf_r+0x424>
   82ace:	1c88      	adds	r0, r1, #2
   82ad0:	4619      	mov	r1, r3
   82ad2:	f10b 0b08 	add.w	fp, fp, #8
   82ad6:	3c10      	subs	r4, #16
   82ad8:	2c10      	cmp	r4, #16
   82ada:	dd13      	ble.n	82b04 <_vfiprintf_r+0x44c>
   82adc:	1c4b      	adds	r3, r1, #1
   82ade:	3210      	adds	r2, #16
   82ae0:	2b07      	cmp	r3, #7
   82ae2:	920f      	str	r2, [sp, #60]	; 0x3c
   82ae4:	f8cb 7000 	str.w	r7, [fp]
   82ae8:	f8cb 6004 	str.w	r6, [fp, #4]
   82aec:	930e      	str	r3, [sp, #56]	; 0x38
   82aee:	ddee      	ble.n	82ace <_vfiprintf_r+0x416>
   82af0:	2a00      	cmp	r2, #0
   82af2:	f040 8285 	bne.w	83000 <_vfiprintf_r+0x948>
   82af6:	3c10      	subs	r4, #16
   82af8:	2c10      	cmp	r4, #16
   82afa:	f04f 0001 	mov.w	r0, #1
   82afe:	4611      	mov	r1, r2
   82b00:	46d3      	mov	fp, sl
   82b02:	dceb      	bgt.n	82adc <_vfiprintf_r+0x424>
   82b04:	46b9      	mov	r9, r7
   82b06:	4422      	add	r2, r4
   82b08:	2807      	cmp	r0, #7
   82b0a:	920f      	str	r2, [sp, #60]	; 0x3c
   82b0c:	f8cb 9000 	str.w	r9, [fp]
   82b10:	f8cb 4004 	str.w	r4, [fp, #4]
   82b14:	900e      	str	r0, [sp, #56]	; 0x38
   82b16:	f340 8292 	ble.w	8303e <_vfiprintf_r+0x986>
   82b1a:	2a00      	cmp	r2, #0
   82b1c:	f040 840c 	bne.w	83338 <_vfiprintf_r+0xc80>
   82b20:	9b02      	ldr	r3, [sp, #8]
   82b22:	9a06      	ldr	r2, [sp, #24]
   82b24:	42aa      	cmp	r2, r5
   82b26:	bfac      	ite	ge
   82b28:	189b      	addge	r3, r3, r2
   82b2a:	195b      	addlt	r3, r3, r5
   82b2c:	9302      	str	r3, [sp, #8]
   82b2e:	e290      	b.n	83052 <_vfiprintf_r+0x99a>
   82b30:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   82b34:	f898 3000 	ldrb.w	r3, [r8]
   82b38:	e625      	b.n	82786 <_vfiprintf_r+0xce>
   82b3a:	9406      	str	r4, [sp, #24]
   82b3c:	2900      	cmp	r1, #0
   82b3e:	f040 8485 	bne.w	8344c <_vfiprintf_r+0xd94>
   82b42:	f046 0610 	orr.w	r6, r6, #16
   82b46:	06b3      	lsls	r3, r6, #26
   82b48:	f140 8304 	bpl.w	83154 <_vfiprintf_r+0xa9c>
   82b4c:	9904      	ldr	r1, [sp, #16]
   82b4e:	3107      	adds	r1, #7
   82b50:	f021 0107 	bic.w	r1, r1, #7
   82b54:	e9d1 2300 	ldrd	r2, r3, [r1]
   82b58:	4614      	mov	r4, r2
   82b5a:	461d      	mov	r5, r3
   82b5c:	3108      	adds	r1, #8
   82b5e:	9104      	str	r1, [sp, #16]
   82b60:	2a00      	cmp	r2, #0
   82b62:	f173 0300 	sbcs.w	r3, r3, #0
   82b66:	f2c0 837c 	blt.w	83262 <_vfiprintf_r+0xbaa>
   82b6a:	9b01      	ldr	r3, [sp, #4]
   82b6c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   82b70:	2b00      	cmp	r3, #0
   82b72:	f2c0 830b 	blt.w	8318c <_vfiprintf_r+0xad4>
   82b76:	ea54 0305 	orrs.w	r3, r4, r5
   82b7a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82b7e:	f000 80de 	beq.w	82d3e <_vfiprintf_r+0x686>
   82b82:	2d00      	cmp	r5, #0
   82b84:	bf08      	it	eq
   82b86:	2c0a      	cmpeq	r4, #10
   82b88:	f0c0 80de 	bcc.w	82d48 <_vfiprintf_r+0x690>
   82b8c:	4657      	mov	r7, sl
   82b8e:	4620      	mov	r0, r4
   82b90:	4629      	mov	r1, r5
   82b92:	220a      	movs	r2, #10
   82b94:	2300      	movs	r3, #0
   82b96:	f002 f97d 	bl	84e94 <__aeabi_uldivmod>
   82b9a:	3230      	adds	r2, #48	; 0x30
   82b9c:	f807 2d01 	strb.w	r2, [r7, #-1]!
   82ba0:	4620      	mov	r0, r4
   82ba2:	4629      	mov	r1, r5
   82ba4:	2300      	movs	r3, #0
   82ba6:	220a      	movs	r2, #10
   82ba8:	f002 f974 	bl	84e94 <__aeabi_uldivmod>
   82bac:	4604      	mov	r4, r0
   82bae:	460d      	mov	r5, r1
   82bb0:	ea54 0305 	orrs.w	r3, r4, r5
   82bb4:	d1eb      	bne.n	82b8e <_vfiprintf_r+0x4d6>
   82bb6:	ebc7 030a 	rsb	r3, r7, sl
   82bba:	9303      	str	r3, [sp, #12]
   82bbc:	e6a2      	b.n	82904 <_vfiprintf_r+0x24c>
   82bbe:	bf00      	nop
   82bc0:	00085290 	.word	0x00085290
   82bc4:	000852ac 	.word	0x000852ac
   82bc8:	0008526c 	.word	0x0008526c
   82bcc:	9406      	str	r4, [sp, #24]
   82bce:	2900      	cmp	r1, #0
   82bd0:	f040 8438 	bne.w	83444 <_vfiprintf_r+0xd8c>
   82bd4:	f046 0610 	orr.w	r6, r6, #16
   82bd8:	f016 0320 	ands.w	r3, r6, #32
   82bdc:	f000 82a1 	beq.w	83122 <_vfiprintf_r+0xa6a>
   82be0:	f04f 0200 	mov.w	r2, #0
   82be4:	9b04      	ldr	r3, [sp, #16]
   82be6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   82bea:	3307      	adds	r3, #7
   82bec:	f023 0307 	bic.w	r3, r3, #7
   82bf0:	f103 0208 	add.w	r2, r3, #8
   82bf4:	e9d3 4500 	ldrd	r4, r5, [r3]
   82bf8:	9b01      	ldr	r3, [sp, #4]
   82bfa:	9204      	str	r2, [sp, #16]
   82bfc:	2b00      	cmp	r3, #0
   82bfe:	db0a      	blt.n	82c16 <_vfiprintf_r+0x55e>
   82c00:	ea54 0305 	orrs.w	r3, r4, r5
   82c04:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82c08:	d105      	bne.n	82c16 <_vfiprintf_r+0x55e>
   82c0a:	9b01      	ldr	r3, [sp, #4]
   82c0c:	2b00      	cmp	r3, #0
   82c0e:	f000 8427 	beq.w	83460 <_vfiprintf_r+0xda8>
   82c12:	2400      	movs	r4, #0
   82c14:	2500      	movs	r5, #0
   82c16:	f04f 0900 	mov.w	r9, #0
   82c1a:	4657      	mov	r7, sl
   82c1c:	08e2      	lsrs	r2, r4, #3
   82c1e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82c22:	08e9      	lsrs	r1, r5, #3
   82c24:	f004 0307 	and.w	r3, r4, #7
   82c28:	460d      	mov	r5, r1
   82c2a:	4614      	mov	r4, r2
   82c2c:	3330      	adds	r3, #48	; 0x30
   82c2e:	ea54 0205 	orrs.w	r2, r4, r5
   82c32:	f807 3d01 	strb.w	r3, [r7, #-1]!
   82c36:	d1f1      	bne.n	82c1c <_vfiprintf_r+0x564>
   82c38:	07f4      	lsls	r4, r6, #31
   82c3a:	d5bc      	bpl.n	82bb6 <_vfiprintf_r+0x4fe>
   82c3c:	2b30      	cmp	r3, #48	; 0x30
   82c3e:	d0ba      	beq.n	82bb6 <_vfiprintf_r+0x4fe>
   82c40:	2230      	movs	r2, #48	; 0x30
   82c42:	1e7b      	subs	r3, r7, #1
   82c44:	f807 2c01 	strb.w	r2, [r7, #-1]
   82c48:	ebc3 020a 	rsb	r2, r3, sl
   82c4c:	9203      	str	r2, [sp, #12]
   82c4e:	461f      	mov	r7, r3
   82c50:	e658      	b.n	82904 <_vfiprintf_r+0x24c>
   82c52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82c56:	2400      	movs	r4, #0
   82c58:	f818 3b01 	ldrb.w	r3, [r8], #1
   82c5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82c60:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   82c64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82c68:	2a09      	cmp	r2, #9
   82c6a:	d9f5      	bls.n	82c58 <_vfiprintf_r+0x5a0>
   82c6c:	e58d      	b.n	8278a <_vfiprintf_r+0xd2>
   82c6e:	f898 3000 	ldrb.w	r3, [r8]
   82c72:	2101      	movs	r1, #1
   82c74:	202b      	movs	r0, #43	; 0x2b
   82c76:	e586      	b.n	82786 <_vfiprintf_r+0xce>
   82c78:	f898 3000 	ldrb.w	r3, [r8]
   82c7c:	f108 0501 	add.w	r5, r8, #1
   82c80:	2b2a      	cmp	r3, #42	; 0x2a
   82c82:	f000 83cc 	beq.w	8341e <_vfiprintf_r+0xd66>
   82c86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82c8a:	2a09      	cmp	r2, #9
   82c8c:	46a8      	mov	r8, r5
   82c8e:	bf98      	it	ls
   82c90:	2500      	movls	r5, #0
   82c92:	f200 83b5 	bhi.w	83400 <_vfiprintf_r+0xd48>
   82c96:	f818 3b01 	ldrb.w	r3, [r8], #1
   82c9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82c9e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82ca2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82ca6:	2a09      	cmp	r2, #9
   82ca8:	d9f5      	bls.n	82c96 <_vfiprintf_r+0x5de>
   82caa:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   82cae:	9201      	str	r2, [sp, #4]
   82cb0:	e56b      	b.n	8278a <_vfiprintf_r+0xd2>
   82cb2:	9406      	str	r4, [sp, #24]
   82cb4:	2900      	cmp	r1, #0
   82cb6:	d08f      	beq.n	82bd8 <_vfiprintf_r+0x520>
   82cb8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   82cbc:	e78c      	b.n	82bd8 <_vfiprintf_r+0x520>
   82cbe:	f04f 0300 	mov.w	r3, #0
   82cc2:	9a04      	ldr	r2, [sp, #16]
   82cc4:	9406      	str	r4, [sp, #24]
   82cc6:	6817      	ldr	r7, [r2, #0]
   82cc8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82ccc:	1d14      	adds	r4, r2, #4
   82cce:	9b01      	ldr	r3, [sp, #4]
   82cd0:	2f00      	cmp	r7, #0
   82cd2:	f000 837f 	beq.w	833d4 <_vfiprintf_r+0xd1c>
   82cd6:	2b00      	cmp	r3, #0
   82cd8:	f2c0 8353 	blt.w	83382 <_vfiprintf_r+0xcca>
   82cdc:	461a      	mov	r2, r3
   82cde:	2100      	movs	r1, #0
   82ce0:	4638      	mov	r0, r7
   82ce2:	f001 fc4d 	bl	84580 <memchr>
   82ce6:	2800      	cmp	r0, #0
   82ce8:	f000 838e 	beq.w	83408 <_vfiprintf_r+0xd50>
   82cec:	1bc3      	subs	r3, r0, r7
   82cee:	9303      	str	r3, [sp, #12]
   82cf0:	2300      	movs	r3, #0
   82cf2:	9404      	str	r4, [sp, #16]
   82cf4:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   82cf8:	9301      	str	r3, [sp, #4]
   82cfa:	e603      	b.n	82904 <_vfiprintf_r+0x24c>
   82cfc:	9406      	str	r4, [sp, #24]
   82cfe:	2900      	cmp	r1, #0
   82d00:	f040 839d 	bne.w	8343e <_vfiprintf_r+0xd86>
   82d04:	f016 0920 	ands.w	r9, r6, #32
   82d08:	d134      	bne.n	82d74 <_vfiprintf_r+0x6bc>
   82d0a:	f016 0310 	ands.w	r3, r6, #16
   82d0e:	d103      	bne.n	82d18 <_vfiprintf_r+0x660>
   82d10:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   82d14:	f040 831f 	bne.w	83356 <_vfiprintf_r+0xc9e>
   82d18:	9a04      	ldr	r2, [sp, #16]
   82d1a:	2500      	movs	r5, #0
   82d1c:	4613      	mov	r3, r2
   82d1e:	6814      	ldr	r4, [r2, #0]
   82d20:	9a01      	ldr	r2, [sp, #4]
   82d22:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   82d26:	2a00      	cmp	r2, #0
   82d28:	f103 0304 	add.w	r3, r3, #4
   82d2c:	f2c0 8327 	blt.w	8337e <_vfiprintf_r+0xcc6>
   82d30:	ea54 0205 	orrs.w	r2, r4, r5
   82d34:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82d38:	9304      	str	r3, [sp, #16]
   82d3a:	f47f af22 	bne.w	82b82 <_vfiprintf_r+0x4ca>
   82d3e:	9b01      	ldr	r3, [sp, #4]
   82d40:	2b00      	cmp	r3, #0
   82d42:	f43f addb 	beq.w	828fc <_vfiprintf_r+0x244>
   82d46:	2400      	movs	r4, #0
   82d48:	af2a      	add	r7, sp, #168	; 0xa8
   82d4a:	3430      	adds	r4, #48	; 0x30
   82d4c:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82d50:	ebc7 030a 	rsb	r3, r7, sl
   82d54:	9303      	str	r3, [sp, #12]
   82d56:	e5d5      	b.n	82904 <_vfiprintf_r+0x24c>
   82d58:	f046 0620 	orr.w	r6, r6, #32
   82d5c:	f898 3000 	ldrb.w	r3, [r8]
   82d60:	e511      	b.n	82786 <_vfiprintf_r+0xce>
   82d62:	9406      	str	r4, [sp, #24]
   82d64:	2900      	cmp	r1, #0
   82d66:	f040 8375 	bne.w	83454 <_vfiprintf_r+0xd9c>
   82d6a:	f046 0610 	orr.w	r6, r6, #16
   82d6e:	f016 0920 	ands.w	r9, r6, #32
   82d72:	d0ca      	beq.n	82d0a <_vfiprintf_r+0x652>
   82d74:	f04f 0200 	mov.w	r2, #0
   82d78:	9b04      	ldr	r3, [sp, #16]
   82d7a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   82d7e:	3307      	adds	r3, #7
   82d80:	f023 0307 	bic.w	r3, r3, #7
   82d84:	f103 0208 	add.w	r2, r3, #8
   82d88:	e9d3 4500 	ldrd	r4, r5, [r3]
   82d8c:	9b01      	ldr	r3, [sp, #4]
   82d8e:	9204      	str	r2, [sp, #16]
   82d90:	2b00      	cmp	r3, #0
   82d92:	f2c0 81f9 	blt.w	83188 <_vfiprintf_r+0xad0>
   82d96:	ea54 0305 	orrs.w	r3, r4, r5
   82d9a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82d9e:	f04f 0900 	mov.w	r9, #0
   82da2:	f47f aeee 	bne.w	82b82 <_vfiprintf_r+0x4ca>
   82da6:	e7ca      	b.n	82d3e <_vfiprintf_r+0x686>
   82da8:	9406      	str	r4, [sp, #24]
   82daa:	2900      	cmp	r1, #0
   82dac:	f040 8355 	bne.w	8345a <_vfiprintf_r+0xda2>
   82db0:	06b2      	lsls	r2, r6, #26
   82db2:	48b2      	ldr	r0, [pc, #712]	; (8307c <_vfiprintf_r+0x9c4>)
   82db4:	d541      	bpl.n	82e3a <_vfiprintf_r+0x782>
   82db6:	9a04      	ldr	r2, [sp, #16]
   82db8:	3207      	adds	r2, #7
   82dba:	f022 0207 	bic.w	r2, r2, #7
   82dbe:	f102 0108 	add.w	r1, r2, #8
   82dc2:	9104      	str	r1, [sp, #16]
   82dc4:	e9d2 4500 	ldrd	r4, r5, [r2]
   82dc8:	f016 0901 	ands.w	r9, r6, #1
   82dcc:	f000 817e 	beq.w	830cc <_vfiprintf_r+0xa14>
   82dd0:	ea54 0205 	orrs.w	r2, r4, r5
   82dd4:	f040 822b 	bne.w	8322e <_vfiprintf_r+0xb76>
   82dd8:	f04f 0300 	mov.w	r3, #0
   82ddc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82de0:	9b01      	ldr	r3, [sp, #4]
   82de2:	2b00      	cmp	r3, #0
   82de4:	f2c0 82f3 	blt.w	833ce <_vfiprintf_r+0xd16>
   82de8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82dec:	e581      	b.n	828f2 <_vfiprintf_r+0x23a>
   82dee:	9a04      	ldr	r2, [sp, #16]
   82df0:	f04f 0100 	mov.w	r1, #0
   82df4:	6813      	ldr	r3, [r2, #0]
   82df6:	2501      	movs	r5, #1
   82df8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   82dfc:	4613      	mov	r3, r2
   82dfe:	3304      	adds	r3, #4
   82e00:	9406      	str	r4, [sp, #24]
   82e02:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82e06:	9304      	str	r3, [sp, #16]
   82e08:	9503      	str	r5, [sp, #12]
   82e0a:	af10      	add	r7, sp, #64	; 0x40
   82e0c:	2300      	movs	r3, #0
   82e0e:	9301      	str	r3, [sp, #4]
   82e10:	e582      	b.n	82918 <_vfiprintf_r+0x260>
   82e12:	f898 3000 	ldrb.w	r3, [r8]
   82e16:	2800      	cmp	r0, #0
   82e18:	f47f acb5 	bne.w	82786 <_vfiprintf_r+0xce>
   82e1c:	2101      	movs	r1, #1
   82e1e:	2020      	movs	r0, #32
   82e20:	e4b1      	b.n	82786 <_vfiprintf_r+0xce>
   82e22:	f046 0601 	orr.w	r6, r6, #1
   82e26:	f898 3000 	ldrb.w	r3, [r8]
   82e2a:	e4ac      	b.n	82786 <_vfiprintf_r+0xce>
   82e2c:	9406      	str	r4, [sp, #24]
   82e2e:	2900      	cmp	r1, #0
   82e30:	f040 832a 	bne.w	83488 <_vfiprintf_r+0xdd0>
   82e34:	06b2      	lsls	r2, r6, #26
   82e36:	4892      	ldr	r0, [pc, #584]	; (83080 <_vfiprintf_r+0x9c8>)
   82e38:	d4bd      	bmi.n	82db6 <_vfiprintf_r+0x6fe>
   82e3a:	9904      	ldr	r1, [sp, #16]
   82e3c:	06f7      	lsls	r7, r6, #27
   82e3e:	460a      	mov	r2, r1
   82e40:	f100 819d 	bmi.w	8317e <_vfiprintf_r+0xac6>
   82e44:	0675      	lsls	r5, r6, #25
   82e46:	f140 819a 	bpl.w	8317e <_vfiprintf_r+0xac6>
   82e4a:	3204      	adds	r2, #4
   82e4c:	880c      	ldrh	r4, [r1, #0]
   82e4e:	9204      	str	r2, [sp, #16]
   82e50:	2500      	movs	r5, #0
   82e52:	e7b9      	b.n	82dc8 <_vfiprintf_r+0x710>
   82e54:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   82e58:	f898 3000 	ldrb.w	r3, [r8]
   82e5c:	e493      	b.n	82786 <_vfiprintf_r+0xce>
   82e5e:	f898 3000 	ldrb.w	r3, [r8]
   82e62:	2b6c      	cmp	r3, #108	; 0x6c
   82e64:	bf03      	ittte	eq
   82e66:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   82e6a:	f046 0620 	orreq.w	r6, r6, #32
   82e6e:	f108 0801 	addeq.w	r8, r8, #1
   82e72:	f046 0610 	orrne.w	r6, r6, #16
   82e76:	e486      	b.n	82786 <_vfiprintf_r+0xce>
   82e78:	2900      	cmp	r1, #0
   82e7a:	f040 8302 	bne.w	83482 <_vfiprintf_r+0xdca>
   82e7e:	06b4      	lsls	r4, r6, #26
   82e80:	f140 8220 	bpl.w	832c4 <_vfiprintf_r+0xc0c>
   82e84:	9a04      	ldr	r2, [sp, #16]
   82e86:	4613      	mov	r3, r2
   82e88:	3304      	adds	r3, #4
   82e8a:	9304      	str	r3, [sp, #16]
   82e8c:	9b02      	ldr	r3, [sp, #8]
   82e8e:	6811      	ldr	r1, [r2, #0]
   82e90:	17dd      	asrs	r5, r3, #31
   82e92:	461a      	mov	r2, r3
   82e94:	462b      	mov	r3, r5
   82e96:	e9c1 2300 	strd	r2, r3, [r1]
   82e9a:	e43e      	b.n	8271a <_vfiprintf_r+0x62>
   82e9c:	9406      	str	r4, [sp, #24]
   82e9e:	2900      	cmp	r1, #0
   82ea0:	f43f ae51 	beq.w	82b46 <_vfiprintf_r+0x48e>
   82ea4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   82ea8:	e64d      	b.n	82b46 <_vfiprintf_r+0x48e>
   82eaa:	9406      	str	r4, [sp, #24]
   82eac:	2900      	cmp	r1, #0
   82eae:	f040 82e5 	bne.w	8347c <_vfiprintf_r+0xdc4>
   82eb2:	2b00      	cmp	r3, #0
   82eb4:	f000 8094 	beq.w	82fe0 <_vfiprintf_r+0x928>
   82eb8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   82ebc:	f04f 0300 	mov.w	r3, #0
   82ec0:	2501      	movs	r5, #1
   82ec2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82ec6:	9503      	str	r5, [sp, #12]
   82ec8:	af10      	add	r7, sp, #64	; 0x40
   82eca:	e79f      	b.n	82e0c <_vfiprintf_r+0x754>
   82ecc:	aa0d      	add	r2, sp, #52	; 0x34
   82ece:	9900      	ldr	r1, [sp, #0]
   82ed0:	4648      	mov	r0, r9
   82ed2:	9309      	str	r3, [sp, #36]	; 0x24
   82ed4:	f7ff fbb4 	bl	82640 <__sprint_r.part.0>
   82ed8:	2800      	cmp	r0, #0
   82eda:	f040 8088 	bne.w	82fee <_vfiprintf_r+0x936>
   82ede:	980e      	ldr	r0, [sp, #56]	; 0x38
   82ee0:	46d4      	mov	ip, sl
   82ee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82ee4:	f100 0e01 	add.w	lr, r0, #1
   82ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82eea:	e53a      	b.n	82962 <_vfiprintf_r+0x2aa>
   82eec:	aa0d      	add	r2, sp, #52	; 0x34
   82eee:	9900      	ldr	r1, [sp, #0]
   82ef0:	9805      	ldr	r0, [sp, #20]
   82ef2:	f7ff fba5 	bl	82640 <__sprint_r.part.0>
   82ef6:	2800      	cmp	r0, #0
   82ef8:	d179      	bne.n	82fee <_vfiprintf_r+0x936>
   82efa:	46d3      	mov	fp, sl
   82efc:	980e      	ldr	r0, [sp, #56]	; 0x38
   82efe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   82f02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82f04:	f100 0e01 	add.w	lr, r0, #1
   82f08:	2b00      	cmp	r3, #0
   82f0a:	f43f ad59 	beq.w	829c0 <_vfiprintf_r+0x308>
   82f0e:	3201      	adds	r2, #1
   82f10:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   82f14:	2301      	movs	r3, #1
   82f16:	f1be 0f07 	cmp.w	lr, #7
   82f1a:	920f      	str	r2, [sp, #60]	; 0x3c
   82f1c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82f20:	e88b 000a 	stmia.w	fp, {r1, r3}
   82f24:	f340 80c0 	ble.w	830a8 <_vfiprintf_r+0x9f0>
   82f28:	2a00      	cmp	r2, #0
   82f2a:	f040 814d 	bne.w	831c8 <_vfiprintf_r+0xb10>
   82f2e:	9907      	ldr	r1, [sp, #28]
   82f30:	2900      	cmp	r1, #0
   82f32:	f040 80bf 	bne.w	830b4 <_vfiprintf_r+0x9fc>
   82f36:	469e      	mov	lr, r3
   82f38:	4610      	mov	r0, r2
   82f3a:	46d3      	mov	fp, sl
   82f3c:	9b08      	ldr	r3, [sp, #32]
   82f3e:	2b80      	cmp	r3, #128	; 0x80
   82f40:	f43f ad59 	beq.w	829f6 <_vfiprintf_r+0x33e>
   82f44:	9b01      	ldr	r3, [sp, #4]
   82f46:	9903      	ldr	r1, [sp, #12]
   82f48:	1a5c      	subs	r4, r3, r1
   82f4a:	2c00      	cmp	r4, #0
   82f4c:	f77f ad9c 	ble.w	82a88 <_vfiprintf_r+0x3d0>
   82f50:	2c10      	cmp	r4, #16
   82f52:	f8df 9130 	ldr.w	r9, [pc, #304]	; 83084 <_vfiprintf_r+0x9cc>
   82f56:	dd25      	ble.n	82fa4 <_vfiprintf_r+0x8ec>
   82f58:	46dc      	mov	ip, fp
   82f5a:	2310      	movs	r3, #16
   82f5c:	46c3      	mov	fp, r8
   82f5e:	46a8      	mov	r8, r5
   82f60:	464d      	mov	r5, r9
   82f62:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82f66:	e007      	b.n	82f78 <_vfiprintf_r+0x8c0>
   82f68:	f100 0e02 	add.w	lr, r0, #2
   82f6c:	4608      	mov	r0, r1
   82f6e:	f10c 0c08 	add.w	ip, ip, #8
   82f72:	3c10      	subs	r4, #16
   82f74:	2c10      	cmp	r4, #16
   82f76:	dd11      	ble.n	82f9c <_vfiprintf_r+0x8e4>
   82f78:	1c41      	adds	r1, r0, #1
   82f7a:	3210      	adds	r2, #16
   82f7c:	2907      	cmp	r1, #7
   82f7e:	920f      	str	r2, [sp, #60]	; 0x3c
   82f80:	f8cc 5000 	str.w	r5, [ip]
   82f84:	f8cc 3004 	str.w	r3, [ip, #4]
   82f88:	910e      	str	r1, [sp, #56]	; 0x38
   82f8a:	dded      	ble.n	82f68 <_vfiprintf_r+0x8b0>
   82f8c:	b9d2      	cbnz	r2, 82fc4 <_vfiprintf_r+0x90c>
   82f8e:	3c10      	subs	r4, #16
   82f90:	2c10      	cmp	r4, #16
   82f92:	f04f 0e01 	mov.w	lr, #1
   82f96:	4610      	mov	r0, r2
   82f98:	46d4      	mov	ip, sl
   82f9a:	dced      	bgt.n	82f78 <_vfiprintf_r+0x8c0>
   82f9c:	46a9      	mov	r9, r5
   82f9e:	4645      	mov	r5, r8
   82fa0:	46d8      	mov	r8, fp
   82fa2:	46e3      	mov	fp, ip
   82fa4:	4422      	add	r2, r4
   82fa6:	f1be 0f07 	cmp.w	lr, #7
   82faa:	920f      	str	r2, [sp, #60]	; 0x3c
   82fac:	f8cb 9000 	str.w	r9, [fp]
   82fb0:	f8cb 4004 	str.w	r4, [fp, #4]
   82fb4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82fb8:	dc2e      	bgt.n	83018 <_vfiprintf_r+0x960>
   82fba:	f10b 0b08 	add.w	fp, fp, #8
   82fbe:	f10e 0e01 	add.w	lr, lr, #1
   82fc2:	e561      	b.n	82a88 <_vfiprintf_r+0x3d0>
   82fc4:	aa0d      	add	r2, sp, #52	; 0x34
   82fc6:	9900      	ldr	r1, [sp, #0]
   82fc8:	4648      	mov	r0, r9
   82fca:	9301      	str	r3, [sp, #4]
   82fcc:	f7ff fb38 	bl	82640 <__sprint_r.part.0>
   82fd0:	b968      	cbnz	r0, 82fee <_vfiprintf_r+0x936>
   82fd2:	980e      	ldr	r0, [sp, #56]	; 0x38
   82fd4:	46d4      	mov	ip, sl
   82fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82fd8:	f100 0e01 	add.w	lr, r0, #1
   82fdc:	9b01      	ldr	r3, [sp, #4]
   82fde:	e7c8      	b.n	82f72 <_vfiprintf_r+0x8ba>
   82fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   82fe2:	b123      	cbz	r3, 82fee <_vfiprintf_r+0x936>
   82fe4:	9805      	ldr	r0, [sp, #20]
   82fe6:	aa0d      	add	r2, sp, #52	; 0x34
   82fe8:	9900      	ldr	r1, [sp, #0]
   82fea:	f7ff fb29 	bl	82640 <__sprint_r.part.0>
   82fee:	9b00      	ldr	r3, [sp, #0]
   82ff0:	899b      	ldrh	r3, [r3, #12]
   82ff2:	065a      	lsls	r2, r3, #25
   82ff4:	f100 817b 	bmi.w	832ee <_vfiprintf_r+0xc36>
   82ff8:	9802      	ldr	r0, [sp, #8]
   82ffa:	b02b      	add	sp, #172	; 0xac
   82ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83000:	aa0d      	add	r2, sp, #52	; 0x34
   83002:	9900      	ldr	r1, [sp, #0]
   83004:	4648      	mov	r0, r9
   83006:	f7ff fb1b 	bl	82640 <__sprint_r.part.0>
   8300a:	2800      	cmp	r0, #0
   8300c:	d1ef      	bne.n	82fee <_vfiprintf_r+0x936>
   8300e:	990e      	ldr	r1, [sp, #56]	; 0x38
   83010:	46d3      	mov	fp, sl
   83012:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83014:	1c48      	adds	r0, r1, #1
   83016:	e55e      	b.n	82ad6 <_vfiprintf_r+0x41e>
   83018:	2a00      	cmp	r2, #0
   8301a:	f040 80fa 	bne.w	83212 <_vfiprintf_r+0xb5a>
   8301e:	46d3      	mov	fp, sl
   83020:	9a03      	ldr	r2, [sp, #12]
   83022:	2301      	movs	r3, #1
   83024:	921b      	str	r2, [sp, #108]	; 0x6c
   83026:	920f      	str	r2, [sp, #60]	; 0x3c
   83028:	971a      	str	r7, [sp, #104]	; 0x68
   8302a:	930e      	str	r3, [sp, #56]	; 0x38
   8302c:	f10b 0b08 	add.w	fp, fp, #8
   83030:	0771      	lsls	r1, r6, #29
   83032:	d504      	bpl.n	8303e <_vfiprintf_r+0x986>
   83034:	9b06      	ldr	r3, [sp, #24]
   83036:	1b5c      	subs	r4, r3, r5
   83038:	2c00      	cmp	r4, #0
   8303a:	f73f ad3d 	bgt.w	82ab8 <_vfiprintf_r+0x400>
   8303e:	9b02      	ldr	r3, [sp, #8]
   83040:	9906      	ldr	r1, [sp, #24]
   83042:	42a9      	cmp	r1, r5
   83044:	bfac      	ite	ge
   83046:	185b      	addge	r3, r3, r1
   83048:	195b      	addlt	r3, r3, r5
   8304a:	9302      	str	r3, [sp, #8]
   8304c:	2a00      	cmp	r2, #0
   8304e:	f040 80ad 	bne.w	831ac <_vfiprintf_r+0xaf4>
   83052:	2300      	movs	r3, #0
   83054:	930e      	str	r3, [sp, #56]	; 0x38
   83056:	46d3      	mov	fp, sl
   83058:	f7ff bb5f 	b.w	8271a <_vfiprintf_r+0x62>
   8305c:	aa0d      	add	r2, sp, #52	; 0x34
   8305e:	9900      	ldr	r1, [sp, #0]
   83060:	4648      	mov	r0, r9
   83062:	9307      	str	r3, [sp, #28]
   83064:	f7ff faec 	bl	82640 <__sprint_r.part.0>
   83068:	2800      	cmp	r0, #0
   8306a:	d1c0      	bne.n	82fee <_vfiprintf_r+0x936>
   8306c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8306e:	46d6      	mov	lr, sl
   83070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83072:	f100 0c01 	add.w	ip, r0, #1
   83076:	9b07      	ldr	r3, [sp, #28]
   83078:	e4d4      	b.n	82a24 <_vfiprintf_r+0x36c>
   8307a:	bf00      	nop
   8307c:	0008527c 	.word	0x0008527c
   83080:	00085290 	.word	0x00085290
   83084:	0008526c 	.word	0x0008526c
   83088:	2a00      	cmp	r2, #0
   8308a:	f47f af2f 	bne.w	82eec <_vfiprintf_r+0x834>
   8308e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83092:	2b00      	cmp	r3, #0
   83094:	f000 80f3 	beq.w	8327e <_vfiprintf_r+0xbc6>
   83098:	2301      	movs	r3, #1
   8309a:	461a      	mov	r2, r3
   8309c:	469e      	mov	lr, r3
   8309e:	46d3      	mov	fp, sl
   830a0:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   830a4:	931b      	str	r3, [sp, #108]	; 0x6c
   830a6:	911a      	str	r1, [sp, #104]	; 0x68
   830a8:	4670      	mov	r0, lr
   830aa:	f10b 0b08 	add.w	fp, fp, #8
   830ae:	f10e 0e01 	add.w	lr, lr, #1
   830b2:	e485      	b.n	829c0 <_vfiprintf_r+0x308>
   830b4:	469e      	mov	lr, r3
   830b6:	46d3      	mov	fp, sl
   830b8:	a90c      	add	r1, sp, #48	; 0x30
   830ba:	2202      	movs	r2, #2
   830bc:	911a      	str	r1, [sp, #104]	; 0x68
   830be:	921b      	str	r2, [sp, #108]	; 0x6c
   830c0:	4670      	mov	r0, lr
   830c2:	f10b 0b08 	add.w	fp, fp, #8
   830c6:	f10e 0e01 	add.w	lr, lr, #1
   830ca:	e737      	b.n	82f3c <_vfiprintf_r+0x884>
   830cc:	9b01      	ldr	r3, [sp, #4]
   830ce:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   830d2:	2b00      	cmp	r3, #0
   830d4:	f2c0 811b 	blt.w	8330e <_vfiprintf_r+0xc56>
   830d8:	ea54 0305 	orrs.w	r3, r4, r5
   830dc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   830e0:	f43f ac07 	beq.w	828f2 <_vfiprintf_r+0x23a>
   830e4:	4657      	mov	r7, sl
   830e6:	0923      	lsrs	r3, r4, #4
   830e8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   830ec:	0929      	lsrs	r1, r5, #4
   830ee:	f004 020f 	and.w	r2, r4, #15
   830f2:	460d      	mov	r5, r1
   830f4:	461c      	mov	r4, r3
   830f6:	5c83      	ldrb	r3, [r0, r2]
   830f8:	f807 3d01 	strb.w	r3, [r7, #-1]!
   830fc:	ea54 0305 	orrs.w	r3, r4, r5
   83100:	d1f1      	bne.n	830e6 <_vfiprintf_r+0xa2e>
   83102:	ebc7 030a 	rsb	r3, r7, sl
   83106:	9303      	str	r3, [sp, #12]
   83108:	f7ff bbfc 	b.w	82904 <_vfiprintf_r+0x24c>
   8310c:	aa0d      	add	r2, sp, #52	; 0x34
   8310e:	9900      	ldr	r1, [sp, #0]
   83110:	9805      	ldr	r0, [sp, #20]
   83112:	f7ff fa95 	bl	82640 <__sprint_r.part.0>
   83116:	2800      	cmp	r0, #0
   83118:	f47f af69 	bne.w	82fee <_vfiprintf_r+0x936>
   8311c:	46d3      	mov	fp, sl
   8311e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83120:	e786      	b.n	83030 <_vfiprintf_r+0x978>
   83122:	f016 0210 	ands.w	r2, r6, #16
   83126:	f000 80b5 	beq.w	83294 <_vfiprintf_r+0xbdc>
   8312a:	9904      	ldr	r1, [sp, #16]
   8312c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83130:	460a      	mov	r2, r1
   83132:	680c      	ldr	r4, [r1, #0]
   83134:	9901      	ldr	r1, [sp, #4]
   83136:	3204      	adds	r2, #4
   83138:	2900      	cmp	r1, #0
   8313a:	f04f 0500 	mov.w	r5, #0
   8313e:	f2c0 8152 	blt.w	833e6 <_vfiprintf_r+0xd2e>
   83142:	ea54 0105 	orrs.w	r1, r4, r5
   83146:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8314a:	9204      	str	r2, [sp, #16]
   8314c:	f43f ad5d 	beq.w	82c0a <_vfiprintf_r+0x552>
   83150:	4699      	mov	r9, r3
   83152:	e562      	b.n	82c1a <_vfiprintf_r+0x562>
   83154:	9a04      	ldr	r2, [sp, #16]
   83156:	06f7      	lsls	r7, r6, #27
   83158:	4613      	mov	r3, r2
   8315a:	d409      	bmi.n	83170 <_vfiprintf_r+0xab8>
   8315c:	0675      	lsls	r5, r6, #25
   8315e:	d507      	bpl.n	83170 <_vfiprintf_r+0xab8>
   83160:	f9b2 4000 	ldrsh.w	r4, [r2]
   83164:	3304      	adds	r3, #4
   83166:	17e5      	asrs	r5, r4, #31
   83168:	9304      	str	r3, [sp, #16]
   8316a:	4622      	mov	r2, r4
   8316c:	462b      	mov	r3, r5
   8316e:	e4f7      	b.n	82b60 <_vfiprintf_r+0x4a8>
   83170:	681c      	ldr	r4, [r3, #0]
   83172:	3304      	adds	r3, #4
   83174:	17e5      	asrs	r5, r4, #31
   83176:	9304      	str	r3, [sp, #16]
   83178:	4622      	mov	r2, r4
   8317a:	462b      	mov	r3, r5
   8317c:	e4f0      	b.n	82b60 <_vfiprintf_r+0x4a8>
   8317e:	6814      	ldr	r4, [r2, #0]
   83180:	3204      	adds	r2, #4
   83182:	9204      	str	r2, [sp, #16]
   83184:	2500      	movs	r5, #0
   83186:	e61f      	b.n	82dc8 <_vfiprintf_r+0x710>
   83188:	f04f 0900 	mov.w	r9, #0
   8318c:	ea54 0305 	orrs.w	r3, r4, r5
   83190:	f47f acf7 	bne.w	82b82 <_vfiprintf_r+0x4ca>
   83194:	e5d8      	b.n	82d48 <_vfiprintf_r+0x690>
   83196:	aa0d      	add	r2, sp, #52	; 0x34
   83198:	9900      	ldr	r1, [sp, #0]
   8319a:	9805      	ldr	r0, [sp, #20]
   8319c:	f7ff fa50 	bl	82640 <__sprint_r.part.0>
   831a0:	2800      	cmp	r0, #0
   831a2:	f47f af24 	bne.w	82fee <_vfiprintf_r+0x936>
   831a6:	46d3      	mov	fp, sl
   831a8:	f7ff bb51 	b.w	8284e <_vfiprintf_r+0x196>
   831ac:	aa0d      	add	r2, sp, #52	; 0x34
   831ae:	9900      	ldr	r1, [sp, #0]
   831b0:	9805      	ldr	r0, [sp, #20]
   831b2:	f7ff fa45 	bl	82640 <__sprint_r.part.0>
   831b6:	2800      	cmp	r0, #0
   831b8:	f43f af4b 	beq.w	83052 <_vfiprintf_r+0x99a>
   831bc:	e717      	b.n	82fee <_vfiprintf_r+0x936>
   831be:	2400      	movs	r4, #0
   831c0:	2500      	movs	r5, #0
   831c2:	f04f 0900 	mov.w	r9, #0
   831c6:	e78d      	b.n	830e4 <_vfiprintf_r+0xa2c>
   831c8:	aa0d      	add	r2, sp, #52	; 0x34
   831ca:	9900      	ldr	r1, [sp, #0]
   831cc:	9805      	ldr	r0, [sp, #20]
   831ce:	f7ff fa37 	bl	82640 <__sprint_r.part.0>
   831d2:	2800      	cmp	r0, #0
   831d4:	f47f af0b 	bne.w	82fee <_vfiprintf_r+0x936>
   831d8:	980e      	ldr	r0, [sp, #56]	; 0x38
   831da:	46d3      	mov	fp, sl
   831dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   831de:	f100 0e01 	add.w	lr, r0, #1
   831e2:	f7ff bbed 	b.w	829c0 <_vfiprintf_r+0x308>
   831e6:	aa0d      	add	r2, sp, #52	; 0x34
   831e8:	9900      	ldr	r1, [sp, #0]
   831ea:	9805      	ldr	r0, [sp, #20]
   831ec:	f7ff fa28 	bl	82640 <__sprint_r.part.0>
   831f0:	2800      	cmp	r0, #0
   831f2:	f47f aefc 	bne.w	82fee <_vfiprintf_r+0x936>
   831f6:	980e      	ldr	r0, [sp, #56]	; 0x38
   831f8:	46d3      	mov	fp, sl
   831fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   831fc:	f100 0e01 	add.w	lr, r0, #1
   83200:	e69c      	b.n	82f3c <_vfiprintf_r+0x884>
   83202:	2a00      	cmp	r2, #0
   83204:	f040 80c8 	bne.w	83398 <_vfiprintf_r+0xce0>
   83208:	f04f 0e01 	mov.w	lr, #1
   8320c:	4610      	mov	r0, r2
   8320e:	46d3      	mov	fp, sl
   83210:	e698      	b.n	82f44 <_vfiprintf_r+0x88c>
   83212:	aa0d      	add	r2, sp, #52	; 0x34
   83214:	9900      	ldr	r1, [sp, #0]
   83216:	9805      	ldr	r0, [sp, #20]
   83218:	f7ff fa12 	bl	82640 <__sprint_r.part.0>
   8321c:	2800      	cmp	r0, #0
   8321e:	f47f aee6 	bne.w	82fee <_vfiprintf_r+0x936>
   83222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83224:	46d3      	mov	fp, sl
   83226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83228:	f103 0e01 	add.w	lr, r3, #1
   8322c:	e42c      	b.n	82a88 <_vfiprintf_r+0x3d0>
   8322e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   83232:	f04f 0300 	mov.w	r3, #0
   83236:	2230      	movs	r2, #48	; 0x30
   83238:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8323c:	9a01      	ldr	r2, [sp, #4]
   8323e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83242:	2a00      	cmp	r2, #0
   83244:	f046 0302 	orr.w	r3, r6, #2
   83248:	f2c0 80bb 	blt.w	833c2 <_vfiprintf_r+0xd0a>
   8324c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83250:	f046 0602 	orr.w	r6, r6, #2
   83254:	f04f 0900 	mov.w	r9, #0
   83258:	e744      	b.n	830e4 <_vfiprintf_r+0xa2c>
   8325a:	f04f 0900 	mov.w	r9, #0
   8325e:	488c      	ldr	r0, [pc, #560]	; (83490 <_vfiprintf_r+0xdd8>)
   83260:	e740      	b.n	830e4 <_vfiprintf_r+0xa2c>
   83262:	9b01      	ldr	r3, [sp, #4]
   83264:	4264      	negs	r4, r4
   83266:	f04f 092d 	mov.w	r9, #45	; 0x2d
   8326a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8326e:	2b00      	cmp	r3, #0
   83270:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   83274:	f6ff ac85 	blt.w	82b82 <_vfiprintf_r+0x4ca>
   83278:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8327c:	e481      	b.n	82b82 <_vfiprintf_r+0x4ca>
   8327e:	9b07      	ldr	r3, [sp, #28]
   83280:	2b00      	cmp	r3, #0
   83282:	d063      	beq.n	8334c <_vfiprintf_r+0xc94>
   83284:	ab0c      	add	r3, sp, #48	; 0x30
   83286:	2202      	movs	r2, #2
   83288:	931a      	str	r3, [sp, #104]	; 0x68
   8328a:	921b      	str	r2, [sp, #108]	; 0x6c
   8328c:	f04f 0e01 	mov.w	lr, #1
   83290:	46d3      	mov	fp, sl
   83292:	e715      	b.n	830c0 <_vfiprintf_r+0xa08>
   83294:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   83298:	d03b      	beq.n	83312 <_vfiprintf_r+0xc5a>
   8329a:	9904      	ldr	r1, [sp, #16]
   8329c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   832a0:	460b      	mov	r3, r1
   832a2:	880c      	ldrh	r4, [r1, #0]
   832a4:	9901      	ldr	r1, [sp, #4]
   832a6:	3304      	adds	r3, #4
   832a8:	2900      	cmp	r1, #0
   832aa:	f04f 0500 	mov.w	r5, #0
   832ae:	f2c0 808c 	blt.w	833ca <_vfiprintf_r+0xd12>
   832b2:	ea54 0105 	orrs.w	r1, r4, r5
   832b6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   832ba:	9304      	str	r3, [sp, #16]
   832bc:	f43f aca5 	beq.w	82c0a <_vfiprintf_r+0x552>
   832c0:	4691      	mov	r9, r2
   832c2:	e4aa      	b.n	82c1a <_vfiprintf_r+0x562>
   832c4:	06f0      	lsls	r0, r6, #27
   832c6:	d40a      	bmi.n	832de <_vfiprintf_r+0xc26>
   832c8:	0671      	lsls	r1, r6, #25
   832ca:	d508      	bpl.n	832de <_vfiprintf_r+0xc26>
   832cc:	9a04      	ldr	r2, [sp, #16]
   832ce:	6813      	ldr	r3, [r2, #0]
   832d0:	3204      	adds	r2, #4
   832d2:	9204      	str	r2, [sp, #16]
   832d4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   832d8:	801a      	strh	r2, [r3, #0]
   832da:	f7ff ba1e 	b.w	8271a <_vfiprintf_r+0x62>
   832de:	9a04      	ldr	r2, [sp, #16]
   832e0:	6813      	ldr	r3, [r2, #0]
   832e2:	3204      	adds	r2, #4
   832e4:	9204      	str	r2, [sp, #16]
   832e6:	9a02      	ldr	r2, [sp, #8]
   832e8:	601a      	str	r2, [r3, #0]
   832ea:	f7ff ba16 	b.w	8271a <_vfiprintf_r+0x62>
   832ee:	f04f 30ff 	mov.w	r0, #4294967295
   832f2:	f7ff bac9 	b.w	82888 <_vfiprintf_r+0x1d0>
   832f6:	4616      	mov	r6, r2
   832f8:	4865      	ldr	r0, [pc, #404]	; (83490 <_vfiprintf_r+0xdd8>)
   832fa:	ea54 0205 	orrs.w	r2, r4, r5
   832fe:	9304      	str	r3, [sp, #16]
   83300:	f04f 0900 	mov.w	r9, #0
   83304:	f47f aeee 	bne.w	830e4 <_vfiprintf_r+0xa2c>
   83308:	2400      	movs	r4, #0
   8330a:	2500      	movs	r5, #0
   8330c:	e6ea      	b.n	830e4 <_vfiprintf_r+0xa2c>
   8330e:	9b04      	ldr	r3, [sp, #16]
   83310:	e7f3      	b.n	832fa <_vfiprintf_r+0xc42>
   83312:	9a04      	ldr	r2, [sp, #16]
   83314:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   83318:	4613      	mov	r3, r2
   8331a:	6814      	ldr	r4, [r2, #0]
   8331c:	9a01      	ldr	r2, [sp, #4]
   8331e:	3304      	adds	r3, #4
   83320:	2a00      	cmp	r2, #0
   83322:	f04f 0500 	mov.w	r5, #0
   83326:	db50      	blt.n	833ca <_vfiprintf_r+0xd12>
   83328:	ea54 0205 	orrs.w	r2, r4, r5
   8332c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83330:	9304      	str	r3, [sp, #16]
   83332:	f47f ac72 	bne.w	82c1a <_vfiprintf_r+0x562>
   83336:	e468      	b.n	82c0a <_vfiprintf_r+0x552>
   83338:	aa0d      	add	r2, sp, #52	; 0x34
   8333a:	9900      	ldr	r1, [sp, #0]
   8333c:	9805      	ldr	r0, [sp, #20]
   8333e:	f7ff f97f 	bl	82640 <__sprint_r.part.0>
   83342:	2800      	cmp	r0, #0
   83344:	f47f ae53 	bne.w	82fee <_vfiprintf_r+0x936>
   83348:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8334a:	e678      	b.n	8303e <_vfiprintf_r+0x986>
   8334c:	4610      	mov	r0, r2
   8334e:	f04f 0e01 	mov.w	lr, #1
   83352:	46d3      	mov	fp, sl
   83354:	e5f6      	b.n	82f44 <_vfiprintf_r+0x88c>
   83356:	9904      	ldr	r1, [sp, #16]
   83358:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8335c:	460a      	mov	r2, r1
   8335e:	880c      	ldrh	r4, [r1, #0]
   83360:	9901      	ldr	r1, [sp, #4]
   83362:	3204      	adds	r2, #4
   83364:	2900      	cmp	r1, #0
   83366:	f04f 0500 	mov.w	r5, #0
   8336a:	db55      	blt.n	83418 <_vfiprintf_r+0xd60>
   8336c:	ea54 0105 	orrs.w	r1, r4, r5
   83370:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83374:	9204      	str	r2, [sp, #16]
   83376:	4699      	mov	r9, r3
   83378:	f47f ac03 	bne.w	82b82 <_vfiprintf_r+0x4ca>
   8337c:	e4df      	b.n	82d3e <_vfiprintf_r+0x686>
   8337e:	9304      	str	r3, [sp, #16]
   83380:	e704      	b.n	8318c <_vfiprintf_r+0xad4>
   83382:	4638      	mov	r0, r7
   83384:	9404      	str	r4, [sp, #16]
   83386:	f7ff f8f9 	bl	8257c <strlen>
   8338a:	2300      	movs	r3, #0
   8338c:	9003      	str	r0, [sp, #12]
   8338e:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   83392:	9301      	str	r3, [sp, #4]
   83394:	f7ff bab6 	b.w	82904 <_vfiprintf_r+0x24c>
   83398:	aa0d      	add	r2, sp, #52	; 0x34
   8339a:	9900      	ldr	r1, [sp, #0]
   8339c:	9805      	ldr	r0, [sp, #20]
   8339e:	f7ff f94f 	bl	82640 <__sprint_r.part.0>
   833a2:	2800      	cmp	r0, #0
   833a4:	f47f ae23 	bne.w	82fee <_vfiprintf_r+0x936>
   833a8:	980e      	ldr	r0, [sp, #56]	; 0x38
   833aa:	46d3      	mov	fp, sl
   833ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   833ae:	f100 0e01 	add.w	lr, r0, #1
   833b2:	e5c7      	b.n	82f44 <_vfiprintf_r+0x88c>
   833b4:	980e      	ldr	r0, [sp, #56]	; 0x38
   833b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   833b8:	3001      	adds	r0, #1
   833ba:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 83498 <_vfiprintf_r+0xde0>
   833be:	f7ff baec 	b.w	8299a <_vfiprintf_r+0x2e2>
   833c2:	461e      	mov	r6, r3
   833c4:	f04f 0900 	mov.w	r9, #0
   833c8:	e68c      	b.n	830e4 <_vfiprintf_r+0xa2c>
   833ca:	9304      	str	r3, [sp, #16]
   833cc:	e423      	b.n	82c16 <_vfiprintf_r+0x55e>
   833ce:	f04f 0900 	mov.w	r9, #0
   833d2:	e799      	b.n	83308 <_vfiprintf_r+0xc50>
   833d4:	2b06      	cmp	r3, #6
   833d6:	bf28      	it	cs
   833d8:	2306      	movcs	r3, #6
   833da:	9303      	str	r3, [sp, #12]
   833dc:	9404      	str	r4, [sp, #16]
   833de:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   833e2:	4f2c      	ldr	r7, [pc, #176]	; (83494 <_vfiprintf_r+0xddc>)
   833e4:	e512      	b.n	82e0c <_vfiprintf_r+0x754>
   833e6:	9204      	str	r2, [sp, #16]
   833e8:	e415      	b.n	82c16 <_vfiprintf_r+0x55e>
   833ea:	980e      	ldr	r0, [sp, #56]	; 0x38
   833ec:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 83498 <_vfiprintf_r+0xde0>
   833f0:	3001      	adds	r0, #1
   833f2:	f7ff bb88 	b.w	82b06 <_vfiprintf_r+0x44e>
   833f6:	46f4      	mov	ip, lr
   833f8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8349c <_vfiprintf_r+0xde4>
   833fc:	f7ff bb2d 	b.w	82a5a <_vfiprintf_r+0x3a2>
   83400:	2200      	movs	r2, #0
   83402:	9201      	str	r2, [sp, #4]
   83404:	f7ff b9c1 	b.w	8278a <_vfiprintf_r+0xd2>
   83408:	9b01      	ldr	r3, [sp, #4]
   8340a:	9404      	str	r4, [sp, #16]
   8340c:	9303      	str	r3, [sp, #12]
   8340e:	9001      	str	r0, [sp, #4]
   83410:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   83414:	f7ff ba76 	b.w	82904 <_vfiprintf_r+0x24c>
   83418:	9204      	str	r2, [sp, #16]
   8341a:	4699      	mov	r9, r3
   8341c:	e6b6      	b.n	8318c <_vfiprintf_r+0xad4>
   8341e:	9a04      	ldr	r2, [sp, #16]
   83420:	6813      	ldr	r3, [r2, #0]
   83422:	3204      	adds	r2, #4
   83424:	2b00      	cmp	r3, #0
   83426:	9301      	str	r3, [sp, #4]
   83428:	9204      	str	r2, [sp, #16]
   8342a:	f898 3001 	ldrb.w	r3, [r8, #1]
   8342e:	46a8      	mov	r8, r5
   83430:	f6bf a9a9 	bge.w	82786 <_vfiprintf_r+0xce>
   83434:	f04f 32ff 	mov.w	r2, #4294967295
   83438:	9201      	str	r2, [sp, #4]
   8343a:	f7ff b9a4 	b.w	82786 <_vfiprintf_r+0xce>
   8343e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83442:	e45f      	b.n	82d04 <_vfiprintf_r+0x64c>
   83444:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83448:	f7ff bbc4 	b.w	82bd4 <_vfiprintf_r+0x51c>
   8344c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83450:	f7ff bb77 	b.w	82b42 <_vfiprintf_r+0x48a>
   83454:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83458:	e487      	b.n	82d6a <_vfiprintf_r+0x6b2>
   8345a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8345e:	e4a7      	b.n	82db0 <_vfiprintf_r+0x6f8>
   83460:	4699      	mov	r9, r3
   83462:	07f3      	lsls	r3, r6, #31
   83464:	d505      	bpl.n	83472 <_vfiprintf_r+0xdba>
   83466:	af2a      	add	r7, sp, #168	; 0xa8
   83468:	2330      	movs	r3, #48	; 0x30
   8346a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8346e:	f7ff bba2 	b.w	82bb6 <_vfiprintf_r+0x4fe>
   83472:	9b01      	ldr	r3, [sp, #4]
   83474:	4657      	mov	r7, sl
   83476:	9303      	str	r3, [sp, #12]
   83478:	f7ff ba44 	b.w	82904 <_vfiprintf_r+0x24c>
   8347c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83480:	e517      	b.n	82eb2 <_vfiprintf_r+0x7fa>
   83482:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83486:	e4fa      	b.n	82e7e <_vfiprintf_r+0x7c6>
   83488:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8348c:	e4d2      	b.n	82e34 <_vfiprintf_r+0x77c>
   8348e:	bf00      	nop
   83490:	00085290 	.word	0x00085290
   83494:	000852a4 	.word	0x000852a4
   83498:	000852ac 	.word	0x000852ac
   8349c:	0008526c 	.word	0x0008526c

000834a0 <__sbprintf>:
   834a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   834a2:	460c      	mov	r4, r1
   834a4:	8989      	ldrh	r1, [r1, #12]
   834a6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   834aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   834ac:	f021 0102 	bic.w	r1, r1, #2
   834b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   834b2:	f8ad 100c 	strh.w	r1, [sp, #12]
   834b6:	69e1      	ldr	r1, [r4, #28]
   834b8:	89e7      	ldrh	r7, [r4, #14]
   834ba:	9519      	str	r5, [sp, #100]	; 0x64
   834bc:	2500      	movs	r5, #0
   834be:	9107      	str	r1, [sp, #28]
   834c0:	9609      	str	r6, [sp, #36]	; 0x24
   834c2:	9506      	str	r5, [sp, #24]
   834c4:	ae1a      	add	r6, sp, #104	; 0x68
   834c6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   834ca:	4669      	mov	r1, sp
   834cc:	9600      	str	r6, [sp, #0]
   834ce:	9604      	str	r6, [sp, #16]
   834d0:	9502      	str	r5, [sp, #8]
   834d2:	9505      	str	r5, [sp, #20]
   834d4:	f8ad 700e 	strh.w	r7, [sp, #14]
   834d8:	4606      	mov	r6, r0
   834da:	f7ff f8ed 	bl	826b8 <_vfiprintf_r>
   834de:	1e05      	subs	r5, r0, #0
   834e0:	db07      	blt.n	834f2 <__sbprintf+0x52>
   834e2:	4630      	mov	r0, r6
   834e4:	4669      	mov	r1, sp
   834e6:	f000 f929 	bl	8373c <_fflush_r>
   834ea:	2800      	cmp	r0, #0
   834ec:	bf18      	it	ne
   834ee:	f04f 35ff 	movne.w	r5, #4294967295
   834f2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   834f6:	065b      	lsls	r3, r3, #25
   834f8:	d503      	bpl.n	83502 <__sbprintf+0x62>
   834fa:	89a3      	ldrh	r3, [r4, #12]
   834fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83500:	81a3      	strh	r3, [r4, #12]
   83502:	4628      	mov	r0, r5
   83504:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   83508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8350a:	bf00      	nop

0008350c <__swsetup_r>:
   8350c:	b538      	push	{r3, r4, r5, lr}
   8350e:	4b30      	ldr	r3, [pc, #192]	; (835d0 <__swsetup_r+0xc4>)
   83510:	4605      	mov	r5, r0
   83512:	6818      	ldr	r0, [r3, #0]
   83514:	460c      	mov	r4, r1
   83516:	b110      	cbz	r0, 8351e <__swsetup_r+0x12>
   83518:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8351a:	2b00      	cmp	r3, #0
   8351c:	d038      	beq.n	83590 <__swsetup_r+0x84>
   8351e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83522:	b293      	uxth	r3, r2
   83524:	0718      	lsls	r0, r3, #28
   83526:	d50c      	bpl.n	83542 <__swsetup_r+0x36>
   83528:	6920      	ldr	r0, [r4, #16]
   8352a:	b1a8      	cbz	r0, 83558 <__swsetup_r+0x4c>
   8352c:	f013 0201 	ands.w	r2, r3, #1
   83530:	d01e      	beq.n	83570 <__swsetup_r+0x64>
   83532:	6963      	ldr	r3, [r4, #20]
   83534:	2200      	movs	r2, #0
   83536:	425b      	negs	r3, r3
   83538:	61a3      	str	r3, [r4, #24]
   8353a:	60a2      	str	r2, [r4, #8]
   8353c:	b1f0      	cbz	r0, 8357c <__swsetup_r+0x70>
   8353e:	2000      	movs	r0, #0
   83540:	bd38      	pop	{r3, r4, r5, pc}
   83542:	06d9      	lsls	r1, r3, #27
   83544:	d53b      	bpl.n	835be <__swsetup_r+0xb2>
   83546:	0758      	lsls	r0, r3, #29
   83548:	d425      	bmi.n	83596 <__swsetup_r+0x8a>
   8354a:	6920      	ldr	r0, [r4, #16]
   8354c:	f042 0308 	orr.w	r3, r2, #8
   83550:	81a3      	strh	r3, [r4, #12]
   83552:	b29b      	uxth	r3, r3
   83554:	2800      	cmp	r0, #0
   83556:	d1e9      	bne.n	8352c <__swsetup_r+0x20>
   83558:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8355c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83560:	d0e4      	beq.n	8352c <__swsetup_r+0x20>
   83562:	4628      	mov	r0, r5
   83564:	4621      	mov	r1, r4
   83566:	f000 fd13 	bl	83f90 <__smakebuf_r>
   8356a:	89a3      	ldrh	r3, [r4, #12]
   8356c:	6920      	ldr	r0, [r4, #16]
   8356e:	e7dd      	b.n	8352c <__swsetup_r+0x20>
   83570:	0799      	lsls	r1, r3, #30
   83572:	bf58      	it	pl
   83574:	6962      	ldrpl	r2, [r4, #20]
   83576:	60a2      	str	r2, [r4, #8]
   83578:	2800      	cmp	r0, #0
   8357a:	d1e0      	bne.n	8353e <__swsetup_r+0x32>
   8357c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83580:	061a      	lsls	r2, r3, #24
   83582:	d5dd      	bpl.n	83540 <__swsetup_r+0x34>
   83584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83588:	81a3      	strh	r3, [r4, #12]
   8358a:	f04f 30ff 	mov.w	r0, #4294967295
   8358e:	bd38      	pop	{r3, r4, r5, pc}
   83590:	f000 f968 	bl	83864 <__sinit>
   83594:	e7c3      	b.n	8351e <__swsetup_r+0x12>
   83596:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83598:	b151      	cbz	r1, 835b0 <__swsetup_r+0xa4>
   8359a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8359e:	4299      	cmp	r1, r3
   835a0:	d004      	beq.n	835ac <__swsetup_r+0xa0>
   835a2:	4628      	mov	r0, r5
   835a4:	f000 fa26 	bl	839f4 <_free_r>
   835a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   835ac:	2300      	movs	r3, #0
   835ae:	6323      	str	r3, [r4, #48]	; 0x30
   835b0:	6920      	ldr	r0, [r4, #16]
   835b2:	2300      	movs	r3, #0
   835b4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   835b8:	e884 0009 	stmia.w	r4, {r0, r3}
   835bc:	e7c6      	b.n	8354c <__swsetup_r+0x40>
   835be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   835c2:	2309      	movs	r3, #9
   835c4:	602b      	str	r3, [r5, #0]
   835c6:	f04f 30ff 	mov.w	r0, #4294967295
   835ca:	81a2      	strh	r2, [r4, #12]
   835cc:	bd38      	pop	{r3, r4, r5, pc}
   835ce:	bf00      	nop
   835d0:	20070568 	.word	0x20070568

000835d4 <register_fini>:
   835d4:	4b02      	ldr	r3, [pc, #8]	; (835e0 <register_fini+0xc>)
   835d6:	b113      	cbz	r3, 835de <register_fini+0xa>
   835d8:	4802      	ldr	r0, [pc, #8]	; (835e4 <register_fini+0x10>)
   835da:	f000 b805 	b.w	835e8 <atexit>
   835de:	4770      	bx	lr
   835e0:	00000000 	.word	0x00000000
   835e4:	00083879 	.word	0x00083879

000835e8 <atexit>:
   835e8:	2300      	movs	r3, #0
   835ea:	4601      	mov	r1, r0
   835ec:	461a      	mov	r2, r3
   835ee:	4618      	mov	r0, r3
   835f0:	f001 bb58 	b.w	84ca4 <__register_exitproc>

000835f4 <__sflush_r>:
   835f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   835f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835fc:	b29a      	uxth	r2, r3
   835fe:	460d      	mov	r5, r1
   83600:	0711      	lsls	r1, r2, #28
   83602:	4680      	mov	r8, r0
   83604:	d43c      	bmi.n	83680 <__sflush_r+0x8c>
   83606:	686a      	ldr	r2, [r5, #4]
   83608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8360c:	2a00      	cmp	r2, #0
   8360e:	81ab      	strh	r3, [r5, #12]
   83610:	dd73      	ble.n	836fa <__sflush_r+0x106>
   83612:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83614:	2c00      	cmp	r4, #0
   83616:	d04b      	beq.n	836b0 <__sflush_r+0xbc>
   83618:	b29b      	uxth	r3, r3
   8361a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8361e:	2100      	movs	r1, #0
   83620:	b292      	uxth	r2, r2
   83622:	f8d8 6000 	ldr.w	r6, [r8]
   83626:	f8c8 1000 	str.w	r1, [r8]
   8362a:	2a00      	cmp	r2, #0
   8362c:	d069      	beq.n	83702 <__sflush_r+0x10e>
   8362e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83630:	075f      	lsls	r7, r3, #29
   83632:	d505      	bpl.n	83640 <__sflush_r+0x4c>
   83634:	6869      	ldr	r1, [r5, #4]
   83636:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83638:	1a52      	subs	r2, r2, r1
   8363a:	b10b      	cbz	r3, 83640 <__sflush_r+0x4c>
   8363c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8363e:	1ad2      	subs	r2, r2, r3
   83640:	2300      	movs	r3, #0
   83642:	69e9      	ldr	r1, [r5, #28]
   83644:	4640      	mov	r0, r8
   83646:	47a0      	blx	r4
   83648:	1c44      	adds	r4, r0, #1
   8364a:	d03c      	beq.n	836c6 <__sflush_r+0xd2>
   8364c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83650:	6929      	ldr	r1, [r5, #16]
   83652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83656:	2200      	movs	r2, #0
   83658:	81ab      	strh	r3, [r5, #12]
   8365a:	04db      	lsls	r3, r3, #19
   8365c:	e885 0006 	stmia.w	r5, {r1, r2}
   83660:	d449      	bmi.n	836f6 <__sflush_r+0x102>
   83662:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83664:	f8c8 6000 	str.w	r6, [r8]
   83668:	b311      	cbz	r1, 836b0 <__sflush_r+0xbc>
   8366a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8366e:	4299      	cmp	r1, r3
   83670:	d002      	beq.n	83678 <__sflush_r+0x84>
   83672:	4640      	mov	r0, r8
   83674:	f000 f9be 	bl	839f4 <_free_r>
   83678:	2000      	movs	r0, #0
   8367a:	6328      	str	r0, [r5, #48]	; 0x30
   8367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83680:	692e      	ldr	r6, [r5, #16]
   83682:	b1ae      	cbz	r6, 836b0 <__sflush_r+0xbc>
   83684:	0790      	lsls	r0, r2, #30
   83686:	682c      	ldr	r4, [r5, #0]
   83688:	bf0c      	ite	eq
   8368a:	696b      	ldreq	r3, [r5, #20]
   8368c:	2300      	movne	r3, #0
   8368e:	602e      	str	r6, [r5, #0]
   83690:	1ba4      	subs	r4, r4, r6
   83692:	60ab      	str	r3, [r5, #8]
   83694:	e00a      	b.n	836ac <__sflush_r+0xb8>
   83696:	4623      	mov	r3, r4
   83698:	4632      	mov	r2, r6
   8369a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8369c:	69e9      	ldr	r1, [r5, #28]
   8369e:	4640      	mov	r0, r8
   836a0:	47b8      	blx	r7
   836a2:	2800      	cmp	r0, #0
   836a4:	eba4 0400 	sub.w	r4, r4, r0
   836a8:	4406      	add	r6, r0
   836aa:	dd04      	ble.n	836b6 <__sflush_r+0xc2>
   836ac:	2c00      	cmp	r4, #0
   836ae:	dcf2      	bgt.n	83696 <__sflush_r+0xa2>
   836b0:	2000      	movs	r0, #0
   836b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836b6:	89ab      	ldrh	r3, [r5, #12]
   836b8:	f04f 30ff 	mov.w	r0, #4294967295
   836bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   836c0:	81ab      	strh	r3, [r5, #12]
   836c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836c6:	f8d8 2000 	ldr.w	r2, [r8]
   836ca:	2a1d      	cmp	r2, #29
   836cc:	d8f3      	bhi.n	836b6 <__sflush_r+0xc2>
   836ce:	4b1a      	ldr	r3, [pc, #104]	; (83738 <__sflush_r+0x144>)
   836d0:	40d3      	lsrs	r3, r2
   836d2:	f003 0301 	and.w	r3, r3, #1
   836d6:	f083 0401 	eor.w	r4, r3, #1
   836da:	2b00      	cmp	r3, #0
   836dc:	d0eb      	beq.n	836b6 <__sflush_r+0xc2>
   836de:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   836e2:	6929      	ldr	r1, [r5, #16]
   836e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   836e8:	6029      	str	r1, [r5, #0]
   836ea:	04d9      	lsls	r1, r3, #19
   836ec:	606c      	str	r4, [r5, #4]
   836ee:	81ab      	strh	r3, [r5, #12]
   836f0:	d5b7      	bpl.n	83662 <__sflush_r+0x6e>
   836f2:	2a00      	cmp	r2, #0
   836f4:	d1b5      	bne.n	83662 <__sflush_r+0x6e>
   836f6:	6528      	str	r0, [r5, #80]	; 0x50
   836f8:	e7b3      	b.n	83662 <__sflush_r+0x6e>
   836fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   836fc:	2a00      	cmp	r2, #0
   836fe:	dc88      	bgt.n	83612 <__sflush_r+0x1e>
   83700:	e7d6      	b.n	836b0 <__sflush_r+0xbc>
   83702:	2301      	movs	r3, #1
   83704:	69e9      	ldr	r1, [r5, #28]
   83706:	4640      	mov	r0, r8
   83708:	47a0      	blx	r4
   8370a:	1c43      	adds	r3, r0, #1
   8370c:	4602      	mov	r2, r0
   8370e:	d002      	beq.n	83716 <__sflush_r+0x122>
   83710:	89ab      	ldrh	r3, [r5, #12]
   83712:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83714:	e78c      	b.n	83630 <__sflush_r+0x3c>
   83716:	f8d8 3000 	ldr.w	r3, [r8]
   8371a:	2b00      	cmp	r3, #0
   8371c:	d0f8      	beq.n	83710 <__sflush_r+0x11c>
   8371e:	2b1d      	cmp	r3, #29
   83720:	d001      	beq.n	83726 <__sflush_r+0x132>
   83722:	2b16      	cmp	r3, #22
   83724:	d102      	bne.n	8372c <__sflush_r+0x138>
   83726:	f8c8 6000 	str.w	r6, [r8]
   8372a:	e7c1      	b.n	836b0 <__sflush_r+0xbc>
   8372c:	89ab      	ldrh	r3, [r5, #12]
   8372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83732:	81ab      	strh	r3, [r5, #12]
   83734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83738:	20400001 	.word	0x20400001

0008373c <_fflush_r>:
   8373c:	b510      	push	{r4, lr}
   8373e:	4604      	mov	r4, r0
   83740:	b082      	sub	sp, #8
   83742:	b108      	cbz	r0, 83748 <_fflush_r+0xc>
   83744:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83746:	b153      	cbz	r3, 8375e <_fflush_r+0x22>
   83748:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   8374c:	b908      	cbnz	r0, 83752 <_fflush_r+0x16>
   8374e:	b002      	add	sp, #8
   83750:	bd10      	pop	{r4, pc}
   83752:	4620      	mov	r0, r4
   83754:	b002      	add	sp, #8
   83756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8375a:	f7ff bf4b 	b.w	835f4 <__sflush_r>
   8375e:	9101      	str	r1, [sp, #4]
   83760:	f000 f880 	bl	83864 <__sinit>
   83764:	9901      	ldr	r1, [sp, #4]
   83766:	e7ef      	b.n	83748 <_fflush_r+0xc>

00083768 <_cleanup_r>:
   83768:	4901      	ldr	r1, [pc, #4]	; (83770 <_cleanup_r+0x8>)
   8376a:	f000 bbaf 	b.w	83ecc <_fwalk_reent>
   8376e:	bf00      	nop
   83770:	00084d6d 	.word	0x00084d6d

00083774 <__sinit.part.1>:
   83774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83778:	4607      	mov	r7, r0
   8377a:	4835      	ldr	r0, [pc, #212]	; (83850 <__sinit.part.1+0xdc>)
   8377c:	687d      	ldr	r5, [r7, #4]
   8377e:	2400      	movs	r4, #0
   83780:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83784:	2304      	movs	r3, #4
   83786:	2103      	movs	r1, #3
   83788:	63f8      	str	r0, [r7, #60]	; 0x3c
   8378a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8378e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83792:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83796:	b083      	sub	sp, #12
   83798:	602c      	str	r4, [r5, #0]
   8379a:	606c      	str	r4, [r5, #4]
   8379c:	60ac      	str	r4, [r5, #8]
   8379e:	666c      	str	r4, [r5, #100]	; 0x64
   837a0:	81ec      	strh	r4, [r5, #14]
   837a2:	612c      	str	r4, [r5, #16]
   837a4:	616c      	str	r4, [r5, #20]
   837a6:	61ac      	str	r4, [r5, #24]
   837a8:	81ab      	strh	r3, [r5, #12]
   837aa:	4621      	mov	r1, r4
   837ac:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   837b0:	2208      	movs	r2, #8
   837b2:	f7fe fdbb 	bl	8232c <memset>
   837b6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83854 <__sinit.part.1+0xe0>
   837ba:	68be      	ldr	r6, [r7, #8]
   837bc:	f8df a098 	ldr.w	sl, [pc, #152]	; 83858 <__sinit.part.1+0xe4>
   837c0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8385c <__sinit.part.1+0xe8>
   837c4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83860 <__sinit.part.1+0xec>
   837c8:	2301      	movs	r3, #1
   837ca:	2209      	movs	r2, #9
   837cc:	f8c5 b020 	str.w	fp, [r5, #32]
   837d0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   837d4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   837d8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   837dc:	61ed      	str	r5, [r5, #28]
   837de:	4621      	mov	r1, r4
   837e0:	81f3      	strh	r3, [r6, #14]
   837e2:	81b2      	strh	r2, [r6, #12]
   837e4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   837e8:	6034      	str	r4, [r6, #0]
   837ea:	6074      	str	r4, [r6, #4]
   837ec:	60b4      	str	r4, [r6, #8]
   837ee:	6674      	str	r4, [r6, #100]	; 0x64
   837f0:	6134      	str	r4, [r6, #16]
   837f2:	6174      	str	r4, [r6, #20]
   837f4:	61b4      	str	r4, [r6, #24]
   837f6:	2208      	movs	r2, #8
   837f8:	9301      	str	r3, [sp, #4]
   837fa:	f7fe fd97 	bl	8232c <memset>
   837fe:	68fd      	ldr	r5, [r7, #12]
   83800:	2012      	movs	r0, #18
   83802:	2202      	movs	r2, #2
   83804:	61f6      	str	r6, [r6, #28]
   83806:	f8c6 b020 	str.w	fp, [r6, #32]
   8380a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8380e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83812:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83816:	4621      	mov	r1, r4
   83818:	81a8      	strh	r0, [r5, #12]
   8381a:	81ea      	strh	r2, [r5, #14]
   8381c:	602c      	str	r4, [r5, #0]
   8381e:	606c      	str	r4, [r5, #4]
   83820:	60ac      	str	r4, [r5, #8]
   83822:	666c      	str	r4, [r5, #100]	; 0x64
   83824:	612c      	str	r4, [r5, #16]
   83826:	616c      	str	r4, [r5, #20]
   83828:	61ac      	str	r4, [r5, #24]
   8382a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8382e:	2208      	movs	r2, #8
   83830:	f7fe fd7c 	bl	8232c <memset>
   83834:	9b01      	ldr	r3, [sp, #4]
   83836:	61ed      	str	r5, [r5, #28]
   83838:	f8c5 b020 	str.w	fp, [r5, #32]
   8383c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83840:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83844:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83848:	63bb      	str	r3, [r7, #56]	; 0x38
   8384a:	b003      	add	sp, #12
   8384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83850:	00083769 	.word	0x00083769
   83854:	00084ad5 	.word	0x00084ad5
   83858:	00084af9 	.word	0x00084af9
   8385c:	00084b35 	.word	0x00084b35
   83860:	00084b55 	.word	0x00084b55

00083864 <__sinit>:
   83864:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83866:	b103      	cbz	r3, 8386a <__sinit+0x6>
   83868:	4770      	bx	lr
   8386a:	f7ff bf83 	b.w	83774 <__sinit.part.1>
   8386e:	bf00      	nop

00083870 <__sfp_lock_acquire>:
   83870:	4770      	bx	lr
   83872:	bf00      	nop

00083874 <__sfp_lock_release>:
   83874:	4770      	bx	lr
   83876:	bf00      	nop

00083878 <__libc_fini_array>:
   83878:	b538      	push	{r3, r4, r5, lr}
   8387a:	4d07      	ldr	r5, [pc, #28]	; (83898 <__libc_fini_array+0x20>)
   8387c:	4c07      	ldr	r4, [pc, #28]	; (8389c <__libc_fini_array+0x24>)
   8387e:	1b2c      	subs	r4, r5, r4
   83880:	10a4      	asrs	r4, r4, #2
   83882:	d005      	beq.n	83890 <__libc_fini_array+0x18>
   83884:	3c01      	subs	r4, #1
   83886:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8388a:	4798      	blx	r3
   8388c:	2c00      	cmp	r4, #0
   8388e:	d1f9      	bne.n	83884 <__libc_fini_array+0xc>
   83890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83894:	f001 bd1c 	b.w	852d0 <_fini>
   83898:	000852e0 	.word	0x000852e0
   8389c:	000852dc 	.word	0x000852dc

000838a0 <__fputwc>:
   838a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   838a4:	b082      	sub	sp, #8
   838a6:	4606      	mov	r6, r0
   838a8:	460f      	mov	r7, r1
   838aa:	4614      	mov	r4, r2
   838ac:	f000 fb3a 	bl	83f24 <__locale_mb_cur_max>
   838b0:	2801      	cmp	r0, #1
   838b2:	d032      	beq.n	8391a <__fputwc+0x7a>
   838b4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   838b8:	463a      	mov	r2, r7
   838ba:	a901      	add	r1, sp, #4
   838bc:	4630      	mov	r0, r6
   838be:	f001 f9a3 	bl	84c08 <_wcrtomb_r>
   838c2:	f1b0 3fff 	cmp.w	r0, #4294967295
   838c6:	4680      	mov	r8, r0
   838c8:	d020      	beq.n	8390c <__fputwc+0x6c>
   838ca:	b370      	cbz	r0, 8392a <__fputwc+0x8a>
   838cc:	f89d 1004 	ldrb.w	r1, [sp, #4]
   838d0:	2500      	movs	r5, #0
   838d2:	e008      	b.n	838e6 <__fputwc+0x46>
   838d4:	6823      	ldr	r3, [r4, #0]
   838d6:	1c5a      	adds	r2, r3, #1
   838d8:	6022      	str	r2, [r4, #0]
   838da:	7019      	strb	r1, [r3, #0]
   838dc:	3501      	adds	r5, #1
   838de:	4545      	cmp	r5, r8
   838e0:	d223      	bcs.n	8392a <__fputwc+0x8a>
   838e2:	ab01      	add	r3, sp, #4
   838e4:	5d59      	ldrb	r1, [r3, r5]
   838e6:	68a3      	ldr	r3, [r4, #8]
   838e8:	3b01      	subs	r3, #1
   838ea:	2b00      	cmp	r3, #0
   838ec:	60a3      	str	r3, [r4, #8]
   838ee:	daf1      	bge.n	838d4 <__fputwc+0x34>
   838f0:	69a2      	ldr	r2, [r4, #24]
   838f2:	4293      	cmp	r3, r2
   838f4:	db01      	blt.n	838fa <__fputwc+0x5a>
   838f6:	290a      	cmp	r1, #10
   838f8:	d1ec      	bne.n	838d4 <__fputwc+0x34>
   838fa:	4622      	mov	r2, r4
   838fc:	4630      	mov	r0, r6
   838fe:	f001 f92d 	bl	84b5c <__swbuf_r>
   83902:	1c43      	adds	r3, r0, #1
   83904:	d1ea      	bne.n	838dc <__fputwc+0x3c>
   83906:	b002      	add	sp, #8
   83908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8390c:	89a3      	ldrh	r3, [r4, #12]
   8390e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83912:	81a3      	strh	r3, [r4, #12]
   83914:	b002      	add	sp, #8
   83916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8391a:	1e7b      	subs	r3, r7, #1
   8391c:	2bfe      	cmp	r3, #254	; 0xfe
   8391e:	d8c9      	bhi.n	838b4 <__fputwc+0x14>
   83920:	b2f9      	uxtb	r1, r7
   83922:	4680      	mov	r8, r0
   83924:	f88d 1004 	strb.w	r1, [sp, #4]
   83928:	e7d2      	b.n	838d0 <__fputwc+0x30>
   8392a:	4638      	mov	r0, r7
   8392c:	b002      	add	sp, #8
   8392e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83932:	bf00      	nop

00083934 <_fputwc_r>:
   83934:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83938:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8393c:	d10a      	bne.n	83954 <_fputwc_r+0x20>
   8393e:	b410      	push	{r4}
   83940:	6e54      	ldr	r4, [r2, #100]	; 0x64
   83942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83946:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   8394a:	6654      	str	r4, [r2, #100]	; 0x64
   8394c:	8193      	strh	r3, [r2, #12]
   8394e:	bc10      	pop	{r4}
   83950:	f7ff bfa6 	b.w	838a0 <__fputwc>
   83954:	f7ff bfa4 	b.w	838a0 <__fputwc>

00083958 <_malloc_trim_r>:
   83958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8395a:	460c      	mov	r4, r1
   8395c:	4f22      	ldr	r7, [pc, #136]	; (839e8 <_malloc_trim_r+0x90>)
   8395e:	4606      	mov	r6, r0
   83960:	f000 feb8 	bl	846d4 <__malloc_lock>
   83964:	68bb      	ldr	r3, [r7, #8]
   83966:	685d      	ldr	r5, [r3, #4]
   83968:	f025 0503 	bic.w	r5, r5, #3
   8396c:	1b29      	subs	r1, r5, r4
   8396e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83972:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83976:	f021 010f 	bic.w	r1, r1, #15
   8397a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8397e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83982:	db07      	blt.n	83994 <_malloc_trim_r+0x3c>
   83984:	2100      	movs	r1, #0
   83986:	4630      	mov	r0, r6
   83988:	f001 f892 	bl	84ab0 <_sbrk_r>
   8398c:	68bb      	ldr	r3, [r7, #8]
   8398e:	442b      	add	r3, r5
   83990:	4298      	cmp	r0, r3
   83992:	d004      	beq.n	8399e <_malloc_trim_r+0x46>
   83994:	4630      	mov	r0, r6
   83996:	f000 fe9f 	bl	846d8 <__malloc_unlock>
   8399a:	2000      	movs	r0, #0
   8399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8399e:	4261      	negs	r1, r4
   839a0:	4630      	mov	r0, r6
   839a2:	f001 f885 	bl	84ab0 <_sbrk_r>
   839a6:	3001      	adds	r0, #1
   839a8:	d00d      	beq.n	839c6 <_malloc_trim_r+0x6e>
   839aa:	4b10      	ldr	r3, [pc, #64]	; (839ec <_malloc_trim_r+0x94>)
   839ac:	68ba      	ldr	r2, [r7, #8]
   839ae:	6819      	ldr	r1, [r3, #0]
   839b0:	1b2d      	subs	r5, r5, r4
   839b2:	f045 0501 	orr.w	r5, r5, #1
   839b6:	4630      	mov	r0, r6
   839b8:	1b09      	subs	r1, r1, r4
   839ba:	6055      	str	r5, [r2, #4]
   839bc:	6019      	str	r1, [r3, #0]
   839be:	f000 fe8b 	bl	846d8 <__malloc_unlock>
   839c2:	2001      	movs	r0, #1
   839c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839c6:	2100      	movs	r1, #0
   839c8:	4630      	mov	r0, r6
   839ca:	f001 f871 	bl	84ab0 <_sbrk_r>
   839ce:	68ba      	ldr	r2, [r7, #8]
   839d0:	1a83      	subs	r3, r0, r2
   839d2:	2b0f      	cmp	r3, #15
   839d4:	ddde      	ble.n	83994 <_malloc_trim_r+0x3c>
   839d6:	4c06      	ldr	r4, [pc, #24]	; (839f0 <_malloc_trim_r+0x98>)
   839d8:	4904      	ldr	r1, [pc, #16]	; (839ec <_malloc_trim_r+0x94>)
   839da:	6824      	ldr	r4, [r4, #0]
   839dc:	f043 0301 	orr.w	r3, r3, #1
   839e0:	1b00      	subs	r0, r0, r4
   839e2:	6053      	str	r3, [r2, #4]
   839e4:	6008      	str	r0, [r1, #0]
   839e6:	e7d5      	b.n	83994 <_malloc_trim_r+0x3c>
   839e8:	20070590 	.word	0x20070590
   839ec:	2007ab8c 	.word	0x2007ab8c
   839f0:	2007099c 	.word	0x2007099c

000839f4 <_free_r>:
   839f4:	2900      	cmp	r1, #0
   839f6:	d045      	beq.n	83a84 <_free_r+0x90>
   839f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839fc:	460d      	mov	r5, r1
   839fe:	4680      	mov	r8, r0
   83a00:	f000 fe68 	bl	846d4 <__malloc_lock>
   83a04:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83a08:	496a      	ldr	r1, [pc, #424]	; (83bb4 <_free_r+0x1c0>)
   83a0a:	f1a5 0408 	sub.w	r4, r5, #8
   83a0e:	f027 0301 	bic.w	r3, r7, #1
   83a12:	18e2      	adds	r2, r4, r3
   83a14:	688e      	ldr	r6, [r1, #8]
   83a16:	6850      	ldr	r0, [r2, #4]
   83a18:	42b2      	cmp	r2, r6
   83a1a:	f020 0003 	bic.w	r0, r0, #3
   83a1e:	d062      	beq.n	83ae6 <_free_r+0xf2>
   83a20:	07fe      	lsls	r6, r7, #31
   83a22:	6050      	str	r0, [r2, #4]
   83a24:	d40b      	bmi.n	83a3e <_free_r+0x4a>
   83a26:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83a2a:	f101 0e08 	add.w	lr, r1, #8
   83a2e:	1be4      	subs	r4, r4, r7
   83a30:	68a5      	ldr	r5, [r4, #8]
   83a32:	443b      	add	r3, r7
   83a34:	4575      	cmp	r5, lr
   83a36:	d06f      	beq.n	83b18 <_free_r+0x124>
   83a38:	68e7      	ldr	r7, [r4, #12]
   83a3a:	60ef      	str	r7, [r5, #12]
   83a3c:	60bd      	str	r5, [r7, #8]
   83a3e:	1815      	adds	r5, r2, r0
   83a40:	686d      	ldr	r5, [r5, #4]
   83a42:	07ed      	lsls	r5, r5, #31
   83a44:	d542      	bpl.n	83acc <_free_r+0xd8>
   83a46:	f043 0201 	orr.w	r2, r3, #1
   83a4a:	6062      	str	r2, [r4, #4]
   83a4c:	50e3      	str	r3, [r4, r3]
   83a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83a52:	d218      	bcs.n	83a86 <_free_r+0x92>
   83a54:	08db      	lsrs	r3, r3, #3
   83a56:	6848      	ldr	r0, [r1, #4]
   83a58:	109d      	asrs	r5, r3, #2
   83a5a:	2201      	movs	r2, #1
   83a5c:	3301      	adds	r3, #1
   83a5e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83a62:	fa02 f505 	lsl.w	r5, r2, r5
   83a66:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   83a6a:	4328      	orrs	r0, r5
   83a6c:	3a08      	subs	r2, #8
   83a6e:	60e2      	str	r2, [r4, #12]
   83a70:	60a7      	str	r7, [r4, #8]
   83a72:	6048      	str	r0, [r1, #4]
   83a74:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83a78:	60fc      	str	r4, [r7, #12]
   83a7a:	4640      	mov	r0, r8
   83a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83a80:	f000 be2a 	b.w	846d8 <__malloc_unlock>
   83a84:	4770      	bx	lr
   83a86:	0a5a      	lsrs	r2, r3, #9
   83a88:	2a04      	cmp	r2, #4
   83a8a:	d853      	bhi.n	83b34 <_free_r+0x140>
   83a8c:	099a      	lsrs	r2, r3, #6
   83a8e:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83a92:	007f      	lsls	r7, r7, #1
   83a94:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83a98:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   83a9c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   83aa0:	3808      	subs	r0, #8
   83aa2:	4290      	cmp	r0, r2
   83aa4:	4943      	ldr	r1, [pc, #268]	; (83bb4 <_free_r+0x1c0>)
   83aa6:	d04d      	beq.n	83b44 <_free_r+0x150>
   83aa8:	6851      	ldr	r1, [r2, #4]
   83aaa:	f021 0103 	bic.w	r1, r1, #3
   83aae:	428b      	cmp	r3, r1
   83ab0:	d202      	bcs.n	83ab8 <_free_r+0xc4>
   83ab2:	6892      	ldr	r2, [r2, #8]
   83ab4:	4290      	cmp	r0, r2
   83ab6:	d1f7      	bne.n	83aa8 <_free_r+0xb4>
   83ab8:	68d0      	ldr	r0, [r2, #12]
   83aba:	60e0      	str	r0, [r4, #12]
   83abc:	60a2      	str	r2, [r4, #8]
   83abe:	6084      	str	r4, [r0, #8]
   83ac0:	60d4      	str	r4, [r2, #12]
   83ac2:	4640      	mov	r0, r8
   83ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ac8:	f000 be06 	b.w	846d8 <__malloc_unlock>
   83acc:	6895      	ldr	r5, [r2, #8]
   83ace:	4f3a      	ldr	r7, [pc, #232]	; (83bb8 <_free_r+0x1c4>)
   83ad0:	4403      	add	r3, r0
   83ad2:	42bd      	cmp	r5, r7
   83ad4:	d03f      	beq.n	83b56 <_free_r+0x162>
   83ad6:	68d0      	ldr	r0, [r2, #12]
   83ad8:	f043 0201 	orr.w	r2, r3, #1
   83adc:	60e8      	str	r0, [r5, #12]
   83ade:	6085      	str	r5, [r0, #8]
   83ae0:	6062      	str	r2, [r4, #4]
   83ae2:	50e3      	str	r3, [r4, r3]
   83ae4:	e7b3      	b.n	83a4e <_free_r+0x5a>
   83ae6:	07ff      	lsls	r7, r7, #31
   83ae8:	4403      	add	r3, r0
   83aea:	d407      	bmi.n	83afc <_free_r+0x108>
   83aec:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83af0:	1b64      	subs	r4, r4, r5
   83af2:	68e2      	ldr	r2, [r4, #12]
   83af4:	68a0      	ldr	r0, [r4, #8]
   83af6:	442b      	add	r3, r5
   83af8:	60c2      	str	r2, [r0, #12]
   83afa:	6090      	str	r0, [r2, #8]
   83afc:	4a2f      	ldr	r2, [pc, #188]	; (83bbc <_free_r+0x1c8>)
   83afe:	f043 0001 	orr.w	r0, r3, #1
   83b02:	6812      	ldr	r2, [r2, #0]
   83b04:	6060      	str	r0, [r4, #4]
   83b06:	4293      	cmp	r3, r2
   83b08:	608c      	str	r4, [r1, #8]
   83b0a:	d3b6      	bcc.n	83a7a <_free_r+0x86>
   83b0c:	4b2c      	ldr	r3, [pc, #176]	; (83bc0 <_free_r+0x1cc>)
   83b0e:	4640      	mov	r0, r8
   83b10:	6819      	ldr	r1, [r3, #0]
   83b12:	f7ff ff21 	bl	83958 <_malloc_trim_r>
   83b16:	e7b0      	b.n	83a7a <_free_r+0x86>
   83b18:	1811      	adds	r1, r2, r0
   83b1a:	6849      	ldr	r1, [r1, #4]
   83b1c:	07c9      	lsls	r1, r1, #31
   83b1e:	d444      	bmi.n	83baa <_free_r+0x1b6>
   83b20:	6891      	ldr	r1, [r2, #8]
   83b22:	4403      	add	r3, r0
   83b24:	68d2      	ldr	r2, [r2, #12]
   83b26:	f043 0001 	orr.w	r0, r3, #1
   83b2a:	60ca      	str	r2, [r1, #12]
   83b2c:	6091      	str	r1, [r2, #8]
   83b2e:	6060      	str	r0, [r4, #4]
   83b30:	50e3      	str	r3, [r4, r3]
   83b32:	e7a2      	b.n	83a7a <_free_r+0x86>
   83b34:	2a14      	cmp	r2, #20
   83b36:	d817      	bhi.n	83b68 <_free_r+0x174>
   83b38:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83b3c:	007f      	lsls	r7, r7, #1
   83b3e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83b42:	e7a9      	b.n	83a98 <_free_r+0xa4>
   83b44:	10aa      	asrs	r2, r5, #2
   83b46:	684b      	ldr	r3, [r1, #4]
   83b48:	2501      	movs	r5, #1
   83b4a:	fa05 f202 	lsl.w	r2, r5, r2
   83b4e:	4313      	orrs	r3, r2
   83b50:	604b      	str	r3, [r1, #4]
   83b52:	4602      	mov	r2, r0
   83b54:	e7b1      	b.n	83aba <_free_r+0xc6>
   83b56:	f043 0201 	orr.w	r2, r3, #1
   83b5a:	614c      	str	r4, [r1, #20]
   83b5c:	610c      	str	r4, [r1, #16]
   83b5e:	60e5      	str	r5, [r4, #12]
   83b60:	60a5      	str	r5, [r4, #8]
   83b62:	6062      	str	r2, [r4, #4]
   83b64:	50e3      	str	r3, [r4, r3]
   83b66:	e788      	b.n	83a7a <_free_r+0x86>
   83b68:	2a54      	cmp	r2, #84	; 0x54
   83b6a:	d806      	bhi.n	83b7a <_free_r+0x186>
   83b6c:	0b1a      	lsrs	r2, r3, #12
   83b6e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83b72:	007f      	lsls	r7, r7, #1
   83b74:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83b78:	e78e      	b.n	83a98 <_free_r+0xa4>
   83b7a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83b7e:	d806      	bhi.n	83b8e <_free_r+0x19a>
   83b80:	0bda      	lsrs	r2, r3, #15
   83b82:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83b86:	007f      	lsls	r7, r7, #1
   83b88:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83b8c:	e784      	b.n	83a98 <_free_r+0xa4>
   83b8e:	f240 5054 	movw	r0, #1364	; 0x554
   83b92:	4282      	cmp	r2, r0
   83b94:	d806      	bhi.n	83ba4 <_free_r+0x1b0>
   83b96:	0c9a      	lsrs	r2, r3, #18
   83b98:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83b9c:	007f      	lsls	r7, r7, #1
   83b9e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83ba2:	e779      	b.n	83a98 <_free_r+0xa4>
   83ba4:	27fe      	movs	r7, #254	; 0xfe
   83ba6:	257e      	movs	r5, #126	; 0x7e
   83ba8:	e776      	b.n	83a98 <_free_r+0xa4>
   83baa:	f043 0201 	orr.w	r2, r3, #1
   83bae:	6062      	str	r2, [r4, #4]
   83bb0:	50e3      	str	r3, [r4, r3]
   83bb2:	e762      	b.n	83a7a <_free_r+0x86>
   83bb4:	20070590 	.word	0x20070590
   83bb8:	20070598 	.word	0x20070598
   83bbc:	20070998 	.word	0x20070998
   83bc0:	2007ab88 	.word	0x2007ab88

00083bc4 <__sfvwrite_r>:
   83bc4:	6893      	ldr	r3, [r2, #8]
   83bc6:	2b00      	cmp	r3, #0
   83bc8:	f000 80ab 	beq.w	83d22 <__sfvwrite_r+0x15e>
   83bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bd0:	898b      	ldrh	r3, [r1, #12]
   83bd2:	b085      	sub	sp, #20
   83bd4:	460c      	mov	r4, r1
   83bd6:	0719      	lsls	r1, r3, #28
   83bd8:	9002      	str	r0, [sp, #8]
   83bda:	4616      	mov	r6, r2
   83bdc:	d528      	bpl.n	83c30 <__sfvwrite_r+0x6c>
   83bde:	6922      	ldr	r2, [r4, #16]
   83be0:	b332      	cbz	r2, 83c30 <__sfvwrite_r+0x6c>
   83be2:	f003 0802 	and.w	r8, r3, #2
   83be6:	fa1f f088 	uxth.w	r0, r8
   83bea:	6835      	ldr	r5, [r6, #0]
   83bec:	b378      	cbz	r0, 83c4e <__sfvwrite_r+0x8a>
   83bee:	f04f 0900 	mov.w	r9, #0
   83bf2:	46c8      	mov	r8, r9
   83bf4:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 83ec8 <__sfvwrite_r+0x304>
   83bf8:	f1b8 0f00 	cmp.w	r8, #0
   83bfc:	f000 808b 	beq.w	83d16 <__sfvwrite_r+0x152>
   83c00:	45d0      	cmp	r8, sl
   83c02:	4643      	mov	r3, r8
   83c04:	464a      	mov	r2, r9
   83c06:	bf28      	it	cs
   83c08:	4653      	movcs	r3, sl
   83c0a:	69e1      	ldr	r1, [r4, #28]
   83c0c:	9802      	ldr	r0, [sp, #8]
   83c0e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83c10:	47b8      	blx	r7
   83c12:	2800      	cmp	r0, #0
   83c14:	f340 80a5 	ble.w	83d62 <__sfvwrite_r+0x19e>
   83c18:	68b3      	ldr	r3, [r6, #8]
   83c1a:	4481      	add	r9, r0
   83c1c:	1a1b      	subs	r3, r3, r0
   83c1e:	ebc0 0808 	rsb	r8, r0, r8
   83c22:	60b3      	str	r3, [r6, #8]
   83c24:	2b00      	cmp	r3, #0
   83c26:	d1e7      	bne.n	83bf8 <__sfvwrite_r+0x34>
   83c28:	2000      	movs	r0, #0
   83c2a:	b005      	add	sp, #20
   83c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c30:	4621      	mov	r1, r4
   83c32:	9802      	ldr	r0, [sp, #8]
   83c34:	f7ff fc6a 	bl	8350c <__swsetup_r>
   83c38:	2800      	cmp	r0, #0
   83c3a:	f040 813c 	bne.w	83eb6 <__sfvwrite_r+0x2f2>
   83c3e:	89a3      	ldrh	r3, [r4, #12]
   83c40:	6835      	ldr	r5, [r6, #0]
   83c42:	f003 0802 	and.w	r8, r3, #2
   83c46:	fa1f f088 	uxth.w	r0, r8
   83c4a:	2800      	cmp	r0, #0
   83c4c:	d1cf      	bne.n	83bee <__sfvwrite_r+0x2a>
   83c4e:	f013 0901 	ands.w	r9, r3, #1
   83c52:	f040 8090 	bne.w	83d76 <__sfvwrite_r+0x1b2>
   83c56:	464f      	mov	r7, r9
   83c58:	9601      	str	r6, [sp, #4]
   83c5a:	2f00      	cmp	r7, #0
   83c5c:	d056      	beq.n	83d0c <__sfvwrite_r+0x148>
   83c5e:	059a      	lsls	r2, r3, #22
   83c60:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83c64:	d55f      	bpl.n	83d26 <__sfvwrite_r+0x162>
   83c66:	4547      	cmp	r7, r8
   83c68:	46c2      	mov	sl, r8
   83c6a:	f0c0 80bf 	bcc.w	83dec <__sfvwrite_r+0x228>
   83c6e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83c72:	f000 80bd 	beq.w	83df0 <__sfvwrite_r+0x22c>
   83c76:	6962      	ldr	r2, [r4, #20]
   83c78:	6820      	ldr	r0, [r4, #0]
   83c7a:	6921      	ldr	r1, [r4, #16]
   83c7c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83c80:	ebc1 0a00 	rsb	sl, r1, r0
   83c84:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83c88:	f10a 0001 	add.w	r0, sl, #1
   83c8c:	ea4f 0868 	mov.w	r8, r8, asr #1
   83c90:	4438      	add	r0, r7
   83c92:	4540      	cmp	r0, r8
   83c94:	4642      	mov	r2, r8
   83c96:	bf84      	itt	hi
   83c98:	4680      	movhi	r8, r0
   83c9a:	4642      	movhi	r2, r8
   83c9c:	055b      	lsls	r3, r3, #21
   83c9e:	f140 80f2 	bpl.w	83e86 <__sfvwrite_r+0x2c2>
   83ca2:	4611      	mov	r1, r2
   83ca4:	9802      	ldr	r0, [sp, #8]
   83ca6:	f000 f9bf 	bl	84028 <_malloc_r>
   83caa:	4683      	mov	fp, r0
   83cac:	2800      	cmp	r0, #0
   83cae:	f000 8105 	beq.w	83ebc <__sfvwrite_r+0x2f8>
   83cb2:	4652      	mov	r2, sl
   83cb4:	6921      	ldr	r1, [r4, #16]
   83cb6:	f7fe fac3 	bl	82240 <memcpy>
   83cba:	89a3      	ldrh	r3, [r4, #12]
   83cbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83cc4:	81a3      	strh	r3, [r4, #12]
   83cc6:	ebca 0308 	rsb	r3, sl, r8
   83cca:	eb0b 000a 	add.w	r0, fp, sl
   83cce:	f8c4 8014 	str.w	r8, [r4, #20]
   83cd2:	46ba      	mov	sl, r7
   83cd4:	46b8      	mov	r8, r7
   83cd6:	f8c4 b010 	str.w	fp, [r4, #16]
   83cda:	6020      	str	r0, [r4, #0]
   83cdc:	60a3      	str	r3, [r4, #8]
   83cde:	4652      	mov	r2, sl
   83ce0:	4649      	mov	r1, r9
   83ce2:	f000 fc93 	bl	8460c <memmove>
   83ce6:	68a0      	ldr	r0, [r4, #8]
   83ce8:	6823      	ldr	r3, [r4, #0]
   83cea:	ebc8 0000 	rsb	r0, r8, r0
   83cee:	60a0      	str	r0, [r4, #8]
   83cf0:	4638      	mov	r0, r7
   83cf2:	4453      	add	r3, sl
   83cf4:	6023      	str	r3, [r4, #0]
   83cf6:	9a01      	ldr	r2, [sp, #4]
   83cf8:	4481      	add	r9, r0
   83cfa:	6893      	ldr	r3, [r2, #8]
   83cfc:	1a3f      	subs	r7, r7, r0
   83cfe:	1a1b      	subs	r3, r3, r0
   83d00:	6093      	str	r3, [r2, #8]
   83d02:	2b00      	cmp	r3, #0
   83d04:	d090      	beq.n	83c28 <__sfvwrite_r+0x64>
   83d06:	89a3      	ldrh	r3, [r4, #12]
   83d08:	2f00      	cmp	r7, #0
   83d0a:	d1a8      	bne.n	83c5e <__sfvwrite_r+0x9a>
   83d0c:	f8d5 9000 	ldr.w	r9, [r5]
   83d10:	686f      	ldr	r7, [r5, #4]
   83d12:	3508      	adds	r5, #8
   83d14:	e7a1      	b.n	83c5a <__sfvwrite_r+0x96>
   83d16:	f8d5 9000 	ldr.w	r9, [r5]
   83d1a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83d1e:	3508      	adds	r5, #8
   83d20:	e76a      	b.n	83bf8 <__sfvwrite_r+0x34>
   83d22:	2000      	movs	r0, #0
   83d24:	4770      	bx	lr
   83d26:	6820      	ldr	r0, [r4, #0]
   83d28:	6923      	ldr	r3, [r4, #16]
   83d2a:	4298      	cmp	r0, r3
   83d2c:	d803      	bhi.n	83d36 <__sfvwrite_r+0x172>
   83d2e:	6962      	ldr	r2, [r4, #20]
   83d30:	4297      	cmp	r7, r2
   83d32:	f080 8083 	bcs.w	83e3c <__sfvwrite_r+0x278>
   83d36:	45b8      	cmp	r8, r7
   83d38:	bf28      	it	cs
   83d3a:	46b8      	movcs	r8, r7
   83d3c:	4649      	mov	r1, r9
   83d3e:	4642      	mov	r2, r8
   83d40:	f000 fc64 	bl	8460c <memmove>
   83d44:	68a3      	ldr	r3, [r4, #8]
   83d46:	6822      	ldr	r2, [r4, #0]
   83d48:	ebc8 0303 	rsb	r3, r8, r3
   83d4c:	4442      	add	r2, r8
   83d4e:	60a3      	str	r3, [r4, #8]
   83d50:	6022      	str	r2, [r4, #0]
   83d52:	2b00      	cmp	r3, #0
   83d54:	d148      	bne.n	83de8 <__sfvwrite_r+0x224>
   83d56:	4621      	mov	r1, r4
   83d58:	9802      	ldr	r0, [sp, #8]
   83d5a:	f7ff fcef 	bl	8373c <_fflush_r>
   83d5e:	2800      	cmp	r0, #0
   83d60:	d042      	beq.n	83de8 <__sfvwrite_r+0x224>
   83d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83d6a:	f04f 30ff 	mov.w	r0, #4294967295
   83d6e:	81a3      	strh	r3, [r4, #12]
   83d70:	b005      	add	sp, #20
   83d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d76:	4680      	mov	r8, r0
   83d78:	4682      	mov	sl, r0
   83d7a:	4681      	mov	r9, r0
   83d7c:	9001      	str	r0, [sp, #4]
   83d7e:	f1b9 0f00 	cmp.w	r9, #0
   83d82:	d029      	beq.n	83dd8 <__sfvwrite_r+0x214>
   83d84:	9b01      	ldr	r3, [sp, #4]
   83d86:	2b00      	cmp	r3, #0
   83d88:	d04b      	beq.n	83e22 <__sfvwrite_r+0x25e>
   83d8a:	45c8      	cmp	r8, r9
   83d8c:	46c3      	mov	fp, r8
   83d8e:	bf28      	it	cs
   83d90:	46cb      	movcs	fp, r9
   83d92:	6820      	ldr	r0, [r4, #0]
   83d94:	6923      	ldr	r3, [r4, #16]
   83d96:	465f      	mov	r7, fp
   83d98:	4298      	cmp	r0, r3
   83d9a:	6962      	ldr	r2, [r4, #20]
   83d9c:	d903      	bls.n	83da6 <__sfvwrite_r+0x1e2>
   83d9e:	68a3      	ldr	r3, [r4, #8]
   83da0:	4413      	add	r3, r2
   83da2:	459b      	cmp	fp, r3
   83da4:	dc5c      	bgt.n	83e60 <__sfvwrite_r+0x29c>
   83da6:	4593      	cmp	fp, r2
   83da8:	db24      	blt.n	83df4 <__sfvwrite_r+0x230>
   83daa:	4613      	mov	r3, r2
   83dac:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83dae:	4652      	mov	r2, sl
   83db0:	69e1      	ldr	r1, [r4, #28]
   83db2:	9802      	ldr	r0, [sp, #8]
   83db4:	47b8      	blx	r7
   83db6:	1e07      	subs	r7, r0, #0
   83db8:	ddd3      	ble.n	83d62 <__sfvwrite_r+0x19e>
   83dba:	ebb8 0807 	subs.w	r8, r8, r7
   83dbe:	d027      	beq.n	83e10 <__sfvwrite_r+0x24c>
   83dc0:	68b3      	ldr	r3, [r6, #8]
   83dc2:	44ba      	add	sl, r7
   83dc4:	1bdb      	subs	r3, r3, r7
   83dc6:	ebc7 0909 	rsb	r9, r7, r9
   83dca:	60b3      	str	r3, [r6, #8]
   83dcc:	2b00      	cmp	r3, #0
   83dce:	f43f af2b 	beq.w	83c28 <__sfvwrite_r+0x64>
   83dd2:	f1b9 0f00 	cmp.w	r9, #0
   83dd6:	d1d5      	bne.n	83d84 <__sfvwrite_r+0x1c0>
   83dd8:	2300      	movs	r3, #0
   83dda:	f8d5 a000 	ldr.w	sl, [r5]
   83dde:	f8d5 9004 	ldr.w	r9, [r5, #4]
   83de2:	9301      	str	r3, [sp, #4]
   83de4:	3508      	adds	r5, #8
   83de6:	e7ca      	b.n	83d7e <__sfvwrite_r+0x1ba>
   83de8:	4640      	mov	r0, r8
   83dea:	e784      	b.n	83cf6 <__sfvwrite_r+0x132>
   83dec:	46b8      	mov	r8, r7
   83dee:	46ba      	mov	sl, r7
   83df0:	6820      	ldr	r0, [r4, #0]
   83df2:	e774      	b.n	83cde <__sfvwrite_r+0x11a>
   83df4:	465a      	mov	r2, fp
   83df6:	4651      	mov	r1, sl
   83df8:	f000 fc08 	bl	8460c <memmove>
   83dfc:	68a2      	ldr	r2, [r4, #8]
   83dfe:	6823      	ldr	r3, [r4, #0]
   83e00:	ebcb 0202 	rsb	r2, fp, r2
   83e04:	445b      	add	r3, fp
   83e06:	ebb8 0807 	subs.w	r8, r8, r7
   83e0a:	60a2      	str	r2, [r4, #8]
   83e0c:	6023      	str	r3, [r4, #0]
   83e0e:	d1d7      	bne.n	83dc0 <__sfvwrite_r+0x1fc>
   83e10:	4621      	mov	r1, r4
   83e12:	9802      	ldr	r0, [sp, #8]
   83e14:	f7ff fc92 	bl	8373c <_fflush_r>
   83e18:	2800      	cmp	r0, #0
   83e1a:	d1a2      	bne.n	83d62 <__sfvwrite_r+0x19e>
   83e1c:	f8cd 8004 	str.w	r8, [sp, #4]
   83e20:	e7ce      	b.n	83dc0 <__sfvwrite_r+0x1fc>
   83e22:	464a      	mov	r2, r9
   83e24:	210a      	movs	r1, #10
   83e26:	4650      	mov	r0, sl
   83e28:	f000 fbaa 	bl	84580 <memchr>
   83e2c:	2800      	cmp	r0, #0
   83e2e:	d03d      	beq.n	83eac <__sfvwrite_r+0x2e8>
   83e30:	3001      	adds	r0, #1
   83e32:	2301      	movs	r3, #1
   83e34:	ebca 0800 	rsb	r8, sl, r0
   83e38:	9301      	str	r3, [sp, #4]
   83e3a:	e7a6      	b.n	83d8a <__sfvwrite_r+0x1c6>
   83e3c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   83e40:	42bb      	cmp	r3, r7
   83e42:	bf28      	it	cs
   83e44:	463b      	movcs	r3, r7
   83e46:	fb93 f3f2 	sdiv	r3, r3, r2
   83e4a:	69e1      	ldr	r1, [r4, #28]
   83e4c:	fb02 f303 	mul.w	r3, r2, r3
   83e50:	9802      	ldr	r0, [sp, #8]
   83e52:	464a      	mov	r2, r9
   83e54:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83e56:	47b0      	blx	r6
   83e58:	2800      	cmp	r0, #0
   83e5a:	f73f af4c 	bgt.w	83cf6 <__sfvwrite_r+0x132>
   83e5e:	e780      	b.n	83d62 <__sfvwrite_r+0x19e>
   83e60:	461a      	mov	r2, r3
   83e62:	4651      	mov	r1, sl
   83e64:	9303      	str	r3, [sp, #12]
   83e66:	f000 fbd1 	bl	8460c <memmove>
   83e6a:	6822      	ldr	r2, [r4, #0]
   83e6c:	9b03      	ldr	r3, [sp, #12]
   83e6e:	4621      	mov	r1, r4
   83e70:	441a      	add	r2, r3
   83e72:	6022      	str	r2, [r4, #0]
   83e74:	9802      	ldr	r0, [sp, #8]
   83e76:	f7ff fc61 	bl	8373c <_fflush_r>
   83e7a:	9b03      	ldr	r3, [sp, #12]
   83e7c:	2800      	cmp	r0, #0
   83e7e:	f47f af70 	bne.w	83d62 <__sfvwrite_r+0x19e>
   83e82:	461f      	mov	r7, r3
   83e84:	e799      	b.n	83dba <__sfvwrite_r+0x1f6>
   83e86:	9802      	ldr	r0, [sp, #8]
   83e88:	f000 fc28 	bl	846dc <_realloc_r>
   83e8c:	4683      	mov	fp, r0
   83e8e:	2800      	cmp	r0, #0
   83e90:	f47f af19 	bne.w	83cc6 <__sfvwrite_r+0x102>
   83e94:	9d02      	ldr	r5, [sp, #8]
   83e96:	6921      	ldr	r1, [r4, #16]
   83e98:	4628      	mov	r0, r5
   83e9a:	f7ff fdab 	bl	839f4 <_free_r>
   83e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ea2:	220c      	movs	r2, #12
   83ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83ea8:	602a      	str	r2, [r5, #0]
   83eaa:	e75c      	b.n	83d66 <__sfvwrite_r+0x1a2>
   83eac:	2301      	movs	r3, #1
   83eae:	f109 0801 	add.w	r8, r9, #1
   83eb2:	9301      	str	r3, [sp, #4]
   83eb4:	e769      	b.n	83d8a <__sfvwrite_r+0x1c6>
   83eb6:	f04f 30ff 	mov.w	r0, #4294967295
   83eba:	e6b6      	b.n	83c2a <__sfvwrite_r+0x66>
   83ebc:	9a02      	ldr	r2, [sp, #8]
   83ebe:	230c      	movs	r3, #12
   83ec0:	6013      	str	r3, [r2, #0]
   83ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ec6:	e74e      	b.n	83d66 <__sfvwrite_r+0x1a2>
   83ec8:	7ffffc00 	.word	0x7ffffc00

00083ecc <_fwalk_reent>:
   83ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83ed0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83ed4:	d01e      	beq.n	83f14 <_fwalk_reent+0x48>
   83ed6:	4688      	mov	r8, r1
   83ed8:	4607      	mov	r7, r0
   83eda:	f04f 0900 	mov.w	r9, #0
   83ede:	6875      	ldr	r5, [r6, #4]
   83ee0:	68b4      	ldr	r4, [r6, #8]
   83ee2:	3d01      	subs	r5, #1
   83ee4:	d410      	bmi.n	83f08 <_fwalk_reent+0x3c>
   83ee6:	89a3      	ldrh	r3, [r4, #12]
   83ee8:	3d01      	subs	r5, #1
   83eea:	2b01      	cmp	r3, #1
   83eec:	d908      	bls.n	83f00 <_fwalk_reent+0x34>
   83eee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83ef2:	3301      	adds	r3, #1
   83ef4:	d004      	beq.n	83f00 <_fwalk_reent+0x34>
   83ef6:	4621      	mov	r1, r4
   83ef8:	4638      	mov	r0, r7
   83efa:	47c0      	blx	r8
   83efc:	ea49 0900 	orr.w	r9, r9, r0
   83f00:	1c6b      	adds	r3, r5, #1
   83f02:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83f06:	d1ee      	bne.n	83ee6 <_fwalk_reent+0x1a>
   83f08:	6836      	ldr	r6, [r6, #0]
   83f0a:	2e00      	cmp	r6, #0
   83f0c:	d1e7      	bne.n	83ede <_fwalk_reent+0x12>
   83f0e:	4648      	mov	r0, r9
   83f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83f14:	46b1      	mov	r9, r6
   83f16:	4648      	mov	r0, r9
   83f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083f1c <__locale_charset>:
   83f1c:	4800      	ldr	r0, [pc, #0]	; (83f20 <__locale_charset+0x4>)
   83f1e:	4770      	bx	lr
   83f20:	2007056c 	.word	0x2007056c

00083f24 <__locale_mb_cur_max>:
   83f24:	4b01      	ldr	r3, [pc, #4]	; (83f2c <__locale_mb_cur_max+0x8>)
   83f26:	6818      	ldr	r0, [r3, #0]
   83f28:	4770      	bx	lr
   83f2a:	bf00      	nop
   83f2c:	2007058c 	.word	0x2007058c

00083f30 <__swhatbuf_r>:
   83f30:	b570      	push	{r4, r5, r6, lr}
   83f32:	460e      	mov	r6, r1
   83f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f38:	b090      	sub	sp, #64	; 0x40
   83f3a:	2900      	cmp	r1, #0
   83f3c:	4614      	mov	r4, r2
   83f3e:	461d      	mov	r5, r3
   83f40:	db14      	blt.n	83f6c <__swhatbuf_r+0x3c>
   83f42:	aa01      	add	r2, sp, #4
   83f44:	f000 ff54 	bl	84df0 <_fstat_r>
   83f48:	2800      	cmp	r0, #0
   83f4a:	db0f      	blt.n	83f6c <__swhatbuf_r+0x3c>
   83f4c:	9a02      	ldr	r2, [sp, #8]
   83f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83f56:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83f5a:	fab2 f282 	clz	r2, r2
   83f5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83f62:	0952      	lsrs	r2, r2, #5
   83f64:	602a      	str	r2, [r5, #0]
   83f66:	6023      	str	r3, [r4, #0]
   83f68:	b010      	add	sp, #64	; 0x40
   83f6a:	bd70      	pop	{r4, r5, r6, pc}
   83f6c:	89b2      	ldrh	r2, [r6, #12]
   83f6e:	2000      	movs	r0, #0
   83f70:	f002 0280 	and.w	r2, r2, #128	; 0x80
   83f74:	b292      	uxth	r2, r2
   83f76:	6028      	str	r0, [r5, #0]
   83f78:	b11a      	cbz	r2, 83f82 <__swhatbuf_r+0x52>
   83f7a:	2340      	movs	r3, #64	; 0x40
   83f7c:	6023      	str	r3, [r4, #0]
   83f7e:	b010      	add	sp, #64	; 0x40
   83f80:	bd70      	pop	{r4, r5, r6, pc}
   83f82:	4610      	mov	r0, r2
   83f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f88:	6023      	str	r3, [r4, #0]
   83f8a:	b010      	add	sp, #64	; 0x40
   83f8c:	bd70      	pop	{r4, r5, r6, pc}
   83f8e:	bf00      	nop

00083f90 <__smakebuf_r>:
   83f90:	898a      	ldrh	r2, [r1, #12]
   83f92:	460b      	mov	r3, r1
   83f94:	0792      	lsls	r2, r2, #30
   83f96:	d506      	bpl.n	83fa6 <__smakebuf_r+0x16>
   83f98:	f101 0243 	add.w	r2, r1, #67	; 0x43
   83f9c:	2101      	movs	r1, #1
   83f9e:	601a      	str	r2, [r3, #0]
   83fa0:	611a      	str	r2, [r3, #16]
   83fa2:	6159      	str	r1, [r3, #20]
   83fa4:	4770      	bx	lr
   83fa6:	b5f0      	push	{r4, r5, r6, r7, lr}
   83fa8:	b083      	sub	sp, #12
   83faa:	ab01      	add	r3, sp, #4
   83fac:	466a      	mov	r2, sp
   83fae:	460c      	mov	r4, r1
   83fb0:	4605      	mov	r5, r0
   83fb2:	f7ff ffbd 	bl	83f30 <__swhatbuf_r>
   83fb6:	9900      	ldr	r1, [sp, #0]
   83fb8:	4606      	mov	r6, r0
   83fba:	4628      	mov	r0, r5
   83fbc:	f000 f834 	bl	84028 <_malloc_r>
   83fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83fc4:	b1d0      	cbz	r0, 83ffc <__smakebuf_r+0x6c>
   83fc6:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83fca:	4f12      	ldr	r7, [pc, #72]	; (84014 <__smakebuf_r+0x84>)
   83fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83fd0:	63ef      	str	r7, [r5, #60]	; 0x3c
   83fd2:	81a3      	strh	r3, [r4, #12]
   83fd4:	6020      	str	r0, [r4, #0]
   83fd6:	6120      	str	r0, [r4, #16]
   83fd8:	6161      	str	r1, [r4, #20]
   83fda:	b91a      	cbnz	r2, 83fe4 <__smakebuf_r+0x54>
   83fdc:	4333      	orrs	r3, r6
   83fde:	81a3      	strh	r3, [r4, #12]
   83fe0:	b003      	add	sp, #12
   83fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83fe4:	4628      	mov	r0, r5
   83fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83fea:	f000 ff15 	bl	84e18 <_isatty_r>
   83fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ff2:	2800      	cmp	r0, #0
   83ff4:	d0f2      	beq.n	83fdc <__smakebuf_r+0x4c>
   83ff6:	f043 0301 	orr.w	r3, r3, #1
   83ffa:	e7ef      	b.n	83fdc <__smakebuf_r+0x4c>
   83ffc:	059a      	lsls	r2, r3, #22
   83ffe:	d4ef      	bmi.n	83fe0 <__smakebuf_r+0x50>
   84000:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84004:	f043 0302 	orr.w	r3, r3, #2
   84008:	2101      	movs	r1, #1
   8400a:	81a3      	strh	r3, [r4, #12]
   8400c:	6022      	str	r2, [r4, #0]
   8400e:	6122      	str	r2, [r4, #16]
   84010:	6161      	str	r1, [r4, #20]
   84012:	e7e5      	b.n	83fe0 <__smakebuf_r+0x50>
   84014:	00083769 	.word	0x00083769

00084018 <malloc>:
   84018:	4b02      	ldr	r3, [pc, #8]	; (84024 <malloc+0xc>)
   8401a:	4601      	mov	r1, r0
   8401c:	6818      	ldr	r0, [r3, #0]
   8401e:	f000 b803 	b.w	84028 <_malloc_r>
   84022:	bf00      	nop
   84024:	20070568 	.word	0x20070568

00084028 <_malloc_r>:
   84028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8402c:	f101 050b 	add.w	r5, r1, #11
   84030:	2d16      	cmp	r5, #22
   84032:	b083      	sub	sp, #12
   84034:	4606      	mov	r6, r0
   84036:	f240 80a0 	bls.w	8417a <_malloc_r+0x152>
   8403a:	f035 0507 	bics.w	r5, r5, #7
   8403e:	f100 80c0 	bmi.w	841c2 <_malloc_r+0x19a>
   84042:	42a9      	cmp	r1, r5
   84044:	f200 80bd 	bhi.w	841c2 <_malloc_r+0x19a>
   84048:	f000 fb44 	bl	846d4 <__malloc_lock>
   8404c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84050:	f0c0 8290 	bcc.w	84574 <_malloc_r+0x54c>
   84054:	0a6b      	lsrs	r3, r5, #9
   84056:	f000 80bb 	beq.w	841d0 <_malloc_r+0x1a8>
   8405a:	2b04      	cmp	r3, #4
   8405c:	f200 8177 	bhi.w	8434e <_malloc_r+0x326>
   84060:	09a8      	lsrs	r0, r5, #6
   84062:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   84066:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8406a:	3038      	adds	r0, #56	; 0x38
   8406c:	4fbe      	ldr	r7, [pc, #760]	; (84368 <_malloc_r+0x340>)
   8406e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84072:	684c      	ldr	r4, [r1, #4]
   84074:	3908      	subs	r1, #8
   84076:	42a1      	cmp	r1, r4
   84078:	d107      	bne.n	8408a <_malloc_r+0x62>
   8407a:	e0ae      	b.n	841da <_malloc_r+0x1b2>
   8407c:	2a00      	cmp	r2, #0
   8407e:	f280 80ae 	bge.w	841de <_malloc_r+0x1b6>
   84082:	68e4      	ldr	r4, [r4, #12]
   84084:	42a1      	cmp	r1, r4
   84086:	f000 80a8 	beq.w	841da <_malloc_r+0x1b2>
   8408a:	6863      	ldr	r3, [r4, #4]
   8408c:	f023 0303 	bic.w	r3, r3, #3
   84090:	1b5a      	subs	r2, r3, r5
   84092:	2a0f      	cmp	r2, #15
   84094:	ddf2      	ble.n	8407c <_malloc_r+0x54>
   84096:	49b4      	ldr	r1, [pc, #720]	; (84368 <_malloc_r+0x340>)
   84098:	693c      	ldr	r4, [r7, #16]
   8409a:	f101 0e08 	add.w	lr, r1, #8
   8409e:	4574      	cmp	r4, lr
   840a0:	f000 81a8 	beq.w	843f4 <_malloc_r+0x3cc>
   840a4:	6863      	ldr	r3, [r4, #4]
   840a6:	f023 0303 	bic.w	r3, r3, #3
   840aa:	1b5a      	subs	r2, r3, r5
   840ac:	2a0f      	cmp	r2, #15
   840ae:	f300 818e 	bgt.w	843ce <_malloc_r+0x3a6>
   840b2:	2a00      	cmp	r2, #0
   840b4:	f8c1 e014 	str.w	lr, [r1, #20]
   840b8:	f8c1 e010 	str.w	lr, [r1, #16]
   840bc:	f280 8093 	bge.w	841e6 <_malloc_r+0x1be>
   840c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   840c4:	f080 815c 	bcs.w	84380 <_malloc_r+0x358>
   840c8:	08db      	lsrs	r3, r3, #3
   840ca:	684a      	ldr	r2, [r1, #4]
   840cc:	ea4f 09a3 	mov.w	r9, r3, asr #2
   840d0:	f04f 0c01 	mov.w	ip, #1
   840d4:	3301      	adds	r3, #1
   840d6:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   840da:	fa0c f909 	lsl.w	r9, ip, r9
   840de:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   840e2:	ea49 0202 	orr.w	r2, r9, r2
   840e6:	f1ac 0c08 	sub.w	ip, ip, #8
   840ea:	f8c4 c00c 	str.w	ip, [r4, #12]
   840ee:	f8c4 8008 	str.w	r8, [r4, #8]
   840f2:	604a      	str	r2, [r1, #4]
   840f4:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   840f8:	f8c8 400c 	str.w	r4, [r8, #12]
   840fc:	1083      	asrs	r3, r0, #2
   840fe:	2401      	movs	r4, #1
   84100:	409c      	lsls	r4, r3
   84102:	4294      	cmp	r4, r2
   84104:	d87c      	bhi.n	84200 <_malloc_r+0x1d8>
   84106:	4214      	tst	r4, r2
   84108:	d106      	bne.n	84118 <_malloc_r+0xf0>
   8410a:	f020 0003 	bic.w	r0, r0, #3
   8410e:	0064      	lsls	r4, r4, #1
   84110:	4214      	tst	r4, r2
   84112:	f100 0004 	add.w	r0, r0, #4
   84116:	d0fa      	beq.n	8410e <_malloc_r+0xe6>
   84118:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8411c:	46cc      	mov	ip, r9
   8411e:	4680      	mov	r8, r0
   84120:	f8dc 100c 	ldr.w	r1, [ip, #12]
   84124:	458c      	cmp	ip, r1
   84126:	d107      	bne.n	84138 <_malloc_r+0x110>
   84128:	e166      	b.n	843f8 <_malloc_r+0x3d0>
   8412a:	2a00      	cmp	r2, #0
   8412c:	f280 8174 	bge.w	84418 <_malloc_r+0x3f0>
   84130:	68c9      	ldr	r1, [r1, #12]
   84132:	458c      	cmp	ip, r1
   84134:	f000 8160 	beq.w	843f8 <_malloc_r+0x3d0>
   84138:	684b      	ldr	r3, [r1, #4]
   8413a:	f023 0303 	bic.w	r3, r3, #3
   8413e:	1b5a      	subs	r2, r3, r5
   84140:	2a0f      	cmp	r2, #15
   84142:	ddf2      	ble.n	8412a <_malloc_r+0x102>
   84144:	460c      	mov	r4, r1
   84146:	68cb      	ldr	r3, [r1, #12]
   84148:	f854 cf08 	ldr.w	ip, [r4, #8]!
   8414c:	f045 0801 	orr.w	r8, r5, #1
   84150:	f8c1 8004 	str.w	r8, [r1, #4]
   84154:	440d      	add	r5, r1
   84156:	f042 0101 	orr.w	r1, r2, #1
   8415a:	f8cc 300c 	str.w	r3, [ip, #12]
   8415e:	4630      	mov	r0, r6
   84160:	f8c3 c008 	str.w	ip, [r3, #8]
   84164:	617d      	str	r5, [r7, #20]
   84166:	613d      	str	r5, [r7, #16]
   84168:	f8c5 e00c 	str.w	lr, [r5, #12]
   8416c:	f8c5 e008 	str.w	lr, [r5, #8]
   84170:	6069      	str	r1, [r5, #4]
   84172:	50aa      	str	r2, [r5, r2]
   84174:	f000 fab0 	bl	846d8 <__malloc_unlock>
   84178:	e01f      	b.n	841ba <_malloc_r+0x192>
   8417a:	2910      	cmp	r1, #16
   8417c:	d821      	bhi.n	841c2 <_malloc_r+0x19a>
   8417e:	f000 faa9 	bl	846d4 <__malloc_lock>
   84182:	2510      	movs	r5, #16
   84184:	2306      	movs	r3, #6
   84186:	2002      	movs	r0, #2
   84188:	4f77      	ldr	r7, [pc, #476]	; (84368 <_malloc_r+0x340>)
   8418a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   8418e:	685c      	ldr	r4, [r3, #4]
   84190:	f1a3 0208 	sub.w	r2, r3, #8
   84194:	4294      	cmp	r4, r2
   84196:	f000 8138 	beq.w	8440a <_malloc_r+0x3e2>
   8419a:	6863      	ldr	r3, [r4, #4]
   8419c:	68e1      	ldr	r1, [r4, #12]
   8419e:	f023 0303 	bic.w	r3, r3, #3
   841a2:	4423      	add	r3, r4
   841a4:	685a      	ldr	r2, [r3, #4]
   841a6:	68a5      	ldr	r5, [r4, #8]
   841a8:	f042 0201 	orr.w	r2, r2, #1
   841ac:	60e9      	str	r1, [r5, #12]
   841ae:	4630      	mov	r0, r6
   841b0:	608d      	str	r5, [r1, #8]
   841b2:	605a      	str	r2, [r3, #4]
   841b4:	f000 fa90 	bl	846d8 <__malloc_unlock>
   841b8:	3408      	adds	r4, #8
   841ba:	4620      	mov	r0, r4
   841bc:	b003      	add	sp, #12
   841be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841c2:	2400      	movs	r4, #0
   841c4:	4620      	mov	r0, r4
   841c6:	230c      	movs	r3, #12
   841c8:	6033      	str	r3, [r6, #0]
   841ca:	b003      	add	sp, #12
   841cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841d0:	2180      	movs	r1, #128	; 0x80
   841d2:	f04f 0e40 	mov.w	lr, #64	; 0x40
   841d6:	203f      	movs	r0, #63	; 0x3f
   841d8:	e748      	b.n	8406c <_malloc_r+0x44>
   841da:	4670      	mov	r0, lr
   841dc:	e75b      	b.n	84096 <_malloc_r+0x6e>
   841de:	4423      	add	r3, r4
   841e0:	685a      	ldr	r2, [r3, #4]
   841e2:	68e1      	ldr	r1, [r4, #12]
   841e4:	e7df      	b.n	841a6 <_malloc_r+0x17e>
   841e6:	4423      	add	r3, r4
   841e8:	685a      	ldr	r2, [r3, #4]
   841ea:	4630      	mov	r0, r6
   841ec:	f042 0201 	orr.w	r2, r2, #1
   841f0:	605a      	str	r2, [r3, #4]
   841f2:	3408      	adds	r4, #8
   841f4:	f000 fa70 	bl	846d8 <__malloc_unlock>
   841f8:	4620      	mov	r0, r4
   841fa:	b003      	add	sp, #12
   841fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84200:	68bc      	ldr	r4, [r7, #8]
   84202:	6863      	ldr	r3, [r4, #4]
   84204:	f023 0803 	bic.w	r8, r3, #3
   84208:	45a8      	cmp	r8, r5
   8420a:	d304      	bcc.n	84216 <_malloc_r+0x1ee>
   8420c:	ebc5 0308 	rsb	r3, r5, r8
   84210:	2b0f      	cmp	r3, #15
   84212:	f300 808c 	bgt.w	8432e <_malloc_r+0x306>
   84216:	4b55      	ldr	r3, [pc, #340]	; (8436c <_malloc_r+0x344>)
   84218:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8437c <_malloc_r+0x354>
   8421c:	681a      	ldr	r2, [r3, #0]
   8421e:	f8d9 3000 	ldr.w	r3, [r9]
   84222:	442a      	add	r2, r5
   84224:	3301      	adds	r3, #1
   84226:	eb04 0a08 	add.w	sl, r4, r8
   8422a:	f000 8160 	beq.w	844ee <_malloc_r+0x4c6>
   8422e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   84232:	320f      	adds	r2, #15
   84234:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   84238:	f022 020f 	bic.w	r2, r2, #15
   8423c:	4611      	mov	r1, r2
   8423e:	4630      	mov	r0, r6
   84240:	9201      	str	r2, [sp, #4]
   84242:	f000 fc35 	bl	84ab0 <_sbrk_r>
   84246:	f1b0 3fff 	cmp.w	r0, #4294967295
   8424a:	4683      	mov	fp, r0
   8424c:	9a01      	ldr	r2, [sp, #4]
   8424e:	f000 8158 	beq.w	84502 <_malloc_r+0x4da>
   84252:	4582      	cmp	sl, r0
   84254:	f200 80fc 	bhi.w	84450 <_malloc_r+0x428>
   84258:	4b45      	ldr	r3, [pc, #276]	; (84370 <_malloc_r+0x348>)
   8425a:	45da      	cmp	sl, fp
   8425c:	6819      	ldr	r1, [r3, #0]
   8425e:	4411      	add	r1, r2
   84260:	6019      	str	r1, [r3, #0]
   84262:	f000 8153 	beq.w	8450c <_malloc_r+0x4e4>
   84266:	f8d9 0000 	ldr.w	r0, [r9]
   8426a:	f8df e110 	ldr.w	lr, [pc, #272]	; 8437c <_malloc_r+0x354>
   8426e:	3001      	adds	r0, #1
   84270:	bf1b      	ittet	ne
   84272:	ebca 0a0b 	rsbne	sl, sl, fp
   84276:	4451      	addne	r1, sl
   84278:	f8ce b000 	streq.w	fp, [lr]
   8427c:	6019      	strne	r1, [r3, #0]
   8427e:	f01b 0107 	ands.w	r1, fp, #7
   84282:	f000 8117 	beq.w	844b4 <_malloc_r+0x48c>
   84286:	f1c1 0008 	rsb	r0, r1, #8
   8428a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8428e:	4483      	add	fp, r0
   84290:	3108      	adds	r1, #8
   84292:	445a      	add	r2, fp
   84294:	f3c2 020b 	ubfx	r2, r2, #0, #12
   84298:	ebc2 0901 	rsb	r9, r2, r1
   8429c:	4649      	mov	r1, r9
   8429e:	4630      	mov	r0, r6
   842a0:	9301      	str	r3, [sp, #4]
   842a2:	f000 fc05 	bl	84ab0 <_sbrk_r>
   842a6:	1c43      	adds	r3, r0, #1
   842a8:	9b01      	ldr	r3, [sp, #4]
   842aa:	f000 813f 	beq.w	8452c <_malloc_r+0x504>
   842ae:	ebcb 0200 	rsb	r2, fp, r0
   842b2:	444a      	add	r2, r9
   842b4:	f042 0201 	orr.w	r2, r2, #1
   842b8:	6819      	ldr	r1, [r3, #0]
   842ba:	42bc      	cmp	r4, r7
   842bc:	4449      	add	r1, r9
   842be:	f8c7 b008 	str.w	fp, [r7, #8]
   842c2:	6019      	str	r1, [r3, #0]
   842c4:	f8cb 2004 	str.w	r2, [fp, #4]
   842c8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 84370 <_malloc_r+0x348>
   842cc:	d016      	beq.n	842fc <_malloc_r+0x2d4>
   842ce:	f1b8 0f0f 	cmp.w	r8, #15
   842d2:	f240 80fd 	bls.w	844d0 <_malloc_r+0x4a8>
   842d6:	6862      	ldr	r2, [r4, #4]
   842d8:	f1a8 030c 	sub.w	r3, r8, #12
   842dc:	f023 0307 	bic.w	r3, r3, #7
   842e0:	f002 0201 	and.w	r2, r2, #1
   842e4:	18e0      	adds	r0, r4, r3
   842e6:	f04f 0e05 	mov.w	lr, #5
   842ea:	431a      	orrs	r2, r3
   842ec:	2b0f      	cmp	r3, #15
   842ee:	6062      	str	r2, [r4, #4]
   842f0:	f8c0 e004 	str.w	lr, [r0, #4]
   842f4:	f8c0 e008 	str.w	lr, [r0, #8]
   842f8:	f200 811c 	bhi.w	84534 <_malloc_r+0x50c>
   842fc:	4b1d      	ldr	r3, [pc, #116]	; (84374 <_malloc_r+0x34c>)
   842fe:	68bc      	ldr	r4, [r7, #8]
   84300:	681a      	ldr	r2, [r3, #0]
   84302:	4291      	cmp	r1, r2
   84304:	bf88      	it	hi
   84306:	6019      	strhi	r1, [r3, #0]
   84308:	4b1b      	ldr	r3, [pc, #108]	; (84378 <_malloc_r+0x350>)
   8430a:	681a      	ldr	r2, [r3, #0]
   8430c:	4291      	cmp	r1, r2
   8430e:	6862      	ldr	r2, [r4, #4]
   84310:	bf88      	it	hi
   84312:	6019      	strhi	r1, [r3, #0]
   84314:	f022 0203 	bic.w	r2, r2, #3
   84318:	4295      	cmp	r5, r2
   8431a:	eba2 0305 	sub.w	r3, r2, r5
   8431e:	d801      	bhi.n	84324 <_malloc_r+0x2fc>
   84320:	2b0f      	cmp	r3, #15
   84322:	dc04      	bgt.n	8432e <_malloc_r+0x306>
   84324:	4630      	mov	r0, r6
   84326:	f000 f9d7 	bl	846d8 <__malloc_unlock>
   8432a:	2400      	movs	r4, #0
   8432c:	e745      	b.n	841ba <_malloc_r+0x192>
   8432e:	f045 0201 	orr.w	r2, r5, #1
   84332:	f043 0301 	orr.w	r3, r3, #1
   84336:	4425      	add	r5, r4
   84338:	6062      	str	r2, [r4, #4]
   8433a:	4630      	mov	r0, r6
   8433c:	60bd      	str	r5, [r7, #8]
   8433e:	3408      	adds	r4, #8
   84340:	606b      	str	r3, [r5, #4]
   84342:	f000 f9c9 	bl	846d8 <__malloc_unlock>
   84346:	4620      	mov	r0, r4
   84348:	b003      	add	sp, #12
   8434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8434e:	2b14      	cmp	r3, #20
   84350:	d971      	bls.n	84436 <_malloc_r+0x40e>
   84352:	2b54      	cmp	r3, #84	; 0x54
   84354:	f200 80a4 	bhi.w	844a0 <_malloc_r+0x478>
   84358:	0b28      	lsrs	r0, r5, #12
   8435a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   8435e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84362:	306e      	adds	r0, #110	; 0x6e
   84364:	e682      	b.n	8406c <_malloc_r+0x44>
   84366:	bf00      	nop
   84368:	20070590 	.word	0x20070590
   8436c:	2007ab88 	.word	0x2007ab88
   84370:	2007ab8c 	.word	0x2007ab8c
   84374:	2007ab84 	.word	0x2007ab84
   84378:	2007ab80 	.word	0x2007ab80
   8437c:	2007099c 	.word	0x2007099c
   84380:	0a5a      	lsrs	r2, r3, #9
   84382:	2a04      	cmp	r2, #4
   84384:	d95e      	bls.n	84444 <_malloc_r+0x41c>
   84386:	2a14      	cmp	r2, #20
   84388:	f200 80b3 	bhi.w	844f2 <_malloc_r+0x4ca>
   8438c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84390:	0049      	lsls	r1, r1, #1
   84392:	325b      	adds	r2, #91	; 0x5b
   84394:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   84398:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   8439c:	f1ac 0c08 	sub.w	ip, ip, #8
   843a0:	458c      	cmp	ip, r1
   843a2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8457c <_malloc_r+0x554>
   843a6:	f000 8088 	beq.w	844ba <_malloc_r+0x492>
   843aa:	684a      	ldr	r2, [r1, #4]
   843ac:	f022 0203 	bic.w	r2, r2, #3
   843b0:	4293      	cmp	r3, r2
   843b2:	d202      	bcs.n	843ba <_malloc_r+0x392>
   843b4:	6889      	ldr	r1, [r1, #8]
   843b6:	458c      	cmp	ip, r1
   843b8:	d1f7      	bne.n	843aa <_malloc_r+0x382>
   843ba:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   843be:	687a      	ldr	r2, [r7, #4]
   843c0:	f8c4 c00c 	str.w	ip, [r4, #12]
   843c4:	60a1      	str	r1, [r4, #8]
   843c6:	f8cc 4008 	str.w	r4, [ip, #8]
   843ca:	60cc      	str	r4, [r1, #12]
   843cc:	e696      	b.n	840fc <_malloc_r+0xd4>
   843ce:	f045 0701 	orr.w	r7, r5, #1
   843d2:	f042 0301 	orr.w	r3, r2, #1
   843d6:	4425      	add	r5, r4
   843d8:	6067      	str	r7, [r4, #4]
   843da:	4630      	mov	r0, r6
   843dc:	614d      	str	r5, [r1, #20]
   843de:	610d      	str	r5, [r1, #16]
   843e0:	f8c5 e00c 	str.w	lr, [r5, #12]
   843e4:	f8c5 e008 	str.w	lr, [r5, #8]
   843e8:	606b      	str	r3, [r5, #4]
   843ea:	50aa      	str	r2, [r5, r2]
   843ec:	3408      	adds	r4, #8
   843ee:	f000 f973 	bl	846d8 <__malloc_unlock>
   843f2:	e6e2      	b.n	841ba <_malloc_r+0x192>
   843f4:	684a      	ldr	r2, [r1, #4]
   843f6:	e681      	b.n	840fc <_malloc_r+0xd4>
   843f8:	f108 0801 	add.w	r8, r8, #1
   843fc:	f018 0f03 	tst.w	r8, #3
   84400:	f10c 0c08 	add.w	ip, ip, #8
   84404:	f47f ae8c 	bne.w	84120 <_malloc_r+0xf8>
   84408:	e030      	b.n	8446c <_malloc_r+0x444>
   8440a:	68dc      	ldr	r4, [r3, #12]
   8440c:	42a3      	cmp	r3, r4
   8440e:	bf08      	it	eq
   84410:	3002      	addeq	r0, #2
   84412:	f43f ae40 	beq.w	84096 <_malloc_r+0x6e>
   84416:	e6c0      	b.n	8419a <_malloc_r+0x172>
   84418:	460c      	mov	r4, r1
   8441a:	440b      	add	r3, r1
   8441c:	685a      	ldr	r2, [r3, #4]
   8441e:	68c9      	ldr	r1, [r1, #12]
   84420:	f854 5f08 	ldr.w	r5, [r4, #8]!
   84424:	f042 0201 	orr.w	r2, r2, #1
   84428:	605a      	str	r2, [r3, #4]
   8442a:	4630      	mov	r0, r6
   8442c:	60e9      	str	r1, [r5, #12]
   8442e:	608d      	str	r5, [r1, #8]
   84430:	f000 f952 	bl	846d8 <__malloc_unlock>
   84434:	e6c1      	b.n	841ba <_malloc_r+0x192>
   84436:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   8443a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   8443e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84442:	e613      	b.n	8406c <_malloc_r+0x44>
   84444:	099a      	lsrs	r2, r3, #6
   84446:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8444a:	0049      	lsls	r1, r1, #1
   8444c:	3238      	adds	r2, #56	; 0x38
   8444e:	e7a1      	b.n	84394 <_malloc_r+0x36c>
   84450:	42bc      	cmp	r4, r7
   84452:	4b4a      	ldr	r3, [pc, #296]	; (8457c <_malloc_r+0x554>)
   84454:	f43f af00 	beq.w	84258 <_malloc_r+0x230>
   84458:	689c      	ldr	r4, [r3, #8]
   8445a:	6862      	ldr	r2, [r4, #4]
   8445c:	f022 0203 	bic.w	r2, r2, #3
   84460:	e75a      	b.n	84318 <_malloc_r+0x2f0>
   84462:	f859 3908 	ldr.w	r3, [r9], #-8
   84466:	4599      	cmp	r9, r3
   84468:	f040 8082 	bne.w	84570 <_malloc_r+0x548>
   8446c:	f010 0f03 	tst.w	r0, #3
   84470:	f100 30ff 	add.w	r0, r0, #4294967295
   84474:	d1f5      	bne.n	84462 <_malloc_r+0x43a>
   84476:	687b      	ldr	r3, [r7, #4]
   84478:	ea23 0304 	bic.w	r3, r3, r4
   8447c:	607b      	str	r3, [r7, #4]
   8447e:	0064      	lsls	r4, r4, #1
   84480:	429c      	cmp	r4, r3
   84482:	f63f aebd 	bhi.w	84200 <_malloc_r+0x1d8>
   84486:	2c00      	cmp	r4, #0
   84488:	f43f aeba 	beq.w	84200 <_malloc_r+0x1d8>
   8448c:	421c      	tst	r4, r3
   8448e:	4640      	mov	r0, r8
   84490:	f47f ae42 	bne.w	84118 <_malloc_r+0xf0>
   84494:	0064      	lsls	r4, r4, #1
   84496:	421c      	tst	r4, r3
   84498:	f100 0004 	add.w	r0, r0, #4
   8449c:	d0fa      	beq.n	84494 <_malloc_r+0x46c>
   8449e:	e63b      	b.n	84118 <_malloc_r+0xf0>
   844a0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   844a4:	d818      	bhi.n	844d8 <_malloc_r+0x4b0>
   844a6:	0be8      	lsrs	r0, r5, #15
   844a8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   844ac:	ea4f 014e 	mov.w	r1, lr, lsl #1
   844b0:	3077      	adds	r0, #119	; 0x77
   844b2:	e5db      	b.n	8406c <_malloc_r+0x44>
   844b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   844b8:	e6eb      	b.n	84292 <_malloc_r+0x26a>
   844ba:	2101      	movs	r1, #1
   844bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   844c0:	1092      	asrs	r2, r2, #2
   844c2:	fa01 f202 	lsl.w	r2, r1, r2
   844c6:	431a      	orrs	r2, r3
   844c8:	f8c8 2004 	str.w	r2, [r8, #4]
   844cc:	4661      	mov	r1, ip
   844ce:	e777      	b.n	843c0 <_malloc_r+0x398>
   844d0:	2301      	movs	r3, #1
   844d2:	f8cb 3004 	str.w	r3, [fp, #4]
   844d6:	e725      	b.n	84324 <_malloc_r+0x2fc>
   844d8:	f240 5254 	movw	r2, #1364	; 0x554
   844dc:	4293      	cmp	r3, r2
   844de:	d820      	bhi.n	84522 <_malloc_r+0x4fa>
   844e0:	0ca8      	lsrs	r0, r5, #18
   844e2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   844e6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   844ea:	307c      	adds	r0, #124	; 0x7c
   844ec:	e5be      	b.n	8406c <_malloc_r+0x44>
   844ee:	3210      	adds	r2, #16
   844f0:	e6a4      	b.n	8423c <_malloc_r+0x214>
   844f2:	2a54      	cmp	r2, #84	; 0x54
   844f4:	d826      	bhi.n	84544 <_malloc_r+0x51c>
   844f6:	0b1a      	lsrs	r2, r3, #12
   844f8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   844fc:	0049      	lsls	r1, r1, #1
   844fe:	326e      	adds	r2, #110	; 0x6e
   84500:	e748      	b.n	84394 <_malloc_r+0x36c>
   84502:	68bc      	ldr	r4, [r7, #8]
   84504:	6862      	ldr	r2, [r4, #4]
   84506:	f022 0203 	bic.w	r2, r2, #3
   8450a:	e705      	b.n	84318 <_malloc_r+0x2f0>
   8450c:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84510:	2800      	cmp	r0, #0
   84512:	f47f aea8 	bne.w	84266 <_malloc_r+0x23e>
   84516:	4442      	add	r2, r8
   84518:	68bb      	ldr	r3, [r7, #8]
   8451a:	f042 0201 	orr.w	r2, r2, #1
   8451e:	605a      	str	r2, [r3, #4]
   84520:	e6ec      	b.n	842fc <_malloc_r+0x2d4>
   84522:	21fe      	movs	r1, #254	; 0xfe
   84524:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   84528:	207e      	movs	r0, #126	; 0x7e
   8452a:	e59f      	b.n	8406c <_malloc_r+0x44>
   8452c:	2201      	movs	r2, #1
   8452e:	f04f 0900 	mov.w	r9, #0
   84532:	e6c1      	b.n	842b8 <_malloc_r+0x290>
   84534:	f104 0108 	add.w	r1, r4, #8
   84538:	4630      	mov	r0, r6
   8453a:	f7ff fa5b 	bl	839f4 <_free_r>
   8453e:	f8d9 1000 	ldr.w	r1, [r9]
   84542:	e6db      	b.n	842fc <_malloc_r+0x2d4>
   84544:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84548:	d805      	bhi.n	84556 <_malloc_r+0x52e>
   8454a:	0bda      	lsrs	r2, r3, #15
   8454c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84550:	0049      	lsls	r1, r1, #1
   84552:	3277      	adds	r2, #119	; 0x77
   84554:	e71e      	b.n	84394 <_malloc_r+0x36c>
   84556:	f240 5154 	movw	r1, #1364	; 0x554
   8455a:	428a      	cmp	r2, r1
   8455c:	d805      	bhi.n	8456a <_malloc_r+0x542>
   8455e:	0c9a      	lsrs	r2, r3, #18
   84560:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84564:	0049      	lsls	r1, r1, #1
   84566:	327c      	adds	r2, #124	; 0x7c
   84568:	e714      	b.n	84394 <_malloc_r+0x36c>
   8456a:	21fe      	movs	r1, #254	; 0xfe
   8456c:	227e      	movs	r2, #126	; 0x7e
   8456e:	e711      	b.n	84394 <_malloc_r+0x36c>
   84570:	687b      	ldr	r3, [r7, #4]
   84572:	e784      	b.n	8447e <_malloc_r+0x456>
   84574:	08e8      	lsrs	r0, r5, #3
   84576:	1c43      	adds	r3, r0, #1
   84578:	005b      	lsls	r3, r3, #1
   8457a:	e605      	b.n	84188 <_malloc_r+0x160>
   8457c:	20070590 	.word	0x20070590

00084580 <memchr>:
   84580:	0783      	lsls	r3, r0, #30
   84582:	b470      	push	{r4, r5, r6}
   84584:	b2cd      	uxtb	r5, r1
   84586:	d03d      	beq.n	84604 <memchr+0x84>
   84588:	1e53      	subs	r3, r2, #1
   8458a:	b302      	cbz	r2, 845ce <memchr+0x4e>
   8458c:	7802      	ldrb	r2, [r0, #0]
   8458e:	42aa      	cmp	r2, r5
   84590:	d01e      	beq.n	845d0 <memchr+0x50>
   84592:	1c42      	adds	r2, r0, #1
   84594:	e004      	b.n	845a0 <memchr+0x20>
   84596:	b1d3      	cbz	r3, 845ce <memchr+0x4e>
   84598:	7804      	ldrb	r4, [r0, #0]
   8459a:	3b01      	subs	r3, #1
   8459c:	42ac      	cmp	r4, r5
   8459e:	d017      	beq.n	845d0 <memchr+0x50>
   845a0:	f012 0f03 	tst.w	r2, #3
   845a4:	4610      	mov	r0, r2
   845a6:	f102 0201 	add.w	r2, r2, #1
   845aa:	d1f4      	bne.n	84596 <memchr+0x16>
   845ac:	2b03      	cmp	r3, #3
   845ae:	d811      	bhi.n	845d4 <memchr+0x54>
   845b0:	b353      	cbz	r3, 84608 <memchr+0x88>
   845b2:	7802      	ldrb	r2, [r0, #0]
   845b4:	42aa      	cmp	r2, r5
   845b6:	d00b      	beq.n	845d0 <memchr+0x50>
   845b8:	4403      	add	r3, r0
   845ba:	1c42      	adds	r2, r0, #1
   845bc:	e002      	b.n	845c4 <memchr+0x44>
   845be:	7801      	ldrb	r1, [r0, #0]
   845c0:	42a9      	cmp	r1, r5
   845c2:	d005      	beq.n	845d0 <memchr+0x50>
   845c4:	4293      	cmp	r3, r2
   845c6:	4610      	mov	r0, r2
   845c8:	f102 0201 	add.w	r2, r2, #1
   845cc:	d1f7      	bne.n	845be <memchr+0x3e>
   845ce:	2000      	movs	r0, #0
   845d0:	bc70      	pop	{r4, r5, r6}
   845d2:	4770      	bx	lr
   845d4:	4604      	mov	r4, r0
   845d6:	020e      	lsls	r6, r1, #8
   845d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   845dc:	432e      	orrs	r6, r5
   845de:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   845e2:	6822      	ldr	r2, [r4, #0]
   845e4:	4620      	mov	r0, r4
   845e6:	4072      	eors	r2, r6
   845e8:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   845ec:	ea21 0202 	bic.w	r2, r1, r2
   845f0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   845f4:	f104 0404 	add.w	r4, r4, #4
   845f8:	d1db      	bne.n	845b2 <memchr+0x32>
   845fa:	3b04      	subs	r3, #4
   845fc:	2b03      	cmp	r3, #3
   845fe:	4620      	mov	r0, r4
   84600:	d8ef      	bhi.n	845e2 <memchr+0x62>
   84602:	e7d5      	b.n	845b0 <memchr+0x30>
   84604:	4613      	mov	r3, r2
   84606:	e7d1      	b.n	845ac <memchr+0x2c>
   84608:	4618      	mov	r0, r3
   8460a:	e7e1      	b.n	845d0 <memchr+0x50>

0008460c <memmove>:
   8460c:	4288      	cmp	r0, r1
   8460e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84610:	d90d      	bls.n	8462e <memmove+0x22>
   84612:	188b      	adds	r3, r1, r2
   84614:	4298      	cmp	r0, r3
   84616:	d20a      	bcs.n	8462e <memmove+0x22>
   84618:	1881      	adds	r1, r0, r2
   8461a:	2a00      	cmp	r2, #0
   8461c:	d051      	beq.n	846c2 <memmove+0xb6>
   8461e:	1a9a      	subs	r2, r3, r2
   84620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84624:	4293      	cmp	r3, r2
   84626:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8462a:	d1f9      	bne.n	84620 <memmove+0x14>
   8462c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8462e:	2a0f      	cmp	r2, #15
   84630:	d948      	bls.n	846c4 <memmove+0xb8>
   84632:	ea41 0300 	orr.w	r3, r1, r0
   84636:	079b      	lsls	r3, r3, #30
   84638:	d146      	bne.n	846c8 <memmove+0xbc>
   8463a:	4615      	mov	r5, r2
   8463c:	f100 0410 	add.w	r4, r0, #16
   84640:	f101 0310 	add.w	r3, r1, #16
   84644:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84648:	3d10      	subs	r5, #16
   8464a:	f844 6c10 	str.w	r6, [r4, #-16]
   8464e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84652:	2d0f      	cmp	r5, #15
   84654:	f844 6c0c 	str.w	r6, [r4, #-12]
   84658:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8465c:	f104 0410 	add.w	r4, r4, #16
   84660:	f844 6c18 	str.w	r6, [r4, #-24]
   84664:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84668:	f103 0310 	add.w	r3, r3, #16
   8466c:	f844 6c14 	str.w	r6, [r4, #-20]
   84670:	d8e8      	bhi.n	84644 <memmove+0x38>
   84672:	f1a2 0310 	sub.w	r3, r2, #16
   84676:	f023 030f 	bic.w	r3, r3, #15
   8467a:	f002 0e0f 	and.w	lr, r2, #15
   8467e:	3310      	adds	r3, #16
   84680:	f1be 0f03 	cmp.w	lr, #3
   84684:	4419      	add	r1, r3
   84686:	4403      	add	r3, r0
   84688:	d921      	bls.n	846ce <memmove+0xc2>
   8468a:	460e      	mov	r6, r1
   8468c:	4674      	mov	r4, lr
   8468e:	1f1d      	subs	r5, r3, #4
   84690:	f856 7b04 	ldr.w	r7, [r6], #4
   84694:	3c04      	subs	r4, #4
   84696:	2c03      	cmp	r4, #3
   84698:	f845 7f04 	str.w	r7, [r5, #4]!
   8469c:	d8f8      	bhi.n	84690 <memmove+0x84>
   8469e:	f1ae 0404 	sub.w	r4, lr, #4
   846a2:	f024 0403 	bic.w	r4, r4, #3
   846a6:	3404      	adds	r4, #4
   846a8:	4423      	add	r3, r4
   846aa:	4421      	add	r1, r4
   846ac:	f002 0203 	and.w	r2, r2, #3
   846b0:	b162      	cbz	r2, 846cc <memmove+0xc0>
   846b2:	3b01      	subs	r3, #1
   846b4:	440a      	add	r2, r1
   846b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   846ba:	428a      	cmp	r2, r1
   846bc:	f803 4f01 	strb.w	r4, [r3, #1]!
   846c0:	d1f9      	bne.n	846b6 <memmove+0xaa>
   846c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   846c4:	4603      	mov	r3, r0
   846c6:	e7f3      	b.n	846b0 <memmove+0xa4>
   846c8:	4603      	mov	r3, r0
   846ca:	e7f2      	b.n	846b2 <memmove+0xa6>
   846cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   846ce:	4672      	mov	r2, lr
   846d0:	e7ee      	b.n	846b0 <memmove+0xa4>
   846d2:	bf00      	nop

000846d4 <__malloc_lock>:
   846d4:	4770      	bx	lr
   846d6:	bf00      	nop

000846d8 <__malloc_unlock>:
   846d8:	4770      	bx	lr
   846da:	bf00      	nop

000846dc <_realloc_r>:
   846dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   846e0:	4617      	mov	r7, r2
   846e2:	b083      	sub	sp, #12
   846e4:	2900      	cmp	r1, #0
   846e6:	f000 808f 	beq.w	84808 <_realloc_r+0x12c>
   846ea:	460d      	mov	r5, r1
   846ec:	4681      	mov	r9, r0
   846ee:	f107 040b 	add.w	r4, r7, #11
   846f2:	f7ff ffef 	bl	846d4 <__malloc_lock>
   846f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
   846fa:	2c16      	cmp	r4, #22
   846fc:	f02e 0603 	bic.w	r6, lr, #3
   84700:	f1a5 0808 	sub.w	r8, r5, #8
   84704:	d83c      	bhi.n	84780 <_realloc_r+0xa4>
   84706:	2210      	movs	r2, #16
   84708:	4614      	mov	r4, r2
   8470a:	42a7      	cmp	r7, r4
   8470c:	d83d      	bhi.n	8478a <_realloc_r+0xae>
   8470e:	4296      	cmp	r6, r2
   84710:	da42      	bge.n	84798 <_realloc_r+0xbc>
   84712:	4bc6      	ldr	r3, [pc, #792]	; (84a2c <_realloc_r+0x350>)
   84714:	eb08 0006 	add.w	r0, r8, r6
   84718:	6899      	ldr	r1, [r3, #8]
   8471a:	4288      	cmp	r0, r1
   8471c:	6841      	ldr	r1, [r0, #4]
   8471e:	f000 80d7 	beq.w	848d0 <_realloc_r+0x1f4>
   84722:	f021 0301 	bic.w	r3, r1, #1
   84726:	4403      	add	r3, r0
   84728:	685b      	ldr	r3, [r3, #4]
   8472a:	07db      	lsls	r3, r3, #31
   8472c:	d54c      	bpl.n	847c8 <_realloc_r+0xec>
   8472e:	f01e 0f01 	tst.w	lr, #1
   84732:	f000 809d 	beq.w	84870 <_realloc_r+0x194>
   84736:	4639      	mov	r1, r7
   84738:	4648      	mov	r0, r9
   8473a:	f7ff fc75 	bl	84028 <_malloc_r>
   8473e:	4607      	mov	r7, r0
   84740:	2800      	cmp	r0, #0
   84742:	d03a      	beq.n	847ba <_realloc_r+0xde>
   84744:	f855 3c04 	ldr.w	r3, [r5, #-4]
   84748:	f1a0 0208 	sub.w	r2, r0, #8
   8474c:	f023 0301 	bic.w	r3, r3, #1
   84750:	4443      	add	r3, r8
   84752:	429a      	cmp	r2, r3
   84754:	f000 813e 	beq.w	849d4 <_realloc_r+0x2f8>
   84758:	1f32      	subs	r2, r6, #4
   8475a:	2a24      	cmp	r2, #36	; 0x24
   8475c:	f200 812b 	bhi.w	849b6 <_realloc_r+0x2da>
   84760:	2a13      	cmp	r2, #19
   84762:	f200 80ff 	bhi.w	84964 <_realloc_r+0x288>
   84766:	4603      	mov	r3, r0
   84768:	462a      	mov	r2, r5
   8476a:	6811      	ldr	r1, [r2, #0]
   8476c:	6019      	str	r1, [r3, #0]
   8476e:	6851      	ldr	r1, [r2, #4]
   84770:	6059      	str	r1, [r3, #4]
   84772:	6892      	ldr	r2, [r2, #8]
   84774:	609a      	str	r2, [r3, #8]
   84776:	4629      	mov	r1, r5
   84778:	4648      	mov	r0, r9
   8477a:	f7ff f93b 	bl	839f4 <_free_r>
   8477e:	e01c      	b.n	847ba <_realloc_r+0xde>
   84780:	f024 0407 	bic.w	r4, r4, #7
   84784:	2c00      	cmp	r4, #0
   84786:	4622      	mov	r2, r4
   84788:	dabf      	bge.n	8470a <_realloc_r+0x2e>
   8478a:	230c      	movs	r3, #12
   8478c:	2000      	movs	r0, #0
   8478e:	f8c9 3000 	str.w	r3, [r9]
   84792:	b003      	add	sp, #12
   84794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84798:	462f      	mov	r7, r5
   8479a:	1b33      	subs	r3, r6, r4
   8479c:	2b0f      	cmp	r3, #15
   8479e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   847a2:	d81d      	bhi.n	847e0 <_realloc_r+0x104>
   847a4:	f002 0201 	and.w	r2, r2, #1
   847a8:	4332      	orrs	r2, r6
   847aa:	eb08 0106 	add.w	r1, r8, r6
   847ae:	f8c8 2004 	str.w	r2, [r8, #4]
   847b2:	684b      	ldr	r3, [r1, #4]
   847b4:	f043 0301 	orr.w	r3, r3, #1
   847b8:	604b      	str	r3, [r1, #4]
   847ba:	4648      	mov	r0, r9
   847bc:	f7ff ff8c 	bl	846d8 <__malloc_unlock>
   847c0:	4638      	mov	r0, r7
   847c2:	b003      	add	sp, #12
   847c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847c8:	f021 0103 	bic.w	r1, r1, #3
   847cc:	4431      	add	r1, r6
   847ce:	4291      	cmp	r1, r2
   847d0:	db20      	blt.n	84814 <_realloc_r+0x138>
   847d2:	68c3      	ldr	r3, [r0, #12]
   847d4:	6882      	ldr	r2, [r0, #8]
   847d6:	462f      	mov	r7, r5
   847d8:	60d3      	str	r3, [r2, #12]
   847da:	460e      	mov	r6, r1
   847dc:	609a      	str	r2, [r3, #8]
   847de:	e7dc      	b.n	8479a <_realloc_r+0xbe>
   847e0:	f002 0201 	and.w	r2, r2, #1
   847e4:	eb08 0104 	add.w	r1, r8, r4
   847e8:	4314      	orrs	r4, r2
   847ea:	f043 0201 	orr.w	r2, r3, #1
   847ee:	f8c8 4004 	str.w	r4, [r8, #4]
   847f2:	440b      	add	r3, r1
   847f4:	604a      	str	r2, [r1, #4]
   847f6:	685a      	ldr	r2, [r3, #4]
   847f8:	3108      	adds	r1, #8
   847fa:	f042 0201 	orr.w	r2, r2, #1
   847fe:	605a      	str	r2, [r3, #4]
   84800:	4648      	mov	r0, r9
   84802:	f7ff f8f7 	bl	839f4 <_free_r>
   84806:	e7d8      	b.n	847ba <_realloc_r+0xde>
   84808:	4611      	mov	r1, r2
   8480a:	b003      	add	sp, #12
   8480c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84810:	f7ff bc0a 	b.w	84028 <_malloc_r>
   84814:	f01e 0f01 	tst.w	lr, #1
   84818:	d18d      	bne.n	84736 <_realloc_r+0x5a>
   8481a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8481e:	ebc3 0a08 	rsb	sl, r3, r8
   84822:	f8da 3004 	ldr.w	r3, [sl, #4]
   84826:	f023 0c03 	bic.w	ip, r3, #3
   8482a:	eb01 0e0c 	add.w	lr, r1, ip
   8482e:	4596      	cmp	lr, r2
   84830:	db26      	blt.n	84880 <_realloc_r+0x1a4>
   84832:	4657      	mov	r7, sl
   84834:	68c3      	ldr	r3, [r0, #12]
   84836:	6881      	ldr	r1, [r0, #8]
   84838:	1f32      	subs	r2, r6, #4
   8483a:	60cb      	str	r3, [r1, #12]
   8483c:	6099      	str	r1, [r3, #8]
   8483e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84842:	f8da 300c 	ldr.w	r3, [sl, #12]
   84846:	2a24      	cmp	r2, #36	; 0x24
   84848:	60cb      	str	r3, [r1, #12]
   8484a:	6099      	str	r1, [r3, #8]
   8484c:	f200 80c9 	bhi.w	849e2 <_realloc_r+0x306>
   84850:	2a13      	cmp	r2, #19
   84852:	f240 8092 	bls.w	8497a <_realloc_r+0x29e>
   84856:	682b      	ldr	r3, [r5, #0]
   84858:	2a1b      	cmp	r2, #27
   8485a:	f8ca 3008 	str.w	r3, [sl, #8]
   8485e:	686b      	ldr	r3, [r5, #4]
   84860:	f8ca 300c 	str.w	r3, [sl, #12]
   84864:	f200 80cd 	bhi.w	84a02 <_realloc_r+0x326>
   84868:	3508      	adds	r5, #8
   8486a:	f10a 0310 	add.w	r3, sl, #16
   8486e:	e085      	b.n	8497c <_realloc_r+0x2a0>
   84870:	f855 3c08 	ldr.w	r3, [r5, #-8]
   84874:	ebc3 0a08 	rsb	sl, r3, r8
   84878:	f8da 3004 	ldr.w	r3, [sl, #4]
   8487c:	f023 0c03 	bic.w	ip, r3, #3
   84880:	eb06 030c 	add.w	r3, r6, ip
   84884:	4293      	cmp	r3, r2
   84886:	f6ff af56 	blt.w	84736 <_realloc_r+0x5a>
   8488a:	4657      	mov	r7, sl
   8488c:	f8da 100c 	ldr.w	r1, [sl, #12]
   84890:	f857 0f08 	ldr.w	r0, [r7, #8]!
   84894:	1f32      	subs	r2, r6, #4
   84896:	2a24      	cmp	r2, #36	; 0x24
   84898:	60c1      	str	r1, [r0, #12]
   8489a:	6088      	str	r0, [r1, #8]
   8489c:	f200 80aa 	bhi.w	849f4 <_realloc_r+0x318>
   848a0:	2a13      	cmp	r2, #19
   848a2:	f240 80a5 	bls.w	849f0 <_realloc_r+0x314>
   848a6:	6829      	ldr	r1, [r5, #0]
   848a8:	2a1b      	cmp	r2, #27
   848aa:	f8ca 1008 	str.w	r1, [sl, #8]
   848ae:	6869      	ldr	r1, [r5, #4]
   848b0:	f8ca 100c 	str.w	r1, [sl, #12]
   848b4:	f200 80bc 	bhi.w	84a30 <_realloc_r+0x354>
   848b8:	3508      	adds	r5, #8
   848ba:	f10a 0210 	add.w	r2, sl, #16
   848be:	6829      	ldr	r1, [r5, #0]
   848c0:	461e      	mov	r6, r3
   848c2:	6011      	str	r1, [r2, #0]
   848c4:	6869      	ldr	r1, [r5, #4]
   848c6:	46d0      	mov	r8, sl
   848c8:	6051      	str	r1, [r2, #4]
   848ca:	68ab      	ldr	r3, [r5, #8]
   848cc:	6093      	str	r3, [r2, #8]
   848ce:	e764      	b.n	8479a <_realloc_r+0xbe>
   848d0:	f021 0b03 	bic.w	fp, r1, #3
   848d4:	f104 0010 	add.w	r0, r4, #16
   848d8:	44b3      	add	fp, r6
   848da:	4583      	cmp	fp, r0
   848dc:	da57      	bge.n	8498e <_realloc_r+0x2b2>
   848de:	f01e 0f01 	tst.w	lr, #1
   848e2:	f47f af28 	bne.w	84736 <_realloc_r+0x5a>
   848e6:	f855 1c08 	ldr.w	r1, [r5, #-8]
   848ea:	ebc1 0a08 	rsb	sl, r1, r8
   848ee:	f8da 1004 	ldr.w	r1, [sl, #4]
   848f2:	f021 0c03 	bic.w	ip, r1, #3
   848f6:	44e3      	add	fp, ip
   848f8:	4558      	cmp	r0, fp
   848fa:	dcc1      	bgt.n	84880 <_realloc_r+0x1a4>
   848fc:	4657      	mov	r7, sl
   848fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   84902:	f857 0f08 	ldr.w	r0, [r7, #8]!
   84906:	1f32      	subs	r2, r6, #4
   84908:	2a24      	cmp	r2, #36	; 0x24
   8490a:	60c1      	str	r1, [r0, #12]
   8490c:	6088      	str	r0, [r1, #8]
   8490e:	f200 80b1 	bhi.w	84a74 <_realloc_r+0x398>
   84912:	2a13      	cmp	r2, #19
   84914:	f240 80a2 	bls.w	84a5c <_realloc_r+0x380>
   84918:	6829      	ldr	r1, [r5, #0]
   8491a:	2a1b      	cmp	r2, #27
   8491c:	f8ca 1008 	str.w	r1, [sl, #8]
   84920:	6869      	ldr	r1, [r5, #4]
   84922:	f8ca 100c 	str.w	r1, [sl, #12]
   84926:	f200 80ac 	bhi.w	84a82 <_realloc_r+0x3a6>
   8492a:	3508      	adds	r5, #8
   8492c:	f10a 0210 	add.w	r2, sl, #16
   84930:	6829      	ldr	r1, [r5, #0]
   84932:	6011      	str	r1, [r2, #0]
   84934:	6869      	ldr	r1, [r5, #4]
   84936:	6051      	str	r1, [r2, #4]
   84938:	68a9      	ldr	r1, [r5, #8]
   8493a:	6091      	str	r1, [r2, #8]
   8493c:	ebc4 020b 	rsb	r2, r4, fp
   84940:	eb0a 0104 	add.w	r1, sl, r4
   84944:	f042 0201 	orr.w	r2, r2, #1
   84948:	6099      	str	r1, [r3, #8]
   8494a:	604a      	str	r2, [r1, #4]
   8494c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84950:	4648      	mov	r0, r9
   84952:	f003 0301 	and.w	r3, r3, #1
   84956:	431c      	orrs	r4, r3
   84958:	f8ca 4004 	str.w	r4, [sl, #4]
   8495c:	f7ff febc 	bl	846d8 <__malloc_unlock>
   84960:	4638      	mov	r0, r7
   84962:	e72e      	b.n	847c2 <_realloc_r+0xe6>
   84964:	682b      	ldr	r3, [r5, #0]
   84966:	2a1b      	cmp	r2, #27
   84968:	6003      	str	r3, [r0, #0]
   8496a:	686b      	ldr	r3, [r5, #4]
   8496c:	6043      	str	r3, [r0, #4]
   8496e:	d826      	bhi.n	849be <_realloc_r+0x2e2>
   84970:	f100 0308 	add.w	r3, r0, #8
   84974:	f105 0208 	add.w	r2, r5, #8
   84978:	e6f7      	b.n	8476a <_realloc_r+0x8e>
   8497a:	463b      	mov	r3, r7
   8497c:	682a      	ldr	r2, [r5, #0]
   8497e:	4676      	mov	r6, lr
   84980:	601a      	str	r2, [r3, #0]
   84982:	686a      	ldr	r2, [r5, #4]
   84984:	46d0      	mov	r8, sl
   84986:	605a      	str	r2, [r3, #4]
   84988:	68aa      	ldr	r2, [r5, #8]
   8498a:	609a      	str	r2, [r3, #8]
   8498c:	e705      	b.n	8479a <_realloc_r+0xbe>
   8498e:	ebc4 0b0b 	rsb	fp, r4, fp
   84992:	eb08 0104 	add.w	r1, r8, r4
   84996:	f04b 0201 	orr.w	r2, fp, #1
   8499a:	6099      	str	r1, [r3, #8]
   8499c:	604a      	str	r2, [r1, #4]
   8499e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   849a2:	4648      	mov	r0, r9
   849a4:	f003 0301 	and.w	r3, r3, #1
   849a8:	431c      	orrs	r4, r3
   849aa:	f845 4c04 	str.w	r4, [r5, #-4]
   849ae:	f7ff fe93 	bl	846d8 <__malloc_unlock>
   849b2:	4628      	mov	r0, r5
   849b4:	e705      	b.n	847c2 <_realloc_r+0xe6>
   849b6:	4629      	mov	r1, r5
   849b8:	f7ff fe28 	bl	8460c <memmove>
   849bc:	e6db      	b.n	84776 <_realloc_r+0x9a>
   849be:	68ab      	ldr	r3, [r5, #8]
   849c0:	2a24      	cmp	r2, #36	; 0x24
   849c2:	6083      	str	r3, [r0, #8]
   849c4:	68eb      	ldr	r3, [r5, #12]
   849c6:	60c3      	str	r3, [r0, #12]
   849c8:	d027      	beq.n	84a1a <_realloc_r+0x33e>
   849ca:	f100 0310 	add.w	r3, r0, #16
   849ce:	f105 0210 	add.w	r2, r5, #16
   849d2:	e6ca      	b.n	8476a <_realloc_r+0x8e>
   849d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   849d8:	462f      	mov	r7, r5
   849da:	f023 0303 	bic.w	r3, r3, #3
   849de:	441e      	add	r6, r3
   849e0:	e6db      	b.n	8479a <_realloc_r+0xbe>
   849e2:	4629      	mov	r1, r5
   849e4:	4638      	mov	r0, r7
   849e6:	4676      	mov	r6, lr
   849e8:	46d0      	mov	r8, sl
   849ea:	f7ff fe0f 	bl	8460c <memmove>
   849ee:	e6d4      	b.n	8479a <_realloc_r+0xbe>
   849f0:	463a      	mov	r2, r7
   849f2:	e764      	b.n	848be <_realloc_r+0x1e2>
   849f4:	4629      	mov	r1, r5
   849f6:	4638      	mov	r0, r7
   849f8:	461e      	mov	r6, r3
   849fa:	46d0      	mov	r8, sl
   849fc:	f7ff fe06 	bl	8460c <memmove>
   84a00:	e6cb      	b.n	8479a <_realloc_r+0xbe>
   84a02:	68ab      	ldr	r3, [r5, #8]
   84a04:	2a24      	cmp	r2, #36	; 0x24
   84a06:	f8ca 3010 	str.w	r3, [sl, #16]
   84a0a:	68eb      	ldr	r3, [r5, #12]
   84a0c:	f8ca 3014 	str.w	r3, [sl, #20]
   84a10:	d01a      	beq.n	84a48 <_realloc_r+0x36c>
   84a12:	3510      	adds	r5, #16
   84a14:	f10a 0318 	add.w	r3, sl, #24
   84a18:	e7b0      	b.n	8497c <_realloc_r+0x2a0>
   84a1a:	692a      	ldr	r2, [r5, #16]
   84a1c:	f100 0318 	add.w	r3, r0, #24
   84a20:	6102      	str	r2, [r0, #16]
   84a22:	6969      	ldr	r1, [r5, #20]
   84a24:	f105 0218 	add.w	r2, r5, #24
   84a28:	6141      	str	r1, [r0, #20]
   84a2a:	e69e      	b.n	8476a <_realloc_r+0x8e>
   84a2c:	20070590 	.word	0x20070590
   84a30:	68a9      	ldr	r1, [r5, #8]
   84a32:	2a24      	cmp	r2, #36	; 0x24
   84a34:	f8ca 1010 	str.w	r1, [sl, #16]
   84a38:	68e9      	ldr	r1, [r5, #12]
   84a3a:	f8ca 1014 	str.w	r1, [sl, #20]
   84a3e:	d00f      	beq.n	84a60 <_realloc_r+0x384>
   84a40:	3510      	adds	r5, #16
   84a42:	f10a 0218 	add.w	r2, sl, #24
   84a46:	e73a      	b.n	848be <_realloc_r+0x1e2>
   84a48:	692a      	ldr	r2, [r5, #16]
   84a4a:	f10a 0320 	add.w	r3, sl, #32
   84a4e:	f8ca 2018 	str.w	r2, [sl, #24]
   84a52:	696a      	ldr	r2, [r5, #20]
   84a54:	3518      	adds	r5, #24
   84a56:	f8ca 201c 	str.w	r2, [sl, #28]
   84a5a:	e78f      	b.n	8497c <_realloc_r+0x2a0>
   84a5c:	463a      	mov	r2, r7
   84a5e:	e767      	b.n	84930 <_realloc_r+0x254>
   84a60:	6929      	ldr	r1, [r5, #16]
   84a62:	f10a 0220 	add.w	r2, sl, #32
   84a66:	f8ca 1018 	str.w	r1, [sl, #24]
   84a6a:	6969      	ldr	r1, [r5, #20]
   84a6c:	3518      	adds	r5, #24
   84a6e:	f8ca 101c 	str.w	r1, [sl, #28]
   84a72:	e724      	b.n	848be <_realloc_r+0x1e2>
   84a74:	4629      	mov	r1, r5
   84a76:	4638      	mov	r0, r7
   84a78:	9301      	str	r3, [sp, #4]
   84a7a:	f7ff fdc7 	bl	8460c <memmove>
   84a7e:	9b01      	ldr	r3, [sp, #4]
   84a80:	e75c      	b.n	8493c <_realloc_r+0x260>
   84a82:	68a9      	ldr	r1, [r5, #8]
   84a84:	2a24      	cmp	r2, #36	; 0x24
   84a86:	f8ca 1010 	str.w	r1, [sl, #16]
   84a8a:	68e9      	ldr	r1, [r5, #12]
   84a8c:	f8ca 1014 	str.w	r1, [sl, #20]
   84a90:	d003      	beq.n	84a9a <_realloc_r+0x3be>
   84a92:	3510      	adds	r5, #16
   84a94:	f10a 0218 	add.w	r2, sl, #24
   84a98:	e74a      	b.n	84930 <_realloc_r+0x254>
   84a9a:	6929      	ldr	r1, [r5, #16]
   84a9c:	f10a 0220 	add.w	r2, sl, #32
   84aa0:	f8ca 1018 	str.w	r1, [sl, #24]
   84aa4:	6969      	ldr	r1, [r5, #20]
   84aa6:	3518      	adds	r5, #24
   84aa8:	f8ca 101c 	str.w	r1, [sl, #28]
   84aac:	e740      	b.n	84930 <_realloc_r+0x254>
   84aae:	bf00      	nop

00084ab0 <_sbrk_r>:
   84ab0:	b538      	push	{r3, r4, r5, lr}
   84ab2:	4c07      	ldr	r4, [pc, #28]	; (84ad0 <_sbrk_r+0x20>)
   84ab4:	2300      	movs	r3, #0
   84ab6:	4605      	mov	r5, r0
   84ab8:	4608      	mov	r0, r1
   84aba:	6023      	str	r3, [r4, #0]
   84abc:	f7fd f9c0 	bl	81e40 <_sbrk>
   84ac0:	1c43      	adds	r3, r0, #1
   84ac2:	d000      	beq.n	84ac6 <_sbrk_r+0x16>
   84ac4:	bd38      	pop	{r3, r4, r5, pc}
   84ac6:	6823      	ldr	r3, [r4, #0]
   84ac8:	2b00      	cmp	r3, #0
   84aca:	d0fb      	beq.n	84ac4 <_sbrk_r+0x14>
   84acc:	602b      	str	r3, [r5, #0]
   84ace:	bd38      	pop	{r3, r4, r5, pc}
   84ad0:	2007abc8 	.word	0x2007abc8

00084ad4 <__sread>:
   84ad4:	b510      	push	{r4, lr}
   84ad6:	460c      	mov	r4, r1
   84ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84adc:	f000 f9c4 	bl	84e68 <_read_r>
   84ae0:	2800      	cmp	r0, #0
   84ae2:	db03      	blt.n	84aec <__sread+0x18>
   84ae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84ae6:	4403      	add	r3, r0
   84ae8:	6523      	str	r3, [r4, #80]	; 0x50
   84aea:	bd10      	pop	{r4, pc}
   84aec:	89a3      	ldrh	r3, [r4, #12]
   84aee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84af2:	81a3      	strh	r3, [r4, #12]
   84af4:	bd10      	pop	{r4, pc}
   84af6:	bf00      	nop

00084af8 <__swrite>:
   84af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84afc:	460c      	mov	r4, r1
   84afe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84b02:	461f      	mov	r7, r3
   84b04:	05cb      	lsls	r3, r1, #23
   84b06:	4616      	mov	r6, r2
   84b08:	4605      	mov	r5, r0
   84b0a:	d507      	bpl.n	84b1c <__swrite+0x24>
   84b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84b10:	2302      	movs	r3, #2
   84b12:	2200      	movs	r2, #0
   84b14:	f000 f992 	bl	84e3c <_lseek_r>
   84b18:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84b1c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84b20:	81a1      	strh	r1, [r4, #12]
   84b22:	463b      	mov	r3, r7
   84b24:	4632      	mov	r2, r6
   84b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84b2a:	4628      	mov	r0, r5
   84b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84b30:	f000 b8a2 	b.w	84c78 <_write_r>

00084b34 <__sseek>:
   84b34:	b510      	push	{r4, lr}
   84b36:	460c      	mov	r4, r1
   84b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b3c:	f000 f97e 	bl	84e3c <_lseek_r>
   84b40:	89a3      	ldrh	r3, [r4, #12]
   84b42:	1c42      	adds	r2, r0, #1
   84b44:	bf0e      	itee	eq
   84b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84b4e:	6520      	strne	r0, [r4, #80]	; 0x50
   84b50:	81a3      	strh	r3, [r4, #12]
   84b52:	bd10      	pop	{r4, pc}

00084b54 <__sclose>:
   84b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b58:	f000 b8f6 	b.w	84d48 <_close_r>

00084b5c <__swbuf_r>:
   84b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b5e:	460e      	mov	r6, r1
   84b60:	4614      	mov	r4, r2
   84b62:	4607      	mov	r7, r0
   84b64:	b110      	cbz	r0, 84b6c <__swbuf_r+0x10>
   84b66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84b68:	2b00      	cmp	r3, #0
   84b6a:	d04a      	beq.n	84c02 <__swbuf_r+0xa6>
   84b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84b70:	69a3      	ldr	r3, [r4, #24]
   84b72:	b291      	uxth	r1, r2
   84b74:	0708      	lsls	r0, r1, #28
   84b76:	60a3      	str	r3, [r4, #8]
   84b78:	d538      	bpl.n	84bec <__swbuf_r+0x90>
   84b7a:	6923      	ldr	r3, [r4, #16]
   84b7c:	2b00      	cmp	r3, #0
   84b7e:	d035      	beq.n	84bec <__swbuf_r+0x90>
   84b80:	0489      	lsls	r1, r1, #18
   84b82:	b2f5      	uxtb	r5, r6
   84b84:	d515      	bpl.n	84bb2 <__swbuf_r+0x56>
   84b86:	6822      	ldr	r2, [r4, #0]
   84b88:	6961      	ldr	r1, [r4, #20]
   84b8a:	1ad3      	subs	r3, r2, r3
   84b8c:	428b      	cmp	r3, r1
   84b8e:	da1c      	bge.n	84bca <__swbuf_r+0x6e>
   84b90:	3301      	adds	r3, #1
   84b92:	68a1      	ldr	r1, [r4, #8]
   84b94:	1c50      	adds	r0, r2, #1
   84b96:	3901      	subs	r1, #1
   84b98:	60a1      	str	r1, [r4, #8]
   84b9a:	6020      	str	r0, [r4, #0]
   84b9c:	7016      	strb	r6, [r2, #0]
   84b9e:	6962      	ldr	r2, [r4, #20]
   84ba0:	429a      	cmp	r2, r3
   84ba2:	d01a      	beq.n	84bda <__swbuf_r+0x7e>
   84ba4:	89a3      	ldrh	r3, [r4, #12]
   84ba6:	07db      	lsls	r3, r3, #31
   84ba8:	d501      	bpl.n	84bae <__swbuf_r+0x52>
   84baa:	2d0a      	cmp	r5, #10
   84bac:	d015      	beq.n	84bda <__swbuf_r+0x7e>
   84bae:	4628      	mov	r0, r5
   84bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84bb8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84bbc:	81a2      	strh	r2, [r4, #12]
   84bbe:	6822      	ldr	r2, [r4, #0]
   84bc0:	6661      	str	r1, [r4, #100]	; 0x64
   84bc2:	6961      	ldr	r1, [r4, #20]
   84bc4:	1ad3      	subs	r3, r2, r3
   84bc6:	428b      	cmp	r3, r1
   84bc8:	dbe2      	blt.n	84b90 <__swbuf_r+0x34>
   84bca:	4621      	mov	r1, r4
   84bcc:	4638      	mov	r0, r7
   84bce:	f7fe fdb5 	bl	8373c <_fflush_r>
   84bd2:	b940      	cbnz	r0, 84be6 <__swbuf_r+0x8a>
   84bd4:	6822      	ldr	r2, [r4, #0]
   84bd6:	2301      	movs	r3, #1
   84bd8:	e7db      	b.n	84b92 <__swbuf_r+0x36>
   84bda:	4621      	mov	r1, r4
   84bdc:	4638      	mov	r0, r7
   84bde:	f7fe fdad 	bl	8373c <_fflush_r>
   84be2:	2800      	cmp	r0, #0
   84be4:	d0e3      	beq.n	84bae <__swbuf_r+0x52>
   84be6:	f04f 30ff 	mov.w	r0, #4294967295
   84bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bec:	4621      	mov	r1, r4
   84bee:	4638      	mov	r0, r7
   84bf0:	f7fe fc8c 	bl	8350c <__swsetup_r>
   84bf4:	2800      	cmp	r0, #0
   84bf6:	d1f6      	bne.n	84be6 <__swbuf_r+0x8a>
   84bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84bfc:	6923      	ldr	r3, [r4, #16]
   84bfe:	b291      	uxth	r1, r2
   84c00:	e7be      	b.n	84b80 <__swbuf_r+0x24>
   84c02:	f7fe fe2f 	bl	83864 <__sinit>
   84c06:	e7b1      	b.n	84b6c <__swbuf_r+0x10>

00084c08 <_wcrtomb_r>:
   84c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c0c:	4605      	mov	r5, r0
   84c0e:	b086      	sub	sp, #24
   84c10:	461e      	mov	r6, r3
   84c12:	460c      	mov	r4, r1
   84c14:	b1a1      	cbz	r1, 84c40 <_wcrtomb_r+0x38>
   84c16:	4b10      	ldr	r3, [pc, #64]	; (84c58 <_wcrtomb_r+0x50>)
   84c18:	4617      	mov	r7, r2
   84c1a:	f8d3 8000 	ldr.w	r8, [r3]
   84c1e:	f7ff f97d 	bl	83f1c <__locale_charset>
   84c22:	9600      	str	r6, [sp, #0]
   84c24:	4603      	mov	r3, r0
   84c26:	463a      	mov	r2, r7
   84c28:	4621      	mov	r1, r4
   84c2a:	4628      	mov	r0, r5
   84c2c:	47c0      	blx	r8
   84c2e:	1c43      	adds	r3, r0, #1
   84c30:	d103      	bne.n	84c3a <_wcrtomb_r+0x32>
   84c32:	2200      	movs	r2, #0
   84c34:	238a      	movs	r3, #138	; 0x8a
   84c36:	6032      	str	r2, [r6, #0]
   84c38:	602b      	str	r3, [r5, #0]
   84c3a:	b006      	add	sp, #24
   84c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84c40:	4b05      	ldr	r3, [pc, #20]	; (84c58 <_wcrtomb_r+0x50>)
   84c42:	681f      	ldr	r7, [r3, #0]
   84c44:	f7ff f96a 	bl	83f1c <__locale_charset>
   84c48:	9600      	str	r6, [sp, #0]
   84c4a:	4603      	mov	r3, r0
   84c4c:	4622      	mov	r2, r4
   84c4e:	a903      	add	r1, sp, #12
   84c50:	4628      	mov	r0, r5
   84c52:	47b8      	blx	r7
   84c54:	e7eb      	b.n	84c2e <_wcrtomb_r+0x26>
   84c56:	bf00      	nop
   84c58:	200709a0 	.word	0x200709a0

00084c5c <__ascii_wctomb>:
   84c5c:	b121      	cbz	r1, 84c68 <__ascii_wctomb+0xc>
   84c5e:	2aff      	cmp	r2, #255	; 0xff
   84c60:	d804      	bhi.n	84c6c <__ascii_wctomb+0x10>
   84c62:	700a      	strb	r2, [r1, #0]
   84c64:	2001      	movs	r0, #1
   84c66:	4770      	bx	lr
   84c68:	4608      	mov	r0, r1
   84c6a:	4770      	bx	lr
   84c6c:	238a      	movs	r3, #138	; 0x8a
   84c6e:	6003      	str	r3, [r0, #0]
   84c70:	f04f 30ff 	mov.w	r0, #4294967295
   84c74:	4770      	bx	lr
   84c76:	bf00      	nop

00084c78 <_write_r>:
   84c78:	b570      	push	{r4, r5, r6, lr}
   84c7a:	460d      	mov	r5, r1
   84c7c:	4c08      	ldr	r4, [pc, #32]	; (84ca0 <_write_r+0x28>)
   84c7e:	4611      	mov	r1, r2
   84c80:	4606      	mov	r6, r0
   84c82:	461a      	mov	r2, r3
   84c84:	4628      	mov	r0, r5
   84c86:	2300      	movs	r3, #0
   84c88:	6023      	str	r3, [r4, #0]
   84c8a:	f7fc fd2f 	bl	816ec <_write>
   84c8e:	1c43      	adds	r3, r0, #1
   84c90:	d000      	beq.n	84c94 <_write_r+0x1c>
   84c92:	bd70      	pop	{r4, r5, r6, pc}
   84c94:	6823      	ldr	r3, [r4, #0]
   84c96:	2b00      	cmp	r3, #0
   84c98:	d0fb      	beq.n	84c92 <_write_r+0x1a>
   84c9a:	6033      	str	r3, [r6, #0]
   84c9c:	bd70      	pop	{r4, r5, r6, pc}
   84c9e:	bf00      	nop
   84ca0:	2007abc8 	.word	0x2007abc8

00084ca4 <__register_exitproc>:
   84ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84ca8:	4c25      	ldr	r4, [pc, #148]	; (84d40 <__register_exitproc+0x9c>)
   84caa:	4606      	mov	r6, r0
   84cac:	6825      	ldr	r5, [r4, #0]
   84cae:	4688      	mov	r8, r1
   84cb0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   84cb4:	4692      	mov	sl, r2
   84cb6:	4699      	mov	r9, r3
   84cb8:	b3c4      	cbz	r4, 84d2c <__register_exitproc+0x88>
   84cba:	6860      	ldr	r0, [r4, #4]
   84cbc:	281f      	cmp	r0, #31
   84cbe:	dc17      	bgt.n	84cf0 <__register_exitproc+0x4c>
   84cc0:	1c41      	adds	r1, r0, #1
   84cc2:	b176      	cbz	r6, 84ce2 <__register_exitproc+0x3e>
   84cc4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   84cc8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   84ccc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   84cd0:	2201      	movs	r2, #1
   84cd2:	4082      	lsls	r2, r0
   84cd4:	4315      	orrs	r5, r2
   84cd6:	2e02      	cmp	r6, #2
   84cd8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   84cdc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   84ce0:	d01e      	beq.n	84d20 <__register_exitproc+0x7c>
   84ce2:	1c83      	adds	r3, r0, #2
   84ce4:	6061      	str	r1, [r4, #4]
   84ce6:	2000      	movs	r0, #0
   84ce8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   84cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84cf0:	4b14      	ldr	r3, [pc, #80]	; (84d44 <__register_exitproc+0xa0>)
   84cf2:	b303      	cbz	r3, 84d36 <__register_exitproc+0x92>
   84cf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84cf8:	f7ff f98e 	bl	84018 <malloc>
   84cfc:	4604      	mov	r4, r0
   84cfe:	b1d0      	cbz	r0, 84d36 <__register_exitproc+0x92>
   84d00:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   84d04:	2700      	movs	r7, #0
   84d06:	e884 0088 	stmia.w	r4, {r3, r7}
   84d0a:	4638      	mov	r0, r7
   84d0c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84d10:	2101      	movs	r1, #1
   84d12:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   84d16:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   84d1a:	2e00      	cmp	r6, #0
   84d1c:	d0e1      	beq.n	84ce2 <__register_exitproc+0x3e>
   84d1e:	e7d1      	b.n	84cc4 <__register_exitproc+0x20>
   84d20:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84d24:	431a      	orrs	r2, r3
   84d26:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   84d2a:	e7da      	b.n	84ce2 <__register_exitproc+0x3e>
   84d2c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   84d30:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84d34:	e7c1      	b.n	84cba <__register_exitproc+0x16>
   84d36:	f04f 30ff 	mov.w	r0, #4294967295
   84d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84d3e:	bf00      	nop
   84d40:	00085268 	.word	0x00085268
   84d44:	00084019 	.word	0x00084019

00084d48 <_close_r>:
   84d48:	b538      	push	{r3, r4, r5, lr}
   84d4a:	4c07      	ldr	r4, [pc, #28]	; (84d68 <_close_r+0x20>)
   84d4c:	2300      	movs	r3, #0
   84d4e:	4605      	mov	r5, r0
   84d50:	4608      	mov	r0, r1
   84d52:	6023      	str	r3, [r4, #0]
   84d54:	f7fd f88e 	bl	81e74 <_close>
   84d58:	1c43      	adds	r3, r0, #1
   84d5a:	d000      	beq.n	84d5e <_close_r+0x16>
   84d5c:	bd38      	pop	{r3, r4, r5, pc}
   84d5e:	6823      	ldr	r3, [r4, #0]
   84d60:	2b00      	cmp	r3, #0
   84d62:	d0fb      	beq.n	84d5c <_close_r+0x14>
   84d64:	602b      	str	r3, [r5, #0]
   84d66:	bd38      	pop	{r3, r4, r5, pc}
   84d68:	2007abc8 	.word	0x2007abc8

00084d6c <_fclose_r>:
   84d6c:	2900      	cmp	r1, #0
   84d6e:	d03d      	beq.n	84dec <_fclose_r+0x80>
   84d70:	b570      	push	{r4, r5, r6, lr}
   84d72:	4605      	mov	r5, r0
   84d74:	460c      	mov	r4, r1
   84d76:	b108      	cbz	r0, 84d7c <_fclose_r+0x10>
   84d78:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d7a:	b37b      	cbz	r3, 84ddc <_fclose_r+0x70>
   84d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84d80:	b90b      	cbnz	r3, 84d86 <_fclose_r+0x1a>
   84d82:	2000      	movs	r0, #0
   84d84:	bd70      	pop	{r4, r5, r6, pc}
   84d86:	4621      	mov	r1, r4
   84d88:	4628      	mov	r0, r5
   84d8a:	f7fe fc33 	bl	835f4 <__sflush_r>
   84d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84d90:	4606      	mov	r6, r0
   84d92:	b133      	cbz	r3, 84da2 <_fclose_r+0x36>
   84d94:	69e1      	ldr	r1, [r4, #28]
   84d96:	4628      	mov	r0, r5
   84d98:	4798      	blx	r3
   84d9a:	2800      	cmp	r0, #0
   84d9c:	bfb8      	it	lt
   84d9e:	f04f 36ff 	movlt.w	r6, #4294967295
   84da2:	89a3      	ldrh	r3, [r4, #12]
   84da4:	061b      	lsls	r3, r3, #24
   84da6:	d41c      	bmi.n	84de2 <_fclose_r+0x76>
   84da8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84daa:	b141      	cbz	r1, 84dbe <_fclose_r+0x52>
   84dac:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84db0:	4299      	cmp	r1, r3
   84db2:	d002      	beq.n	84dba <_fclose_r+0x4e>
   84db4:	4628      	mov	r0, r5
   84db6:	f7fe fe1d 	bl	839f4 <_free_r>
   84dba:	2300      	movs	r3, #0
   84dbc:	6323      	str	r3, [r4, #48]	; 0x30
   84dbe:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84dc0:	b121      	cbz	r1, 84dcc <_fclose_r+0x60>
   84dc2:	4628      	mov	r0, r5
   84dc4:	f7fe fe16 	bl	839f4 <_free_r>
   84dc8:	2300      	movs	r3, #0
   84dca:	6463      	str	r3, [r4, #68]	; 0x44
   84dcc:	f7fe fd50 	bl	83870 <__sfp_lock_acquire>
   84dd0:	2300      	movs	r3, #0
   84dd2:	81a3      	strh	r3, [r4, #12]
   84dd4:	f7fe fd4e 	bl	83874 <__sfp_lock_release>
   84dd8:	4630      	mov	r0, r6
   84dda:	bd70      	pop	{r4, r5, r6, pc}
   84ddc:	f7fe fd42 	bl	83864 <__sinit>
   84de0:	e7cc      	b.n	84d7c <_fclose_r+0x10>
   84de2:	6921      	ldr	r1, [r4, #16]
   84de4:	4628      	mov	r0, r5
   84de6:	f7fe fe05 	bl	839f4 <_free_r>
   84dea:	e7dd      	b.n	84da8 <_fclose_r+0x3c>
   84dec:	2000      	movs	r0, #0
   84dee:	4770      	bx	lr

00084df0 <_fstat_r>:
   84df0:	b538      	push	{r3, r4, r5, lr}
   84df2:	460b      	mov	r3, r1
   84df4:	4c07      	ldr	r4, [pc, #28]	; (84e14 <_fstat_r+0x24>)
   84df6:	4605      	mov	r5, r0
   84df8:	4611      	mov	r1, r2
   84dfa:	4618      	mov	r0, r3
   84dfc:	2300      	movs	r3, #0
   84dfe:	6023      	str	r3, [r4, #0]
   84e00:	f7fd f83c 	bl	81e7c <_fstat>
   84e04:	1c43      	adds	r3, r0, #1
   84e06:	d000      	beq.n	84e0a <_fstat_r+0x1a>
   84e08:	bd38      	pop	{r3, r4, r5, pc}
   84e0a:	6823      	ldr	r3, [r4, #0]
   84e0c:	2b00      	cmp	r3, #0
   84e0e:	d0fb      	beq.n	84e08 <_fstat_r+0x18>
   84e10:	602b      	str	r3, [r5, #0]
   84e12:	bd38      	pop	{r3, r4, r5, pc}
   84e14:	2007abc8 	.word	0x2007abc8

00084e18 <_isatty_r>:
   84e18:	b538      	push	{r3, r4, r5, lr}
   84e1a:	4c07      	ldr	r4, [pc, #28]	; (84e38 <_isatty_r+0x20>)
   84e1c:	2300      	movs	r3, #0
   84e1e:	4605      	mov	r5, r0
   84e20:	4608      	mov	r0, r1
   84e22:	6023      	str	r3, [r4, #0]
   84e24:	f7fd f830 	bl	81e88 <_isatty>
   84e28:	1c43      	adds	r3, r0, #1
   84e2a:	d000      	beq.n	84e2e <_isatty_r+0x16>
   84e2c:	bd38      	pop	{r3, r4, r5, pc}
   84e2e:	6823      	ldr	r3, [r4, #0]
   84e30:	2b00      	cmp	r3, #0
   84e32:	d0fb      	beq.n	84e2c <_isatty_r+0x14>
   84e34:	602b      	str	r3, [r5, #0]
   84e36:	bd38      	pop	{r3, r4, r5, pc}
   84e38:	2007abc8 	.word	0x2007abc8

00084e3c <_lseek_r>:
   84e3c:	b570      	push	{r4, r5, r6, lr}
   84e3e:	460d      	mov	r5, r1
   84e40:	4c08      	ldr	r4, [pc, #32]	; (84e64 <_lseek_r+0x28>)
   84e42:	4611      	mov	r1, r2
   84e44:	4606      	mov	r6, r0
   84e46:	461a      	mov	r2, r3
   84e48:	4628      	mov	r0, r5
   84e4a:	2300      	movs	r3, #0
   84e4c:	6023      	str	r3, [r4, #0]
   84e4e:	f7fd f81d 	bl	81e8c <_lseek>
   84e52:	1c43      	adds	r3, r0, #1
   84e54:	d000      	beq.n	84e58 <_lseek_r+0x1c>
   84e56:	bd70      	pop	{r4, r5, r6, pc}
   84e58:	6823      	ldr	r3, [r4, #0]
   84e5a:	2b00      	cmp	r3, #0
   84e5c:	d0fb      	beq.n	84e56 <_lseek_r+0x1a>
   84e5e:	6033      	str	r3, [r6, #0]
   84e60:	bd70      	pop	{r4, r5, r6, pc}
   84e62:	bf00      	nop
   84e64:	2007abc8 	.word	0x2007abc8

00084e68 <_read_r>:
   84e68:	b570      	push	{r4, r5, r6, lr}
   84e6a:	460d      	mov	r5, r1
   84e6c:	4c08      	ldr	r4, [pc, #32]	; (84e90 <_read_r+0x28>)
   84e6e:	4611      	mov	r1, r2
   84e70:	4606      	mov	r6, r0
   84e72:	461a      	mov	r2, r3
   84e74:	4628      	mov	r0, r5
   84e76:	2300      	movs	r3, #0
   84e78:	6023      	str	r3, [r4, #0]
   84e7a:	f7fb f969 	bl	80150 <_read>
   84e7e:	1c43      	adds	r3, r0, #1
   84e80:	d000      	beq.n	84e84 <_read_r+0x1c>
   84e82:	bd70      	pop	{r4, r5, r6, pc}
   84e84:	6823      	ldr	r3, [r4, #0]
   84e86:	2b00      	cmp	r3, #0
   84e88:	d0fb      	beq.n	84e82 <_read_r+0x1a>
   84e8a:	6033      	str	r3, [r6, #0]
   84e8c:	bd70      	pop	{r4, r5, r6, pc}
   84e8e:	bf00      	nop
   84e90:	2007abc8 	.word	0x2007abc8

00084e94 <__aeabi_uldivmod>:
   84e94:	b953      	cbnz	r3, 84eac <__aeabi_uldivmod+0x18>
   84e96:	b94a      	cbnz	r2, 84eac <__aeabi_uldivmod+0x18>
   84e98:	2900      	cmp	r1, #0
   84e9a:	bf08      	it	eq
   84e9c:	2800      	cmpeq	r0, #0
   84e9e:	bf1c      	itt	ne
   84ea0:	f04f 31ff 	movne.w	r1, #4294967295
   84ea4:	f04f 30ff 	movne.w	r0, #4294967295
   84ea8:	f000 b982 	b.w	851b0 <__aeabi_idiv0>
   84eac:	f1ad 0c08 	sub.w	ip, sp, #8
   84eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   84eb4:	f000 f806 	bl	84ec4 <__udivmoddi4>
   84eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   84ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84ec0:	b004      	add	sp, #16
   84ec2:	4770      	bx	lr

00084ec4 <__udivmoddi4>:
   84ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ec8:	468c      	mov	ip, r1
   84eca:	460c      	mov	r4, r1
   84ecc:	4605      	mov	r5, r0
   84ece:	9e09      	ldr	r6, [sp, #36]	; 0x24
   84ed0:	2b00      	cmp	r3, #0
   84ed2:	d14f      	bne.n	84f74 <__udivmoddi4+0xb0>
   84ed4:	428a      	cmp	r2, r1
   84ed6:	4617      	mov	r7, r2
   84ed8:	d96b      	bls.n	84fb2 <__udivmoddi4+0xee>
   84eda:	fab2 fe82 	clz	lr, r2
   84ede:	f1be 0f00 	cmp.w	lr, #0
   84ee2:	d00b      	beq.n	84efc <__udivmoddi4+0x38>
   84ee4:	f1ce 0520 	rsb	r5, lr, #32
   84ee8:	fa20 f505 	lsr.w	r5, r0, r5
   84eec:	fa01 f30e 	lsl.w	r3, r1, lr
   84ef0:	ea45 0c03 	orr.w	ip, r5, r3
   84ef4:	fa02 f70e 	lsl.w	r7, r2, lr
   84ef8:	fa00 f50e 	lsl.w	r5, r0, lr
   84efc:	0c39      	lsrs	r1, r7, #16
   84efe:	fbbc f0f1 	udiv	r0, ip, r1
   84f02:	b2ba      	uxth	r2, r7
   84f04:	fb01 c310 	mls	r3, r1, r0, ip
   84f08:	fb00 f802 	mul.w	r8, r0, r2
   84f0c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84f10:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   84f14:	45a0      	cmp	r8, r4
   84f16:	d909      	bls.n	84f2c <__udivmoddi4+0x68>
   84f18:	19e4      	adds	r4, r4, r7
   84f1a:	f100 33ff 	add.w	r3, r0, #4294967295
   84f1e:	f080 8128 	bcs.w	85172 <__udivmoddi4+0x2ae>
   84f22:	45a0      	cmp	r8, r4
   84f24:	f240 8125 	bls.w	85172 <__udivmoddi4+0x2ae>
   84f28:	3802      	subs	r0, #2
   84f2a:	443c      	add	r4, r7
   84f2c:	ebc8 0404 	rsb	r4, r8, r4
   84f30:	fbb4 f3f1 	udiv	r3, r4, r1
   84f34:	fb01 4c13 	mls	ip, r1, r3, r4
   84f38:	fb03 f202 	mul.w	r2, r3, r2
   84f3c:	b2ac      	uxth	r4, r5
   84f3e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   84f42:	428a      	cmp	r2, r1
   84f44:	d909      	bls.n	84f5a <__udivmoddi4+0x96>
   84f46:	19c9      	adds	r1, r1, r7
   84f48:	f103 34ff 	add.w	r4, r3, #4294967295
   84f4c:	f080 810f 	bcs.w	8516e <__udivmoddi4+0x2aa>
   84f50:	428a      	cmp	r2, r1
   84f52:	f240 810c 	bls.w	8516e <__udivmoddi4+0x2aa>
   84f56:	3b02      	subs	r3, #2
   84f58:	4439      	add	r1, r7
   84f5a:	1a8a      	subs	r2, r1, r2
   84f5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   84f60:	2100      	movs	r1, #0
   84f62:	2e00      	cmp	r6, #0
   84f64:	d063      	beq.n	8502e <__udivmoddi4+0x16a>
   84f66:	fa22 f20e 	lsr.w	r2, r2, lr
   84f6a:	2300      	movs	r3, #0
   84f6c:	e886 000c 	stmia.w	r6, {r2, r3}
   84f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f74:	428b      	cmp	r3, r1
   84f76:	d907      	bls.n	84f88 <__udivmoddi4+0xc4>
   84f78:	2e00      	cmp	r6, #0
   84f7a:	d056      	beq.n	8502a <__udivmoddi4+0x166>
   84f7c:	2100      	movs	r1, #0
   84f7e:	e886 0011 	stmia.w	r6, {r0, r4}
   84f82:	4608      	mov	r0, r1
   84f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f88:	fab3 f183 	clz	r1, r3
   84f8c:	2900      	cmp	r1, #0
   84f8e:	f040 8093 	bne.w	850b8 <__udivmoddi4+0x1f4>
   84f92:	42a3      	cmp	r3, r4
   84f94:	d302      	bcc.n	84f9c <__udivmoddi4+0xd8>
   84f96:	4282      	cmp	r2, r0
   84f98:	f200 80fe 	bhi.w	85198 <__udivmoddi4+0x2d4>
   84f9c:	1a85      	subs	r5, r0, r2
   84f9e:	eb64 0303 	sbc.w	r3, r4, r3
   84fa2:	469c      	mov	ip, r3
   84fa4:	2001      	movs	r0, #1
   84fa6:	2e00      	cmp	r6, #0
   84fa8:	d041      	beq.n	8502e <__udivmoddi4+0x16a>
   84faa:	e886 1020 	stmia.w	r6, {r5, ip}
   84fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84fb2:	b912      	cbnz	r2, 84fba <__udivmoddi4+0xf6>
   84fb4:	2701      	movs	r7, #1
   84fb6:	fbb7 f7f2 	udiv	r7, r7, r2
   84fba:	fab7 fe87 	clz	lr, r7
   84fbe:	f1be 0f00 	cmp.w	lr, #0
   84fc2:	d136      	bne.n	85032 <__udivmoddi4+0x16e>
   84fc4:	1be4      	subs	r4, r4, r7
   84fc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   84fca:	fa1f f987 	uxth.w	r9, r7
   84fce:	2101      	movs	r1, #1
   84fd0:	fbb4 f3f8 	udiv	r3, r4, r8
   84fd4:	fb08 4413 	mls	r4, r8, r3, r4
   84fd8:	fb09 f203 	mul.w	r2, r9, r3
   84fdc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84fe0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   84fe4:	42a2      	cmp	r2, r4
   84fe6:	d907      	bls.n	84ff8 <__udivmoddi4+0x134>
   84fe8:	19e4      	adds	r4, r4, r7
   84fea:	f103 30ff 	add.w	r0, r3, #4294967295
   84fee:	d202      	bcs.n	84ff6 <__udivmoddi4+0x132>
   84ff0:	42a2      	cmp	r2, r4
   84ff2:	f200 80d3 	bhi.w	8519c <__udivmoddi4+0x2d8>
   84ff6:	4603      	mov	r3, r0
   84ff8:	1aa4      	subs	r4, r4, r2
   84ffa:	fbb4 f0f8 	udiv	r0, r4, r8
   84ffe:	fb08 4810 	mls	r8, r8, r0, r4
   85002:	fb09 f900 	mul.w	r9, r9, r0
   85006:	b2ac      	uxth	r4, r5
   85008:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   8500c:	4591      	cmp	r9, r2
   8500e:	d907      	bls.n	85020 <__udivmoddi4+0x15c>
   85010:	19d2      	adds	r2, r2, r7
   85012:	f100 34ff 	add.w	r4, r0, #4294967295
   85016:	d202      	bcs.n	8501e <__udivmoddi4+0x15a>
   85018:	4591      	cmp	r9, r2
   8501a:	f200 80ba 	bhi.w	85192 <__udivmoddi4+0x2ce>
   8501e:	4620      	mov	r0, r4
   85020:	ebc9 0202 	rsb	r2, r9, r2
   85024:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   85028:	e79b      	b.n	84f62 <__udivmoddi4+0x9e>
   8502a:	4631      	mov	r1, r6
   8502c:	4630      	mov	r0, r6
   8502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85032:	fa07 f70e 	lsl.w	r7, r7, lr
   85036:	f1ce 0c20 	rsb	ip, lr, #32
   8503a:	fa24 f30c 	lsr.w	r3, r4, ip
   8503e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85042:	fbb3 faf8 	udiv	sl, r3, r8
   85046:	fa1f f987 	uxth.w	r9, r7
   8504a:	fb08 351a 	mls	r5, r8, sl, r3
   8504e:	fa20 fc0c 	lsr.w	ip, r0, ip
   85052:	fa04 f40e 	lsl.w	r4, r4, lr
   85056:	fb0a fb09 	mul.w	fp, sl, r9
   8505a:	ea4c 0c04 	orr.w	ip, ip, r4
   8505e:	ea4f 421c 	mov.w	r2, ip, lsr #16
   85062:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   85066:	459b      	cmp	fp, r3
   85068:	fa00 f50e 	lsl.w	r5, r0, lr
   8506c:	d90a      	bls.n	85084 <__udivmoddi4+0x1c0>
   8506e:	19db      	adds	r3, r3, r7
   85070:	f10a 32ff 	add.w	r2, sl, #4294967295
   85074:	f080 808b 	bcs.w	8518e <__udivmoddi4+0x2ca>
   85078:	459b      	cmp	fp, r3
   8507a:	f240 8088 	bls.w	8518e <__udivmoddi4+0x2ca>
   8507e:	f1aa 0a02 	sub.w	sl, sl, #2
   85082:	443b      	add	r3, r7
   85084:	ebcb 0303 	rsb	r3, fp, r3
   85088:	fbb3 f0f8 	udiv	r0, r3, r8
   8508c:	fb08 3310 	mls	r3, r8, r0, r3
   85090:	fb00 f409 	mul.w	r4, r0, r9
   85094:	fa1f fc8c 	uxth.w	ip, ip
   85098:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   8509c:	429c      	cmp	r4, r3
   8509e:	d907      	bls.n	850b0 <__udivmoddi4+0x1ec>
   850a0:	19db      	adds	r3, r3, r7
   850a2:	f100 32ff 	add.w	r2, r0, #4294967295
   850a6:	d26e      	bcs.n	85186 <__udivmoddi4+0x2c2>
   850a8:	429c      	cmp	r4, r3
   850aa:	d96c      	bls.n	85186 <__udivmoddi4+0x2c2>
   850ac:	3802      	subs	r0, #2
   850ae:	443b      	add	r3, r7
   850b0:	1b1c      	subs	r4, r3, r4
   850b2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   850b6:	e78b      	b.n	84fd0 <__udivmoddi4+0x10c>
   850b8:	f1c1 0e20 	rsb	lr, r1, #32
   850bc:	408b      	lsls	r3, r1
   850be:	fa22 fc0e 	lsr.w	ip, r2, lr
   850c2:	ea4c 0c03 	orr.w	ip, ip, r3
   850c6:	fa24 f70e 	lsr.w	r7, r4, lr
   850ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
   850ce:	fbb7 faf9 	udiv	sl, r7, r9
   850d2:	fa1f f38c 	uxth.w	r3, ip
   850d6:	fb09 771a 	mls	r7, r9, sl, r7
   850da:	fa20 f80e 	lsr.w	r8, r0, lr
   850de:	408c      	lsls	r4, r1
   850e0:	fb0a f503 	mul.w	r5, sl, r3
   850e4:	ea48 0404 	orr.w	r4, r8, r4
   850e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   850ec:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   850f0:	42bd      	cmp	r5, r7
   850f2:	fa02 f201 	lsl.w	r2, r2, r1
   850f6:	fa00 fb01 	lsl.w	fp, r0, r1
   850fa:	d909      	bls.n	85110 <__udivmoddi4+0x24c>
   850fc:	eb17 070c 	adds.w	r7, r7, ip
   85100:	f10a 30ff 	add.w	r0, sl, #4294967295
   85104:	d241      	bcs.n	8518a <__udivmoddi4+0x2c6>
   85106:	42bd      	cmp	r5, r7
   85108:	d93f      	bls.n	8518a <__udivmoddi4+0x2c6>
   8510a:	f1aa 0a02 	sub.w	sl, sl, #2
   8510e:	4467      	add	r7, ip
   85110:	1b7f      	subs	r7, r7, r5
   85112:	fbb7 f5f9 	udiv	r5, r7, r9
   85116:	fb09 7715 	mls	r7, r9, r5, r7
   8511a:	fb05 f303 	mul.w	r3, r5, r3
   8511e:	b2a4      	uxth	r4, r4
   85120:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   85124:	42bb      	cmp	r3, r7
   85126:	d908      	bls.n	8513a <__udivmoddi4+0x276>
   85128:	eb17 070c 	adds.w	r7, r7, ip
   8512c:	f105 30ff 	add.w	r0, r5, #4294967295
   85130:	d227      	bcs.n	85182 <__udivmoddi4+0x2be>
   85132:	42bb      	cmp	r3, r7
   85134:	d925      	bls.n	85182 <__udivmoddi4+0x2be>
   85136:	3d02      	subs	r5, #2
   85138:	4467      	add	r7, ip
   8513a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8513e:	fba0 8902 	umull	r8, r9, r0, r2
   85142:	1aff      	subs	r7, r7, r3
   85144:	454f      	cmp	r7, r9
   85146:	4645      	mov	r5, r8
   85148:	464c      	mov	r4, r9
   8514a:	d314      	bcc.n	85176 <__udivmoddi4+0x2b2>
   8514c:	d029      	beq.n	851a2 <__udivmoddi4+0x2de>
   8514e:	b366      	cbz	r6, 851aa <__udivmoddi4+0x2e6>
   85150:	ebbb 0305 	subs.w	r3, fp, r5
   85154:	eb67 0704 	sbc.w	r7, r7, r4
   85158:	fa07 fe0e 	lsl.w	lr, r7, lr
   8515c:	40cb      	lsrs	r3, r1
   8515e:	40cf      	lsrs	r7, r1
   85160:	ea4e 0303 	orr.w	r3, lr, r3
   85164:	e886 0088 	stmia.w	r6, {r3, r7}
   85168:	2100      	movs	r1, #0
   8516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8516e:	4623      	mov	r3, r4
   85170:	e6f3      	b.n	84f5a <__udivmoddi4+0x96>
   85172:	4618      	mov	r0, r3
   85174:	e6da      	b.n	84f2c <__udivmoddi4+0x68>
   85176:	ebb8 0502 	subs.w	r5, r8, r2
   8517a:	eb69 040c 	sbc.w	r4, r9, ip
   8517e:	3801      	subs	r0, #1
   85180:	e7e5      	b.n	8514e <__udivmoddi4+0x28a>
   85182:	4605      	mov	r5, r0
   85184:	e7d9      	b.n	8513a <__udivmoddi4+0x276>
   85186:	4610      	mov	r0, r2
   85188:	e792      	b.n	850b0 <__udivmoddi4+0x1ec>
   8518a:	4682      	mov	sl, r0
   8518c:	e7c0      	b.n	85110 <__udivmoddi4+0x24c>
   8518e:	4692      	mov	sl, r2
   85190:	e778      	b.n	85084 <__udivmoddi4+0x1c0>
   85192:	3802      	subs	r0, #2
   85194:	443a      	add	r2, r7
   85196:	e743      	b.n	85020 <__udivmoddi4+0x15c>
   85198:	4608      	mov	r0, r1
   8519a:	e704      	b.n	84fa6 <__udivmoddi4+0xe2>
   8519c:	3b02      	subs	r3, #2
   8519e:	443c      	add	r4, r7
   851a0:	e72a      	b.n	84ff8 <__udivmoddi4+0x134>
   851a2:	45c3      	cmp	fp, r8
   851a4:	d3e7      	bcc.n	85176 <__udivmoddi4+0x2b2>
   851a6:	463c      	mov	r4, r7
   851a8:	e7d1      	b.n	8514e <__udivmoddi4+0x28a>
   851aa:	4631      	mov	r1, r6
   851ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000851b0 <__aeabi_idiv0>:
   851b0:	4770      	bx	lr
   851b2:	bf00      	nop
   851b4:	09097325 	.word	0x09097325
   851b8:	25096325 	.word	0x25096325
   851bc:	75250975 	.word	0x75250975
   851c0:	0d752509 	.word	0x0d752509
   851c4:	0000000a 	.word	0x0000000a
   851c8:	454c4449 	.word	0x454c4449
   851cc:	00000000 	.word	0x00000000
   851d0:	00000a0d 	.word	0x00000a0d
   851d4:	20726d54 	.word	0x20726d54
   851d8:	00637653 	.word	0x00637653
   851dc:	6c756f43 	.word	0x6c756f43
   851e0:	6f6e2064 	.word	0x6f6e2064
   851e4:	65732074 	.word	0x65732074
   851e8:	7420646e 	.word	0x7420646e
   851ec:	6874206f 	.word	0x6874206f
   851f0:	75712065 	.word	0x75712065
   851f4:	2e657565 	.word	0x2e657565
   851f8:	0000000a 	.word	0x0000000a
   851fc:	616e614d 	.word	0x616e614d
   85200:	00726567 	.word	0x00726567
   85204:	6c706d45 	.word	0x6c706d45
   85208:	6565796f 	.word	0x6565796f
   8520c:	00000000 	.word	0x00000000
   85210:	706d4520 	.word	0x706d4520
   85214:	65796f6c 	.word	0x65796f6c
   85218:	203a2065 	.word	0x203a2065
   8521c:	6b726f57 	.word	0x6b726f57
   85220:	20676e69 	.word	0x20676e69
   85224:	54206e6f 	.word	0x54206e6f
   85228:	656b6369 	.word	0x656b6369
   8522c:	64692064 	.word	0x64692064
   85230:	25203a20 	.word	0x25203a20
   85234:	00000a64 	.word	0x00000a64
   85238:	6f727245 	.word	0x6f727245
   8523c:	65672072 	.word	0x65672072
   85240:	6e697474 	.word	0x6e697474
   85244:	68742067 	.word	0x68742067
   85248:	57782065 	.word	0x57782065
   8524c:	546b726f 	.word	0x546b726f
   85250:	656b6369 	.word	0x656b6369
   85254:	20644974 	.word	0x20644974
   85258:	6d6f7266 	.word	0x6d6f7266
   8525c:	65757120 	.word	0x65757120
   85260:	000a6575 	.word	0x000a6575
   85264:	00000043 	.word	0x00000043

00085268 <_global_impure_ptr>:
   85268:	20070140                                @.. 

0008526c <zeroes.6993>:
   8526c:	30303030 30303030 30303030 30303030     0000000000000000
   8527c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   8528c:	00000000 33323130 37363534 62613938     ....0123456789ab
   8529c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

000852ac <blanks.6992>:
   852ac:	20202020 20202020 20202020 20202020                     

000852bc <_init>:
   852bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   852be:	bf00      	nop
   852c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   852c2:	bc08      	pop	{r3}
   852c4:	469e      	mov	lr, r3
   852c6:	4770      	bx	lr

000852c8 <__init_array_start>:
   852c8:	000835d5 	.word	0x000835d5

000852cc <__frame_dummy_init_array_entry>:
   852cc:	00080119                                ....

000852d0 <_fini>:
   852d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   852d2:	bf00      	nop
   852d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   852d6:	bc08      	pop	{r3}
   852d8:	469e      	mov	lr, r3
   852da:	4770      	bx	lr

000852dc <__fini_array_start>:
   852dc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00085264 00000000 00000000 00000000     dR..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00084c5d                                ]L..
