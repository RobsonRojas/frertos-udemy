
Example014.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ab4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00087ab4  00087ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ac  20070000  00087abc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bad4  200709b0  00088470  000209b0  2**3
                  ALLOC
  4 .stack        00002004  2007c484  00093f44  000209b0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000209ac  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209d5  2**0
                  CONTENTS, READONLY
  7 .debug_info   000128cf  00000000  00000000  00020a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000357b  00000000  00000000  000332fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a74f  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ef0  00000000  00000000  00040fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e98  00000000  00000000  00041eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b557  00000000  00000000  00042d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016372  00000000  00000000  0005e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00072f20  00000000  00000000  00074618  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003078  00000000  00000000  000e7538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007e488 	.word	0x2007e488
   80004:	000821d5 	.word	0x000821d5
   80008:	000821d1 	.word	0x000821d1
   8000c:	000821d1 	.word	0x000821d1
   80010:	000821d1 	.word	0x000821d1
   80014:	000821d1 	.word	0x000821d1
   80018:	000821d1 	.word	0x000821d1
	...
   8002c:	00080289 	.word	0x00080289
   80030:	000821d1 	.word	0x000821d1
   80034:	00000000 	.word	0x00000000
   80038:	00080305 	.word	0x00080305
   8003c:	00080341 	.word	0x00080341
   80040:	000821d1 	.word	0x000821d1
   80044:	000821d1 	.word	0x000821d1
   80048:	000821d1 	.word	0x000821d1
   8004c:	000821d1 	.word	0x000821d1
   80050:	000836c9 	.word	0x000836c9
   80054:	000821d1 	.word	0x000821d1
   80058:	000821d1 	.word	0x000821d1
   8005c:	000821d1 	.word	0x000821d1
   80060:	000821d1 	.word	0x000821d1
   80064:	000821d1 	.word	0x000821d1
   80068:	00000000 	.word	0x00000000
   8006c:	00082041 	.word	0x00082041
   80070:	00082055 	.word	0x00082055
   80074:	00082069 	.word	0x00082069
   80078:	0008207d 	.word	0x0008207d
	...
   80084:	000821d1 	.word	0x000821d1
   80088:	000821d1 	.word	0x000821d1
   8008c:	000821d1 	.word	0x000821d1
   80090:	000821d1 	.word	0x000821d1
   80094:	000821d1 	.word	0x000821d1
   80098:	000821d1 	.word	0x000821d1
   8009c:	000821d1 	.word	0x000821d1
   800a0:	000821d1 	.word	0x000821d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000821d1 	.word	0x000821d1
   800ac:	000821d1 	.word	0x000821d1
   800b0:	000821d1 	.word	0x000821d1
   800b4:	000821d1 	.word	0x000821d1
   800b8:	000821d1 	.word	0x000821d1
   800bc:	000821d1 	.word	0x000821d1
   800c0:	000821d1 	.word	0x000821d1
   800c4:	000821d1 	.word	0x000821d1
   800c8:	000821d1 	.word	0x000821d1
   800cc:	000821d1 	.word	0x000821d1
   800d0:	000821d1 	.word	0x000821d1
   800d4:	000821d1 	.word	0x000821d1
   800d8:	000821d1 	.word	0x000821d1
   800dc:	000821d1 	.word	0x000821d1
   800e0:	000821d1 	.word	0x000821d1
   800e4:	000821d1 	.word	0x000821d1
   800e8:	000821d1 	.word	0x000821d1
   800ec:	000821d1 	.word	0x000821d1
   800f0:	000821d1 	.word	0x000821d1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709b0 	.word	0x200709b0
   80110:	00000000 	.word	0x00000000
   80114:	00087abc 	.word	0x00087abc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709b4 	.word	0x200709b4
   80144:	00087abc 	.word	0x00087abc
   80148:	00087abc 	.word	0x00087abc
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b990      	cbnz	r0, 80178 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0f      	ble.n	8017e <_read+0x2e>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42a7      	cmp	r7, r4
   80170:	d1f8      	bne.n	80164 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80172:	4640      	mov	r0, r8
   80174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80178:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8017c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8017e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80184:	2007ac94 	.word	0x2007ac94
   80188:	2007ac8c 	.word	0x2007ac8c

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   801b8:	f100 0308 	add.w	r3, r0, #8
   801bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   801be:	f04f 32ff 	mov.w	r2, #4294967295
   801c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   801c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   801c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   801c8:	2300      	movs	r3, #0
   801ca:	6003      	str	r3, [r0, #0]
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop

000801d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   801d0:	2300      	movs	r3, #0
   801d2:	6103      	str	r3, [r0, #16]
   801d4:	4770      	bx	lr
   801d6:	bf00      	nop

000801d8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   801d8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   801de:	6842      	ldr	r2, [r0, #4]
   801e0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801e2:	685a      	ldr	r2, [r3, #4]
   801e4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   801e6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   801e8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801ec:	6803      	ldr	r3, [r0, #0]
   801ee:	3301      	adds	r3, #1
   801f0:	6003      	str	r3, [r0, #0]
   801f2:	4770      	bx	lr

000801f4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   801f4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   801f6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   801f8:	f1b4 3fff 	cmp.w	r4, #4294967295
   801fc:	d101      	bne.n	80202 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   801fe:	6903      	ldr	r3, [r0, #16]
   80200:	e00a      	b.n	80218 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80202:	f100 0308 	add.w	r3, r0, #8
   80206:	68c2      	ldr	r2, [r0, #12]
   80208:	6812      	ldr	r2, [r2, #0]
   8020a:	4294      	cmp	r4, r2
   8020c:	d304      	bcc.n	80218 <vListInsert+0x24>
   8020e:	685b      	ldr	r3, [r3, #4]
   80210:	685a      	ldr	r2, [r3, #4]
   80212:	6812      	ldr	r2, [r2, #0]
   80214:	4294      	cmp	r4, r2
   80216:	d2fa      	bcs.n	8020e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80218:	685a      	ldr	r2, [r3, #4]
   8021a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8021c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8021e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80220:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80222:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80224:	6803      	ldr	r3, [r0, #0]
   80226:	3301      	adds	r3, #1
   80228:	6003      	str	r3, [r0, #0]
}
   8022a:	bc10      	pop	{r4}
   8022c:	4770      	bx	lr
   8022e:	bf00      	nop

00080230 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80230:	6843      	ldr	r3, [r0, #4]
   80232:	6882      	ldr	r2, [r0, #8]
   80234:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80236:	6883      	ldr	r3, [r0, #8]
   80238:	6842      	ldr	r2, [r0, #4]
   8023a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8023c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8023e:	685a      	ldr	r2, [r3, #4]
   80240:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80242:	bf04      	itt	eq
   80244:	6882      	ldreq	r2, [r0, #8]
   80246:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80248:	2200      	movs	r2, #0
   8024a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8024c:	681a      	ldr	r2, [r3, #0]
   8024e:	3a01      	subs	r2, #1
   80250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80252:	6818      	ldr	r0, [r3, #0]
}
   80254:	4770      	bx	lr
   80256:	bf00      	nop

00080258 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80258:	4803      	ldr	r0, [pc, #12]	; (80268 <prvPortStartFirstTask+0x10>)
   8025a:	6800      	ldr	r0, [r0, #0]
   8025c:	6800      	ldr	r0, [r0, #0]
   8025e:	f380 8808 	msr	MSP, r0
   80262:	b662      	cpsie	i
   80264:	df00      	svc	0
   80266:	bf00      	nop
   80268:	e000ed08 	.word	0xe000ed08

0008026c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8026c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80270:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80274:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80278:	2300      	movs	r3, #0
   8027a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8027e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80282:	3840      	subs	r0, #64	; 0x40
   80284:	4770      	bx	lr
   80286:	bf00      	nop

00080288 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80288:	4b06      	ldr	r3, [pc, #24]	; (802a4 <pxCurrentTCBConst2>)
   8028a:	6819      	ldr	r1, [r3, #0]
   8028c:	6808      	ldr	r0, [r1, #0]
   8028e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80292:	f380 8809 	msr	PSP, r0
   80296:	f04f 0000 	mov.w	r0, #0
   8029a:	f380 8811 	msr	BASEPRI, r0
   8029e:	f04e 0e0d 	orr.w	lr, lr, #13
   802a2:	4770      	bx	lr

000802a4 <pxCurrentTCBConst2>:
   802a4:	2007aa8c 	.word	0x2007aa8c

000802a8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802ac:	4b01      	ldr	r3, [pc, #4]	; (802b4 <vPortYieldFromISR+0xc>)
   802ae:	601a      	str	r2, [r3, #0]
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop
   802b4:	e000ed04 	.word	0xe000ed04

000802b8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802b8:	f3ef 8011 	mrs	r0, BASEPRI
   802bc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802c0:	f381 8811 	msr	BASEPRI, r1
   802c4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802c6:	2000      	movs	r0, #0

000802c8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   802c8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   802ca:	4b03      	ldr	r3, [pc, #12]	; (802d8 <vPortEnterCritical+0x10>)
   802cc:	4798      	blx	r3
	uxCriticalNesting++;
   802ce:	4a03      	ldr	r2, [pc, #12]	; (802dc <vPortEnterCritical+0x14>)
   802d0:	6813      	ldr	r3, [r2, #0]
   802d2:	3301      	adds	r3, #1
   802d4:	6013      	str	r3, [r2, #0]
   802d6:	bd08      	pop	{r3, pc}
   802d8:	000802b9 	.word	0x000802b9
   802dc:	2007012c 	.word	0x2007012c

000802e0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802e0:	f380 8811 	msr	BASEPRI, r0
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop

000802e8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   802e8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   802ea:	4a04      	ldr	r2, [pc, #16]	; (802fc <vPortExitCritical+0x14>)
   802ec:	6813      	ldr	r3, [r2, #0]
   802ee:	3b01      	subs	r3, #1
   802f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   802f2:	b913      	cbnz	r3, 802fa <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   802f4:	2000      	movs	r0, #0
   802f6:	4b02      	ldr	r3, [pc, #8]	; (80300 <vPortExitCritical+0x18>)
   802f8:	4798      	blx	r3
   802fa:	bd08      	pop	{r3, pc}
   802fc:	2007012c 	.word	0x2007012c
   80300:	000802e1 	.word	0x000802e1

00080304 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80304:	f3ef 8009 	mrs	r0, PSP
   80308:	4b0c      	ldr	r3, [pc, #48]	; (8033c <pxCurrentTCBConst>)
   8030a:	681a      	ldr	r2, [r3, #0]
   8030c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80310:	6010      	str	r0, [r2, #0]
   80312:	e92d 4008 	stmdb	sp!, {r3, lr}
   80316:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8031a:	f380 8811 	msr	BASEPRI, r0
   8031e:	f001 f897 	bl	81450 <vTaskSwitchContext>
   80322:	f04f 0000 	mov.w	r0, #0
   80326:	f380 8811 	msr	BASEPRI, r0
   8032a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8032e:	6819      	ldr	r1, [r3, #0]
   80330:	6808      	ldr	r0, [r1, #0]
   80332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80336:	f380 8809 	msr	PSP, r0
   8033a:	4770      	bx	lr

0008033c <pxCurrentTCBConst>:
   8033c:	2007aa8c 	.word	0x2007aa8c

00080340 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80340:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80346:	4b05      	ldr	r3, [pc, #20]	; (8035c <SysTick_Handler+0x1c>)
   80348:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8034a:	4b05      	ldr	r3, [pc, #20]	; (80360 <SysTick_Handler+0x20>)
   8034c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8034e:	4b05      	ldr	r3, [pc, #20]	; (80364 <SysTick_Handler+0x24>)
   80350:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80352:	2000      	movs	r0, #0
   80354:	4b04      	ldr	r3, [pc, #16]	; (80368 <SysTick_Handler+0x28>)
   80356:	4798      	blx	r3
   80358:	bd08      	pop	{r3, pc}
   8035a:	bf00      	nop
   8035c:	e000ed04 	.word	0xe000ed04
   80360:	000802b9 	.word	0x000802b9
   80364:	000810e9 	.word	0x000810e9
   80368:	000802e1 	.word	0x000802e1

0008036c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8036c:	4a03      	ldr	r2, [pc, #12]	; (8037c <vPortSetupTimerInterrupt+0x10>)
   8036e:	4b04      	ldr	r3, [pc, #16]	; (80380 <vPortSetupTimerInterrupt+0x14>)
   80370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80372:	2207      	movs	r2, #7
   80374:	3b04      	subs	r3, #4
   80376:	601a      	str	r2, [r3, #0]
   80378:	4770      	bx	lr
   8037a:	bf00      	nop
   8037c:	0001481f 	.word	0x0001481f
   80380:	e000e014 	.word	0xe000e014

00080384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80384:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80386:	4b09      	ldr	r3, [pc, #36]	; (803ac <xPortStartScheduler+0x28>)
   80388:	681a      	ldr	r2, [r3, #0]
   8038a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8038e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80390:	681a      	ldr	r2, [r3, #0]
   80392:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80396:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80398:	4b05      	ldr	r3, [pc, #20]	; (803b0 <xPortStartScheduler+0x2c>)
   8039a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8039c:	2400      	movs	r4, #0
   8039e:	4b05      	ldr	r3, [pc, #20]	; (803b4 <xPortStartScheduler+0x30>)
   803a0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <xPortStartScheduler+0x34>)
   803a4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   803a6:	4620      	mov	r0, r4
   803a8:	bd10      	pop	{r4, pc}
   803aa:	bf00      	nop
   803ac:	e000ed20 	.word	0xe000ed20
   803b0:	0008036d 	.word	0x0008036d
   803b4:	2007012c 	.word	0x2007012c
   803b8:	00080259 	.word	0x00080259

000803bc <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   803bc:	4a12      	ldr	r2, [pc, #72]	; (80408 <prvInsertBlockIntoFreeList+0x4c>)
   803be:	e000      	b.n	803c2 <prvInsertBlockIntoFreeList+0x6>
   803c0:	461a      	mov	r2, r3
   803c2:	6813      	ldr	r3, [r2, #0]
   803c4:	4283      	cmp	r3, r0
   803c6:	d3fb      	bcc.n	803c0 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   803c8:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   803ca:	6851      	ldr	r1, [r2, #4]
   803cc:	1854      	adds	r4, r2, r1
   803ce:	42a0      	cmp	r0, r4
   803d0:	d103      	bne.n	803da <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   803d2:	6840      	ldr	r0, [r0, #4]
   803d4:	4401      	add	r1, r0
   803d6:	6051      	str	r1, [r2, #4]
   803d8:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   803da:	6841      	ldr	r1, [r0, #4]
   803dc:	1844      	adds	r4, r0, r1
   803de:	42a3      	cmp	r3, r4
   803e0:	d10c      	bne.n	803fc <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   803e2:	4b0a      	ldr	r3, [pc, #40]	; (8040c <prvInsertBlockIntoFreeList+0x50>)
   803e4:	681b      	ldr	r3, [r3, #0]
   803e6:	429c      	cmp	r4, r3
   803e8:	d006      	beq.n	803f8 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   803ea:	6863      	ldr	r3, [r4, #4]
   803ec:	4419      	add	r1, r3
   803ee:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   803f0:	6813      	ldr	r3, [r2, #0]
   803f2:	681b      	ldr	r3, [r3, #0]
   803f4:	6003      	str	r3, [r0, #0]
   803f6:	e002      	b.n	803fe <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   803f8:	6004      	str	r4, [r0, #0]
   803fa:	e000      	b.n	803fe <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   803fc:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   803fe:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80400:	bf18      	it	ne
   80402:	6010      	strne	r0, [r2, #0]
	}
}
   80404:	bc10      	pop	{r4}
   80406:	4770      	bx	lr
   80408:	2007a9d4 	.word	0x2007a9d4
   8040c:	2007a9d0 	.word	0x2007a9d0

00080410 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   80410:	b538      	push	{r3, r4, r5, lr}
   80412:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80414:	4b2b      	ldr	r3, [pc, #172]	; (804c4 <pvPortMalloc+0xb4>)
   80416:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80418:	4b2b      	ldr	r3, [pc, #172]	; (804c8 <pvPortMalloc+0xb8>)
   8041a:	681b      	ldr	r3, [r3, #0]
   8041c:	b99b      	cbnz	r3, 80446 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8041e:	4a2b      	ldr	r2, [pc, #172]	; (804cc <pvPortMalloc+0xbc>)
   80420:	4b2b      	ldr	r3, [pc, #172]	; (804d0 <pvPortMalloc+0xc0>)
   80422:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80424:	2100      	movs	r1, #0
   80426:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80428:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   8042c:	1898      	adds	r0, r3, r2
   8042e:	4d26      	ldr	r5, [pc, #152]	; (804c8 <pvPortMalloc+0xb8>)
   80430:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80432:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80436:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80438:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8043a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8043c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8043e:	4a25      	ldr	r2, [pc, #148]	; (804d4 <pvPortMalloc+0xc4>)
   80440:	6813      	ldr	r3, [r2, #0]
   80442:	3b10      	subs	r3, #16
   80444:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80446:	2c00      	cmp	r4, #0
   80448:	d037      	beq.n	804ba <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8044a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8044e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80452:	bf1c      	itt	ne
   80454:	f022 0207 	bicne.w	r2, r2, #7
   80458:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8045a:	1e51      	subs	r1, r2, #1
   8045c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80460:	4299      	cmp	r1, r3
   80462:	d827      	bhi.n	804b4 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80464:	4919      	ldr	r1, [pc, #100]	; (804cc <pvPortMalloc+0xbc>)
   80466:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80468:	e001      	b.n	8046e <pvPortMalloc+0x5e>
   8046a:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   8046c:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8046e:	6863      	ldr	r3, [r4, #4]
   80470:	429a      	cmp	r2, r3
   80472:	d902      	bls.n	8047a <pvPortMalloc+0x6a>
   80474:	6823      	ldr	r3, [r4, #0]
   80476:	2b00      	cmp	r3, #0
   80478:	d1f7      	bne.n	8046a <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   8047a:	4b13      	ldr	r3, [pc, #76]	; (804c8 <pvPortMalloc+0xb8>)
   8047c:	681b      	ldr	r3, [r3, #0]
   8047e:	429c      	cmp	r4, r3
   80480:	d018      	beq.n	804b4 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80482:	680d      	ldr	r5, [r1, #0]
   80484:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80486:	6823      	ldr	r3, [r4, #0]
   80488:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8048a:	6863      	ldr	r3, [r4, #4]
   8048c:	1a9b      	subs	r3, r3, r2
   8048e:	2b20      	cmp	r3, #32
   80490:	d904      	bls.n	8049c <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80492:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80494:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80496:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80498:	4b0f      	ldr	r3, [pc, #60]	; (804d8 <pvPortMalloc+0xc8>)
   8049a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8049c:	4a0d      	ldr	r2, [pc, #52]	; (804d4 <pvPortMalloc+0xc4>)
   8049e:	6813      	ldr	r3, [r2, #0]
   804a0:	6861      	ldr	r1, [r4, #4]
   804a2:	1a5b      	subs	r3, r3, r1
   804a4:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
   804a6:	4b0d      	ldr	r3, [pc, #52]	; (804dc <pvPortMalloc+0xcc>)
   804a8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   804aa:	b94d      	cbnz	r5, 804c0 <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
   804ac:	4b0c      	ldr	r3, [pc, #48]	; (804e0 <pvPortMalloc+0xd0>)
   804ae:	4798      	blx	r3
   804b0:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
   804b2:	e005      	b.n	804c0 <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   804b4:	4b09      	ldr	r3, [pc, #36]	; (804dc <pvPortMalloc+0xcc>)
   804b6:	4798      	blx	r3
   804b8:	e7f8      	b.n	804ac <pvPortMalloc+0x9c>
   804ba:	4b08      	ldr	r3, [pc, #32]	; (804dc <pvPortMalloc+0xcc>)
   804bc:	4798      	blx	r3
   804be:	e7f5      	b.n	804ac <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
   804c0:	4628      	mov	r0, r5
   804c2:	bd38      	pop	{r3, r4, r5, pc}
   804c4:	000810b9 	.word	0x000810b9
   804c8:	2007a9d0 	.word	0x2007a9d0
   804cc:	2007a9d4 	.word	0x2007a9d4
   804d0:	200709d0 	.word	0x200709d0
   804d4:	20070130 	.word	0x20070130
   804d8:	000803bd 	.word	0x000803bd
   804dc:	00081245 	.word	0x00081245
   804e0:	00083705 	.word	0x00083705

000804e4 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   804e4:	b180      	cbz	r0, 80508 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   804e6:	b510      	push	{r4, lr}
   804e8:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   804ea:	4b08      	ldr	r3, [pc, #32]	; (8050c <vPortFree+0x28>)
   804ec:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   804ee:	4a08      	ldr	r2, [pc, #32]	; (80510 <vPortFree+0x2c>)
   804f0:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   804f4:	6813      	ldr	r3, [r2, #0]
   804f6:	440b      	add	r3, r1
   804f8:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   804fa:	f1a4 0010 	sub.w	r0, r4, #16
   804fe:	4b05      	ldr	r3, [pc, #20]	; (80514 <vPortFree+0x30>)
   80500:	4798      	blx	r3
		}
		xTaskResumeAll();
   80502:	4b05      	ldr	r3, [pc, #20]	; (80518 <vPortFree+0x34>)
   80504:	4798      	blx	r3
   80506:	bd10      	pop	{r4, pc}
   80508:	4770      	bx	lr
   8050a:	bf00      	nop
   8050c:	000810b9 	.word	0x000810b9
   80510:	20070130 	.word	0x20070130
   80514:	000803bd 	.word	0x000803bd
   80518:	00081245 	.word	0x00081245

0008051c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8051c:	b510      	push	{r4, lr}
   8051e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80520:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80522:	b93b      	cbnz	r3, 80534 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80524:	6803      	ldr	r3, [r0, #0]
   80526:	bb1b      	cbnz	r3, 80570 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80528:	6840      	ldr	r0, [r0, #4]
   8052a:	4b13      	ldr	r3, [pc, #76]	; (80578 <prvCopyDataToQueue+0x5c>)
   8052c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8052e:	2300      	movs	r3, #0
   80530:	6063      	str	r3, [r4, #4]
   80532:	e01d      	b.n	80570 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80534:	b96a      	cbnz	r2, 80552 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80536:	461a      	mov	r2, r3
   80538:	6880      	ldr	r0, [r0, #8]
   8053a:	4b10      	ldr	r3, [pc, #64]	; (8057c <prvCopyDataToQueue+0x60>)
   8053c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8053e:	68a2      	ldr	r2, [r4, #8]
   80540:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80542:	4413      	add	r3, r2
   80544:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80546:	6862      	ldr	r2, [r4, #4]
   80548:	4293      	cmp	r3, r2
   8054a:	d311      	bcc.n	80570 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8054c:	6823      	ldr	r3, [r4, #0]
   8054e:	60a3      	str	r3, [r4, #8]
   80550:	e00e      	b.n	80570 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80552:	461a      	mov	r2, r3
   80554:	68c0      	ldr	r0, [r0, #12]
   80556:	4b09      	ldr	r3, [pc, #36]	; (8057c <prvCopyDataToQueue+0x60>)
   80558:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8055a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8055c:	425b      	negs	r3, r3
   8055e:	68e2      	ldr	r2, [r4, #12]
   80560:	441a      	add	r2, r3
   80562:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80564:	6821      	ldr	r1, [r4, #0]
   80566:	428a      	cmp	r2, r1
   80568:	d202      	bcs.n	80570 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8056a:	6862      	ldr	r2, [r4, #4]
   8056c:	4413      	add	r3, r2
   8056e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80572:	3301      	adds	r3, #1
   80574:	63a3      	str	r3, [r4, #56]	; 0x38
   80576:	bd10      	pop	{r4, pc}
   80578:	00081835 	.word	0x00081835
   8057c:	00083781 	.word	0x00083781

00080580 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80580:	b538      	push	{r3, r4, r5, lr}
   80582:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80584:	6800      	ldr	r0, [r0, #0]
   80586:	b158      	cbz	r0, 805a0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8058a:	68dc      	ldr	r4, [r3, #12]
   8058c:	4414      	add	r4, r2
   8058e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80590:	685d      	ldr	r5, [r3, #4]
   80592:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80594:	bf28      	it	cs
   80596:	60d8      	strcs	r0, [r3, #12]
   80598:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   8059a:	68d9      	ldr	r1, [r3, #12]
   8059c:	4b01      	ldr	r3, [pc, #4]	; (805a4 <prvCopyDataFromQueue+0x24>)
   8059e:	4798      	blx	r3
   805a0:	bd38      	pop	{r3, r4, r5, pc}
   805a2:	bf00      	nop
   805a4:	00083781 	.word	0x00083781

000805a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   805a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805aa:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   805ac:	4b1e      	ldr	r3, [pc, #120]	; (80628 <prvUnlockQueue+0x80>)
   805ae:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805b2:	2b00      	cmp	r3, #0
   805b4:	dd13      	ble.n	805de <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   805b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805b8:	b91b      	cbnz	r3, 805c2 <prvUnlockQueue+0x1a>
   805ba:	e010      	b.n	805de <prvUnlockQueue+0x36>
   805bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805be:	b923      	cbnz	r3, 805ca <prvUnlockQueue+0x22>
   805c0:	e00d      	b.n	805de <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805c2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   805c6:	4d19      	ldr	r5, [pc, #100]	; (8062c <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805c8:	4f19      	ldr	r7, [pc, #100]	; (80630 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805ca:	4630      	mov	r0, r6
   805cc:	47a8      	blx	r5
   805ce:	b100      	cbz	r0, 805d2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805d0:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   805d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805d4:	3b01      	subs	r3, #1
   805d6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805da:	2b00      	cmp	r3, #0
   805dc:	dcee      	bgt.n	805bc <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   805de:	f04f 33ff 	mov.w	r3, #4294967295
   805e2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   805e4:	4b13      	ldr	r3, [pc, #76]	; (80634 <prvUnlockQueue+0x8c>)
   805e6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   805e8:	4b0f      	ldr	r3, [pc, #60]	; (80628 <prvUnlockQueue+0x80>)
   805ea:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   805ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
   805ee:	2b00      	cmp	r3, #0
   805f0:	dd13      	ble.n	8061a <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   805f2:	6923      	ldr	r3, [r4, #16]
   805f4:	b91b      	cbnz	r3, 805fe <prvUnlockQueue+0x56>
   805f6:	e010      	b.n	8061a <prvUnlockQueue+0x72>
   805f8:	6923      	ldr	r3, [r4, #16]
   805fa:	b923      	cbnz	r3, 80606 <prvUnlockQueue+0x5e>
   805fc:	e00d      	b.n	8061a <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   805fe:	f104 0610 	add.w	r6, r4, #16
   80602:	4d0a      	ldr	r5, [pc, #40]	; (8062c <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80604:	4f0a      	ldr	r7, [pc, #40]	; (80630 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80606:	4630      	mov	r0, r6
   80608:	47a8      	blx	r5
   8060a:	b100      	cbz	r0, 8060e <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   8060c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8060e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80610:	3b01      	subs	r3, #1
   80612:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80614:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80616:	2b00      	cmp	r3, #0
   80618:	dcee      	bgt.n	805f8 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8061a:	f04f 33ff 	mov.w	r3, #4294967295
   8061e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80620:	4b04      	ldr	r3, [pc, #16]	; (80634 <prvUnlockQueue+0x8c>)
   80622:	4798      	blx	r3
   80624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80626:	bf00      	nop
   80628:	000802c9 	.word	0x000802c9
   8062c:	000815dd 	.word	0x000815dd
   80630:	0008171d 	.word	0x0008171d
   80634:	000802e9 	.word	0x000802e9

00080638 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80638:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   8063a:	b918      	cbnz	r0, 80644 <xQueueGenericReset+0xc>
   8063c:	4b17      	ldr	r3, [pc, #92]	; (8069c <xQueueGenericReset+0x64>)
   8063e:	4798      	blx	r3
   80640:	bf00      	nop
   80642:	e7fd      	b.n	80640 <xQueueGenericReset+0x8>
   80644:	460d      	mov	r5, r1
   80646:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80648:	4b15      	ldr	r3, [pc, #84]	; (806a0 <xQueueGenericReset+0x68>)
   8064a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8064c:	6822      	ldr	r2, [r4, #0]
   8064e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80652:	fb03 f301 	mul.w	r3, r3, r1
   80656:	18d0      	adds	r0, r2, r3
   80658:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8065a:	2000      	movs	r0, #0
   8065c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8065e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80660:	1a5b      	subs	r3, r3, r1
   80662:	4413      	add	r3, r2
   80664:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80666:	f04f 33ff 	mov.w	r3, #4294967295
   8066a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8066c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8066e:	b955      	cbnz	r5, 80686 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80670:	6923      	ldr	r3, [r4, #16]
   80672:	b17b      	cbz	r3, 80694 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80674:	f104 0010 	add.w	r0, r4, #16
   80678:	4b0a      	ldr	r3, [pc, #40]	; (806a4 <xQueueGenericReset+0x6c>)
   8067a:	4798      	blx	r3
   8067c:	2801      	cmp	r0, #1
   8067e:	d109      	bne.n	80694 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80680:	4b09      	ldr	r3, [pc, #36]	; (806a8 <xQueueGenericReset+0x70>)
   80682:	4798      	blx	r3
   80684:	e006      	b.n	80694 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80686:	f104 0010 	add.w	r0, r4, #16
   8068a:	4d08      	ldr	r5, [pc, #32]	; (806ac <xQueueGenericReset+0x74>)
   8068c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8068e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80692:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80694:	4b06      	ldr	r3, [pc, #24]	; (806b0 <xQueueGenericReset+0x78>)
   80696:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80698:	2001      	movs	r0, #1
   8069a:	bd38      	pop	{r3, r4, r5, pc}
   8069c:	000802b9 	.word	0x000802b9
   806a0:	000802c9 	.word	0x000802c9
   806a4:	000815dd 	.word	0x000815dd
   806a8:	000802a9 	.word	0x000802a9
   806ac:	000801b9 	.word	0x000801b9
   806b0:	000802e9 	.word	0x000802e9

000806b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   806b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   806b8:	b1e0      	cbz	r0, 806f4 <xQueueGenericCreate+0x40>
   806ba:	460e      	mov	r6, r1
   806bc:	4615      	mov	r5, r2
   806be:	4607      	mov	r7, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   806c0:	2050      	movs	r0, #80	; 0x50
   806c2:	4b26      	ldr	r3, [pc, #152]	; (8075c <xQueueGenericCreate+0xa8>)
   806c4:	4798      	blx	r3
		if( pxNewQueue != NULL )
   806c6:	4604      	mov	r4, r0
   806c8:	b1a0      	cbz	r0, 806f4 <xQueueGenericCreate+0x40>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   806ca:	fb06 f007 	mul.w	r0, r6, r7
   806ce:	3001      	adds	r0, #1
   806d0:	4b22      	ldr	r3, [pc, #136]	; (8075c <xQueueGenericCreate+0xa8>)
   806d2:	4798      	blx	r3
   806d4:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   806d6:	b980      	cbnz	r0, 806fa <xQueueGenericCreate+0x46>
				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
   806d8:	4b21      	ldr	r3, [pc, #132]	; (80760 <xQueueGenericCreate+0xac>)
   806da:	5d59      	ldrb	r1, [r3, r5]
   806dc:	f101 0040 	add.w	r0, r1, #64	; 0x40
   806e0:	2200      	movs	r2, #0
   806e2:	b2c0      	uxtb	r0, r0
   806e4:	4b1f      	ldr	r3, [pc, #124]	; (80764 <xQueueGenericCreate+0xb0>)
   806e6:	4798      	blx	r3
				vPortFree( pxNewQueue );
   806e8:	4620      	mov	r0, r4
   806ea:	4b1f      	ldr	r3, [pc, #124]	; (80768 <xQueueGenericCreate+0xb4>)
   806ec:	4798      	blx	r3
   806ee:	e001      	b.n	806f4 <xQueueGenericCreate+0x40>
			}
		}
	}

	configASSERT( xReturn );
   806f0:	bf00      	nop
   806f2:	e7fd      	b.n	806f0 <xQueueGenericCreate+0x3c>
   806f4:	4b1d      	ldr	r3, [pc, #116]	; (8076c <xQueueGenericCreate+0xb8>)
   806f6:	4798      	blx	r3
   806f8:	e7fa      	b.n	806f0 <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   806fa:	63e7      	str	r7, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   806fc:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   806fe:	2101      	movs	r1, #1
   80700:	4620      	mov	r0, r4
   80702:	4b1b      	ldr	r3, [pc, #108]	; (80770 <xQueueGenericCreate+0xbc>)
   80704:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80706:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
   8070a:	4620      	mov	r0, r4
   8070c:	4f19      	ldr	r7, [pc, #100]	; (80774 <xQueueGenericCreate+0xc0>)
   8070e:	47b8      	blx	r7
   80710:	4e13      	ldr	r6, [pc, #76]	; (80760 <xQueueGenericCreate+0xac>)
   80712:	5c30      	ldrb	r0, [r6, r0]
   80714:	4b18      	ldr	r3, [pc, #96]	; (80778 <xQueueGenericCreate+0xc4>)
   80716:	4798      	blx	r3
   80718:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
   8071c:	4620      	mov	r0, r4
   8071e:	47b8      	blx	r7
   80720:	5c35      	ldrb	r5, [r6, r0]
   80722:	3518      	adds	r5, #24
   80724:	b2ed      	uxtb	r5, r5
   80726:	4620      	mov	r0, r4
   80728:	47b8      	blx	r7
   8072a:	f816 9000 	ldrb.w	r9, [r6, r0]
   8072e:	4620      	mov	r0, r4
   80730:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80780 <xQueueGenericCreate+0xcc>
   80734:	47c0      	blx	r8
   80736:	4602      	mov	r2, r0
   80738:	4649      	mov	r1, r9
   8073a:	4628      	mov	r0, r5
   8073c:	4b09      	ldr	r3, [pc, #36]	; (80764 <xQueueGenericCreate+0xb0>)
   8073e:	4798      	blx	r3
   80740:	4620      	mov	r0, r4
   80742:	47b8      	blx	r7
   80744:	5c35      	ldrb	r5, [r6, r0]
   80746:	4620      	mov	r0, r4
   80748:	47c0      	blx	r8
   8074a:	2200      	movs	r2, #0
   8074c:	4601      	mov	r1, r0
   8074e:	4628      	mov	r0, r5
   80750:	4b0a      	ldr	r3, [pc, #40]	; (8077c <xQueueGenericCreate+0xc8>)
   80752:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
   80754:	4620      	mov	r0, r4
   80756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8075a:	bf00      	nop
   8075c:	00080411 	.word	0x00080411
   80760:	20070140 	.word	0x20070140
   80764:	00082b99 	.word	0x00082b99
   80768:	000804e5 	.word	0x000804e5
   8076c:	000802b9 	.word	0x000802b9
   80770:	00080639 	.word	0x00080639
   80774:	000830f5 	.word	0x000830f5
   80778:	00082639 	.word	0x00082639
   8077c:	00082f19 	.word	0x00082f19
   80780:	000830e9 	.word	0x000830e9

00080784 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80788:	b087      	sub	sp, #28
   8078a:	9101      	str	r1, [sp, #4]
   8078c:	9203      	str	r2, [sp, #12]
   8078e:	9302      	str	r3, [sp, #8]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80790:	b918      	cbnz	r0, 8079a <xQueueGenericSend+0x16>
   80792:	4b6c      	ldr	r3, [pc, #432]	; (80944 <xQueueGenericSend+0x1c0>)
   80794:	4798      	blx	r3
   80796:	bf00      	nop
   80798:	e7fd      	b.n	80796 <xQueueGenericSend+0x12>
   8079a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8079c:	9b01      	ldr	r3, [sp, #4]
   8079e:	b92b      	cbnz	r3, 807ac <xQueueGenericSend+0x28>
   807a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   807a2:	b133      	cbz	r3, 807b2 <xQueueGenericSend+0x2e>
   807a4:	4b67      	ldr	r3, [pc, #412]	; (80944 <xQueueGenericSend+0x1c0>)
   807a6:	4798      	blx	r3
   807a8:	bf00      	nop
   807aa:	e7fd      	b.n	807a8 <xQueueGenericSend+0x24>
   807ac:	f04f 0800 	mov.w	r8, #0
   807b0:	e001      	b.n	807b6 <xQueueGenericSend+0x32>
   807b2:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   807b6:	4e64      	ldr	r6, [pc, #400]	; (80948 <xQueueGenericSend+0x1c4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   807b8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80984 <xQueueGenericSend+0x200>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   807bc:	4d63      	ldr	r5, [pc, #396]	; (8094c <xQueueGenericSend+0x1c8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   807be:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   807c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   807c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   807c4:	429a      	cmp	r2, r3
   807c6:	d239      	bcs.n	8083c <xQueueGenericSend+0xb8>
			{
				traceQUEUE_SEND( pxQueue );
   807c8:	4620      	mov	r0, r4
   807ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8096c <xQueueGenericSend+0x1e8>
   807ce:	47c0      	blx	r8
   807d0:	4f5f      	ldr	r7, [pc, #380]	; (80950 <xQueueGenericSend+0x1cc>)
   807d2:	5c3d      	ldrb	r5, [r7, r0]
   807d4:	3520      	adds	r5, #32
   807d6:	b2ed      	uxtb	r5, r5
   807d8:	4620      	mov	r0, r4
   807da:	47c0      	blx	r8
   807dc:	f817 a000 	ldrb.w	sl, [r7, r0]
   807e0:	4620      	mov	r0, r4
   807e2:	4e5c      	ldr	r6, [pc, #368]	; (80954 <xQueueGenericSend+0x1d0>)
   807e4:	47b0      	blx	r6
   807e6:	4602      	mov	r2, r0
   807e8:	4651      	mov	r1, sl
   807ea:	4628      	mov	r0, r5
   807ec:	4b5a      	ldr	r3, [pc, #360]	; (80958 <xQueueGenericSend+0x1d4>)
   807ee:	4798      	blx	r3
   807f0:	4620      	mov	r0, r4
   807f2:	47c0      	blx	r8
   807f4:	5c3d      	ldrb	r5, [r7, r0]
   807f6:	4620      	mov	r0, r4
   807f8:	47b0      	blx	r6
   807fa:	4606      	mov	r6, r0
   807fc:	4620      	mov	r0, r4
   807fe:	47c0      	blx	r8
   80800:	5c3b      	ldrb	r3, [r7, r0]
   80802:	2b02      	cmp	r3, #2
   80804:	bf1d      	ittte	ne
   80806:	6ba2      	ldrne	r2, [r4, #56]	; 0x38
   80808:	3201      	addne	r2, #1
   8080a:	b2d2      	uxtbne	r2, r2
   8080c:	2200      	moveq	r2, #0
   8080e:	4631      	mov	r1, r6
   80810:	4628      	mov	r0, r5
   80812:	4b52      	ldr	r3, [pc, #328]	; (8095c <xQueueGenericSend+0x1d8>)
   80814:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80816:	9a02      	ldr	r2, [sp, #8]
   80818:	9901      	ldr	r1, [sp, #4]
   8081a:	4620      	mov	r0, r4
   8081c:	4b50      	ldr	r3, [pc, #320]	; (80960 <xQueueGenericSend+0x1dc>)
   8081e:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80820:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80822:	b13b      	cbz	r3, 80834 <xQueueGenericSend+0xb0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80824:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80828:	4b4e      	ldr	r3, [pc, #312]	; (80964 <xQueueGenericSend+0x1e0>)
   8082a:	4798      	blx	r3
   8082c:	2801      	cmp	r0, #1
   8082e:	d101      	bne.n	80834 <xQueueGenericSend+0xb0>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80830:	4b4d      	ldr	r3, [pc, #308]	; (80968 <xQueueGenericSend+0x1e4>)
   80832:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80834:	4b45      	ldr	r3, [pc, #276]	; (8094c <xQueueGenericSend+0x1c8>)
   80836:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80838:	2001      	movs	r0, #1
   8083a:	e080      	b.n	8093e <xQueueGenericSend+0x1ba>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8083c:	9b03      	ldr	r3, [sp, #12]
   8083e:	b9ab      	cbnz	r3, 8086c <xQueueGenericSend+0xe8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80840:	4b42      	ldr	r3, [pc, #264]	; (8094c <xQueueGenericSend+0x1c8>)
   80842:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   80844:	4620      	mov	r0, r4
   80846:	4f49      	ldr	r7, [pc, #292]	; (8096c <xQueueGenericSend+0x1e8>)
   80848:	47b8      	blx	r7
   8084a:	4e41      	ldr	r6, [pc, #260]	; (80950 <xQueueGenericSend+0x1cc>)
   8084c:	5c35      	ldrb	r5, [r6, r0]
   8084e:	3548      	adds	r5, #72	; 0x48
   80850:	b2ed      	uxtb	r5, r5
   80852:	4620      	mov	r0, r4
   80854:	47b8      	blx	r7
   80856:	5c36      	ldrb	r6, [r6, r0]
   80858:	4620      	mov	r0, r4
   8085a:	4b3e      	ldr	r3, [pc, #248]	; (80954 <xQueueGenericSend+0x1d0>)
   8085c:	4798      	blx	r3
   8085e:	4602      	mov	r2, r0
   80860:	4631      	mov	r1, r6
   80862:	4628      	mov	r0, r5
   80864:	4b3c      	ldr	r3, [pc, #240]	; (80958 <xQueueGenericSend+0x1d4>)
   80866:	4798      	blx	r3
					return errQUEUE_FULL;
   80868:	2000      	movs	r0, #0
   8086a:	e068      	b.n	8093e <xQueueGenericSend+0x1ba>
				}
				else if( xEntryTimeSet == pdFALSE )
   8086c:	f1b8 0f00 	cmp.w	r8, #0
   80870:	d103      	bne.n	8087a <xQueueGenericSend+0xf6>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80872:	a804      	add	r0, sp, #16
   80874:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
   80876:	f04f 0801 	mov.w	r8, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8087a:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8087c:	4b3c      	ldr	r3, [pc, #240]	; (80970 <xQueueGenericSend+0x1ec>)
   8087e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80880:	47b0      	blx	r6
   80882:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80884:	f1b3 3fff 	cmp.w	r3, #4294967295
   80888:	bf04      	itt	eq
   8088a:	2300      	moveq	r3, #0
   8088c:	6463      	streq	r3, [r4, #68]	; 0x44
   8088e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80890:	f1b3 3fff 	cmp.w	r3, #4294967295
   80894:	bf04      	itt	eq
   80896:	2300      	moveq	r3, #0
   80898:	64a3      	streq	r3, [r4, #72]	; 0x48
   8089a:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8089c:	a903      	add	r1, sp, #12
   8089e:	a804      	add	r0, sp, #16
   808a0:	4b34      	ldr	r3, [pc, #208]	; (80974 <xQueueGenericSend+0x1f0>)
   808a2:	4798      	blx	r3
   808a4:	2800      	cmp	r0, #0
   808a6:	d132      	bne.n	8090e <xQueueGenericSend+0x18a>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   808a8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   808aa:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
   808ae:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   808b0:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   808b2:	45ba      	cmp	sl, r7
   808b4:	d125      	bne.n	80902 <xQueueGenericSend+0x17e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   808b6:	4620      	mov	r0, r4
   808b8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8096c <xQueueGenericSend+0x1e8>
   808bc:	47d8      	blx	fp
   808be:	f8df a090 	ldr.w	sl, [pc, #144]	; 80950 <xQueueGenericSend+0x1cc>
   808c2:	f81a 7000 	ldrb.w	r7, [sl, r0]
   808c6:	3770      	adds	r7, #112	; 0x70
   808c8:	b2ff      	uxtb	r7, r7
   808ca:	4620      	mov	r0, r4
   808cc:	47d8      	blx	fp
   808ce:	f81a a000 	ldrb.w	sl, [sl, r0]
   808d2:	4620      	mov	r0, r4
   808d4:	4b1f      	ldr	r3, [pc, #124]	; (80954 <xQueueGenericSend+0x1d0>)
   808d6:	4798      	blx	r3
   808d8:	4602      	mov	r2, r0
   808da:	4651      	mov	r1, sl
   808dc:	4638      	mov	r0, r7
   808de:	4b1e      	ldr	r3, [pc, #120]	; (80958 <xQueueGenericSend+0x1d4>)
   808e0:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   808e2:	9903      	ldr	r1, [sp, #12]
   808e4:	f104 0010 	add.w	r0, r4, #16
   808e8:	4b23      	ldr	r3, [pc, #140]	; (80978 <xQueueGenericSend+0x1f4>)
   808ea:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   808ec:	4620      	mov	r0, r4
   808ee:	4b23      	ldr	r3, [pc, #140]	; (8097c <xQueueGenericSend+0x1f8>)
   808f0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   808f2:	4b23      	ldr	r3, [pc, #140]	; (80980 <xQueueGenericSend+0x1fc>)
   808f4:	4798      	blx	r3
   808f6:	2800      	cmp	r0, #0
   808f8:	f47f af61 	bne.w	807be <xQueueGenericSend+0x3a>
				{
					portYIELD_WITHIN_API();
   808fc:	4b1a      	ldr	r3, [pc, #104]	; (80968 <xQueueGenericSend+0x1e4>)
   808fe:	4798      	blx	r3
   80900:	e75d      	b.n	807be <xQueueGenericSend+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80902:	4620      	mov	r0, r4
   80904:	4b1d      	ldr	r3, [pc, #116]	; (8097c <xQueueGenericSend+0x1f8>)
   80906:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80908:	4b1d      	ldr	r3, [pc, #116]	; (80980 <xQueueGenericSend+0x1fc>)
   8090a:	4798      	blx	r3
   8090c:	e757      	b.n	807be <xQueueGenericSend+0x3a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   8090e:	4620      	mov	r0, r4
   80910:	4b1a      	ldr	r3, [pc, #104]	; (8097c <xQueueGenericSend+0x1f8>)
   80912:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80914:	4b1a      	ldr	r3, [pc, #104]	; (80980 <xQueueGenericSend+0x1fc>)
   80916:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
   80918:	4620      	mov	r0, r4
   8091a:	4f14      	ldr	r7, [pc, #80]	; (8096c <xQueueGenericSend+0x1e8>)
   8091c:	47b8      	blx	r7
   8091e:	4e0c      	ldr	r6, [pc, #48]	; (80950 <xQueueGenericSend+0x1cc>)
   80920:	5c35      	ldrb	r5, [r6, r0]
   80922:	3548      	adds	r5, #72	; 0x48
   80924:	b2ed      	uxtb	r5, r5
   80926:	4620      	mov	r0, r4
   80928:	47b8      	blx	r7
   8092a:	5c36      	ldrb	r6, [r6, r0]
   8092c:	4620      	mov	r0, r4
   8092e:	4b09      	ldr	r3, [pc, #36]	; (80954 <xQueueGenericSend+0x1d0>)
   80930:	4798      	blx	r3
   80932:	4602      	mov	r2, r0
   80934:	4631      	mov	r1, r6
   80936:	4628      	mov	r0, r5
   80938:	4b07      	ldr	r3, [pc, #28]	; (80958 <xQueueGenericSend+0x1d4>)
   8093a:	4798      	blx	r3
			return errQUEUE_FULL;
   8093c:	2000      	movs	r0, #0
		}
	}
}
   8093e:	b007      	add	sp, #28
   80940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80944:	000802b9 	.word	0x000802b9
   80948:	000802c9 	.word	0x000802c9
   8094c:	000802e9 	.word	0x000802e9
   80950:	20070140 	.word	0x20070140
   80954:	000830e9 	.word	0x000830e9
   80958:	00082b99 	.word	0x00082b99
   8095c:	00082f19 	.word	0x00082f19
   80960:	0008051d 	.word	0x0008051d
   80964:	000815dd 	.word	0x000815dd
   80968:	000802a9 	.word	0x000802a9
   8096c:	000830f5 	.word	0x000830f5
   80970:	000810b9 	.word	0x000810b9
   80974:	00081699 	.word	0x00081699
   80978:	0008150d 	.word	0x0008150d
   8097c:	000805a9 	.word	0x000805a9
   80980:	00081245 	.word	0x00081245
   80984:	00081671 	.word	0x00081671

00080988 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8098c:	b083      	sub	sp, #12
   8098e:	9301      	str	r3, [sp, #4]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80990:	b918      	cbnz	r0, 8099a <xQueueGenericSendFromISR+0x12>
   80992:	4b38      	ldr	r3, [pc, #224]	; (80a74 <xQueueGenericSendFromISR+0xec>)
   80994:	4798      	blx	r3
   80996:	bf00      	nop
   80998:	e7fd      	b.n	80996 <xQueueGenericSendFromISR+0xe>
   8099a:	4689      	mov	r9, r1
   8099c:	4690      	mov	r8, r2
   8099e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   809a0:	b929      	cbnz	r1, 809ae <xQueueGenericSendFromISR+0x26>
   809a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   809a4:	b11b      	cbz	r3, 809ae <xQueueGenericSendFromISR+0x26>
   809a6:	4b33      	ldr	r3, [pc, #204]	; (80a74 <xQueueGenericSendFromISR+0xec>)
   809a8:	4798      	blx	r3
   809aa:	bf00      	nop
   809ac:	e7fd      	b.n	809aa <xQueueGenericSendFromISR+0x22>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   809ae:	4b31      	ldr	r3, [pc, #196]	; (80a74 <xQueueGenericSendFromISR+0xec>)
   809b0:	4798      	blx	r3
   809b2:	9000      	str	r0, [sp, #0]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   809b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   809b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809b8:	429a      	cmp	r2, r3
   809ba:	d23b      	bcs.n	80a34 <xQueueGenericSendFromISR+0xac>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   809bc:	4620      	mov	r0, r4
   809be:	4f2e      	ldr	r7, [pc, #184]	; (80a78 <xQueueGenericSendFromISR+0xf0>)
   809c0:	47b8      	blx	r7
   809c2:	4e2e      	ldr	r6, [pc, #184]	; (80a7c <xQueueGenericSendFromISR+0xf4>)
   809c4:	5c35      	ldrb	r5, [r6, r0]
   809c6:	3530      	adds	r5, #48	; 0x30
   809c8:	b2ed      	uxtb	r5, r5
   809ca:	4620      	mov	r0, r4
   809cc:	47b8      	blx	r7
   809ce:	f816 b000 	ldrb.w	fp, [r6, r0]
   809d2:	4620      	mov	r0, r4
   809d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80a90 <xQueueGenericSendFromISR+0x108>
   809d8:	47d0      	blx	sl
   809da:	4602      	mov	r2, r0
   809dc:	4659      	mov	r1, fp
   809de:	4628      	mov	r0, r5
   809e0:	4b27      	ldr	r3, [pc, #156]	; (80a80 <xQueueGenericSendFromISR+0xf8>)
   809e2:	4798      	blx	r3
   809e4:	4620      	mov	r0, r4
   809e6:	47b8      	blx	r7
   809e8:	5c35      	ldrb	r5, [r6, r0]
   809ea:	4620      	mov	r0, r4
   809ec:	47d0      	blx	sl
   809ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   809f0:	3201      	adds	r2, #1
   809f2:	b2d2      	uxtb	r2, r2
   809f4:	4601      	mov	r1, r0
   809f6:	4628      	mov	r0, r5
   809f8:	4b22      	ldr	r3, [pc, #136]	; (80a84 <xQueueGenericSendFromISR+0xfc>)
   809fa:	4798      	blx	r3

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   809fc:	9a01      	ldr	r2, [sp, #4]
   809fe:	4649      	mov	r1, r9
   80a00:	4620      	mov	r0, r4
   80a02:	4b21      	ldr	r3, [pc, #132]	; (80a88 <xQueueGenericSendFromISR+0x100>)
   80a04:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80a06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a08:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a0c:	d10d      	bne.n	80a2a <xQueueGenericSendFromISR+0xa2>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a10:	b323      	cbz	r3, 80a5c <xQueueGenericSendFromISR+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80a12:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a16:	4b1d      	ldr	r3, [pc, #116]	; (80a8c <xQueueGenericSendFromISR+0x104>)
   80a18:	4798      	blx	r3
   80a1a:	b308      	cbz	r0, 80a60 <xQueueGenericSendFromISR+0xd8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80a1c:	f1b8 0f00 	cmp.w	r8, #0
   80a20:	d020      	beq.n	80a64 <xQueueGenericSendFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80a22:	2401      	movs	r4, #1
   80a24:	f8c8 4000 	str.w	r4, [r8]
   80a28:	e01d      	b.n	80a66 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80a2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a2c:	3301      	adds	r3, #1
   80a2e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80a30:	2401      	movs	r4, #1
   80a32:	e018      	b.n	80a66 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   80a34:	4620      	mov	r0, r4
   80a36:	4f10      	ldr	r7, [pc, #64]	; (80a78 <xQueueGenericSendFromISR+0xf0>)
   80a38:	47b8      	blx	r7
   80a3a:	4e10      	ldr	r6, [pc, #64]	; (80a7c <xQueueGenericSendFromISR+0xf4>)
   80a3c:	5c35      	ldrb	r5, [r6, r0]
   80a3e:	3558      	adds	r5, #88	; 0x58
   80a40:	b2ed      	uxtb	r5, r5
   80a42:	4620      	mov	r0, r4
   80a44:	47b8      	blx	r7
   80a46:	5c36      	ldrb	r6, [r6, r0]
   80a48:	4620      	mov	r0, r4
   80a4a:	4b11      	ldr	r3, [pc, #68]	; (80a90 <xQueueGenericSendFromISR+0x108>)
   80a4c:	4798      	blx	r3
   80a4e:	4602      	mov	r2, r0
   80a50:	4631      	mov	r1, r6
   80a52:	4628      	mov	r0, r5
   80a54:	4b0a      	ldr	r3, [pc, #40]	; (80a80 <xQueueGenericSendFromISR+0xf8>)
   80a56:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   80a58:	2400      	movs	r4, #0
   80a5a:	e004      	b.n	80a66 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80a5c:	2401      	movs	r4, #1
   80a5e:	e002      	b.n	80a66 <xQueueGenericSendFromISR+0xde>
   80a60:	2401      	movs	r4, #1
   80a62:	e000      	b.n	80a66 <xQueueGenericSendFromISR+0xde>
   80a64:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80a66:	9800      	ldr	r0, [sp, #0]
   80a68:	4b0a      	ldr	r3, [pc, #40]	; (80a94 <xQueueGenericSendFromISR+0x10c>)
   80a6a:	4798      	blx	r3

	return xReturn;
}
   80a6c:	4620      	mov	r0, r4
   80a6e:	b003      	add	sp, #12
   80a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a74:	000802b9 	.word	0x000802b9
   80a78:	000830f5 	.word	0x000830f5
   80a7c:	20070140 	.word	0x20070140
   80a80:	00082b99 	.word	0x00082b99
   80a84:	00082f19 	.word	0x00082f19
   80a88:	0008051d 	.word	0x0008051d
   80a8c:	000815dd 	.word	0x000815dd
   80a90:	000830e9 	.word	0x000830e9
   80a94:	000802e1 	.word	0x000802e1

00080a98 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a9c:	b087      	sub	sp, #28
   80a9e:	9100      	str	r1, [sp, #0]
   80aa0:	9203      	str	r2, [sp, #12]
   80aa2:	9302      	str	r3, [sp, #8]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80aa4:	b918      	cbnz	r0, 80aae <xQueueGenericReceive+0x16>
   80aa6:	4b8c      	ldr	r3, [pc, #560]	; (80cd8 <xQueueGenericReceive+0x240>)
   80aa8:	4798      	blx	r3
   80aaa:	bf00      	nop
   80aac:	e7fd      	b.n	80aaa <xQueueGenericReceive+0x12>
   80aae:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ab0:	9b00      	ldr	r3, [sp, #0]
   80ab2:	b92b      	cbnz	r3, 80ac0 <xQueueGenericReceive+0x28>
   80ab4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80ab6:	b133      	cbz	r3, 80ac6 <xQueueGenericReceive+0x2e>
   80ab8:	4b87      	ldr	r3, [pc, #540]	; (80cd8 <xQueueGenericReceive+0x240>)
   80aba:	4798      	blx	r3
   80abc:	bf00      	nop
   80abe:	e7fd      	b.n	80abc <xQueueGenericReceive+0x24>
   80ac0:	f04f 0800 	mov.w	r8, #0
   80ac4:	e001      	b.n	80aca <xQueueGenericReceive+0x32>
   80ac6:	f04f 0800 	mov.w	r8, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80aca:	4e84      	ldr	r6, [pc, #528]	; (80cdc <xQueueGenericReceive+0x244>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80acc:	f8df b25c 	ldr.w	fp, [pc, #604]	; 80d2c <xQueueGenericReceive+0x294>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80ad0:	4d83      	ldr	r5, [pc, #524]	; (80ce0 <xQueueGenericReceive+0x248>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80ad2:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80ad6:	2b00      	cmp	r3, #0
   80ad8:	d067      	beq.n	80baa <xQueueGenericReceive+0x112>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80ada:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80adc:	9900      	ldr	r1, [sp, #0]
   80ade:	4620      	mov	r0, r4
   80ae0:	4b80      	ldr	r3, [pc, #512]	; (80ce4 <xQueueGenericReceive+0x24c>)
   80ae2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80ae4:	9b02      	ldr	r3, [sp, #8]
   80ae6:	2b00      	cmp	r3, #0
   80ae8:	d13e      	bne.n	80b68 <xQueueGenericReceive+0xd0>
				{
					traceQUEUE_RECEIVE( pxQueue );
   80aea:	4620      	mov	r0, r4
   80aec:	4f7e      	ldr	r7, [pc, #504]	; (80ce8 <xQueueGenericReceive+0x250>)
   80aee:	47b8      	blx	r7
   80af0:	4e7e      	ldr	r6, [pc, #504]	; (80cec <xQueueGenericReceive+0x254>)
   80af2:	5c35      	ldrb	r5, [r6, r0]
   80af4:	3528      	adds	r5, #40	; 0x28
   80af6:	b2ed      	uxtb	r5, r5
   80af8:	4620      	mov	r0, r4
   80afa:	47b8      	blx	r7
   80afc:	f816 9000 	ldrb.w	r9, [r6, r0]
   80b00:	4620      	mov	r0, r4
   80b02:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80d0c <xQueueGenericReceive+0x274>
   80b06:	47c0      	blx	r8
   80b08:	4602      	mov	r2, r0
   80b0a:	4649      	mov	r1, r9
   80b0c:	4628      	mov	r0, r5
   80b0e:	4b78      	ldr	r3, [pc, #480]	; (80cf0 <xQueueGenericReceive+0x258>)
   80b10:	4798      	blx	r3
   80b12:	4620      	mov	r0, r4
   80b14:	47b8      	blx	r7
   80b16:	5c35      	ldrb	r5, [r6, r0]
   80b18:	4620      	mov	r0, r4
   80b1a:	47c0      	blx	r8
   80b1c:	4680      	mov	r8, r0
   80b1e:	4620      	mov	r0, r4
   80b20:	47b8      	blx	r7
   80b22:	5c33      	ldrb	r3, [r6, r0]
   80b24:	2b02      	cmp	r3, #2
   80b26:	d105      	bne.n	80b34 <xQueueGenericReceive+0x9c>
   80b28:	4b72      	ldr	r3, [pc, #456]	; (80cf4 <xQueueGenericReceive+0x25c>)
   80b2a:	4798      	blx	r3
   80b2c:	4b72      	ldr	r3, [pc, #456]	; (80cf8 <xQueueGenericReceive+0x260>)
   80b2e:	4798      	blx	r3
   80b30:	4602      	mov	r2, r0
   80b32:	e002      	b.n	80b3a <xQueueGenericReceive+0xa2>
   80b34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80b36:	3a01      	subs	r2, #1
   80b38:	b2d2      	uxtb	r2, r2
   80b3a:	4641      	mov	r1, r8
   80b3c:	4628      	mov	r0, r5
   80b3e:	4b6f      	ldr	r3, [pc, #444]	; (80cfc <xQueueGenericReceive+0x264>)
   80b40:	4798      	blx	r3

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b44:	3b01      	subs	r3, #1
   80b46:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b48:	6823      	ldr	r3, [r4, #0]
   80b4a:	b913      	cbnz	r3, 80b52 <xQueueGenericReceive+0xba>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80b4c:	4b6c      	ldr	r3, [pc, #432]	; (80d00 <xQueueGenericReceive+0x268>)
   80b4e:	4798      	blx	r3
   80b50:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b52:	6923      	ldr	r3, [r4, #16]
   80b54:	b32b      	cbz	r3, 80ba2 <xQueueGenericReceive+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80b56:	f104 0010 	add.w	r0, r4, #16
   80b5a:	4b6a      	ldr	r3, [pc, #424]	; (80d04 <xQueueGenericReceive+0x26c>)
   80b5c:	4798      	blx	r3
   80b5e:	2801      	cmp	r0, #1
   80b60:	d11f      	bne.n	80ba2 <xQueueGenericReceive+0x10a>
						{
							portYIELD_WITHIN_API();
   80b62:	4b69      	ldr	r3, [pc, #420]	; (80d08 <xQueueGenericReceive+0x270>)
   80b64:	4798      	blx	r3
   80b66:	e01c      	b.n	80ba2 <xQueueGenericReceive+0x10a>
						}
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
   80b68:	4620      	mov	r0, r4
   80b6a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80ce8 <xQueueGenericReceive+0x250>
   80b6e:	47c0      	blx	r8
   80b70:	4e5e      	ldr	r6, [pc, #376]	; (80cec <xQueueGenericReceive+0x254>)
   80b72:	5c35      	ldrb	r5, [r6, r0]
   80b74:	3578      	adds	r5, #120	; 0x78
   80b76:	b2ed      	uxtb	r5, r5
   80b78:	4620      	mov	r0, r4
   80b7a:	47c0      	blx	r8
   80b7c:	5c36      	ldrb	r6, [r6, r0]
   80b7e:	4620      	mov	r0, r4
   80b80:	4b62      	ldr	r3, [pc, #392]	; (80d0c <xQueueGenericReceive+0x274>)
   80b82:	4798      	blx	r3
   80b84:	4602      	mov	r2, r0
   80b86:	4631      	mov	r1, r6
   80b88:	4628      	mov	r0, r5
   80b8a:	4b59      	ldr	r3, [pc, #356]	; (80cf0 <xQueueGenericReceive+0x258>)
   80b8c:	4798      	blx	r3

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80b8e:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b92:	b133      	cbz	r3, 80ba2 <xQueueGenericReceive+0x10a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b94:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b98:	4b5a      	ldr	r3, [pc, #360]	; (80d04 <xQueueGenericReceive+0x26c>)
   80b9a:	4798      	blx	r3
   80b9c:	b108      	cbz	r0, 80ba2 <xQueueGenericReceive+0x10a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80b9e:	4b5a      	ldr	r3, [pc, #360]	; (80d08 <xQueueGenericReceive+0x270>)
   80ba0:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80ba2:	4b4f      	ldr	r3, [pc, #316]	; (80ce0 <xQueueGenericReceive+0x248>)
   80ba4:	4798      	blx	r3
				return pdPASS;
   80ba6:	2001      	movs	r0, #1
   80ba8:	e092      	b.n	80cd0 <xQueueGenericReceive+0x238>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80baa:	9b03      	ldr	r3, [sp, #12]
   80bac:	b9ab      	cbnz	r3, 80bda <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80bae:	4b4c      	ldr	r3, [pc, #304]	; (80ce0 <xQueueGenericReceive+0x248>)
   80bb0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   80bb2:	4620      	mov	r0, r4
   80bb4:	4f4c      	ldr	r7, [pc, #304]	; (80ce8 <xQueueGenericReceive+0x250>)
   80bb6:	47b8      	blx	r7
   80bb8:	4e4c      	ldr	r6, [pc, #304]	; (80cec <xQueueGenericReceive+0x254>)
   80bba:	5c35      	ldrb	r5, [r6, r0]
   80bbc:	3550      	adds	r5, #80	; 0x50
   80bbe:	b2ed      	uxtb	r5, r5
   80bc0:	4620      	mov	r0, r4
   80bc2:	47b8      	blx	r7
   80bc4:	5c36      	ldrb	r6, [r6, r0]
   80bc6:	4620      	mov	r0, r4
   80bc8:	4b50      	ldr	r3, [pc, #320]	; (80d0c <xQueueGenericReceive+0x274>)
   80bca:	4798      	blx	r3
   80bcc:	4602      	mov	r2, r0
   80bce:	4631      	mov	r1, r6
   80bd0:	4628      	mov	r0, r5
   80bd2:	4b47      	ldr	r3, [pc, #284]	; (80cf0 <xQueueGenericReceive+0x258>)
   80bd4:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80bd6:	2000      	movs	r0, #0
   80bd8:	e07a      	b.n	80cd0 <xQueueGenericReceive+0x238>
				}
				else if( xEntryTimeSet == pdFALSE )
   80bda:	f1b8 0f00 	cmp.w	r8, #0
   80bde:	d103      	bne.n	80be8 <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80be0:	a804      	add	r0, sp, #16
   80be2:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80be4:	f04f 0801 	mov.w	r8, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80be8:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80bea:	4b49      	ldr	r3, [pc, #292]	; (80d10 <xQueueGenericReceive+0x278>)
   80bec:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80bee:	47b0      	blx	r6
   80bf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bf6:	bf04      	itt	eq
   80bf8:	2300      	moveq	r3, #0
   80bfa:	6463      	streq	r3, [r4, #68]	; 0x44
   80bfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c02:	bf04      	itt	eq
   80c04:	2300      	moveq	r3, #0
   80c06:	64a3      	streq	r3, [r4, #72]	; 0x48
   80c08:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c0a:	a903      	add	r1, sp, #12
   80c0c:	a804      	add	r0, sp, #16
   80c0e:	4b41      	ldr	r3, [pc, #260]	; (80d14 <xQueueGenericReceive+0x27c>)
   80c10:	4798      	blx	r3
   80c12:	2800      	cmp	r0, #0
   80c14:	d144      	bne.n	80ca0 <xQueueGenericReceive+0x208>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80c16:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80c18:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80c1a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80c1c:	2f00      	cmp	r7, #0
   80c1e:	d139      	bne.n	80c94 <xQueueGenericReceive+0x1fc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   80c20:	4620      	mov	r0, r4
   80c22:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80ce8 <xQueueGenericReceive+0x250>
   80c26:	47c8      	blx	r9
   80c28:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80cec <xQueueGenericReceive+0x254>
   80c2c:	f81a 7000 	ldrb.w	r7, [sl, r0]
   80c30:	3768      	adds	r7, #104	; 0x68
   80c32:	b2ff      	uxtb	r7, r7
   80c34:	4620      	mov	r0, r4
   80c36:	47c8      	blx	r9
   80c38:	f81a 3000 	ldrb.w	r3, [sl, r0]
   80c3c:	9301      	str	r3, [sp, #4]
   80c3e:	4620      	mov	r0, r4
   80c40:	4b32      	ldr	r3, [pc, #200]	; (80d0c <xQueueGenericReceive+0x274>)
   80c42:	4798      	blx	r3
   80c44:	4602      	mov	r2, r0
   80c46:	9901      	ldr	r1, [sp, #4]
   80c48:	4638      	mov	r0, r7
   80c4a:	4b29      	ldr	r3, [pc, #164]	; (80cf0 <xQueueGenericReceive+0x258>)
   80c4c:	4798      	blx	r3
   80c4e:	4620      	mov	r0, r4
   80c50:	47c8      	blx	r9
   80c52:	f81a 3000 	ldrb.w	r3, [sl, r0]
   80c56:	2b02      	cmp	r3, #2
   80c58:	d005      	beq.n	80c66 <xQueueGenericReceive+0x1ce>
   80c5a:	4b26      	ldr	r3, [pc, #152]	; (80cf4 <xQueueGenericReceive+0x25c>)
   80c5c:	4798      	blx	r3
   80c5e:	4b26      	ldr	r3, [pc, #152]	; (80cf8 <xQueueGenericReceive+0x260>)
   80c60:	4798      	blx	r3
   80c62:	4b2d      	ldr	r3, [pc, #180]	; (80d18 <xQueueGenericReceive+0x280>)
   80c64:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80c66:	6823      	ldr	r3, [r4, #0]
   80c68:	b923      	cbnz	r3, 80c74 <xQueueGenericReceive+0x1dc>
					{
						portENTER_CRITICAL();
   80c6a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80c6c:	6860      	ldr	r0, [r4, #4]
   80c6e:	4b2b      	ldr	r3, [pc, #172]	; (80d1c <xQueueGenericReceive+0x284>)
   80c70:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80c72:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80c74:	9903      	ldr	r1, [sp, #12]
   80c76:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c7a:	4b29      	ldr	r3, [pc, #164]	; (80d20 <xQueueGenericReceive+0x288>)
   80c7c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80c7e:	4620      	mov	r0, r4
   80c80:	4b28      	ldr	r3, [pc, #160]	; (80d24 <xQueueGenericReceive+0x28c>)
   80c82:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80c84:	4b28      	ldr	r3, [pc, #160]	; (80d28 <xQueueGenericReceive+0x290>)
   80c86:	4798      	blx	r3
   80c88:	2800      	cmp	r0, #0
   80c8a:	f47f af22 	bne.w	80ad2 <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
   80c8e:	4b1e      	ldr	r3, [pc, #120]	; (80d08 <xQueueGenericReceive+0x270>)
   80c90:	4798      	blx	r3
   80c92:	e71e      	b.n	80ad2 <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80c94:	4620      	mov	r0, r4
   80c96:	4b23      	ldr	r3, [pc, #140]	; (80d24 <xQueueGenericReceive+0x28c>)
   80c98:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80c9a:	4b23      	ldr	r3, [pc, #140]	; (80d28 <xQueueGenericReceive+0x290>)
   80c9c:	4798      	blx	r3
   80c9e:	e718      	b.n	80ad2 <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80ca0:	4620      	mov	r0, r4
   80ca2:	4b20      	ldr	r3, [pc, #128]	; (80d24 <xQueueGenericReceive+0x28c>)
   80ca4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80ca6:	4b20      	ldr	r3, [pc, #128]	; (80d28 <xQueueGenericReceive+0x290>)
   80ca8:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
   80caa:	4620      	mov	r0, r4
   80cac:	4f0e      	ldr	r7, [pc, #56]	; (80ce8 <xQueueGenericReceive+0x250>)
   80cae:	47b8      	blx	r7
   80cb0:	4e0e      	ldr	r6, [pc, #56]	; (80cec <xQueueGenericReceive+0x254>)
   80cb2:	5c35      	ldrb	r5, [r6, r0]
   80cb4:	3550      	adds	r5, #80	; 0x50
   80cb6:	b2ed      	uxtb	r5, r5
   80cb8:	4620      	mov	r0, r4
   80cba:	47b8      	blx	r7
   80cbc:	5c36      	ldrb	r6, [r6, r0]
   80cbe:	4620      	mov	r0, r4
   80cc0:	4b12      	ldr	r3, [pc, #72]	; (80d0c <xQueueGenericReceive+0x274>)
   80cc2:	4798      	blx	r3
   80cc4:	4602      	mov	r2, r0
   80cc6:	4631      	mov	r1, r6
   80cc8:	4628      	mov	r0, r5
   80cca:	4b09      	ldr	r3, [pc, #36]	; (80cf0 <xQueueGenericReceive+0x258>)
   80ccc:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80cce:	2000      	movs	r0, #0
		}
	}
}
   80cd0:	b007      	add	sp, #28
   80cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cd6:	bf00      	nop
   80cd8:	000802b9 	.word	0x000802b9
   80cdc:	000802c9 	.word	0x000802c9
   80ce0:	000802e9 	.word	0x000802e9
   80ce4:	00080581 	.word	0x00080581
   80ce8:	000830f5 	.word	0x000830f5
   80cec:	20070140 	.word	0x20070140
   80cf0:	00082b99 	.word	0x00082b99
   80cf4:	00083111 	.word	0x00083111
   80cf8:	00083101 	.word	0x00083101
   80cfc:	00082f19 	.word	0x00082f19
   80d00:	00081735 	.word	0x00081735
   80d04:	000815dd 	.word	0x000815dd
   80d08:	000802a9 	.word	0x000802a9
   80d0c:	000830e9 	.word	0x000830e9
   80d10:	000810b9 	.word	0x000810b9
   80d14:	00081699 	.word	0x00081699
   80d18:	000830a9 	.word	0x000830a9
   80d1c:	00081761 	.word	0x00081761
   80d20:	0008150d 	.word	0x0008150d
   80d24:	000805a9 	.word	0x000805a9
   80d28:	00081245 	.word	0x00081245
   80d2c:	00081671 	.word	0x00081671

00080d30 <ucQueueGetQueueNumber>:
#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
		return pxQueue->ucQueueNumber;
	}
   80d30:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   80d34:	4770      	bx	lr
   80d36:	bf00      	nop

00080d38 <ucQueueGetQueueType>:
#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
		return pxQueue->ucQueueType;
	}
   80d38:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop

00080d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80d40:	b538      	push	{r3, r4, r5, lr}
   80d42:	4604      	mov	r4, r0
   80d44:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80d46:	4b0d      	ldr	r3, [pc, #52]	; (80d7c <vQueueWaitForMessageRestricted+0x3c>)
   80d48:	4798      	blx	r3
   80d4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d50:	bf04      	itt	eq
   80d52:	2300      	moveq	r3, #0
   80d54:	6463      	streq	r3, [r4, #68]	; 0x44
   80d56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d58:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d5c:	bf04      	itt	eq
   80d5e:	2300      	moveq	r3, #0
   80d60:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d62:	4b07      	ldr	r3, [pc, #28]	; (80d80 <vQueueWaitForMessageRestricted+0x40>)
   80d64:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80d66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d68:	b923      	cbnz	r3, 80d74 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80d6a:	4629      	mov	r1, r5
   80d6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d70:	4b04      	ldr	r3, [pc, #16]	; (80d84 <vQueueWaitForMessageRestricted+0x44>)
   80d72:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80d74:	4620      	mov	r0, r4
   80d76:	4b04      	ldr	r3, [pc, #16]	; (80d88 <vQueueWaitForMessageRestricted+0x48>)
   80d78:	4798      	blx	r3
   80d7a:	bd38      	pop	{r3, r4, r5, pc}
   80d7c:	000802c9 	.word	0x000802c9
   80d80:	000802e9 	.word	0x000802e9
   80d84:	0008156d 	.word	0x0008156d
   80d88:	000805a9 	.word	0x000805a9

00080d8c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80d8c:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80d8e:	4b0f      	ldr	r3, [pc, #60]	; (80dcc <prvAddCurrentTaskToDelayedList+0x40>)
   80d90:	681b      	ldr	r3, [r3, #0]
   80d92:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80d94:	4b0e      	ldr	r3, [pc, #56]	; (80dd0 <prvAddCurrentTaskToDelayedList+0x44>)
   80d96:	681b      	ldr	r3, [r3, #0]
   80d98:	4298      	cmp	r0, r3
   80d9a:	d207      	bcs.n	80dac <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80d9c:	4b0d      	ldr	r3, [pc, #52]	; (80dd4 <prvAddCurrentTaskToDelayedList+0x48>)
   80d9e:	6818      	ldr	r0, [r3, #0]
   80da0:	4b0a      	ldr	r3, [pc, #40]	; (80dcc <prvAddCurrentTaskToDelayedList+0x40>)
   80da2:	6819      	ldr	r1, [r3, #0]
   80da4:	3104      	adds	r1, #4
   80da6:	4b0c      	ldr	r3, [pc, #48]	; (80dd8 <prvAddCurrentTaskToDelayedList+0x4c>)
   80da8:	4798      	blx	r3
   80daa:	bd10      	pop	{r4, pc}
   80dac:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80dae:	4b0b      	ldr	r3, [pc, #44]	; (80ddc <prvAddCurrentTaskToDelayedList+0x50>)
   80db0:	6818      	ldr	r0, [r3, #0]
   80db2:	4b06      	ldr	r3, [pc, #24]	; (80dcc <prvAddCurrentTaskToDelayedList+0x40>)
   80db4:	6819      	ldr	r1, [r3, #0]
   80db6:	3104      	adds	r1, #4
   80db8:	4b07      	ldr	r3, [pc, #28]	; (80dd8 <prvAddCurrentTaskToDelayedList+0x4c>)
   80dba:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80dbc:	4b08      	ldr	r3, [pc, #32]	; (80de0 <prvAddCurrentTaskToDelayedList+0x54>)
   80dbe:	681b      	ldr	r3, [r3, #0]
   80dc0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80dc2:	bf3c      	itt	cc
   80dc4:	4b06      	ldrcc	r3, [pc, #24]	; (80de0 <prvAddCurrentTaskToDelayedList+0x54>)
   80dc6:	601c      	strcc	r4, [r3, #0]
   80dc8:	bd10      	pop	{r4, pc}
   80dca:	bf00      	nop
   80dcc:	2007aa8c 	.word	0x2007aa8c
   80dd0:	2007a9e4 	.word	0x2007a9e4
   80dd4:	2007aa4c 	.word	0x2007aa4c
   80dd8:	000801f5 	.word	0x000801f5
   80ddc:	2007aa64 	.word	0x2007aa64
   80de0:	20070134 	.word	0x20070134

00080de4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80de8:	b083      	sub	sp, #12
   80dea:	9301      	str	r3, [sp, #4]
   80dec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   80dee:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   80df2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80df4:	9000      	str	r0, [sp, #0]
   80df6:	b918      	cbnz	r0, 80e00 <xTaskGenericCreate+0x1c>
   80df8:	4b75      	ldr	r3, [pc, #468]	; (80fd0 <xTaskGenericCreate+0x1ec>)
   80dfa:	4798      	blx	r3
   80dfc:	bf00      	nop
   80dfe:	e7fd      	b.n	80dfc <xTaskGenericCreate+0x18>
   80e00:	4689      	mov	r9, r1
   80e02:	4615      	mov	r5, r2
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80e04:	2f04      	cmp	r7, #4
   80e06:	d903      	bls.n	80e10 <xTaskGenericCreate+0x2c>
   80e08:	4b71      	ldr	r3, [pc, #452]	; (80fd0 <xTaskGenericCreate+0x1ec>)
   80e0a:	4798      	blx	r3
   80e0c:	bf00      	nop
   80e0e:	e7fd      	b.n	80e0c <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80e10:	204c      	movs	r0, #76	; 0x4c
   80e12:	4b70      	ldr	r3, [pc, #448]	; (80fd4 <xTaskGenericCreate+0x1f0>)
   80e14:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80e16:	4604      	mov	r4, r0
   80e18:	2800      	cmp	r0, #0
   80e1a:	f000 80a4 	beq.w	80f66 <xTaskGenericCreate+0x182>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80e1e:	2e00      	cmp	r6, #0
   80e20:	f040 809e 	bne.w	80f60 <xTaskGenericCreate+0x17c>
   80e24:	00a8      	lsls	r0, r5, #2
   80e26:	4b6b      	ldr	r3, [pc, #428]	; (80fd4 <xTaskGenericCreate+0x1f0>)
   80e28:	4798      	blx	r3
   80e2a:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80e2c:	b918      	cbnz	r0, 80e36 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80e2e:	4620      	mov	r0, r4
   80e30:	4b69      	ldr	r3, [pc, #420]	; (80fd8 <xTaskGenericCreate+0x1f4>)
   80e32:	4798      	blx	r3
   80e34:	e097      	b.n	80f66 <xTaskGenericCreate+0x182>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80e36:	00aa      	lsls	r2, r5, #2
   80e38:	21a5      	movs	r1, #165	; 0xa5
   80e3a:	4b68      	ldr	r3, [pc, #416]	; (80fdc <xTaskGenericCreate+0x1f8>)
   80e3c:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80e3e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80e42:	3d01      	subs	r5, #1
   80e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80e46:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   80e4a:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80e4e:	f104 0834 	add.w	r8, r4, #52	; 0x34
   80e52:	220a      	movs	r2, #10
   80e54:	4649      	mov	r1, r9
   80e56:	4640      	mov	r0, r8
   80e58:	4b61      	ldr	r3, [pc, #388]	; (80fe0 <xTaskGenericCreate+0x1fc>)
   80e5a:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80e5c:	2300      	movs	r3, #0
   80e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80e62:	463e      	mov	r6, r7
   80e64:	2f04      	cmp	r7, #4
   80e66:	bf28      	it	cs
   80e68:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80e6a:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80e6c:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80e6e:	f104 0904 	add.w	r9, r4, #4
   80e72:	4648      	mov	r0, r9
   80e74:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 81048 <xTaskGenericCreate+0x264>
   80e78:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80e7a:	f104 0018 	add.w	r0, r4, #24
   80e7e:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80e80:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80e82:	f1c6 0605 	rsb	r6, r6, #5
   80e86:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80e88:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80e8a:	9a01      	ldr	r2, [sp, #4]
   80e8c:	9900      	ldr	r1, [sp, #0]
   80e8e:	4628      	mov	r0, r5
   80e90:	4b54      	ldr	r3, [pc, #336]	; (80fe4 <xTaskGenericCreate+0x200>)
   80e92:	4798      	blx	r3
   80e94:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80e96:	f010 0f07 	tst.w	r0, #7
   80e9a:	d003      	beq.n	80ea4 <xTaskGenericCreate+0xc0>
   80e9c:	4b4c      	ldr	r3, [pc, #304]	; (80fd0 <xTaskGenericCreate+0x1ec>)
   80e9e:	4798      	blx	r3
   80ea0:	bf00      	nop
   80ea2:	e7fd      	b.n	80ea0 <xTaskGenericCreate+0xbc>

		if( ( void * ) pxCreatedTask != NULL )
   80ea4:	f1ba 0f00 	cmp.w	sl, #0
   80ea8:	d001      	beq.n	80eae <xTaskGenericCreate+0xca>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80eaa:	f8ca 4000 	str.w	r4, [sl]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80eae:	4b4e      	ldr	r3, [pc, #312]	; (80fe8 <xTaskGenericCreate+0x204>)
   80eb0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80eb2:	4a4e      	ldr	r2, [pc, #312]	; (80fec <xTaskGenericCreate+0x208>)
   80eb4:	6813      	ldr	r3, [r2, #0]
   80eb6:	3301      	adds	r3, #1
   80eb8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80eba:	4b4d      	ldr	r3, [pc, #308]	; (80ff0 <xTaskGenericCreate+0x20c>)
   80ebc:	681b      	ldr	r3, [r3, #0]
   80ebe:	bb0b      	cbnz	r3, 80f04 <xTaskGenericCreate+0x120>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80ec0:	4b4b      	ldr	r3, [pc, #300]	; (80ff0 <xTaskGenericCreate+0x20c>)
   80ec2:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80ec4:	6813      	ldr	r3, [r2, #0]
   80ec6:	2b01      	cmp	r3, #1
   80ec8:	d126      	bne.n	80f18 <xTaskGenericCreate+0x134>
   80eca:	4d4a      	ldr	r5, [pc, #296]	; (80ff4 <xTaskGenericCreate+0x210>)
   80ecc:	f105 0a64 	add.w	sl, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80ed0:	4e49      	ldr	r6, [pc, #292]	; (80ff8 <xTaskGenericCreate+0x214>)
   80ed2:	4628      	mov	r0, r5
   80ed4:	47b0      	blx	r6
   80ed6:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80ed8:	4555      	cmp	r5, sl
   80eda:	d1fa      	bne.n	80ed2 <xTaskGenericCreate+0xee>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80edc:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8104c <xTaskGenericCreate+0x268>
   80ee0:	4650      	mov	r0, sl
   80ee2:	4d45      	ldr	r5, [pc, #276]	; (80ff8 <xTaskGenericCreate+0x214>)
   80ee4:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80ee6:	4e45      	ldr	r6, [pc, #276]	; (80ffc <xTaskGenericCreate+0x218>)
   80ee8:	4630      	mov	r0, r6
   80eea:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80eec:	4844      	ldr	r0, [pc, #272]	; (81000 <xTaskGenericCreate+0x21c>)
   80eee:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80ef0:	4844      	ldr	r0, [pc, #272]	; (81004 <xTaskGenericCreate+0x220>)
   80ef2:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80ef4:	4844      	ldr	r0, [pc, #272]	; (81008 <xTaskGenericCreate+0x224>)
   80ef6:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80ef8:	4b44      	ldr	r3, [pc, #272]	; (8100c <xTaskGenericCreate+0x228>)
   80efa:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80efe:	4b44      	ldr	r3, [pc, #272]	; (81010 <xTaskGenericCreate+0x22c>)
   80f00:	601e      	str	r6, [r3, #0]
   80f02:	e009      	b.n	80f18 <xTaskGenericCreate+0x134>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80f04:	4b43      	ldr	r3, [pc, #268]	; (81014 <xTaskGenericCreate+0x230>)
   80f06:	681b      	ldr	r3, [r3, #0]
   80f08:	b933      	cbnz	r3, 80f18 <xTaskGenericCreate+0x134>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80f0a:	4b39      	ldr	r3, [pc, #228]	; (80ff0 <xTaskGenericCreate+0x20c>)
   80f0c:	681b      	ldr	r3, [r3, #0]
   80f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80f10:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   80f12:	bf24      	itt	cs
   80f14:	4b36      	ldrcs	r3, [pc, #216]	; (80ff0 <xTaskGenericCreate+0x20c>)
   80f16:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80f18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80f1a:	4a3f      	ldr	r2, [pc, #252]	; (81018 <xTaskGenericCreate+0x234>)
   80f1c:	6812      	ldr	r2, [r2, #0]
   80f1e:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80f20:	bf84      	itt	hi
   80f22:	4a3d      	ldrhi	r2, [pc, #244]	; (81018 <xTaskGenericCreate+0x234>)
   80f24:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80f26:	4a3d      	ldr	r2, [pc, #244]	; (8101c <xTaskGenericCreate+0x238>)
   80f28:	6813      	ldr	r3, [r2, #0]
   80f2a:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   80f2c:	3301      	adds	r3, #1
   80f2e:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80f30:	4620      	mov	r0, r4
   80f32:	4b3b      	ldr	r3, [pc, #236]	; (81020 <xTaskGenericCreate+0x23c>)
   80f34:	4798      	blx	r3
   80f36:	4b3b      	ldr	r3, [pc, #236]	; (81024 <xTaskGenericCreate+0x240>)
   80f38:	4798      	blx	r3
   80f3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80f3c:	4b3a      	ldr	r3, [pc, #232]	; (81028 <xTaskGenericCreate+0x244>)
   80f3e:	681b      	ldr	r3, [r3, #0]
   80f40:	4298      	cmp	r0, r3
   80f42:	d918      	bls.n	80f76 <xTaskGenericCreate+0x192>
   80f44:	4b38      	ldr	r3, [pc, #224]	; (81028 <xTaskGenericCreate+0x244>)
   80f46:	6018      	str	r0, [r3, #0]
   80f48:	e015      	b.n	80f76 <xTaskGenericCreate+0x192>
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80f4a:	4b29      	ldr	r3, [pc, #164]	; (80ff0 <xTaskGenericCreate+0x20c>)
   80f4c:	681b      	ldr	r3, [r3, #0]
   80f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80f50:	429f      	cmp	r7, r3
   80f52:	d903      	bls.n	80f5c <xTaskGenericCreate+0x178>
			{
				portYIELD_WITHIN_API();
   80f54:	4b35      	ldr	r3, [pc, #212]	; (8102c <xTaskGenericCreate+0x248>)
   80f56:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   80f58:	2001      	movs	r0, #1
   80f5a:	e036      	b.n	80fca <xTaskGenericCreate+0x1e6>
   80f5c:	2001      	movs	r0, #1
   80f5e:	e034      	b.n	80fca <xTaskGenericCreate+0x1e6>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80f60:	6306      	str	r6, [r0, #48]	; 0x30
   80f62:	4630      	mov	r0, r6
   80f64:	e767      	b.n	80e36 <xTaskGenericCreate+0x52>
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		traceTASK_CREATE_FAILED();
   80f66:	2200      	movs	r2, #0
   80f68:	2103      	movs	r1, #3
   80f6a:	2043      	movs	r0, #67	; 0x43
   80f6c:	4b30      	ldr	r3, [pc, #192]	; (81030 <xTaskGenericCreate+0x24c>)
   80f6e:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80f70:	f04f 30ff 	mov.w	r0, #4294967295
   80f74:	e029      	b.n	80fca <xTaskGenericCreate+0x1e6>
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );
   80f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f7a:	4649      	mov	r1, r9
   80f7c:	4b1d      	ldr	r3, [pc, #116]	; (80ff4 <xTaskGenericCreate+0x210>)
   80f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f82:	4b2c      	ldr	r3, [pc, #176]	; (81034 <xTaskGenericCreate+0x250>)
   80f84:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
   80f86:	2003      	movs	r0, #3
   80f88:	4b2b      	ldr	r3, [pc, #172]	; (81038 <xTaskGenericCreate+0x254>)
   80f8a:	4798      	blx	r3
   80f8c:	6460      	str	r0, [r4, #68]	; 0x44
   80f8e:	4620      	mov	r0, r4
   80f90:	4d23      	ldr	r5, [pc, #140]	; (81020 <xTaskGenericCreate+0x23c>)
   80f92:	47a8      	blx	r5
   80f94:	4642      	mov	r2, r8
   80f96:	4601      	mov	r1, r0
   80f98:	2003      	movs	r0, #3
   80f9a:	4b28      	ldr	r3, [pc, #160]	; (8103c <xTaskGenericCreate+0x258>)
   80f9c:	4798      	blx	r3
   80f9e:	4620      	mov	r0, r4
   80fa0:	47a8      	blx	r5
   80fa2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   80fa6:	4601      	mov	r1, r0
   80fa8:	2003      	movs	r0, #3
   80faa:	4b25      	ldr	r3, [pc, #148]	; (81040 <xTaskGenericCreate+0x25c>)
   80fac:	4798      	blx	r3
   80fae:	4620      	mov	r0, r4
   80fb0:	47a8      	blx	r5
   80fb2:	4602      	mov	r2, r0
   80fb4:	2103      	movs	r1, #3
   80fb6:	201b      	movs	r0, #27
   80fb8:	4b1d      	ldr	r3, [pc, #116]	; (81030 <xTaskGenericCreate+0x24c>)
   80fba:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
   80fbc:	4b21      	ldr	r3, [pc, #132]	; (81044 <xTaskGenericCreate+0x260>)
   80fbe:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   80fc0:	4b14      	ldr	r3, [pc, #80]	; (81014 <xTaskGenericCreate+0x230>)
   80fc2:	681b      	ldr	r3, [r3, #0]
   80fc4:	2b00      	cmp	r3, #0
   80fc6:	d1c0      	bne.n	80f4a <xTaskGenericCreate+0x166>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   80fc8:	2001      	movs	r0, #1
			}
		}
	}

	return xReturn;
}
   80fca:	b003      	add	sp, #12
   80fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fd0:	000802b9 	.word	0x000802b9
   80fd4:	00080411 	.word	0x00080411
   80fd8:	000804e5 	.word	0x000804e5
   80fdc:	0008386d 	.word	0x0008386d
   80fe0:	00083ac5 	.word	0x00083ac5
   80fe4:	0008026d 	.word	0x0008026d
   80fe8:	000802c9 	.word	0x000802c9
   80fec:	2007aa68 	.word	0x2007aa68
   80ff0:	2007aa8c 	.word	0x2007aa8c
   80ff4:	2007a9e8 	.word	0x2007a9e8
   80ff8:	000801b9 	.word	0x000801b9
   80ffc:	2007aab8 	.word	0x2007aab8
   81000:	2007aa6c 	.word	0x2007aa6c
   81004:	2007aa50 	.word	0x2007aa50
   81008:	2007aa90 	.word	0x2007aa90
   8100c:	2007aa64 	.word	0x2007aa64
   81010:	2007aa4c 	.word	0x2007aa4c
   81014:	2007aa80 	.word	0x2007aa80
   81018:	2007aad8 	.word	0x2007aad8
   8101c:	2007aa88 	.word	0x2007aa88
   81020:	00083101 	.word	0x00083101
   81024:	00082ae9 	.word	0x00082ae9
   81028:	2007a9dc 	.word	0x2007a9dc
   8102c:	000802a9 	.word	0x000802a9
   81030:	00082b99 	.word	0x00082b99
   81034:	000801d9 	.word	0x000801d9
   81038:	00082639 	.word	0x00082639
   8103c:	00082785 	.word	0x00082785
   81040:	00082e65 	.word	0x00082e65
   81044:	000802e9 	.word	0x000802e9
   81048:	000801d1 	.word	0x000801d1
   8104c:	2007aaa4 	.word	0x2007aaa4

00081050 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81050:	b510      	push	{r4, lr}
   81052:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81054:	2300      	movs	r3, #0
   81056:	9303      	str	r3, [sp, #12]
   81058:	9302      	str	r3, [sp, #8]
   8105a:	9301      	str	r3, [sp, #4]
   8105c:	9300      	str	r3, [sp, #0]
   8105e:	2282      	movs	r2, #130	; 0x82
   81060:	490d      	ldr	r1, [pc, #52]	; (81098 <vTaskStartScheduler+0x48>)
   81062:	480e      	ldr	r0, [pc, #56]	; (8109c <vTaskStartScheduler+0x4c>)
   81064:	4c0e      	ldr	r4, [pc, #56]	; (810a0 <vTaskStartScheduler+0x50>)
   81066:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81068:	2801      	cmp	r0, #1
   8106a:	d10e      	bne.n	8108a <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   8106c:	4b0d      	ldr	r3, [pc, #52]	; (810a4 <vTaskStartScheduler+0x54>)
   8106e:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81070:	2801      	cmp	r0, #1
   81072:	d10a      	bne.n	8108a <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81074:	4b0c      	ldr	r3, [pc, #48]	; (810a8 <vTaskStartScheduler+0x58>)
   81076:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81078:	2201      	movs	r2, #1
   8107a:	4b0c      	ldr	r3, [pc, #48]	; (810ac <vTaskStartScheduler+0x5c>)
   8107c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8107e:	2200      	movs	r2, #0
   81080:	4b0b      	ldr	r3, [pc, #44]	; (810b0 <vTaskStartScheduler+0x60>)
   81082:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81084:	4b0b      	ldr	r3, [pc, #44]	; (810b4 <vTaskStartScheduler+0x64>)
   81086:	4798      	blx	r3
   81088:	e004      	b.n	81094 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   8108a:	b918      	cbnz	r0, 81094 <vTaskStartScheduler+0x44>
   8108c:	4b06      	ldr	r3, [pc, #24]	; (810a8 <vTaskStartScheduler+0x58>)
   8108e:	4798      	blx	r3
   81090:	bf00      	nop
   81092:	e7fd      	b.n	81090 <vTaskStartScheduler+0x40>
}
   81094:	b004      	add	sp, #16
   81096:	bd10      	pop	{r4, pc}
   81098:	000866b4 	.word	0x000866b4
   8109c:	000813cd 	.word	0x000813cd
   810a0:	00080de5 	.word	0x00080de5
   810a4:	0008197d 	.word	0x0008197d
   810a8:	000802b9 	.word	0x000802b9
   810ac:	2007aa80 	.word	0x2007aa80
   810b0:	2007a9e4 	.word	0x2007a9e4
   810b4:	00080385 	.word	0x00080385

000810b8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   810b8:	4a02      	ldr	r2, [pc, #8]	; (810c4 <vTaskSuspendAll+0xc>)
   810ba:	6813      	ldr	r3, [r2, #0]
   810bc:	3301      	adds	r3, #1
   810be:	6013      	str	r3, [r2, #0]
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop
   810c4:	2007aacc 	.word	0x2007aacc

000810c8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   810c8:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   810ca:	4b04      	ldr	r3, [pc, #16]	; (810dc <xTaskGetTickCount+0x14>)
   810cc:	4798      	blx	r3
	{
		xTicks = xTickCount;
   810ce:	4b04      	ldr	r3, [pc, #16]	; (810e0 <xTaskGetTickCount+0x18>)
   810d0:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   810d2:	4b04      	ldr	r3, [pc, #16]	; (810e4 <xTaskGetTickCount+0x1c>)
   810d4:	4798      	blx	r3

	return xTicks;
}
   810d6:	4620      	mov	r0, r4
   810d8:	bd10      	pop	{r4, pc}
   810da:	bf00      	nop
   810dc:	000802c9 	.word	0x000802c9
   810e0:	2007a9e4 	.word	0x2007a9e4
   810e4:	000802e9 	.word	0x000802e9

000810e8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   810e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   810ec:	4b45      	ldr	r3, [pc, #276]	; (81204 <vTaskIncrementTick+0x11c>)
   810ee:	681b      	ldr	r3, [r3, #0]
   810f0:	2b01      	cmp	r3, #1
   810f2:	d002      	beq.n	810fa <vTaskIncrementTick+0x12>
   810f4:	4b44      	ldr	r3, [pc, #272]	; (81208 <vTaskIncrementTick+0x120>)
   810f6:	681b      	ldr	r3, [r3, #0]
   810f8:	b933      	cbnz	r3, 81108 <vTaskIncrementTick+0x20>
   810fa:	4a44      	ldr	r2, [pc, #272]	; (8120c <vTaskIncrementTick+0x124>)
   810fc:	6813      	ldr	r3, [r2, #0]
   810fe:	3301      	adds	r3, #1
   81100:	6013      	str	r3, [r2, #0]
   81102:	2000      	movs	r0, #0
   81104:	4b42      	ldr	r3, [pc, #264]	; (81210 <vTaskIncrementTick+0x128>)
   81106:	4798      	blx	r3
   81108:	4b3e      	ldr	r3, [pc, #248]	; (81204 <vTaskIncrementTick+0x11c>)
   8110a:	681a      	ldr	r2, [r3, #0]
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8110c:	681b      	ldr	r3, [r3, #0]
   8110e:	2b00      	cmp	r3, #0
   81110:	d171      	bne.n	811f6 <vTaskIncrementTick+0x10e>
	{
		++xTickCount;
   81112:	4b40      	ldr	r3, [pc, #256]	; (81214 <vTaskIncrementTick+0x12c>)
   81114:	681a      	ldr	r2, [r3, #0]
   81116:	3201      	adds	r2, #1
   81118:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8111a:	681b      	ldr	r3, [r3, #0]
   8111c:	bb03      	cbnz	r3, 81160 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8111e:	4b3e      	ldr	r3, [pc, #248]	; (81218 <vTaskIncrementTick+0x130>)
   81120:	681b      	ldr	r3, [r3, #0]
   81122:	681b      	ldr	r3, [r3, #0]
   81124:	b11b      	cbz	r3, 8112e <vTaskIncrementTick+0x46>
   81126:	4b3d      	ldr	r3, [pc, #244]	; (8121c <vTaskIncrementTick+0x134>)
   81128:	4798      	blx	r3
   8112a:	bf00      	nop
   8112c:	e7fd      	b.n	8112a <vTaskIncrementTick+0x42>

			pxTemp = pxDelayedTaskList;
   8112e:	4b3a      	ldr	r3, [pc, #232]	; (81218 <vTaskIncrementTick+0x130>)
   81130:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81132:	4a3b      	ldr	r2, [pc, #236]	; (81220 <vTaskIncrementTick+0x138>)
   81134:	6810      	ldr	r0, [r2, #0]
   81136:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81138:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8113a:	493a      	ldr	r1, [pc, #232]	; (81224 <vTaskIncrementTick+0x13c>)
   8113c:	680a      	ldr	r2, [r1, #0]
   8113e:	3201      	adds	r2, #1
   81140:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81142:	681b      	ldr	r3, [r3, #0]
   81144:	681b      	ldr	r3, [r3, #0]
   81146:	b923      	cbnz	r3, 81152 <vTaskIncrementTick+0x6a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81148:	f04f 32ff 	mov.w	r2, #4294967295
   8114c:	4b36      	ldr	r3, [pc, #216]	; (81228 <vTaskIncrementTick+0x140>)
   8114e:	601a      	str	r2, [r3, #0]
   81150:	e006      	b.n	81160 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81152:	4b31      	ldr	r3, [pc, #196]	; (81218 <vTaskIncrementTick+0x130>)
   81154:	681b      	ldr	r3, [r3, #0]
   81156:	68db      	ldr	r3, [r3, #12]
   81158:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8115a:	685a      	ldr	r2, [r3, #4]
   8115c:	4b32      	ldr	r3, [pc, #200]	; (81228 <vTaskIncrementTick+0x140>)
   8115e:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81160:	4b2c      	ldr	r3, [pc, #176]	; (81214 <vTaskIncrementTick+0x12c>)
   81162:	681a      	ldr	r2, [r3, #0]
   81164:	4b30      	ldr	r3, [pc, #192]	; (81228 <vTaskIncrementTick+0x140>)
   81166:	681b      	ldr	r3, [r3, #0]
   81168:	429a      	cmp	r2, r3
   8116a:	d348      	bcc.n	811fe <vTaskIncrementTick+0x116>
   8116c:	4b2a      	ldr	r3, [pc, #168]	; (81218 <vTaskIncrementTick+0x130>)
   8116e:	681b      	ldr	r3, [r3, #0]
   81170:	681b      	ldr	r3, [r3, #0]
   81172:	b16b      	cbz	r3, 81190 <vTaskIncrementTick+0xa8>
   81174:	4b28      	ldr	r3, [pc, #160]	; (81218 <vTaskIncrementTick+0x130>)
   81176:	681b      	ldr	r3, [r3, #0]
   81178:	68db      	ldr	r3, [r3, #12]
   8117a:	68dc      	ldr	r4, [r3, #12]
   8117c:	6863      	ldr	r3, [r4, #4]
   8117e:	4a25      	ldr	r2, [pc, #148]	; (81214 <vTaskIncrementTick+0x12c>)
   81180:	6812      	ldr	r2, [r2, #0]
   81182:	4293      	cmp	r3, r2
   81184:	d813      	bhi.n	811ae <vTaskIncrementTick+0xc6>
   81186:	4e29      	ldr	r6, [pc, #164]	; (8122c <vTaskIncrementTick+0x144>)
   81188:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 81240 <vTaskIncrementTick+0x158>
   8118c:	4f28      	ldr	r7, [pc, #160]	; (81230 <vTaskIncrementTick+0x148>)
   8118e:	e012      	b.n	811b6 <vTaskIncrementTick+0xce>
   81190:	f04f 32ff 	mov.w	r2, #4294967295
   81194:	4b24      	ldr	r3, [pc, #144]	; (81228 <vTaskIncrementTick+0x140>)
   81196:	601a      	str	r2, [r3, #0]
   81198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8119c:	4b1e      	ldr	r3, [pc, #120]	; (81218 <vTaskIncrementTick+0x130>)
   8119e:	681b      	ldr	r3, [r3, #0]
   811a0:	68db      	ldr	r3, [r3, #12]
   811a2:	68dc      	ldr	r4, [r3, #12]
   811a4:	6863      	ldr	r3, [r4, #4]
   811a6:	4a1b      	ldr	r2, [pc, #108]	; (81214 <vTaskIncrementTick+0x12c>)
   811a8:	6812      	ldr	r2, [r2, #0]
   811aa:	4293      	cmp	r3, r2
   811ac:	d903      	bls.n	811b6 <vTaskIncrementTick+0xce>
   811ae:	4a1e      	ldr	r2, [pc, #120]	; (81228 <vTaskIncrementTick+0x140>)
   811b0:	6013      	str	r3, [r2, #0]
   811b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811b6:	1d25      	adds	r5, r4, #4
   811b8:	4628      	mov	r0, r5
   811ba:	47b0      	blx	r6
   811bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   811be:	b113      	cbz	r3, 811c6 <vTaskIncrementTick+0xde>
   811c0:	f104 0018 	add.w	r0, r4, #24
   811c4:	47b0      	blx	r6
   811c6:	4620      	mov	r0, r4
   811c8:	47c0      	blx	r8
   811ca:	47b8      	blx	r7
   811cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   811ce:	4b19      	ldr	r3, [pc, #100]	; (81234 <vTaskIncrementTick+0x14c>)
   811d0:	681b      	ldr	r3, [r3, #0]
   811d2:	4298      	cmp	r0, r3
   811d4:	bf84      	itt	hi
   811d6:	4b17      	ldrhi	r3, [pc, #92]	; (81234 <vTaskIncrementTick+0x14c>)
   811d8:	6018      	strhi	r0, [r3, #0]
   811da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811de:	4629      	mov	r1, r5
   811e0:	4b15      	ldr	r3, [pc, #84]	; (81238 <vTaskIncrementTick+0x150>)
   811e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811e6:	4b15      	ldr	r3, [pc, #84]	; (8123c <vTaskIncrementTick+0x154>)
   811e8:	4798      	blx	r3
   811ea:	4b0b      	ldr	r3, [pc, #44]	; (81218 <vTaskIncrementTick+0x130>)
   811ec:	681b      	ldr	r3, [r3, #0]
   811ee:	681b      	ldr	r3, [r3, #0]
   811f0:	2b00      	cmp	r3, #0
   811f2:	d1d3      	bne.n	8119c <vTaskIncrementTick+0xb4>
   811f4:	e7cc      	b.n	81190 <vTaskIncrementTick+0xa8>
	}
	else
	{
		++uxMissedTicks;
   811f6:	4a04      	ldr	r2, [pc, #16]	; (81208 <vTaskIncrementTick+0x120>)
   811f8:	6813      	ldr	r3, [r2, #0]
   811fa:	3301      	adds	r3, #1
   811fc:	6013      	str	r3, [r2, #0]
   811fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81202:	bf00      	nop
   81204:	2007aacc 	.word	0x2007aacc
   81208:	2007aad0 	.word	0x2007aad0
   8120c:	2007ac38 	.word	0x2007ac38
   81210:	00082a35 	.word	0x00082a35
   81214:	2007a9e4 	.word	0x2007a9e4
   81218:	2007aa64 	.word	0x2007aa64
   8121c:	000802b9 	.word	0x000802b9
   81220:	2007aa4c 	.word	0x2007aa4c
   81224:	2007aad4 	.word	0x2007aad4
   81228:	20070134 	.word	0x20070134
   8122c:	00080231 	.word	0x00080231
   81230:	00082ae9 	.word	0x00082ae9
   81234:	2007a9dc 	.word	0x2007a9dc
   81238:	2007a9e8 	.word	0x2007a9e8
   8123c:	000801d9 	.word	0x000801d9
   81240:	00083101 	.word	0x00083101

00081244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81248:	4b32      	ldr	r3, [pc, #200]	; (81314 <xTaskResumeAll+0xd0>)
   8124a:	681b      	ldr	r3, [r3, #0]
   8124c:	b91b      	cbnz	r3, 81256 <xTaskResumeAll+0x12>
   8124e:	4b32      	ldr	r3, [pc, #200]	; (81318 <xTaskResumeAll+0xd4>)
   81250:	4798      	blx	r3
   81252:	bf00      	nop
   81254:	e7fd      	b.n	81252 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81256:	4b31      	ldr	r3, [pc, #196]	; (8131c <xTaskResumeAll+0xd8>)
   81258:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8125a:	4b2e      	ldr	r3, [pc, #184]	; (81314 <xTaskResumeAll+0xd0>)
   8125c:	681a      	ldr	r2, [r3, #0]
   8125e:	3a01      	subs	r2, #1
   81260:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81262:	681b      	ldr	r3, [r3, #0]
   81264:	2b00      	cmp	r3, #0
   81266:	d14d      	bne.n	81304 <xTaskResumeAll+0xc0>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81268:	4b2d      	ldr	r3, [pc, #180]	; (81320 <xTaskResumeAll+0xdc>)
   8126a:	681b      	ldr	r3, [r3, #0]
   8126c:	bb2b      	cbnz	r3, 812ba <xTaskResumeAll+0x76>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8126e:	2400      	movs	r4, #0
   81270:	e04b      	b.n	8130a <xTaskResumeAll+0xc6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81272:	68fb      	ldr	r3, [r7, #12]
   81274:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81276:	f104 0018 	add.w	r0, r4, #24
   8127a:	47b0      	blx	r6
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8127c:	f104 0804 	add.w	r8, r4, #4
   81280:	4640      	mov	r0, r8
   81282:	47b0      	blx	r6
					prvAddTaskToReadyQueue( pxTCB );
   81284:	4620      	mov	r0, r4
   81286:	47c8      	blx	r9
   81288:	4b26      	ldr	r3, [pc, #152]	; (81324 <xTaskResumeAll+0xe0>)
   8128a:	4798      	blx	r3
   8128c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8128e:	4b26      	ldr	r3, [pc, #152]	; (81328 <xTaskResumeAll+0xe4>)
   81290:	681b      	ldr	r3, [r3, #0]
   81292:	4298      	cmp	r0, r3
   81294:	bf84      	itt	hi
   81296:	4b24      	ldrhi	r3, [pc, #144]	; (81328 <xTaskResumeAll+0xe4>)
   81298:	6018      	strhi	r0, [r3, #0]
   8129a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8129e:	4641      	mov	r1, r8
   812a0:	4b22      	ldr	r3, [pc, #136]	; (8132c <xTaskResumeAll+0xe8>)
   812a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   812a6:	4b22      	ldr	r3, [pc, #136]	; (81330 <xTaskResumeAll+0xec>)
   812a8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   812aa:	4b22      	ldr	r3, [pc, #136]	; (81334 <xTaskResumeAll+0xf0>)
   812ac:	681b      	ldr	r3, [r3, #0]
   812ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   812b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   812b2:	429a      	cmp	r2, r3
   812b4:	bf28      	it	cs
   812b6:	2501      	movcs	r5, #1
   812b8:	e004      	b.n	812c4 <xTaskResumeAll+0x80>
   812ba:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   812bc:	4f1e      	ldr	r7, [pc, #120]	; (81338 <xTaskResumeAll+0xf4>)
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   812be:	4e1f      	ldr	r6, [pc, #124]	; (8133c <xTaskResumeAll+0xf8>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   812c0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 81354 <xTaskResumeAll+0x110>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   812c4:	683b      	ldr	r3, [r7, #0]
   812c6:	2b00      	cmp	r3, #0
   812c8:	d1d3      	bne.n	81272 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   812ca:	4b1d      	ldr	r3, [pc, #116]	; (81340 <xTaskResumeAll+0xfc>)
   812cc:	681b      	ldr	r3, [r3, #0]
   812ce:	b163      	cbz	r3, 812ea <xTaskResumeAll+0xa6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   812d0:	4b1b      	ldr	r3, [pc, #108]	; (81340 <xTaskResumeAll+0xfc>)
   812d2:	681b      	ldr	r3, [r3, #0]
   812d4:	b17b      	cbz	r3, 812f6 <xTaskResumeAll+0xb2>
					{
						vTaskIncrementTick();
   812d6:	4d1b      	ldr	r5, [pc, #108]	; (81344 <xTaskResumeAll+0x100>)
						--uxMissedTicks;
   812d8:	4c19      	ldr	r4, [pc, #100]	; (81340 <xTaskResumeAll+0xfc>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   812da:	47a8      	blx	r5
						--uxMissedTicks;
   812dc:	6823      	ldr	r3, [r4, #0]
   812de:	3b01      	subs	r3, #1
   812e0:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   812e2:	6823      	ldr	r3, [r4, #0]
   812e4:	2b00      	cmp	r3, #0
   812e6:	d1f8      	bne.n	812da <xTaskResumeAll+0x96>
   812e8:	e005      	b.n	812f6 <xTaskResumeAll+0xb2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   812ea:	2d01      	cmp	r5, #1
   812ec:	d003      	beq.n	812f6 <xTaskResumeAll+0xb2>
   812ee:	4b16      	ldr	r3, [pc, #88]	; (81348 <xTaskResumeAll+0x104>)
   812f0:	681b      	ldr	r3, [r3, #0]
   812f2:	2b01      	cmp	r3, #1
   812f4:	d108      	bne.n	81308 <xTaskResumeAll+0xc4>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   812f6:	2200      	movs	r2, #0
   812f8:	4b13      	ldr	r3, [pc, #76]	; (81348 <xTaskResumeAll+0x104>)
   812fa:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   812fc:	4b13      	ldr	r3, [pc, #76]	; (8134c <xTaskResumeAll+0x108>)
   812fe:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81300:	2401      	movs	r4, #1
   81302:	e002      	b.n	8130a <xTaskResumeAll+0xc6>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81304:	2400      	movs	r4, #0
   81306:	e000      	b.n	8130a <xTaskResumeAll+0xc6>
   81308:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   8130a:	4b11      	ldr	r3, [pc, #68]	; (81350 <xTaskResumeAll+0x10c>)
   8130c:	4798      	blx	r3

	return xAlreadyYielded;
}
   8130e:	4620      	mov	r0, r4
   81310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81314:	2007aacc 	.word	0x2007aacc
   81318:	000802b9 	.word	0x000802b9
   8131c:	000802c9 	.word	0x000802c9
   81320:	2007aa68 	.word	0x2007aa68
   81324:	00082ae9 	.word	0x00082ae9
   81328:	2007a9dc 	.word	0x2007a9dc
   8132c:	2007a9e8 	.word	0x2007a9e8
   81330:	000801d9 	.word	0x000801d9
   81334:	2007aa8c 	.word	0x2007aa8c
   81338:	2007aa6c 	.word	0x2007aa6c
   8133c:	00080231 	.word	0x00080231
   81340:	2007aad0 	.word	0x2007aad0
   81344:	000810e9 	.word	0x000810e9
   81348:	2007aa84 	.word	0x2007aa84
   8134c:	000802a9 	.word	0x000802a9
   81350:	000802e9 	.word	0x000802e9
   81354:	00083101 	.word	0x00083101

00081358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   81358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   8135a:	b1e8      	cbz	r0, 81398 <vTaskDelay+0x40>
   8135c:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
   8135e:	4b10      	ldr	r3, [pc, #64]	; (813a0 <vTaskDelay+0x48>)
   81360:	4798      	blx	r3
			{
				traceTASK_DELAY();
   81362:	4621      	mov	r1, r4
   81364:	2089      	movs	r0, #137	; 0x89
   81366:	4b0f      	ldr	r3, [pc, #60]	; (813a4 <vTaskDelay+0x4c>)
   81368:	4798      	blx	r3
   8136a:	4d0f      	ldr	r5, [pc, #60]	; (813a8 <vTaskDelay+0x50>)
   8136c:	6828      	ldr	r0, [r5, #0]
   8136e:	4f0f      	ldr	r7, [pc, #60]	; (813ac <vTaskDelay+0x54>)
   81370:	47b8      	blx	r7
   81372:	4e0f      	ldr	r6, [pc, #60]	; (813b0 <vTaskDelay+0x58>)
   81374:	47b0      	blx	r6
   81376:	4b0f      	ldr	r3, [pc, #60]	; (813b4 <vTaskDelay+0x5c>)
   81378:	4798      	blx	r3
   8137a:	47b8      	blx	r7
   8137c:	47b0      	blx	r6
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   8137e:	4b0e      	ldr	r3, [pc, #56]	; (813b8 <vTaskDelay+0x60>)
   81380:	681b      	ldr	r3, [r3, #0]
   81382:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81384:	6828      	ldr	r0, [r5, #0]
   81386:	3004      	adds	r0, #4
   81388:	4b0c      	ldr	r3, [pc, #48]	; (813bc <vTaskDelay+0x64>)
   8138a:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8138c:	4620      	mov	r0, r4
   8138e:	4b0c      	ldr	r3, [pc, #48]	; (813c0 <vTaskDelay+0x68>)
   81390:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81392:	4b0c      	ldr	r3, [pc, #48]	; (813c4 <vTaskDelay+0x6c>)
   81394:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81396:	b908      	cbnz	r0, 8139c <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
   81398:	4b0b      	ldr	r3, [pc, #44]	; (813c8 <vTaskDelay+0x70>)
   8139a:	4798      	blx	r3
   8139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8139e:	bf00      	nop
   813a0:	000810b9 	.word	0x000810b9
   813a4:	00082d9d 	.word	0x00082d9d
   813a8:	2007aa8c 	.word	0x2007aa8c
   813ac:	00083101 	.word	0x00083101
   813b0:	000830a9 	.word	0x000830a9
   813b4:	00083111 	.word	0x00083111
   813b8:	2007a9e4 	.word	0x2007a9e4
   813bc:	00080231 	.word	0x00080231
   813c0:	00080d8d 	.word	0x00080d8d
   813c4:	00081245 	.word	0x00081245
   813c8:	000802a9 	.word	0x000802a9

000813cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   813cc:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   813ce:	4d15      	ldr	r5, [pc, #84]	; (81424 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   813d0:	4f15      	ldr	r7, [pc, #84]	; (81428 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   813d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81448 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   813d6:	4e15      	ldr	r6, [pc, #84]	; (8142c <prvIdleTask+0x60>)
   813d8:	e019      	b.n	8140e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   813da:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   813dc:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
   813de:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
   813e0:	b1ac      	cbz	r4, 8140e <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   813e2:	4b13      	ldr	r3, [pc, #76]	; (81430 <prvIdleTask+0x64>)
   813e4:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   813e6:	68fb      	ldr	r3, [r7, #12]
   813e8:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   813ea:	1d20      	adds	r0, r4, #4
   813ec:	4b11      	ldr	r3, [pc, #68]	; (81434 <prvIdleTask+0x68>)
   813ee:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   813f0:	4a11      	ldr	r2, [pc, #68]	; (81438 <prvIdleTask+0x6c>)
   813f2:	6813      	ldr	r3, [r2, #0]
   813f4:	3b01      	subs	r3, #1
   813f6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   813f8:	682b      	ldr	r3, [r5, #0]
   813fa:	3b01      	subs	r3, #1
   813fc:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   813fe:	4b0f      	ldr	r3, [pc, #60]	; (8143c <prvIdleTask+0x70>)
   81400:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81402:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81404:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8144c <prvIdleTask+0x80>
   81408:	47c8      	blx	r9
		vPortFree( pxTCB );
   8140a:	4620      	mov	r0, r4
   8140c:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8140e:	682b      	ldr	r3, [r5, #0]
   81410:	2b00      	cmp	r3, #0
   81412:	d1e2      	bne.n	813da <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81414:	4b0a      	ldr	r3, [pc, #40]	; (81440 <prvIdleTask+0x74>)
   81416:	681b      	ldr	r3, [r3, #0]
   81418:	2b01      	cmp	r3, #1
   8141a:	d9dc      	bls.n	813d6 <prvIdleTask+0xa>
			{
				taskYIELD();
   8141c:	4b09      	ldr	r3, [pc, #36]	; (81444 <prvIdleTask+0x78>)
   8141e:	4798      	blx	r3
   81420:	e7d7      	b.n	813d2 <prvIdleTask+0x6>
   81422:	bf00      	nop
   81424:	2007a9e0 	.word	0x2007a9e0
   81428:	2007aa50 	.word	0x2007aa50
   8142c:	00081245 	.word	0x00081245
   81430:	000802c9 	.word	0x000802c9
   81434:	00080231 	.word	0x00080231
   81438:	2007aa68 	.word	0x2007aa68
   8143c:	000802e9 	.word	0x000802e9
   81440:	2007a9e8 	.word	0x2007a9e8
   81444:	000802a9 	.word	0x000802a9
   81448:	000810b9 	.word	0x000810b9
   8144c:	000804e5 	.word	0x000804e5

00081450 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81450:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81452:	4b25      	ldr	r3, [pc, #148]	; (814e8 <vTaskSwitchContext+0x98>)
   81454:	681b      	ldr	r3, [r3, #0]
   81456:	b96b      	cbnz	r3, 81474 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81458:	4b24      	ldr	r3, [pc, #144]	; (814ec <vTaskSwitchContext+0x9c>)
   8145a:	681b      	ldr	r3, [r3, #0]
   8145c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81460:	009b      	lsls	r3, r3, #2
   81462:	4a23      	ldr	r2, [pc, #140]	; (814f0 <vTaskSwitchContext+0xa0>)
   81464:	58d3      	ldr	r3, [r2, r3]
   81466:	b9cb      	cbnz	r3, 8149c <vTaskSwitchContext+0x4c>
   81468:	4b20      	ldr	r3, [pc, #128]	; (814ec <vTaskSwitchContext+0x9c>)
   8146a:	681b      	ldr	r3, [r3, #0]
   8146c:	b143      	cbz	r3, 81480 <vTaskSwitchContext+0x30>
   8146e:	4a1f      	ldr	r2, [pc, #124]	; (814ec <vTaskSwitchContext+0x9c>)
   81470:	491f      	ldr	r1, [pc, #124]	; (814f0 <vTaskSwitchContext+0xa0>)
   81472:	e009      	b.n	81488 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81474:	2201      	movs	r2, #1
   81476:	4b1f      	ldr	r3, [pc, #124]	; (814f4 <vTaskSwitchContext+0xa4>)
   81478:	601a      	str	r2, [r3, #0]
   8147a:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8147c:	6813      	ldr	r3, [r2, #0]
   8147e:	b91b      	cbnz	r3, 81488 <vTaskSwitchContext+0x38>
   81480:	4b1d      	ldr	r3, [pc, #116]	; (814f8 <vTaskSwitchContext+0xa8>)
   81482:	4798      	blx	r3
   81484:	bf00      	nop
   81486:	e7fd      	b.n	81484 <vTaskSwitchContext+0x34>
   81488:	6813      	ldr	r3, [r2, #0]
   8148a:	3b01      	subs	r3, #1
   8148c:	6013      	str	r3, [r2, #0]
   8148e:	6813      	ldr	r3, [r2, #0]
   81490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81498:	2b00      	cmp	r3, #0
   8149a:	d0ef      	beq.n	8147c <vTaskSwitchContext+0x2c>
   8149c:	4b13      	ldr	r3, [pc, #76]	; (814ec <vTaskSwitchContext+0x9c>)
   8149e:	681b      	ldr	r3, [r3, #0]
   814a0:	4a13      	ldr	r2, [pc, #76]	; (814f0 <vTaskSwitchContext+0xa0>)
   814a2:	0099      	lsls	r1, r3, #2
   814a4:	18c8      	adds	r0, r1, r3
   814a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   814aa:	6844      	ldr	r4, [r0, #4]
   814ac:	6864      	ldr	r4, [r4, #4]
   814ae:	6044      	str	r4, [r0, #4]
   814b0:	4602      	mov	r2, r0
   814b2:	3208      	adds	r2, #8
   814b4:	4294      	cmp	r4, r2
   814b6:	d106      	bne.n	814c6 <vTaskSwitchContext+0x76>
   814b8:	6860      	ldr	r0, [r4, #4]
   814ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   814be:	4a0c      	ldr	r2, [pc, #48]	; (814f0 <vTaskSwitchContext+0xa0>)
   814c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   814c4:	6050      	str	r0, [r2, #4]
   814c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814ca:	4a09      	ldr	r2, [pc, #36]	; (814f0 <vTaskSwitchContext+0xa0>)
   814cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   814d0:	685b      	ldr	r3, [r3, #4]
   814d2:	68da      	ldr	r2, [r3, #12]
   814d4:	4b09      	ldr	r3, [pc, #36]	; (814fc <vTaskSwitchContext+0xac>)
   814d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
   814d8:	4b09      	ldr	r3, [pc, #36]	; (81500 <vTaskSwitchContext+0xb0>)
   814da:	4798      	blx	r3
   814dc:	4b09      	ldr	r3, [pc, #36]	; (81504 <vTaskSwitchContext+0xb4>)
   814de:	4798      	blx	r3
   814e0:	4b09      	ldr	r3, [pc, #36]	; (81508 <vTaskSwitchContext+0xb8>)
   814e2:	4798      	blx	r3
   814e4:	bd10      	pop	{r4, pc}
   814e6:	bf00      	nop
   814e8:	2007aacc 	.word	0x2007aacc
   814ec:	2007a9dc 	.word	0x2007a9dc
   814f0:	2007a9e8 	.word	0x2007a9e8
   814f4:	2007aa84 	.word	0x2007aa84
   814f8:	000802b9 	.word	0x000802b9
   814fc:	2007aa8c 	.word	0x2007aa8c
   81500:	00083111 	.word	0x00083111
   81504:	00083101 	.word	0x00083101
   81508:	00082fcd 	.word	0x00082fcd

0008150c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   8150c:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   8150e:	b918      	cbnz	r0, 81518 <vTaskPlaceOnEventList+0xc>
   81510:	4b0e      	ldr	r3, [pc, #56]	; (8154c <vTaskPlaceOnEventList+0x40>)
   81512:	4798      	blx	r3
   81514:	bf00      	nop
   81516:	e7fd      	b.n	81514 <vTaskPlaceOnEventList+0x8>
   81518:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8151a:	4d0d      	ldr	r5, [pc, #52]	; (81550 <vTaskPlaceOnEventList+0x44>)
   8151c:	6829      	ldr	r1, [r5, #0]
   8151e:	3118      	adds	r1, #24
   81520:	4b0c      	ldr	r3, [pc, #48]	; (81554 <vTaskPlaceOnEventList+0x48>)
   81522:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81524:	6828      	ldr	r0, [r5, #0]
   81526:	3004      	adds	r0, #4
   81528:	4b0b      	ldr	r3, [pc, #44]	; (81558 <vTaskPlaceOnEventList+0x4c>)
   8152a:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8152c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81530:	d105      	bne.n	8153e <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81532:	6829      	ldr	r1, [r5, #0]
   81534:	3104      	adds	r1, #4
   81536:	4809      	ldr	r0, [pc, #36]	; (8155c <vTaskPlaceOnEventList+0x50>)
   81538:	4b09      	ldr	r3, [pc, #36]	; (81560 <vTaskPlaceOnEventList+0x54>)
   8153a:	4798      	blx	r3
   8153c:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   8153e:	4b09      	ldr	r3, [pc, #36]	; (81564 <vTaskPlaceOnEventList+0x58>)
   81540:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81542:	4420      	add	r0, r4
   81544:	4b08      	ldr	r3, [pc, #32]	; (81568 <vTaskPlaceOnEventList+0x5c>)
   81546:	4798      	blx	r3
   81548:	bd38      	pop	{r3, r4, r5, pc}
   8154a:	bf00      	nop
   8154c:	000802b9 	.word	0x000802b9
   81550:	2007aa8c 	.word	0x2007aa8c
   81554:	000801f5 	.word	0x000801f5
   81558:	00080231 	.word	0x00080231
   8155c:	2007aa90 	.word	0x2007aa90
   81560:	000801d9 	.word	0x000801d9
   81564:	2007a9e4 	.word	0x2007a9e4
   81568:	00080d8d 	.word	0x00080d8d

0008156c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   8156c:	b570      	push	{r4, r5, r6, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   8156e:	b918      	cbnz	r0, 81578 <vTaskPlaceOnEventListRestricted+0xc>
   81570:	4b10      	ldr	r3, [pc, #64]	; (815b4 <vTaskPlaceOnEventListRestricted+0x48>)
   81572:	4798      	blx	r3
   81574:	bf00      	nop
   81576:	e7fd      	b.n	81574 <vTaskPlaceOnEventListRestricted+0x8>
   81578:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8157a:	4d0f      	ldr	r5, [pc, #60]	; (815b8 <vTaskPlaceOnEventListRestricted+0x4c>)
   8157c:	6829      	ldr	r1, [r5, #0]
   8157e:	3118      	adds	r1, #24
   81580:	4b0e      	ldr	r3, [pc, #56]	; (815bc <vTaskPlaceOnEventListRestricted+0x50>)
   81582:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81584:	6828      	ldr	r0, [r5, #0]
   81586:	3004      	adds	r0, #4
   81588:	4b0d      	ldr	r3, [pc, #52]	; (815c0 <vTaskPlaceOnEventListRestricted+0x54>)
   8158a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8158c:	4b0d      	ldr	r3, [pc, #52]	; (815c4 <vTaskPlaceOnEventListRestricted+0x58>)
   8158e:	681b      	ldr	r3, [r3, #0]
   81590:	441c      	add	r4, r3
		
		traceTASK_DELAY_UNTIL();
   81592:	4621      	mov	r1, r4
   81594:	2088      	movs	r0, #136	; 0x88
   81596:	4b0c      	ldr	r3, [pc, #48]	; (815c8 <vTaskPlaceOnEventListRestricted+0x5c>)
   81598:	4798      	blx	r3
   8159a:	6828      	ldr	r0, [r5, #0]
   8159c:	4e0b      	ldr	r6, [pc, #44]	; (815cc <vTaskPlaceOnEventListRestricted+0x60>)
   8159e:	47b0      	blx	r6
   815a0:	4d0b      	ldr	r5, [pc, #44]	; (815d0 <vTaskPlaceOnEventListRestricted+0x64>)
   815a2:	47a8      	blx	r5
   815a4:	4b0b      	ldr	r3, [pc, #44]	; (815d4 <vTaskPlaceOnEventListRestricted+0x68>)
   815a6:	4798      	blx	r3
   815a8:	47b0      	blx	r6
   815aa:	47a8      	blx	r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   815ac:	4620      	mov	r0, r4
   815ae:	4b0a      	ldr	r3, [pc, #40]	; (815d8 <vTaskPlaceOnEventListRestricted+0x6c>)
   815b0:	4798      	blx	r3
   815b2:	bd70      	pop	{r4, r5, r6, pc}
   815b4:	000802b9 	.word	0x000802b9
   815b8:	2007aa8c 	.word	0x2007aa8c
   815bc:	000801d9 	.word	0x000801d9
   815c0:	00080231 	.word	0x00080231
   815c4:	2007a9e4 	.word	0x2007a9e4
   815c8:	00082d9d 	.word	0x00082d9d
   815cc:	00083101 	.word	0x00083101
   815d0:	000830a9 	.word	0x000830a9
   815d4:	00083111 	.word	0x00083111
   815d8:	00080d8d 	.word	0x00080d8d

000815dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   815dc:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   815de:	68c3      	ldr	r3, [r0, #12]
   815e0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   815e2:	b91c      	cbnz	r4, 815ec <xTaskRemoveFromEventList+0x10>
   815e4:	4b18      	ldr	r3, [pc, #96]	; (81648 <xTaskRemoveFromEventList+0x6c>)
   815e6:	4798      	blx	r3
   815e8:	bf00      	nop
   815ea:	e7fd      	b.n	815e8 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   815ec:	f104 0518 	add.w	r5, r4, #24
   815f0:	4628      	mov	r0, r5
   815f2:	4b16      	ldr	r3, [pc, #88]	; (8164c <xTaskRemoveFromEventList+0x70>)
   815f4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   815f6:	4b16      	ldr	r3, [pc, #88]	; (81650 <xTaskRemoveFromEventList+0x74>)
   815f8:	681b      	ldr	r3, [r3, #0]
   815fa:	b9c3      	cbnz	r3, 8162e <xTaskRemoveFromEventList+0x52>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   815fc:	1d25      	adds	r5, r4, #4
   815fe:	4628      	mov	r0, r5
   81600:	4b12      	ldr	r3, [pc, #72]	; (8164c <xTaskRemoveFromEventList+0x70>)
   81602:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81604:	4620      	mov	r0, r4
   81606:	4b13      	ldr	r3, [pc, #76]	; (81654 <xTaskRemoveFromEventList+0x78>)
   81608:	4798      	blx	r3
   8160a:	4b13      	ldr	r3, [pc, #76]	; (81658 <xTaskRemoveFromEventList+0x7c>)
   8160c:	4798      	blx	r3
   8160e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81610:	4b12      	ldr	r3, [pc, #72]	; (8165c <xTaskRemoveFromEventList+0x80>)
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	4298      	cmp	r0, r3
   81616:	bf84      	itt	hi
   81618:	4b10      	ldrhi	r3, [pc, #64]	; (8165c <xTaskRemoveFromEventList+0x80>)
   8161a:	6018      	strhi	r0, [r3, #0]
   8161c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81620:	4629      	mov	r1, r5
   81622:	4b0f      	ldr	r3, [pc, #60]	; (81660 <xTaskRemoveFromEventList+0x84>)
   81624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81628:	4b0e      	ldr	r3, [pc, #56]	; (81664 <xTaskRemoveFromEventList+0x88>)
   8162a:	4798      	blx	r3
   8162c:	e003      	b.n	81636 <xTaskRemoveFromEventList+0x5a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8162e:	4629      	mov	r1, r5
   81630:	480d      	ldr	r0, [pc, #52]	; (81668 <xTaskRemoveFromEventList+0x8c>)
   81632:	4b0c      	ldr	r3, [pc, #48]	; (81664 <xTaskRemoveFromEventList+0x88>)
   81634:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81636:	4b0d      	ldr	r3, [pc, #52]	; (8166c <xTaskRemoveFromEventList+0x90>)
   81638:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
   8163a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8163e:	4298      	cmp	r0, r3
   81640:	bf34      	ite	cc
   81642:	2000      	movcc	r0, #0
   81644:	2001      	movcs	r0, #1
   81646:	bd38      	pop	{r3, r4, r5, pc}
   81648:	000802b9 	.word	0x000802b9
   8164c:	00080231 	.word	0x00080231
   81650:	2007aacc 	.word	0x2007aacc
   81654:	00083101 	.word	0x00083101
   81658:	00082ae9 	.word	0x00082ae9
   8165c:	2007a9dc 	.word	0x2007a9dc
   81660:	2007a9e8 	.word	0x2007a9e8
   81664:	000801d9 	.word	0x000801d9
   81668:	2007aa6c 	.word	0x2007aa6c
   8166c:	2007aa8c 	.word	0x2007aa8c

00081670 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81670:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81672:	b918      	cbnz	r0, 8167c <vTaskSetTimeOutState+0xc>
   81674:	4b05      	ldr	r3, [pc, #20]	; (8168c <vTaskSetTimeOutState+0x1c>)
   81676:	4798      	blx	r3
   81678:	bf00      	nop
   8167a:	e7fd      	b.n	81678 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   8167c:	4a04      	ldr	r2, [pc, #16]	; (81690 <vTaskSetTimeOutState+0x20>)
   8167e:	6812      	ldr	r2, [r2, #0]
   81680:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81682:	4a04      	ldr	r2, [pc, #16]	; (81694 <vTaskSetTimeOutState+0x24>)
   81684:	6812      	ldr	r2, [r2, #0]
   81686:	6042      	str	r2, [r0, #4]
   81688:	bd08      	pop	{r3, pc}
   8168a:	bf00      	nop
   8168c:	000802b9 	.word	0x000802b9
   81690:	2007aad4 	.word	0x2007aad4
   81694:	2007a9e4 	.word	0x2007a9e4

00081698 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81698:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   8169a:	b918      	cbnz	r0, 816a4 <xTaskCheckForTimeOut+0xc>
   8169c:	4b19      	ldr	r3, [pc, #100]	; (81704 <xTaskCheckForTimeOut+0x6c>)
   8169e:	4798      	blx	r3
   816a0:	bf00      	nop
   816a2:	e7fd      	b.n	816a0 <xTaskCheckForTimeOut+0x8>
   816a4:	460d      	mov	r5, r1
   816a6:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   816a8:	b919      	cbnz	r1, 816b2 <xTaskCheckForTimeOut+0x1a>
   816aa:	4b16      	ldr	r3, [pc, #88]	; (81704 <xTaskCheckForTimeOut+0x6c>)
   816ac:	4798      	blx	r3
   816ae:	bf00      	nop
   816b0:	e7fd      	b.n	816ae <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   816b2:	4b15      	ldr	r3, [pc, #84]	; (81708 <xTaskCheckForTimeOut+0x70>)
   816b4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   816b6:	682b      	ldr	r3, [r5, #0]
   816b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   816bc:	d018      	beq.n	816f0 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   816be:	4a13      	ldr	r2, [pc, #76]	; (8170c <xTaskCheckForTimeOut+0x74>)
   816c0:	6812      	ldr	r2, [r2, #0]
   816c2:	6821      	ldr	r1, [r4, #0]
   816c4:	4291      	cmp	r1, r2
   816c6:	d004      	beq.n	816d2 <xTaskCheckForTimeOut+0x3a>
   816c8:	4a11      	ldr	r2, [pc, #68]	; (81710 <xTaskCheckForTimeOut+0x78>)
   816ca:	6812      	ldr	r2, [r2, #0]
   816cc:	6861      	ldr	r1, [r4, #4]
   816ce:	4291      	cmp	r1, r2
   816d0:	d910      	bls.n	816f4 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   816d2:	4a0f      	ldr	r2, [pc, #60]	; (81710 <xTaskCheckForTimeOut+0x78>)
   816d4:	6811      	ldr	r1, [r2, #0]
   816d6:	6860      	ldr	r0, [r4, #4]
   816d8:	1a09      	subs	r1, r1, r0
   816da:	428b      	cmp	r3, r1
   816dc:	d90c      	bls.n	816f8 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   816de:	6812      	ldr	r2, [r2, #0]
   816e0:	1a12      	subs	r2, r2, r0
   816e2:	1a9b      	subs	r3, r3, r2
   816e4:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   816e6:	4620      	mov	r0, r4
   816e8:	4b0a      	ldr	r3, [pc, #40]	; (81714 <xTaskCheckForTimeOut+0x7c>)
   816ea:	4798      	blx	r3
			xReturn = pdFALSE;
   816ec:	2400      	movs	r4, #0
   816ee:	e004      	b.n	816fa <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   816f0:	2400      	movs	r4, #0
   816f2:	e002      	b.n	816fa <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   816f4:	2401      	movs	r4, #1
   816f6:	e000      	b.n	816fa <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   816f8:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   816fa:	4b07      	ldr	r3, [pc, #28]	; (81718 <xTaskCheckForTimeOut+0x80>)
   816fc:	4798      	blx	r3

	return xReturn;
}
   816fe:	4620      	mov	r0, r4
   81700:	bd38      	pop	{r3, r4, r5, pc}
   81702:	bf00      	nop
   81704:	000802b9 	.word	0x000802b9
   81708:	000802c9 	.word	0x000802c9
   8170c:	2007aad4 	.word	0x2007aad4
   81710:	2007a9e4 	.word	0x2007a9e4
   81714:	00081671 	.word	0x00081671
   81718:	000802e9 	.word	0x000802e9

0008171c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8171c:	2201      	movs	r2, #1
   8171e:	4b01      	ldr	r3, [pc, #4]	; (81724 <vTaskMissedYield+0x8>)
   81720:	601a      	str	r2, [r3, #0]
   81722:	4770      	bx	lr
   81724:	2007aa84 	.word	0x2007aa84

00081728 <uxTaskGetTaskNumber>:
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;

		if( xTask != NULL )
   81728:	b108      	cbz	r0, 8172e <uxTaskGetTaskNumber+0x6>
		{
			pxTCB = ( tskTCB * ) xTask;
			uxReturn = pxTCB->uxTaskNumber;
   8172a:	6c40      	ldr	r0, [r0, #68]	; 0x44
   8172c:	4770      	bx	lr
		}
		else
		{
			uxReturn = 0U;
   8172e:	2000      	movs	r0, #0
		}

		return uxReturn;
	}
   81730:	4770      	bx	lr
   81732:	bf00      	nop

00081734 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81734:	4b01      	ldr	r3, [pc, #4]	; (8173c <xTaskGetCurrentTaskHandle+0x8>)
   81736:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81738:	4770      	bx	lr
   8173a:	bf00      	nop
   8173c:	2007aa8c 	.word	0x2007aa8c

00081740 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81740:	4b05      	ldr	r3, [pc, #20]	; (81758 <xTaskGetSchedulerState+0x18>)
   81742:	681b      	ldr	r3, [r3, #0]
   81744:	b133      	cbz	r3, 81754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81746:	4b05      	ldr	r3, [pc, #20]	; (8175c <xTaskGetSchedulerState+0x1c>)
   81748:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8174a:	2b00      	cmp	r3, #0
   8174c:	bf0c      	ite	eq
   8174e:	2001      	moveq	r0, #1
   81750:	2002      	movne	r0, #2
   81752:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81754:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81756:	4770      	bx	lr
   81758:	2007aa80 	.word	0x2007aa80
   8175c:	2007aacc 	.word	0x2007aacc

00081760 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81760:	2800      	cmp	r0, #0
   81762:	d051      	beq.n	81808 <vTaskPriorityInherit+0xa8>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81764:	b570      	push	{r4, r5, r6, lr}
   81766:	4604      	mov	r4, r0

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81768:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8176a:	4a28      	ldr	r2, [pc, #160]	; (8180c <vTaskPriorityInherit+0xac>)
   8176c:	6812      	ldr	r2, [r2, #0]
   8176e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81770:	4293      	cmp	r3, r2
   81772:	d248      	bcs.n	81806 <vTaskPriorityInherit+0xa6>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81774:	4a25      	ldr	r2, [pc, #148]	; (8180c <vTaskPriorityInherit+0xac>)
   81776:	6812      	ldr	r2, [r2, #0]
   81778:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8177a:	f1c2 0205 	rsb	r2, r2, #5
   8177e:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81780:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81784:	4a22      	ldr	r2, [pc, #136]	; (81810 <vTaskPriorityInherit+0xb0>)
   81786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8178a:	6942      	ldr	r2, [r0, #20]
   8178c:	429a      	cmp	r2, r3
   8178e:	d11c      	bne.n	817ca <vTaskPriorityInherit+0x6a>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81790:	1d05      	adds	r5, r0, #4
   81792:	4628      	mov	r0, r5
   81794:	4b1f      	ldr	r3, [pc, #124]	; (81814 <vTaskPriorityInherit+0xb4>)
   81796:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81798:	4b1c      	ldr	r3, [pc, #112]	; (8180c <vTaskPriorityInherit+0xac>)
   8179a:	681b      	ldr	r3, [r3, #0]
   8179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8179e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   817a0:	4620      	mov	r0, r4
   817a2:	4b1d      	ldr	r3, [pc, #116]	; (81818 <vTaskPriorityInherit+0xb8>)
   817a4:	4798      	blx	r3
   817a6:	4b1d      	ldr	r3, [pc, #116]	; (8181c <vTaskPriorityInherit+0xbc>)
   817a8:	4798      	blx	r3
   817aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817ac:	4b1c      	ldr	r3, [pc, #112]	; (81820 <vTaskPriorityInherit+0xc0>)
   817ae:	681b      	ldr	r3, [r3, #0]
   817b0:	4298      	cmp	r0, r3
   817b2:	bf84      	itt	hi
   817b4:	4b1a      	ldrhi	r3, [pc, #104]	; (81820 <vTaskPriorityInherit+0xc0>)
   817b6:	6018      	strhi	r0, [r3, #0]
   817b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817bc:	4629      	mov	r1, r5
   817be:	4b14      	ldr	r3, [pc, #80]	; (81810 <vTaskPriorityInherit+0xb0>)
   817c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817c4:	4b17      	ldr	r3, [pc, #92]	; (81824 <vTaskPriorityInherit+0xc4>)
   817c6:	4798      	blx	r3
   817c8:	e003      	b.n	817d2 <vTaskPriorityInherit+0x72>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   817ca:	4b10      	ldr	r3, [pc, #64]	; (8180c <vTaskPriorityInherit+0xac>)
   817cc:	681b      	ldr	r3, [r3, #0]
   817ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   817d0:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
   817d2:	4620      	mov	r0, r4
   817d4:	4d10      	ldr	r5, [pc, #64]	; (81818 <vTaskPriorityInherit+0xb8>)
   817d6:	47a8      	blx	r5
   817d8:	4606      	mov	r6, r0
   817da:	4620      	mov	r0, r4
   817dc:	47a8      	blx	r5
   817de:	4601      	mov	r1, r0
   817e0:	2003      	movs	r0, #3
   817e2:	4b11      	ldr	r3, [pc, #68]	; (81828 <vTaskPriorityInherit+0xc8>)
   817e4:	4798      	blx	r3
   817e6:	4603      	mov	r3, r0
   817e8:	4632      	mov	r2, r6
   817ea:	2103      	movs	r1, #3
   817ec:	208e      	movs	r0, #142	; 0x8e
   817ee:	4e0f      	ldr	r6, [pc, #60]	; (8182c <vTaskPriorityInherit+0xcc>)
   817f0:	47b0      	blx	r6
   817f2:	4620      	mov	r0, r4
   817f4:	47a8      	blx	r5
   817f6:	4b05      	ldr	r3, [pc, #20]	; (8180c <vTaskPriorityInherit+0xac>)
   817f8:	681b      	ldr	r3, [r3, #0]
   817fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   817fe:	4601      	mov	r1, r0
   81800:	2003      	movs	r0, #3
   81802:	4b0b      	ldr	r3, [pc, #44]	; (81830 <vTaskPriorityInherit+0xd0>)
   81804:	4798      	blx	r3
   81806:	bd70      	pop	{r4, r5, r6, pc}
   81808:	4770      	bx	lr
   8180a:	bf00      	nop
   8180c:	2007aa8c 	.word	0x2007aa8c
   81810:	2007a9e8 	.word	0x2007a9e8
   81814:	00080231 	.word	0x00080231
   81818:	00083101 	.word	0x00083101
   8181c:	00082ae9 	.word	0x00082ae9
   81820:	2007a9dc 	.word	0x2007a9dc
   81824:	000801d9 	.word	0x000801d9
   81828:	00082ebd 	.word	0x00082ebd
   8182c:	00082c8d 	.word	0x00082c8d
   81830:	00082e65 	.word	0x00082e65

00081834 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81834:	2800      	cmp	r0, #0
   81836:	d03a      	beq.n	818ae <vTaskPriorityDisinherit+0x7a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8183a:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8183c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   8183e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   81840:	429a      	cmp	r2, r3
   81842:	d033      	beq.n	818ac <vTaskPriorityDisinherit+0x78>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81844:	1d06      	adds	r6, r0, #4
   81846:	4630      	mov	r0, r6
   81848:	4b19      	ldr	r3, [pc, #100]	; (818b0 <vTaskPriorityDisinherit+0x7c>)
   8184a:	4798      	blx	r3
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   8184c:	4620      	mov	r0, r4
   8184e:	4d19      	ldr	r5, [pc, #100]	; (818b4 <vTaskPriorityDisinherit+0x80>)
   81850:	47a8      	blx	r5
   81852:	4607      	mov	r7, r0
   81854:	4620      	mov	r0, r4
   81856:	47a8      	blx	r5
   81858:	4601      	mov	r1, r0
   8185a:	2003      	movs	r0, #3
   8185c:	4b16      	ldr	r3, [pc, #88]	; (818b8 <vTaskPriorityDisinherit+0x84>)
   8185e:	4798      	blx	r3
   81860:	4603      	mov	r3, r0
   81862:	463a      	mov	r2, r7
   81864:	2103      	movs	r1, #3
   81866:	208f      	movs	r0, #143	; 0x8f
   81868:	4f14      	ldr	r7, [pc, #80]	; (818bc <vTaskPriorityDisinherit+0x88>)
   8186a:	47b8      	blx	r7
   8186c:	4620      	mov	r0, r4
   8186e:	47a8      	blx	r5
   81870:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   81874:	4601      	mov	r1, r0
   81876:	2003      	movs	r0, #3
   81878:	4b11      	ldr	r3, [pc, #68]	; (818c0 <vTaskPriorityDisinherit+0x8c>)
   8187a:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8187c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8187e:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81880:	f1c3 0305 	rsb	r3, r3, #5
   81884:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81886:	4620      	mov	r0, r4
   81888:	47a8      	blx	r5
   8188a:	4b0e      	ldr	r3, [pc, #56]	; (818c4 <vTaskPriorityDisinherit+0x90>)
   8188c:	4798      	blx	r3
   8188e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81890:	4b0d      	ldr	r3, [pc, #52]	; (818c8 <vTaskPriorityDisinherit+0x94>)
   81892:	681b      	ldr	r3, [r3, #0]
   81894:	4298      	cmp	r0, r3
   81896:	bf84      	itt	hi
   81898:	4b0b      	ldrhi	r3, [pc, #44]	; (818c8 <vTaskPriorityDisinherit+0x94>)
   8189a:	6018      	strhi	r0, [r3, #0]
   8189c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   818a0:	4631      	mov	r1, r6
   818a2:	4b0a      	ldr	r3, [pc, #40]	; (818cc <vTaskPriorityDisinherit+0x98>)
   818a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   818a8:	4b09      	ldr	r3, [pc, #36]	; (818d0 <vTaskPriorityDisinherit+0x9c>)
   818aa:	4798      	blx	r3
   818ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   818ae:	4770      	bx	lr
   818b0:	00080231 	.word	0x00080231
   818b4:	00083101 	.word	0x00083101
   818b8:	00082ebd 	.word	0x00082ebd
   818bc:	00082c8d 	.word	0x00082c8d
   818c0:	00082e65 	.word	0x00082e65
   818c4:	00082ae9 	.word	0x00082ae9
   818c8:	2007a9dc 	.word	0x2007a9dc
   818cc:	2007a9e8 	.word	0x2007a9e8
   818d0:	000801d9 	.word	0x000801d9

000818d4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   818d4:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   818d6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   818d8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   818da:	4291      	cmp	r1, r2
   818dc:	d80a      	bhi.n	818f4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   818de:	1ad2      	subs	r2, r2, r3
   818e0:	6983      	ldr	r3, [r0, #24]
   818e2:	429a      	cmp	r2, r3
   818e4:	d211      	bcs.n	8190a <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   818e6:	1d01      	adds	r1, r0, #4
   818e8:	4b0a      	ldr	r3, [pc, #40]	; (81914 <prvInsertTimerInActiveList+0x40>)
   818ea:	6818      	ldr	r0, [r3, #0]
   818ec:	4b0a      	ldr	r3, [pc, #40]	; (81918 <prvInsertTimerInActiveList+0x44>)
   818ee:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   818f0:	2000      	movs	r0, #0
   818f2:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   818f4:	429a      	cmp	r2, r3
   818f6:	d201      	bcs.n	818fc <prvInsertTimerInActiveList+0x28>
   818f8:	4299      	cmp	r1, r3
   818fa:	d208      	bcs.n	8190e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   818fc:	1d01      	adds	r1, r0, #4
   818fe:	4b07      	ldr	r3, [pc, #28]	; (8191c <prvInsertTimerInActiveList+0x48>)
   81900:	6818      	ldr	r0, [r3, #0]
   81902:	4b05      	ldr	r3, [pc, #20]	; (81918 <prvInsertTimerInActiveList+0x44>)
   81904:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81906:	2000      	movs	r0, #0
   81908:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8190a:	2001      	movs	r0, #1
   8190c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8190e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81910:	bd08      	pop	{r3, pc}
   81912:	bf00      	nop
   81914:	2007ab10 	.word	0x2007ab10
   81918:	000801f5 	.word	0x000801f5
   8191c:	2007aadc 	.word	0x2007aadc

00081920 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81920:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81922:	4b0d      	ldr	r3, [pc, #52]	; (81958 <prvCheckForValidListAndQueue+0x38>)
   81924:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81926:	4b0d      	ldr	r3, [pc, #52]	; (8195c <prvCheckForValidListAndQueue+0x3c>)
   81928:	681b      	ldr	r3, [r3, #0]
   8192a:	b98b      	cbnz	r3, 81950 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   8192c:	4d0c      	ldr	r5, [pc, #48]	; (81960 <prvCheckForValidListAndQueue+0x40>)
   8192e:	4628      	mov	r0, r5
   81930:	4e0c      	ldr	r6, [pc, #48]	; (81964 <prvCheckForValidListAndQueue+0x44>)
   81932:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81934:	4c0c      	ldr	r4, [pc, #48]	; (81968 <prvCheckForValidListAndQueue+0x48>)
   81936:	4620      	mov	r0, r4
   81938:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8193a:	4b0c      	ldr	r3, [pc, #48]	; (8196c <prvCheckForValidListAndQueue+0x4c>)
   8193c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8193e:	4b0c      	ldr	r3, [pc, #48]	; (81970 <prvCheckForValidListAndQueue+0x50>)
   81940:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81942:	2200      	movs	r2, #0
   81944:	210c      	movs	r1, #12
   81946:	2005      	movs	r0, #5
   81948:	4b0a      	ldr	r3, [pc, #40]	; (81974 <prvCheckForValidListAndQueue+0x54>)
   8194a:	4798      	blx	r3
   8194c:	4b03      	ldr	r3, [pc, #12]	; (8195c <prvCheckForValidListAndQueue+0x3c>)
   8194e:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81950:	4b09      	ldr	r3, [pc, #36]	; (81978 <prvCheckForValidListAndQueue+0x58>)
   81952:	4798      	blx	r3
   81954:	bd70      	pop	{r4, r5, r6, pc}
   81956:	bf00      	nop
   81958:	000802c9 	.word	0x000802c9
   8195c:	2007ab0c 	.word	0x2007ab0c
   81960:	2007aae0 	.word	0x2007aae0
   81964:	000801b9 	.word	0x000801b9
   81968:	2007aaf4 	.word	0x2007aaf4
   8196c:	2007aadc 	.word	0x2007aadc
   81970:	2007ab10 	.word	0x2007ab10
   81974:	000806b5 	.word	0x000806b5
   81978:	000802e9 	.word	0x000802e9

0008197c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   8197c:	b510      	push	{r4, lr}
   8197e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81980:	4b0c      	ldr	r3, [pc, #48]	; (819b4 <xTimerCreateTimerTask+0x38>)
   81982:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81984:	4b0c      	ldr	r3, [pc, #48]	; (819b8 <xTimerCreateTimerTask+0x3c>)
   81986:	681b      	ldr	r3, [r3, #0]
   81988:	b16b      	cbz	r3, 819a6 <xTimerCreateTimerTask+0x2a>
	{
		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
		{
			/* Create the timer task, storing its handle in xTimerTaskHandle so
			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
   8198a:	2300      	movs	r3, #0
   8198c:	9303      	str	r3, [sp, #12]
   8198e:	9302      	str	r3, [sp, #8]
   81990:	4a0a      	ldr	r2, [pc, #40]	; (819bc <xTimerCreateTimerTask+0x40>)
   81992:	9201      	str	r2, [sp, #4]
   81994:	2204      	movs	r2, #4
   81996:	9200      	str	r2, [sp, #0]
   81998:	f44f 7282 	mov.w	r2, #260	; 0x104
   8199c:	4908      	ldr	r1, [pc, #32]	; (819c0 <xTimerCreateTimerTask+0x44>)
   8199e:	4809      	ldr	r0, [pc, #36]	; (819c4 <xTimerCreateTimerTask+0x48>)
   819a0:	4c09      	ldr	r4, [pc, #36]	; (819c8 <xTimerCreateTimerTask+0x4c>)
   819a2:	47a0      	blx	r4
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
		}
		#endif
	}

	configASSERT( xReturn );
   819a4:	b918      	cbnz	r0, 819ae <xTimerCreateTimerTask+0x32>
   819a6:	4b09      	ldr	r3, [pc, #36]	; (819cc <xTimerCreateTimerTask+0x50>)
   819a8:	4798      	blx	r3
   819aa:	bf00      	nop
   819ac:	e7fd      	b.n	819aa <xTimerCreateTimerTask+0x2e>
	return xReturn;
}
   819ae:	b004      	add	sp, #16
   819b0:	bd10      	pop	{r4, pc}
   819b2:	bf00      	nop
   819b4:	00081921 	.word	0x00081921
   819b8:	2007ab0c 	.word	0x2007ab0c
   819bc:	2007ab14 	.word	0x2007ab14
   819c0:	000866c0 	.word	0x000866c0
   819c4:	00081ad9 	.word	0x00081ad9
   819c8:	00080de5 	.word	0x00080de5
   819cc:	000802b9 	.word	0x000802b9

000819d0 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   819d0:	b530      	push	{r4, r5, lr}
   819d2:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   819d4:	4c0f      	ldr	r4, [pc, #60]	; (81a14 <xTimerGenericCommand+0x44>)
   819d6:	6825      	ldr	r5, [r4, #0]
   819d8:	b1cd      	cbz	r5, 81a0e <xTimerGenericCommand+0x3e>
   819da:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   819dc:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   819de:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   819e0:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   819e2:	b96c      	cbnz	r4, 81a00 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   819e4:	4b0c      	ldr	r3, [pc, #48]	; (81a18 <xTimerGenericCommand+0x48>)
   819e6:	4798      	blx	r3
   819e8:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   819ea:	f04f 0300 	mov.w	r3, #0
   819ee:	bf0c      	ite	eq
   819f0:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   819f2:	461a      	movne	r2, r3
   819f4:	a901      	add	r1, sp, #4
   819f6:	4807      	ldr	r0, [pc, #28]	; (81a14 <xTimerGenericCommand+0x44>)
   819f8:	6800      	ldr	r0, [r0, #0]
   819fa:	4c08      	ldr	r4, [pc, #32]	; (81a1c <xTimerGenericCommand+0x4c>)
   819fc:	47a0      	blx	r4
   819fe:	e007      	b.n	81a10 <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81a00:	2300      	movs	r3, #0
   81a02:	4622      	mov	r2, r4
   81a04:	a901      	add	r1, sp, #4
   81a06:	4628      	mov	r0, r5
   81a08:	4c05      	ldr	r4, [pc, #20]	; (81a20 <xTimerGenericCommand+0x50>)
   81a0a:	47a0      	blx	r4
   81a0c:	e000      	b.n	81a10 <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81a0e:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81a10:	b005      	add	sp, #20
   81a12:	bd30      	pop	{r4, r5, pc}
   81a14:	2007ab0c 	.word	0x2007ab0c
   81a18:	00081741 	.word	0x00081741
   81a1c:	00080785 	.word	0x00080785
   81a20:	00080989 	.word	0x00080989

00081a24 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a28:	b082      	sub	sp, #8
   81a2a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81a2c:	4b22      	ldr	r3, [pc, #136]	; (81ab8 <prvSampleTimeNow+0x94>)
   81a2e:	4798      	blx	r3
   81a30:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81a32:	4b22      	ldr	r3, [pc, #136]	; (81abc <prvSampleTimeNow+0x98>)
   81a34:	681b      	ldr	r3, [r3, #0]
   81a36:	4298      	cmp	r0, r3
   81a38:	d234      	bcs.n	81aa4 <prvSampleTimeNow+0x80>
   81a3a:	e024      	b.n	81a86 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81a3c:	68da      	ldr	r2, [r3, #12]
   81a3e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81a42:	68db      	ldr	r3, [r3, #12]
   81a44:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81a46:	1d25      	adds	r5, r4, #4
   81a48:	4628      	mov	r0, r5
   81a4a:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a4e:	4620      	mov	r0, r4
   81a50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81a52:	69e3      	ldr	r3, [r4, #28]
   81a54:	2b01      	cmp	r3, #1
   81a56:	d118      	bne.n	81a8a <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81a58:	69a3      	ldr	r3, [r4, #24]
   81a5a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81a5c:	459a      	cmp	sl, r3
   81a5e:	d206      	bcs.n	81a6e <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81a60:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81a62:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81a64:	4629      	mov	r1, r5
   81a66:	6830      	ldr	r0, [r6, #0]
   81a68:	4b15      	ldr	r3, [pc, #84]	; (81ac0 <prvSampleTimeNow+0x9c>)
   81a6a:	4798      	blx	r3
   81a6c:	e00d      	b.n	81a8a <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81a6e:	2100      	movs	r1, #0
   81a70:	9100      	str	r1, [sp, #0]
   81a72:	460b      	mov	r3, r1
   81a74:	4652      	mov	r2, sl
   81a76:	4620      	mov	r0, r4
   81a78:	4c12      	ldr	r4, [pc, #72]	; (81ac4 <prvSampleTimeNow+0xa0>)
   81a7a:	47a0      	blx	r4
				configASSERT( xResult );
   81a7c:	b928      	cbnz	r0, 81a8a <prvSampleTimeNow+0x66>
   81a7e:	4b12      	ldr	r3, [pc, #72]	; (81ac8 <prvSampleTimeNow+0xa4>)
   81a80:	4798      	blx	r3
   81a82:	bf00      	nop
   81a84:	e7fd      	b.n	81a82 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81a86:	4e11      	ldr	r6, [pc, #68]	; (81acc <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81a88:	4f11      	ldr	r7, [pc, #68]	; (81ad0 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81a8a:	6833      	ldr	r3, [r6, #0]
   81a8c:	681a      	ldr	r2, [r3, #0]
   81a8e:	2a00      	cmp	r2, #0
   81a90:	d1d4      	bne.n	81a3c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81a92:	4a10      	ldr	r2, [pc, #64]	; (81ad4 <prvSampleTimeNow+0xb0>)
   81a94:	6810      	ldr	r0, [r2, #0]
   81a96:	490d      	ldr	r1, [pc, #52]	; (81acc <prvSampleTimeNow+0xa8>)
   81a98:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81a9a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81a9c:	2301      	movs	r3, #1
   81a9e:	f8c9 3000 	str.w	r3, [r9]
   81aa2:	e002      	b.n	81aaa <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81aa4:	2300      	movs	r3, #0
   81aa6:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81aaa:	4b04      	ldr	r3, [pc, #16]	; (81abc <prvSampleTimeNow+0x98>)
   81aac:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81ab0:	4640      	mov	r0, r8
   81ab2:	b002      	add	sp, #8
   81ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81ab8:	000810c9 	.word	0x000810c9
   81abc:	2007ab08 	.word	0x2007ab08
   81ac0:	000801f5 	.word	0x000801f5
   81ac4:	000819d1 	.word	0x000819d1
   81ac8:	000802b9 	.word	0x000802b9
   81acc:	2007aadc 	.word	0x2007aadc
   81ad0:	00080231 	.word	0x00080231
   81ad4:	2007ab10 	.word	0x2007ab10

00081ad8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81adc:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81ade:	4d4d      	ldr	r5, [pc, #308]	; (81c14 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81ae0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81c44 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81ae4:	4b4c      	ldr	r3, [pc, #304]	; (81c18 <prvTimerTask+0x140>)
   81ae6:	681b      	ldr	r3, [r3, #0]
   81ae8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81aea:	2a00      	cmp	r2, #0
   81aec:	f000 8088 	beq.w	81c00 <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81af0:	68db      	ldr	r3, [r3, #12]
   81af2:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81af4:	4b49      	ldr	r3, [pc, #292]	; (81c1c <prvTimerTask+0x144>)
   81af6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81af8:	a803      	add	r0, sp, #12
   81afa:	4b49      	ldr	r3, [pc, #292]	; (81c20 <prvTimerTask+0x148>)
   81afc:	4798      	blx	r3
   81afe:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81b00:	9b03      	ldr	r3, [sp, #12]
   81b02:	2b00      	cmp	r3, #0
   81b04:	d130      	bne.n	81b68 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81b06:	4286      	cmp	r6, r0
   81b08:	d824      	bhi.n	81b54 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81b0a:	4b46      	ldr	r3, [pc, #280]	; (81c24 <prvTimerTask+0x14c>)
   81b0c:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b0e:	4b42      	ldr	r3, [pc, #264]	; (81c18 <prvTimerTask+0x140>)
   81b10:	681b      	ldr	r3, [r3, #0]
   81b12:	68db      	ldr	r3, [r3, #12]
   81b14:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b16:	1d20      	adds	r0, r4, #4
   81b18:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b1a:	69e3      	ldr	r3, [r4, #28]
   81b1c:	2b01      	cmp	r3, #1
   81b1e:	d114      	bne.n	81b4a <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81b20:	69a1      	ldr	r1, [r4, #24]
   81b22:	4633      	mov	r3, r6
   81b24:	463a      	mov	r2, r7
   81b26:	4431      	add	r1, r6
   81b28:	4620      	mov	r0, r4
   81b2a:	4f3f      	ldr	r7, [pc, #252]	; (81c28 <prvTimerTask+0x150>)
   81b2c:	47b8      	blx	r7
   81b2e:	2801      	cmp	r0, #1
   81b30:	d10b      	bne.n	81b4a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81b32:	2100      	movs	r1, #0
   81b34:	9100      	str	r1, [sp, #0]
   81b36:	460b      	mov	r3, r1
   81b38:	4632      	mov	r2, r6
   81b3a:	4620      	mov	r0, r4
   81b3c:	4e3b      	ldr	r6, [pc, #236]	; (81c2c <prvTimerTask+0x154>)
   81b3e:	47b0      	blx	r6
			configASSERT( xResult );
   81b40:	b918      	cbnz	r0, 81b4a <prvTimerTask+0x72>
   81b42:	4b3b      	ldr	r3, [pc, #236]	; (81c30 <prvTimerTask+0x158>)
   81b44:	4798      	blx	r3
   81b46:	bf00      	nop
   81b48:	e7fd      	b.n	81b46 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b4c:	4620      	mov	r0, r4
   81b4e:	4798      	blx	r3
   81b50:	e00c      	b.n	81b6c <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81b52:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81b54:	1bf1      	subs	r1, r6, r7
   81b56:	6828      	ldr	r0, [r5, #0]
   81b58:	4b36      	ldr	r3, [pc, #216]	; (81c34 <prvTimerTask+0x15c>)
   81b5a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81b5c:	4b31      	ldr	r3, [pc, #196]	; (81c24 <prvTimerTask+0x14c>)
   81b5e:	4798      	blx	r3
   81b60:	b920      	cbnz	r0, 81b6c <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81b62:	4b35      	ldr	r3, [pc, #212]	; (81c38 <prvTimerTask+0x160>)
   81b64:	4798      	blx	r3
   81b66:	e001      	b.n	81b6c <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81b68:	4b2e      	ldr	r3, [pc, #184]	; (81c24 <prvTimerTask+0x14c>)
   81b6a:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b6c:	a802      	add	r0, sp, #8
   81b6e:	4b2c      	ldr	r3, [pc, #176]	; (81c20 <prvTimerTask+0x148>)
   81b70:	4798      	blx	r3
   81b72:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81b74:	4e31      	ldr	r6, [pc, #196]	; (81c3c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81b76:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81c28 <prvTimerTask+0x150>
   81b7a:	e039      	b.n	81bf0 <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81b7c:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81b7e:	b11c      	cbz	r4, 81b88 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81b80:	6963      	ldr	r3, [r4, #20]
   81b82:	b10b      	cbz	r3, 81b88 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81b84:	1d20      	adds	r0, r4, #4
   81b86:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81b88:	9b03      	ldr	r3, [sp, #12]
   81b8a:	2b02      	cmp	r3, #2
   81b8c:	d020      	beq.n	81bd0 <prvTimerTask+0xf8>
   81b8e:	2b03      	cmp	r3, #3
   81b90:	d02b      	beq.n	81bea <prvTimerTask+0x112>
   81b92:	2b00      	cmp	r3, #0
   81b94:	d12c      	bne.n	81bf0 <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81b96:	9904      	ldr	r1, [sp, #16]
   81b98:	69a0      	ldr	r0, [r4, #24]
   81b9a:	460b      	mov	r3, r1
   81b9c:	463a      	mov	r2, r7
   81b9e:	4401      	add	r1, r0
   81ba0:	4620      	mov	r0, r4
   81ba2:	47c8      	blx	r9
   81ba4:	2801      	cmp	r0, #1
   81ba6:	d123      	bne.n	81bf0 <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81baa:	4620      	mov	r0, r4
   81bac:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81bae:	69e3      	ldr	r3, [r4, #28]
   81bb0:	2b01      	cmp	r3, #1
   81bb2:	d11d      	bne.n	81bf0 <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81bb4:	69a2      	ldr	r2, [r4, #24]
   81bb6:	2100      	movs	r1, #0
   81bb8:	9100      	str	r1, [sp, #0]
   81bba:	460b      	mov	r3, r1
   81bbc:	9804      	ldr	r0, [sp, #16]
   81bbe:	4402      	add	r2, r0
   81bc0:	4620      	mov	r0, r4
   81bc2:	4c1a      	ldr	r4, [pc, #104]	; (81c2c <prvTimerTask+0x154>)
   81bc4:	47a0      	blx	r4
						configASSERT( xResult );
   81bc6:	b998      	cbnz	r0, 81bf0 <prvTimerTask+0x118>
   81bc8:	4b19      	ldr	r3, [pc, #100]	; (81c30 <prvTimerTask+0x158>)
   81bca:	4798      	blx	r3
   81bcc:	bf00      	nop
   81bce:	e7fd      	b.n	81bcc <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81bd0:	9904      	ldr	r1, [sp, #16]
   81bd2:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81bd4:	b919      	cbnz	r1, 81bde <prvTimerTask+0x106>
   81bd6:	4b16      	ldr	r3, [pc, #88]	; (81c30 <prvTimerTask+0x158>)
   81bd8:	4798      	blx	r3
   81bda:	bf00      	nop
   81bdc:	e7fd      	b.n	81bda <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81bde:	463b      	mov	r3, r7
   81be0:	463a      	mov	r2, r7
   81be2:	4439      	add	r1, r7
   81be4:	4620      	mov	r0, r4
   81be6:	47c8      	blx	r9
   81be8:	e002      	b.n	81bf0 <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81bea:	4620      	mov	r0, r4
   81bec:	4b14      	ldr	r3, [pc, #80]	; (81c40 <prvTimerTask+0x168>)
   81bee:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81bf0:	2300      	movs	r3, #0
   81bf2:	461a      	mov	r2, r3
   81bf4:	a903      	add	r1, sp, #12
   81bf6:	6828      	ldr	r0, [r5, #0]
   81bf8:	47b0      	blx	r6
   81bfa:	2800      	cmp	r0, #0
   81bfc:	d1be      	bne.n	81b7c <prvTimerTask+0xa4>
   81bfe:	e771      	b.n	81ae4 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81c00:	4b06      	ldr	r3, [pc, #24]	; (81c1c <prvTimerTask+0x144>)
   81c02:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c04:	a803      	add	r0, sp, #12
   81c06:	4b06      	ldr	r3, [pc, #24]	; (81c20 <prvTimerTask+0x148>)
   81c08:	4798      	blx	r3
   81c0a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c0c:	9b03      	ldr	r3, [sp, #12]
   81c0e:	2b00      	cmp	r3, #0
   81c10:	d09f      	beq.n	81b52 <prvTimerTask+0x7a>
   81c12:	e7a9      	b.n	81b68 <prvTimerTask+0x90>
   81c14:	2007ab0c 	.word	0x2007ab0c
   81c18:	2007aadc 	.word	0x2007aadc
   81c1c:	000810b9 	.word	0x000810b9
   81c20:	00081a25 	.word	0x00081a25
   81c24:	00081245 	.word	0x00081245
   81c28:	000818d5 	.word	0x000818d5
   81c2c:	000819d1 	.word	0x000819d1
   81c30:	000802b9 	.word	0x000802b9
   81c34:	00080d41 	.word	0x00080d41
   81c38:	000802a9 	.word	0x000802a9
   81c3c:	00080a99 	.word	0x00080a99
   81c40:	000804e5 	.word	0x000804e5
   81c44:	00080231 	.word	0x00080231

00081c48 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81c48:	3801      	subs	r0, #1
   81c4a:	2802      	cmp	r0, #2
   81c4c:	d815      	bhi.n	81c7a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c52:	460e      	mov	r6, r1
   81c54:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81c56:	b19a      	cbz	r2, 81c80 <_write+0x38>
   81c58:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81c5a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81c94 <_write+0x4c>
   81c5e:	4f0c      	ldr	r7, [pc, #48]	; (81c90 <_write+0x48>)
   81c60:	f8d8 0000 	ldr.w	r0, [r8]
   81c64:	f815 1b01 	ldrb.w	r1, [r5], #1
   81c68:	683b      	ldr	r3, [r7, #0]
   81c6a:	4798      	blx	r3
   81c6c:	2800      	cmp	r0, #0
   81c6e:	db0a      	blt.n	81c86 <_write+0x3e>
   81c70:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81c72:	3c01      	subs	r4, #1
   81c74:	d1f4      	bne.n	81c60 <_write+0x18>
   81c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   81c7a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   81c7e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81c80:	2000      	movs	r0, #0
   81c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   81c86:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c8e:	bf00      	nop
   81c90:	2007ac90 	.word	0x2007ac90
   81c94:	2007ac94 	.word	0x2007ac94

00081c98 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81c98:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81c9a:	23ac      	movs	r3, #172	; 0xac
   81c9c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81c9e:	680b      	ldr	r3, [r1, #0]
   81ca0:	684a      	ldr	r2, [r1, #4]
   81ca2:	fbb3 f3f2 	udiv	r3, r3, r2
   81ca6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81ca8:	1e5c      	subs	r4, r3, #1
   81caa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81cae:	4294      	cmp	r4, r2
   81cb0:	d80a      	bhi.n	81cc8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81cb2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81cb4:	688b      	ldr	r3, [r1, #8]
   81cb6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81cb8:	f240 2302 	movw	r3, #514	; 0x202
   81cbc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81cc0:	2350      	movs	r3, #80	; 0x50
   81cc2:	6003      	str	r3, [r0, #0]

	return 0;
   81cc4:	2000      	movs	r0, #0
   81cc6:	e000      	b.n	81cca <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81cc8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   81cca:	bc10      	pop	{r4}
   81ccc:	4770      	bx	lr
   81cce:	bf00      	nop

00081cd0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81cd0:	6943      	ldr	r3, [r0, #20]
   81cd2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81cd6:	bf1a      	itte	ne
   81cd8:	61c1      	strne	r1, [r0, #28]
	return 0;
   81cda:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   81cdc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   81cde:	4770      	bx	lr

00081ce0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81ce0:	6943      	ldr	r3, [r0, #20]
   81ce2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81ce6:	bf1d      	ittte	ne
   81ce8:	6983      	ldrne	r3, [r0, #24]
   81cea:	700b      	strbne	r3, [r1, #0]
	return 0;
   81cec:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   81cee:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81cf0:	4770      	bx	lr
   81cf2:	bf00      	nop

00081cf4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81cf4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81cf6:	480e      	ldr	r0, [pc, #56]	; (81d30 <sysclk_init+0x3c>)
   81cf8:	4b0e      	ldr	r3, [pc, #56]	; (81d34 <sysclk_init+0x40>)
   81cfa:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81cfc:	213e      	movs	r1, #62	; 0x3e
   81cfe:	2000      	movs	r0, #0
   81d00:	4b0d      	ldr	r3, [pc, #52]	; (81d38 <sysclk_init+0x44>)
   81d02:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81d04:	4c0d      	ldr	r4, [pc, #52]	; (81d3c <sysclk_init+0x48>)
   81d06:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81d08:	2800      	cmp	r0, #0
   81d0a:	d0fc      	beq.n	81d06 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81d0c:	4b0c      	ldr	r3, [pc, #48]	; (81d40 <sysclk_init+0x4c>)
   81d0e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81d10:	4a0c      	ldr	r2, [pc, #48]	; (81d44 <sysclk_init+0x50>)
   81d12:	4b0d      	ldr	r3, [pc, #52]	; (81d48 <sysclk_init+0x54>)
   81d14:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81d16:	4c0d      	ldr	r4, [pc, #52]	; (81d4c <sysclk_init+0x58>)
   81d18:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81d1a:	2800      	cmp	r0, #0
   81d1c:	d0fc      	beq.n	81d18 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81d1e:	2010      	movs	r0, #16
   81d20:	4b0b      	ldr	r3, [pc, #44]	; (81d50 <sysclk_init+0x5c>)
   81d22:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81d24:	4b0b      	ldr	r3, [pc, #44]	; (81d54 <sysclk_init+0x60>)
   81d26:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81d28:	4801      	ldr	r0, [pc, #4]	; (81d30 <sysclk_init+0x3c>)
   81d2a:	4b02      	ldr	r3, [pc, #8]	; (81d34 <sysclk_init+0x40>)
   81d2c:	4798      	blx	r3
   81d2e:	bd10      	pop	{r4, pc}
   81d30:	0501bd00 	.word	0x0501bd00
   81d34:	200700a5 	.word	0x200700a5
   81d38:	000820f9 	.word	0x000820f9
   81d3c:	0008214d 	.word	0x0008214d
   81d40:	0008215d 	.word	0x0008215d
   81d44:	200d3f01 	.word	0x200d3f01
   81d48:	400e0600 	.word	0x400e0600
   81d4c:	0008216d 	.word	0x0008216d
   81d50:	00082091 	.word	0x00082091
   81d54:	00082281 	.word	0x00082281

00081d58 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81d58:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81d5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d5e:	4b16      	ldr	r3, [pc, #88]	; (81db8 <board_init+0x60>)
   81d60:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81d62:	200b      	movs	r0, #11
   81d64:	4c15      	ldr	r4, [pc, #84]	; (81dbc <board_init+0x64>)
   81d66:	47a0      	blx	r4
   81d68:	200c      	movs	r0, #12
   81d6a:	47a0      	blx	r4
   81d6c:	200d      	movs	r0, #13
   81d6e:	47a0      	blx	r4
   81d70:	200e      	movs	r0, #14
   81d72:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81d74:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d78:	203b      	movs	r0, #59	; 0x3b
   81d7a:	4c11      	ldr	r4, [pc, #68]	; (81dc0 <board_init+0x68>)
   81d7c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81d7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d82:	2055      	movs	r0, #85	; 0x55
   81d84:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81d86:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d8a:	2056      	movs	r0, #86	; 0x56
   81d8c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81d8e:	490d      	ldr	r1, [pc, #52]	; (81dc4 <board_init+0x6c>)
   81d90:	2068      	movs	r0, #104	; 0x68
   81d92:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81d94:	490c      	ldr	r1, [pc, #48]	; (81dc8 <board_init+0x70>)
   81d96:	205c      	movs	r0, #92	; 0x5c
   81d98:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81d9a:	4a0c      	ldr	r2, [pc, #48]	; (81dcc <board_init+0x74>)
   81d9c:	f44f 7140 	mov.w	r1, #768	; 0x300
   81da0:	480b      	ldr	r0, [pc, #44]	; (81dd0 <board_init+0x78>)
   81da2:	4b0c      	ldr	r3, [pc, #48]	; (81dd4 <board_init+0x7c>)
   81da4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81da6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81daa:	202b      	movs	r0, #43	; 0x2b
   81dac:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81dae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81db2:	202a      	movs	r0, #42	; 0x2a
   81db4:	47a0      	blx	r4
   81db6:	bd10      	pop	{r4, pc}
   81db8:	400e1a50 	.word	0x400e1a50
   81dbc:	0008217d 	.word	0x0008217d
   81dc0:	00081e7d 	.word	0x00081e7d
   81dc4:	28000079 	.word	0x28000079
   81dc8:	28000001 	.word	0x28000001
   81dcc:	08000001 	.word	0x08000001
   81dd0:	400e0e00 	.word	0x400e0e00
   81dd4:	00081f51 	.word	0x00081f51

00081dd8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81dd8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81dda:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81dde:	d016      	beq.n	81e0e <pio_set_peripheral+0x36>
   81de0:	d804      	bhi.n	81dec <pio_set_peripheral+0x14>
   81de2:	b1c1      	cbz	r1, 81e16 <pio_set_peripheral+0x3e>
   81de4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81de8:	d00a      	beq.n	81e00 <pio_set_peripheral+0x28>
   81dea:	e013      	b.n	81e14 <pio_set_peripheral+0x3c>
   81dec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81df0:	d011      	beq.n	81e16 <pio_set_peripheral+0x3e>
   81df2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81df6:	d00e      	beq.n	81e16 <pio_set_peripheral+0x3e>
   81df8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81dfc:	d10a      	bne.n	81e14 <pio_set_peripheral+0x3c>
   81dfe:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81e00:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81e02:	6f03      	ldr	r3, [r0, #112]	; 0x70
   81e04:	400b      	ands	r3, r1
   81e06:	ea23 0302 	bic.w	r3, r3, r2
   81e0a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81e0c:	e002      	b.n	81e14 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81e0e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81e10:	4313      	orrs	r3, r2
   81e12:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81e14:	6042      	str	r2, [r0, #4]
   81e16:	4770      	bx	lr

00081e18 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81e18:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e1a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81e1e:	bf14      	ite	ne
   81e20:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e22:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81e24:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81e28:	bf14      	ite	ne
   81e2a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81e2c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81e2e:	f012 0f02 	tst.w	r2, #2
   81e32:	d002      	beq.n	81e3a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81e34:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81e38:	e004      	b.n	81e44 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81e3a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81e3e:	bf18      	it	ne
   81e40:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81e44:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81e46:	6001      	str	r1, [r0, #0]
   81e48:	4770      	bx	lr
   81e4a:	bf00      	nop

00081e4c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81e4c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81e4e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81e50:	9c01      	ldr	r4, [sp, #4]
   81e52:	b10c      	cbz	r4, 81e58 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81e54:	6641      	str	r1, [r0, #100]	; 0x64
   81e56:	e000      	b.n	81e5a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81e58:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81e5a:	b10b      	cbz	r3, 81e60 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81e5c:	6501      	str	r1, [r0, #80]	; 0x50
   81e5e:	e000      	b.n	81e62 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81e60:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81e62:	b10a      	cbz	r2, 81e68 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81e64:	6301      	str	r1, [r0, #48]	; 0x30
   81e66:	e000      	b.n	81e6a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81e68:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81e6a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81e6c:	6001      	str	r1, [r0, #0]
}
   81e6e:	bc10      	pop	{r4}
   81e70:	4770      	bx	lr
   81e72:	bf00      	nop

00081e74 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81e74:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81e76:	4770      	bx	lr

00081e78 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81e78:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81e7a:	4770      	bx	lr

00081e7c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81e7c:	b570      	push	{r4, r5, r6, lr}
   81e7e:	b082      	sub	sp, #8
   81e80:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e82:	0943      	lsrs	r3, r0, #5
   81e84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e88:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e8c:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81e8e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81e92:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81e96:	d030      	beq.n	81efa <pio_configure_pin+0x7e>
   81e98:	d806      	bhi.n	81ea8 <pio_configure_pin+0x2c>
   81e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81e9e:	d00a      	beq.n	81eb6 <pio_configure_pin+0x3a>
   81ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ea4:	d018      	beq.n	81ed8 <pio_configure_pin+0x5c>
   81ea6:	e049      	b.n	81f3c <pio_configure_pin+0xc0>
   81ea8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81eac:	d030      	beq.n	81f10 <pio_configure_pin+0x94>
   81eae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81eb2:	d02d      	beq.n	81f10 <pio_configure_pin+0x94>
   81eb4:	e042      	b.n	81f3c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81eb6:	f000 001f 	and.w	r0, r0, #31
   81eba:	2601      	movs	r6, #1
   81ebc:	4086      	lsls	r6, r0
   81ebe:	4632      	mov	r2, r6
   81ec0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ec4:	4620      	mov	r0, r4
   81ec6:	4b1f      	ldr	r3, [pc, #124]	; (81f44 <pio_configure_pin+0xc8>)
   81ec8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81eca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81ece:	bf14      	ite	ne
   81ed0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81ed2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81ed4:	2001      	movs	r0, #1
   81ed6:	e032      	b.n	81f3e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81ed8:	f000 001f 	and.w	r0, r0, #31
   81edc:	2601      	movs	r6, #1
   81ede:	4086      	lsls	r6, r0
   81ee0:	4632      	mov	r2, r6
   81ee2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ee6:	4620      	mov	r0, r4
   81ee8:	4b16      	ldr	r3, [pc, #88]	; (81f44 <pio_configure_pin+0xc8>)
   81eea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81eec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81ef0:	bf14      	ite	ne
   81ef2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81ef4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81ef6:	2001      	movs	r0, #1
   81ef8:	e021      	b.n	81f3e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81efa:	f000 011f 	and.w	r1, r0, #31
   81efe:	2601      	movs	r6, #1
   81f00:	462a      	mov	r2, r5
   81f02:	fa06 f101 	lsl.w	r1, r6, r1
   81f06:	4620      	mov	r0, r4
   81f08:	4b0f      	ldr	r3, [pc, #60]	; (81f48 <pio_configure_pin+0xcc>)
   81f0a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81f0c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81f0e:	e016      	b.n	81f3e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f10:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   81f14:	f000 011f 	and.w	r1, r0, #31
   81f18:	2601      	movs	r6, #1
   81f1a:	ea05 0306 	and.w	r3, r5, r6
   81f1e:	9300      	str	r3, [sp, #0]
   81f20:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81f24:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f28:	bf14      	ite	ne
   81f2a:	2200      	movne	r2, #0
   81f2c:	2201      	moveq	r2, #1
   81f2e:	fa06 f101 	lsl.w	r1, r6, r1
   81f32:	4620      	mov	r0, r4
   81f34:	4c05      	ldr	r4, [pc, #20]	; (81f4c <pio_configure_pin+0xd0>)
   81f36:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81f38:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81f3a:	e000      	b.n	81f3e <pio_configure_pin+0xc2>

	default:
		return 0;
   81f3c:	2000      	movs	r0, #0
	}

	return 1;
}
   81f3e:	b002      	add	sp, #8
   81f40:	bd70      	pop	{r4, r5, r6, pc}
   81f42:	bf00      	nop
   81f44:	00081dd9 	.word	0x00081dd9
   81f48:	00081e19 	.word	0x00081e19
   81f4c:	00081e4d 	.word	0x00081e4d

00081f50 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81f50:	b570      	push	{r4, r5, r6, lr}
   81f52:	b082      	sub	sp, #8
   81f54:	4605      	mov	r5, r0
   81f56:	460e      	mov	r6, r1
   81f58:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81f5a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81f5e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f62:	d026      	beq.n	81fb2 <pio_configure_pin_group+0x62>
   81f64:	d806      	bhi.n	81f74 <pio_configure_pin_group+0x24>
   81f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f6a:	d00a      	beq.n	81f82 <pio_configure_pin_group+0x32>
   81f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f70:	d013      	beq.n	81f9a <pio_configure_pin_group+0x4a>
   81f72:	e034      	b.n	81fde <pio_configure_pin_group+0x8e>
   81f74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f78:	d01f      	beq.n	81fba <pio_configure_pin_group+0x6a>
   81f7a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f7e:	d01c      	beq.n	81fba <pio_configure_pin_group+0x6a>
   81f80:	e02d      	b.n	81fde <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81f82:	460a      	mov	r2, r1
   81f84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f88:	4b16      	ldr	r3, [pc, #88]	; (81fe4 <pio_configure_pin_group+0x94>)
   81f8a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f8c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81f90:	bf14      	ite	ne
   81f92:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f94:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81f96:	2001      	movs	r0, #1
   81f98:	e022      	b.n	81fe0 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81f9a:	460a      	mov	r2, r1
   81f9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81fa0:	4b10      	ldr	r3, [pc, #64]	; (81fe4 <pio_configure_pin_group+0x94>)
   81fa2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81fa4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81fa8:	bf14      	ite	ne
   81faa:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81fac:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81fae:	2001      	movs	r0, #1
   81fb0:	e016      	b.n	81fe0 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81fb2:	4b0d      	ldr	r3, [pc, #52]	; (81fe8 <pio_configure_pin_group+0x98>)
   81fb4:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81fb6:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81fb8:	e012      	b.n	81fe0 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81fba:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   81fbe:	f004 0301 	and.w	r3, r4, #1
   81fc2:	9300      	str	r3, [sp, #0]
   81fc4:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81fc8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81fcc:	bf14      	ite	ne
   81fce:	2200      	movne	r2, #0
   81fd0:	2201      	moveq	r2, #1
   81fd2:	4631      	mov	r1, r6
   81fd4:	4628      	mov	r0, r5
   81fd6:	4c05      	ldr	r4, [pc, #20]	; (81fec <pio_configure_pin_group+0x9c>)
   81fd8:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81fda:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81fdc:	e000      	b.n	81fe0 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81fde:	2000      	movs	r0, #0
	}

	return 1;
}
   81fe0:	b002      	add	sp, #8
   81fe2:	bd70      	pop	{r4, r5, r6, pc}
   81fe4:	00081dd9 	.word	0x00081dd9
   81fe8:	00081e19 	.word	0x00081e19
   81fec:	00081e4d 	.word	0x00081e4d

00081ff0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ff4:	4604      	mov	r4, r0
   81ff6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81ff8:	4b0e      	ldr	r3, [pc, #56]	; (82034 <pio_handler_process+0x44>)
   81ffa:	4798      	blx	r3
   81ffc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81ffe:	4620      	mov	r0, r4
   82000:	4b0d      	ldr	r3, [pc, #52]	; (82038 <pio_handler_process+0x48>)
   82002:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82004:	4005      	ands	r5, r0
   82006:	d013      	beq.n	82030 <pio_handler_process+0x40>
   82008:	4c0c      	ldr	r4, [pc, #48]	; (8203c <pio_handler_process+0x4c>)
   8200a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8200e:	6823      	ldr	r3, [r4, #0]
   82010:	4543      	cmp	r3, r8
   82012:	d108      	bne.n	82026 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82014:	6861      	ldr	r1, [r4, #4]
   82016:	4229      	tst	r1, r5
   82018:	d005      	beq.n	82026 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8201a:	68e3      	ldr	r3, [r4, #12]
   8201c:	4640      	mov	r0, r8
   8201e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82020:	6863      	ldr	r3, [r4, #4]
   82022:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82026:	42b4      	cmp	r4, r6
   82028:	d002      	beq.n	82030 <pio_handler_process+0x40>
   8202a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8202c:	2d00      	cmp	r5, #0
   8202e:	d1ee      	bne.n	8200e <pio_handler_process+0x1e>
   82030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82034:	00081e75 	.word	0x00081e75
   82038:	00081e79 	.word	0x00081e79
   8203c:	2007ab18 	.word	0x2007ab18

00082040 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82040:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82042:	210b      	movs	r1, #11
   82044:	4801      	ldr	r0, [pc, #4]	; (8204c <PIOA_Handler+0xc>)
   82046:	4b02      	ldr	r3, [pc, #8]	; (82050 <PIOA_Handler+0x10>)
   82048:	4798      	blx	r3
   8204a:	bd08      	pop	{r3, pc}
   8204c:	400e0e00 	.word	0x400e0e00
   82050:	00081ff1 	.word	0x00081ff1

00082054 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82054:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82056:	210c      	movs	r1, #12
   82058:	4801      	ldr	r0, [pc, #4]	; (82060 <PIOB_Handler+0xc>)
   8205a:	4b02      	ldr	r3, [pc, #8]	; (82064 <PIOB_Handler+0x10>)
   8205c:	4798      	blx	r3
   8205e:	bd08      	pop	{r3, pc}
   82060:	400e1000 	.word	0x400e1000
   82064:	00081ff1 	.word	0x00081ff1

00082068 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82068:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8206a:	210d      	movs	r1, #13
   8206c:	4801      	ldr	r0, [pc, #4]	; (82074 <PIOC_Handler+0xc>)
   8206e:	4b02      	ldr	r3, [pc, #8]	; (82078 <PIOC_Handler+0x10>)
   82070:	4798      	blx	r3
   82072:	bd08      	pop	{r3, pc}
   82074:	400e1200 	.word	0x400e1200
   82078:	00081ff1 	.word	0x00081ff1

0008207c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8207c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8207e:	210e      	movs	r1, #14
   82080:	4801      	ldr	r0, [pc, #4]	; (82088 <PIOD_Handler+0xc>)
   82082:	4b02      	ldr	r3, [pc, #8]	; (8208c <PIOD_Handler+0x10>)
   82084:	4798      	blx	r3
   82086:	bd08      	pop	{r3, pc}
   82088:	400e1400 	.word	0x400e1400
   8208c:	00081ff1 	.word	0x00081ff1

00082090 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82090:	4a18      	ldr	r2, [pc, #96]	; (820f4 <pmc_switch_mck_to_pllack+0x64>)
   82092:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82098:	4318      	orrs	r0, r3
   8209a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8209c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8209e:	f013 0f08 	tst.w	r3, #8
   820a2:	d003      	beq.n	820ac <pmc_switch_mck_to_pllack+0x1c>
   820a4:	e009      	b.n	820ba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   820a6:	3b01      	subs	r3, #1
   820a8:	d103      	bne.n	820b2 <pmc_switch_mck_to_pllack+0x22>
   820aa:	e01e      	b.n	820ea <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   820ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   820b0:	4910      	ldr	r1, [pc, #64]	; (820f4 <pmc_switch_mck_to_pllack+0x64>)
   820b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   820b4:	f012 0f08 	tst.w	r2, #8
   820b8:	d0f5      	beq.n	820a6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   820ba:	4a0e      	ldr	r2, [pc, #56]	; (820f4 <pmc_switch_mck_to_pllack+0x64>)
   820bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   820be:	f023 0303 	bic.w	r3, r3, #3
   820c2:	f043 0302 	orr.w	r3, r3, #2
   820c6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   820c8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   820ca:	f010 0008 	ands.w	r0, r0, #8
   820ce:	d004      	beq.n	820da <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   820d0:	2000      	movs	r0, #0
   820d2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   820d4:	3b01      	subs	r3, #1
   820d6:	d103      	bne.n	820e0 <pmc_switch_mck_to_pllack+0x50>
   820d8:	e009      	b.n	820ee <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   820da:	f44f 6300 	mov.w	r3, #2048	; 0x800
   820de:	4905      	ldr	r1, [pc, #20]	; (820f4 <pmc_switch_mck_to_pllack+0x64>)
   820e0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   820e2:	f012 0f08 	tst.w	r2, #8
   820e6:	d0f5      	beq.n	820d4 <pmc_switch_mck_to_pllack+0x44>
   820e8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   820ea:	2001      	movs	r0, #1
   820ec:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   820ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   820f0:	4770      	bx	lr
   820f2:	bf00      	nop
   820f4:	400e0600 	.word	0x400e0600

000820f8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   820f8:	b138      	cbz	r0, 8210a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   820fa:	4911      	ldr	r1, [pc, #68]	; (82140 <pmc_switch_mainck_to_xtal+0x48>)
   820fc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   820fe:	4a11      	ldr	r2, [pc, #68]	; (82144 <pmc_switch_mainck_to_xtal+0x4c>)
   82100:	401a      	ands	r2, r3
   82102:	4b11      	ldr	r3, [pc, #68]	; (82148 <pmc_switch_mainck_to_xtal+0x50>)
   82104:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82106:	620b      	str	r3, [r1, #32]
   82108:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8210a:	480d      	ldr	r0, [pc, #52]	; (82140 <pmc_switch_mainck_to_xtal+0x48>)
   8210c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8210e:	0209      	lsls	r1, r1, #8
   82110:	b289      	uxth	r1, r1
   82112:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   82116:	f023 0303 	bic.w	r3, r3, #3
   8211a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8211e:	f043 0301 	orr.w	r3, r3, #1
   82122:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82124:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82126:	4602      	mov	r2, r0
   82128:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8212a:	f013 0f01 	tst.w	r3, #1
   8212e:	d0fb      	beq.n	82128 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82130:	4a03      	ldr	r2, [pc, #12]	; (82140 <pmc_switch_mainck_to_xtal+0x48>)
   82132:	6a13      	ldr	r3, [r2, #32]
   82134:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8213c:	6213      	str	r3, [r2, #32]
   8213e:	4770      	bx	lr
   82140:	400e0600 	.word	0x400e0600
   82144:	fec8fffc 	.word	0xfec8fffc
   82148:	01370002 	.word	0x01370002

0008214c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8214c:	4b02      	ldr	r3, [pc, #8]	; (82158 <pmc_osc_is_ready_mainck+0xc>)
   8214e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82150:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82154:	4770      	bx	lr
   82156:	bf00      	nop
   82158:	400e0600 	.word	0x400e0600

0008215c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8215c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82160:	4b01      	ldr	r3, [pc, #4]	; (82168 <pmc_disable_pllack+0xc>)
   82162:	629a      	str	r2, [r3, #40]	; 0x28
   82164:	4770      	bx	lr
   82166:	bf00      	nop
   82168:	400e0600 	.word	0x400e0600

0008216c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8216c:	4b02      	ldr	r3, [pc, #8]	; (82178 <pmc_is_locked_pllack+0xc>)
   8216e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82170:	f000 0002 	and.w	r0, r0, #2
   82174:	4770      	bx	lr
   82176:	bf00      	nop
   82178:	400e0600 	.word	0x400e0600

0008217c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8217c:	282c      	cmp	r0, #44	; 0x2c
   8217e:	d81e      	bhi.n	821be <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82180:	281f      	cmp	r0, #31
   82182:	d80c      	bhi.n	8219e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82184:	4b11      	ldr	r3, [pc, #68]	; (821cc <pmc_enable_periph_clk+0x50>)
   82186:	699a      	ldr	r2, [r3, #24]
   82188:	2301      	movs	r3, #1
   8218a:	4083      	lsls	r3, r0
   8218c:	4393      	bics	r3, r2
   8218e:	d018      	beq.n	821c2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82190:	2301      	movs	r3, #1
   82192:	fa03 f000 	lsl.w	r0, r3, r0
   82196:	4b0d      	ldr	r3, [pc, #52]	; (821cc <pmc_enable_periph_clk+0x50>)
   82198:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8219a:	2000      	movs	r0, #0
   8219c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8219e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   821a0:	4b0a      	ldr	r3, [pc, #40]	; (821cc <pmc_enable_periph_clk+0x50>)
   821a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   821a6:	2301      	movs	r3, #1
   821a8:	4083      	lsls	r3, r0
   821aa:	4393      	bics	r3, r2
   821ac:	d00b      	beq.n	821c6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   821ae:	2301      	movs	r3, #1
   821b0:	fa03 f000 	lsl.w	r0, r3, r0
   821b4:	4b05      	ldr	r3, [pc, #20]	; (821cc <pmc_enable_periph_clk+0x50>)
   821b6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   821ba:	2000      	movs	r0, #0
   821bc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   821be:	2001      	movs	r0, #1
   821c0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   821c2:	2000      	movs	r0, #0
   821c4:	4770      	bx	lr
   821c6:	2000      	movs	r0, #0
}
   821c8:	4770      	bx	lr
   821ca:	bf00      	nop
   821cc:	400e0600 	.word	0x400e0600

000821d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   821d0:	e7fe      	b.n	821d0 <Dummy_Handler>
   821d2:	bf00      	nop

000821d4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   821d4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   821d6:	4b1e      	ldr	r3, [pc, #120]	; (82250 <Reset_Handler+0x7c>)
   821d8:	4a1e      	ldr	r2, [pc, #120]	; (82254 <Reset_Handler+0x80>)
   821da:	429a      	cmp	r2, r3
   821dc:	d003      	beq.n	821e6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   821de:	4b1e      	ldr	r3, [pc, #120]	; (82258 <Reset_Handler+0x84>)
   821e0:	4a1b      	ldr	r2, [pc, #108]	; (82250 <Reset_Handler+0x7c>)
   821e2:	429a      	cmp	r2, r3
   821e4:	d304      	bcc.n	821f0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   821e6:	4b1d      	ldr	r3, [pc, #116]	; (8225c <Reset_Handler+0x88>)
   821e8:	4a1d      	ldr	r2, [pc, #116]	; (82260 <Reset_Handler+0x8c>)
   821ea:	429a      	cmp	r2, r3
   821ec:	d30f      	bcc.n	8220e <Reset_Handler+0x3a>
   821ee:	e01a      	b.n	82226 <Reset_Handler+0x52>
   821f0:	4917      	ldr	r1, [pc, #92]	; (82250 <Reset_Handler+0x7c>)
   821f2:	4b1c      	ldr	r3, [pc, #112]	; (82264 <Reset_Handler+0x90>)
   821f4:	1a5b      	subs	r3, r3, r1
   821f6:	f023 0303 	bic.w	r3, r3, #3
   821fa:	3304      	adds	r3, #4
   821fc:	4a15      	ldr	r2, [pc, #84]	; (82254 <Reset_Handler+0x80>)
   821fe:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82200:	f852 0b04 	ldr.w	r0, [r2], #4
   82204:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82208:	429a      	cmp	r2, r3
   8220a:	d1f9      	bne.n	82200 <Reset_Handler+0x2c>
   8220c:	e7eb      	b.n	821e6 <Reset_Handler+0x12>
   8220e:	4b16      	ldr	r3, [pc, #88]	; (82268 <Reset_Handler+0x94>)
   82210:	4a16      	ldr	r2, [pc, #88]	; (8226c <Reset_Handler+0x98>)
   82212:	1ad2      	subs	r2, r2, r3
   82214:	f022 0203 	bic.w	r2, r2, #3
   82218:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8221a:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8221c:	2100      	movs	r1, #0
   8221e:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82222:	4293      	cmp	r3, r2
   82224:	d1fb      	bne.n	8221e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82226:	4b12      	ldr	r3, [pc, #72]	; (82270 <Reset_Handler+0x9c>)
   82228:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8222c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82230:	4910      	ldr	r1, [pc, #64]	; (82274 <Reset_Handler+0xa0>)
   82232:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82234:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8223c:	d203      	bcs.n	82246 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8223e:	688b      	ldr	r3, [r1, #8]
   82240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82244:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82246:	4b0c      	ldr	r3, [pc, #48]	; (82278 <Reset_Handler+0xa4>)
   82248:	4798      	blx	r3

	/* Branch to main function */
	main();
   8224a:	4b0c      	ldr	r3, [pc, #48]	; (8227c <Reset_Handler+0xa8>)
   8224c:	4798      	blx	r3
   8224e:	e7fe      	b.n	8224e <Reset_Handler+0x7a>
   82250:	20070000 	.word	0x20070000
   82254:	00087abc 	.word	0x00087abc
   82258:	200709ac 	.word	0x200709ac
   8225c:	2007c484 	.word	0x2007c484
   82260:	200709b0 	.word	0x200709b0
   82264:	200709ab 	.word	0x200709ab
   82268:	200709b4 	.word	0x200709b4
   8226c:	2007c487 	.word	0x2007c487
   82270:	00080000 	.word	0x00080000
   82274:	e000ed00 	.word	0xe000ed00
   82278:	00083709 	.word	0x00083709
   8227c:	000835a9 	.word	0x000835a9

00082280 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82280:	4b3e      	ldr	r3, [pc, #248]	; (8237c <SystemCoreClockUpdate+0xfc>)
   82282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82284:	f003 0303 	and.w	r3, r3, #3
   82288:	2b03      	cmp	r3, #3
   8228a:	d85f      	bhi.n	8234c <SystemCoreClockUpdate+0xcc>
   8228c:	e8df f003 	tbb	[pc, r3]
   82290:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82294:	4b3a      	ldr	r3, [pc, #232]	; (82380 <SystemCoreClockUpdate+0x100>)
   82296:	695b      	ldr	r3, [r3, #20]
   82298:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8229c:	bf14      	ite	ne
   8229e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   822a2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   822a6:	4b37      	ldr	r3, [pc, #220]	; (82384 <SystemCoreClockUpdate+0x104>)
   822a8:	601a      	str	r2, [r3, #0]
   822aa:	e04f      	b.n	8234c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   822ac:	4b33      	ldr	r3, [pc, #204]	; (8237c <SystemCoreClockUpdate+0xfc>)
   822ae:	6a1b      	ldr	r3, [r3, #32]
   822b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   822b4:	d003      	beq.n	822be <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   822b6:	4a34      	ldr	r2, [pc, #208]	; (82388 <SystemCoreClockUpdate+0x108>)
   822b8:	4b32      	ldr	r3, [pc, #200]	; (82384 <SystemCoreClockUpdate+0x104>)
   822ba:	601a      	str	r2, [r3, #0]
   822bc:	e046      	b.n	8234c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   822be:	4a33      	ldr	r2, [pc, #204]	; (8238c <SystemCoreClockUpdate+0x10c>)
   822c0:	4b30      	ldr	r3, [pc, #192]	; (82384 <SystemCoreClockUpdate+0x104>)
   822c2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   822c4:	4b2d      	ldr	r3, [pc, #180]	; (8237c <SystemCoreClockUpdate+0xfc>)
   822c6:	6a1b      	ldr	r3, [r3, #32]
   822c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822cc:	2b10      	cmp	r3, #16
   822ce:	d002      	beq.n	822d6 <SystemCoreClockUpdate+0x56>
   822d0:	2b20      	cmp	r3, #32
   822d2:	d004      	beq.n	822de <SystemCoreClockUpdate+0x5e>
   822d4:	e03a      	b.n	8234c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   822d6:	4a2e      	ldr	r2, [pc, #184]	; (82390 <SystemCoreClockUpdate+0x110>)
   822d8:	4b2a      	ldr	r3, [pc, #168]	; (82384 <SystemCoreClockUpdate+0x104>)
   822da:	601a      	str	r2, [r3, #0]
				break;
   822dc:	e036      	b.n	8234c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   822de:	4a2a      	ldr	r2, [pc, #168]	; (82388 <SystemCoreClockUpdate+0x108>)
   822e0:	4b28      	ldr	r3, [pc, #160]	; (82384 <SystemCoreClockUpdate+0x104>)
   822e2:	601a      	str	r2, [r3, #0]
				break;
   822e4:	e032      	b.n	8234c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   822e6:	4b25      	ldr	r3, [pc, #148]	; (8237c <SystemCoreClockUpdate+0xfc>)
   822e8:	6a1b      	ldr	r3, [r3, #32]
   822ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   822ee:	d003      	beq.n	822f8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   822f0:	4a25      	ldr	r2, [pc, #148]	; (82388 <SystemCoreClockUpdate+0x108>)
   822f2:	4b24      	ldr	r3, [pc, #144]	; (82384 <SystemCoreClockUpdate+0x104>)
   822f4:	601a      	str	r2, [r3, #0]
   822f6:	e012      	b.n	8231e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   822f8:	4a24      	ldr	r2, [pc, #144]	; (8238c <SystemCoreClockUpdate+0x10c>)
   822fa:	4b22      	ldr	r3, [pc, #136]	; (82384 <SystemCoreClockUpdate+0x104>)
   822fc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   822fe:	4b1f      	ldr	r3, [pc, #124]	; (8237c <SystemCoreClockUpdate+0xfc>)
   82300:	6a1b      	ldr	r3, [r3, #32]
   82302:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82306:	2b10      	cmp	r3, #16
   82308:	d002      	beq.n	82310 <SystemCoreClockUpdate+0x90>
   8230a:	2b20      	cmp	r3, #32
   8230c:	d004      	beq.n	82318 <SystemCoreClockUpdate+0x98>
   8230e:	e006      	b.n	8231e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82310:	4a1f      	ldr	r2, [pc, #124]	; (82390 <SystemCoreClockUpdate+0x110>)
   82312:	4b1c      	ldr	r3, [pc, #112]	; (82384 <SystemCoreClockUpdate+0x104>)
   82314:	601a      	str	r2, [r3, #0]
				break;
   82316:	e002      	b.n	8231e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82318:	4a1b      	ldr	r2, [pc, #108]	; (82388 <SystemCoreClockUpdate+0x108>)
   8231a:	4b1a      	ldr	r3, [pc, #104]	; (82384 <SystemCoreClockUpdate+0x104>)
   8231c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8231e:	4b17      	ldr	r3, [pc, #92]	; (8237c <SystemCoreClockUpdate+0xfc>)
   82320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82322:	f003 0303 	and.w	r3, r3, #3
   82326:	2b02      	cmp	r3, #2
   82328:	d10d      	bne.n	82346 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8232a:	4a14      	ldr	r2, [pc, #80]	; (8237c <SystemCoreClockUpdate+0xfc>)
   8232c:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8232e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82330:	4814      	ldr	r0, [pc, #80]	; (82384 <SystemCoreClockUpdate+0x104>)
   82332:	f3c3 410a 	ubfx	r1, r3, #16, #11
   82336:	6803      	ldr	r3, [r0, #0]
   82338:	fb01 3303 	mla	r3, r1, r3, r3
   8233c:	b2d2      	uxtb	r2, r2
   8233e:	fbb3 f3f2 	udiv	r3, r3, r2
   82342:	6003      	str	r3, [r0, #0]
   82344:	e002      	b.n	8234c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82346:	4a13      	ldr	r2, [pc, #76]	; (82394 <SystemCoreClockUpdate+0x114>)
   82348:	4b0e      	ldr	r3, [pc, #56]	; (82384 <SystemCoreClockUpdate+0x104>)
   8234a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8234c:	4b0b      	ldr	r3, [pc, #44]	; (8237c <SystemCoreClockUpdate+0xfc>)
   8234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82350:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82354:	2b70      	cmp	r3, #112	; 0x70
   82356:	d107      	bne.n	82368 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82358:	4a0a      	ldr	r2, [pc, #40]	; (82384 <SystemCoreClockUpdate+0x104>)
   8235a:	6813      	ldr	r3, [r2, #0]
   8235c:	490e      	ldr	r1, [pc, #56]	; (82398 <SystemCoreClockUpdate+0x118>)
   8235e:	fba1 1303 	umull	r1, r3, r1, r3
   82362:	085b      	lsrs	r3, r3, #1
   82364:	6013      	str	r3, [r2, #0]
   82366:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82368:	4b04      	ldr	r3, [pc, #16]	; (8237c <SystemCoreClockUpdate+0xfc>)
   8236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8236c:	4905      	ldr	r1, [pc, #20]	; (82384 <SystemCoreClockUpdate+0x104>)
   8236e:	f3c3 1202 	ubfx	r2, r3, #4, #3
   82372:	680b      	ldr	r3, [r1, #0]
   82374:	40d3      	lsrs	r3, r2
   82376:	600b      	str	r3, [r1, #0]
   82378:	4770      	bx	lr
   8237a:	bf00      	nop
   8237c:	400e0600 	.word	0x400e0600
   82380:	400e1a10 	.word	0x400e1a10
   82384:	20070138 	.word	0x20070138
   82388:	00b71b00 	.word	0x00b71b00
   8238c:	003d0900 	.word	0x003d0900
   82390:	007a1200 	.word	0x007a1200
   82394:	0e4e1c00 	.word	0x0e4e1c00
   82398:	aaaaaaab 	.word	0xaaaaaaab

0008239c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8239c:	4b09      	ldr	r3, [pc, #36]	; (823c4 <_sbrk+0x28>)
   8239e:	681b      	ldr	r3, [r3, #0]
   823a0:	b913      	cbnz	r3, 823a8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   823a2:	4a09      	ldr	r2, [pc, #36]	; (823c8 <_sbrk+0x2c>)
   823a4:	4b07      	ldr	r3, [pc, #28]	; (823c4 <_sbrk+0x28>)
   823a6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   823a8:	4b06      	ldr	r3, [pc, #24]	; (823c4 <_sbrk+0x28>)
   823aa:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   823ac:	181a      	adds	r2, r3, r0
   823ae:	4907      	ldr	r1, [pc, #28]	; (823cc <_sbrk+0x30>)
   823b0:	4291      	cmp	r1, r2
   823b2:	db04      	blt.n	823be <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   823b4:	4610      	mov	r0, r2
   823b6:	4a03      	ldr	r2, [pc, #12]	; (823c4 <_sbrk+0x28>)
   823b8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   823ba:	4618      	mov	r0, r3
   823bc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   823be:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   823c2:	4770      	bx	lr
   823c4:	2007ab88 	.word	0x2007ab88
   823c8:	2007e488 	.word	0x2007e488
   823cc:	20087ffc 	.word	0x20087ffc

000823d0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   823d0:	f04f 30ff 	mov.w	r0, #4294967295
   823d4:	4770      	bx	lr
   823d6:	bf00      	nop

000823d8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   823d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   823dc:	604b      	str	r3, [r1, #4]

	return 0;
}
   823de:	2000      	movs	r0, #0
   823e0:	4770      	bx	lr
   823e2:	bf00      	nop

000823e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   823e4:	2001      	movs	r0, #1
   823e6:	4770      	bx	lr

000823e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   823e8:	2000      	movs	r0, #0
   823ea:	4770      	bx	lr

000823ec <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
   823ec:	b510      	push	{r4, lr}
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
   823ee:	b918      	cbnz	r0, 823f8 <vTraceError+0xc>
   823f0:	480d      	ldr	r0, [pc, #52]	; (82428 <vTraceError+0x3c>)
   823f2:	f7ff fffb 	bl	823ec <vTraceError>
   823f6:	bd10      	pop	{r4, pc}
   823f8:	4601      	mov	r1, r0
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
   823fa:	4b0c      	ldr	r3, [pc, #48]	; (8242c <vTraceError+0x40>)
   823fc:	681c      	ldr	r4, [r3, #0]
   823fe:	b91c      	cbnz	r4, 82408 <vTraceError+0x1c>
   82400:	480b      	ldr	r0, [pc, #44]	; (82430 <vTraceError+0x44>)
   82402:	f7ff fff3 	bl	823ec <vTraceError>
   82406:	bd10      	pop	{r4, pc}

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
   82408:	2300      	movs	r3, #0
   8240a:	6323      	str	r3, [r4, #48]	; 0x30

	if (traceErrorMessage == NULL)
   8240c:	4b09      	ldr	r3, [pc, #36]	; (82434 <vTraceError+0x48>)
   8240e:	681b      	ldr	r3, [r3, #0]
   82410:	b94b      	cbnz	r3, 82426 <vTraceError+0x3a>
	{
		traceErrorMessage = (char*)msg;
   82412:	4b08      	ldr	r3, [pc, #32]	; (82434 <vTraceError+0x48>)
   82414:	6018      	str	r0, [r3, #0]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   82416:	2250      	movs	r2, #80	; 0x50
   82418:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
   8241c:	4b06      	ldr	r3, [pc, #24]	; (82438 <vTraceError+0x4c>)
   8241e:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
   82420:	2301      	movs	r3, #1
   82422:	f8c4 37d4 	str.w	r3, [r4, #2004]	; 0x7d4
   82426:	bd10      	pop	{r4, pc}
   82428:	000866c8 	.word	0x000866c8
   8242c:	2007abbc 	.word	0x2007abbc
   82430:	000866f0 	.word	0x000866f0
   82434:	2007abb0 	.word	0x2007abb0
   82438:	00083ac5 	.word	0x00083ac5

0008243c <prvTraceInitTraceData>:

RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{		
   8243c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	init_hwtc_count = HWTC_COUNT;
   82440:	4b4d      	ldr	r3, [pc, #308]	; (82578 <prvTraceInitTraceData+0x13c>)
   82442:	681b      	ldr	r3, [r3, #0]
   82444:	4a4d      	ldr	r2, [pc, #308]	; (8257c <prvTraceInitTraceData+0x140>)
   82446:	6812      	ldr	r2, [r2, #0]
   82448:	4413      	add	r3, r2
   8244a:	4a4d      	ldr	r2, [pc, #308]	; (82580 <prvTraceInitTraceData+0x144>)
   8244c:	6013      	str	r3, [r2, #0]
	
#if TRACE_DATA_ALLOCATION == TRACE_DATA_ALLOCATION_STATIC
	RecorderDataPtr = &RecorderData;
   8244e:	4d4d      	ldr	r5, [pc, #308]	; (82584 <prvTraceInitTraceData+0x148>)
   82450:	4c4d      	ldr	r4, [pc, #308]	; (82588 <prvTraceInitTraceData+0x14c>)
   82452:	602c      	str	r4, [r5, #0]
	{
		vTraceError("No recorder data structure allocated!");
		return;
	}
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   82454:	f44f 52bf 	mov.w	r2, #6112	; 0x17e0
   82458:	2100      	movs	r1, #0
   8245a:	4620      	mov	r0, r4
   8245c:	4b4b      	ldr	r3, [pc, #300]	; (8258c <prvTraceInitTraceData+0x150>)
   8245e:	4798      	blx	r3

	RecorderDataPtr->startmarker0 = 0x00;
	RecorderDataPtr->startmarker1 = 0x01;
   82460:	f04f 0301 	mov.w	r3, #1
   82464:	7063      	strb	r3, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
   82466:	2302      	movs	r3, #2
   82468:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
   8246a:	2303      	movs	r3, #3
   8246c:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
   8246e:	2370      	movs	r3, #112	; 0x70
   82470:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
   82472:	f04f 0a71 	mov.w	sl, #113	; 0x71
   82476:	f884 a005 	strb.w	sl, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
   8247a:	f04f 0972 	mov.w	r9, #114	; 0x72
   8247e:	f884 9006 	strb.w	r9, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
   82482:	f04f 0873 	mov.w	r8, #115	; 0x73
   82486:	f884 8007 	strb.w	r8, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
   8248a:	23f0      	movs	r3, #240	; 0xf0
   8248c:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
   8248e:	27f1      	movs	r7, #241	; 0xf1
   82490:	7267      	strb	r7, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
   82492:	26f2      	movs	r6, #242	; 0xf2
   82494:	72a6      	strb	r6, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
   82496:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
   8249a:	f884 b00b 	strb.w	fp, [r4, #11]

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   8249e:	f641 23a1 	movw	r3, #6817	; 0x1aa1
   824a2:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   824a4:	2304      	movs	r3, #4
   824a6:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->irq_priority_order = IRQ_PRIORITY_ORDER;
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   824a8:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
   824ac:	6123      	str	r3, [r4, #16]

	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
   824ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   824b2:	61a3      	str	r3, [r4, #24]

	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
   824b4:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
   824b8:	6563      	str	r3, [r4, #84]	; 0x54

	RecorderDataPtr->isUsing16bitHandles = USE_16BIT_OBJECT_HANDLES;

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   824ba:	4b35      	ldr	r3, [pc, #212]	; (82590 <prvTraceInitTraceData+0x154>)
   824bc:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
   824be:	682c      	ldr	r4, [r5, #0]
   824c0:	f04f 33f1 	mov.w	r3, #4059165169	; 0xf1f1f1f1
   824c4:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
   824c8:	f44f 7348 	mov.w	r3, #800	; 0x320
   824cc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   824d0:	2301      	movs	r3, #1
   824d2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
#if (INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
   824d6:	f04f 33f2 	mov.w	r3, #4076008178	; 0xf2f2f2f2
   824da:	f8c4 37d8 	str.w	r3, [r4, #2008]	; 0x7d8
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   824de:	2250      	movs	r2, #80	; 0x50
   824e0:	492c      	ldr	r1, [pc, #176]	; (82594 <prvTraceInitTraceData+0x158>)
   824e2:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
   824e6:	4b2c      	ldr	r3, [pc, #176]	; (82598 <prvTraceInitTraceData+0x15c>)
   824e8:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
   824ea:	f04f 33f3 	mov.w	r3, #4092851187	; 0xf3f3f3f3
   824ee:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
	RecorderDataPtr->endmarker0 = 0x0A;
   824f2:	220a      	movs	r2, #10
   824f4:	f241 73d4 	movw	r3, #6100	; 0x17d4
   824f8:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker1 = 0x0B;
   824fa:	220b      	movs	r2, #11
   824fc:	f241 73d5 	movw	r3, #6101	; 0x17d5
   82500:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker2 = 0x0C;
   82502:	220c      	movs	r2, #12
   82504:	f241 73d6 	movw	r3, #6102	; 0x17d6
   82508:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker3 = 0x0D;
   8250a:	220d      	movs	r2, #13
   8250c:	f241 73d7 	movw	r3, #6103	; 0x17d7
   82510:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker4 = 0x71;
   82512:	f241 73d8 	movw	r3, #6104	; 0x17d8
   82516:	f804 a003 	strb.w	sl, [r4, r3]
	RecorderDataPtr->endmarker5 = 0x72;
   8251a:	f241 73d9 	movw	r3, #6105	; 0x17d9
   8251e:	f804 9003 	strb.w	r9, [r4, r3]
	RecorderDataPtr->endmarker6 = 0x73;
   82522:	f241 73da 	movw	r3, #6106	; 0x17da
   82526:	f804 8003 	strb.w	r8, [r4, r3]
	RecorderDataPtr->endmarker7 = 0x74;
   8252a:	2274      	movs	r2, #116	; 0x74
   8252c:	f241 73db 	movw	r3, #6107	; 0x17db
   82530:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker8 = 0xF1;
   82532:	f241 73dc 	movw	r3, #6108	; 0x17dc
   82536:	54e7      	strb	r7, [r4, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
   82538:	f241 73dd 	movw	r3, #6109	; 0x17dd
   8253c:	54e6      	strb	r6, [r4, r3]
	RecorderDataPtr->endmarker10 = 0xF3;
   8253e:	f241 73de 	movw	r3, #6110	; 0x17de
   82542:	f804 b003 	strb.w	fp, [r4, r3]
	RecorderDataPtr->endmarker11 = 0xF4;
   82546:	22f4      	movs	r2, #244	; 0xf4
   82548:	f241 73df 	movw	r3, #6111	; 0x17df
   8254c:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->userEventBuffer.numberOfSlots = USER_EVENT_BUFFER_SIZE;
	RecorderDataPtr->userEventBuffer.numberOfChannels = CHANNEL_FORMAT_PAIRS + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   8254e:	4b13      	ldr	r3, [pc, #76]	; (8259c <prvTraceInitTraceData+0x160>)
   82550:	4798      	blx	r3
}

static void vInitStartMarkers()
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
   82552:	6829      	ldr	r1, [r5, #0]
	if ((*ptr) == 0)
   82554:	780b      	ldrb	r3, [r1, #0]
   82556:	b943      	cbnz	r3, 8256a <prvTraceInitTraceData+0x12e>
   82558:	1e4b      	subs	r3, r1, #1
   8255a:	310b      	adds	r1, #11
	{
		for (i = 0; i < 12; i++)
		{
			ptr[i] += 1;
   8255c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   82560:	3201      	adds	r2, #1
   82562:	701a      	strb	r2, [r3, #0]
{
	uint32_t i;
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
	if ((*ptr) == 0)
	{
		for (i = 0; i < 12; i++)
   82564:	428b      	cmp	r3, r1
   82566:	d1f9      	bne.n	8255c <prvTraceInitTraceData+0x120>
   82568:	e002      	b.n	82570 <prvTraceInitTraceData+0x134>
			ptr[i] += 1;
		}
	}
	else
	{
		vTraceError("Trace start markers already initialized!");
   8256a:	480d      	ldr	r0, [pc, #52]	; (825a0 <prvTraceInitTraceData+0x164>)
   8256c:	4b0d      	ldr	r3, [pc, #52]	; (825a4 <prvTraceInitTraceData+0x168>)
   8256e:	4798      	blx	r3

	/* Fix the start markers of the trace data structure */
	vInitStartMarkers();
	
	#ifdef PORT_SPECIFIC_INIT
	PORT_SPECIFIC_INIT();
   82570:	4b0d      	ldr	r3, [pc, #52]	; (825a8 <prvTraceInitTraceData+0x16c>)
   82572:	4798      	blx	r3
   82574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82578:	e0001004 	.word	0xe0001004
   8257c:	2007ac48 	.word	0x2007ac48
   82580:	2007c478 	.word	0x2007c478
   82584:	2007abbc 	.word	0x2007abbc
   82588:	2007ac98 	.word	0x2007ac98
   8258c:	0008386d 	.word	0x0008386d
   82590:	0008311d 	.word	0x0008311d
   82594:	00086724 	.word	0x00086724
   82598:	00083ac5 	.word	0x00083ac5
   8259c:	000831c9 	.word	0x000831c9
   825a0:	00086738 	.word	0x00086738
   825a4:	000823ed 	.word	0x000823ed
   825a8:	000829e1 	.word	0x000829e1

000825ac <xTraceNextFreeEventBufferSlot>:

/* Gives the last error message of the recorder. NULL if no error message. */
char* traceErrorMessage = NULL;

void* xTraceNextFreeEventBufferSlot(void)
{
   825ac:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
   825ae:	4b0a      	ldr	r3, [pc, #40]	; (825d8 <xTraceNextFreeEventBufferSlot+0x2c>)
   825b0:	681b      	ldr	r3, [r3, #0]
   825b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   825b4:	b16a      	cbz	r2, 825d2 <xTraceNextFreeEventBufferSlot+0x26>
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
	}

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
   825b6:	69d8      	ldr	r0, [r3, #28]
   825b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   825bc:	d304      	bcc.n	825c8 <xTraceNextFreeEventBufferSlot+0x1c>
	{
		vTraceError("Attempt to index outside event buffer!");
   825be:	4807      	ldr	r0, [pc, #28]	; (825dc <xTraceNextFreeEventBufferSlot+0x30>)
   825c0:	4b07      	ldr	r3, [pc, #28]	; (825e0 <xTraceNextFreeEventBufferSlot+0x34>)
   825c2:	4798      	blx	r3
		return NULL;
   825c4:	2000      	movs	r0, #0
   825c6:	bd08      	pop	{r3, pc}
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   825c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   825cc:	f500 6003 	add.w	r0, r0, #2096	; 0x830
   825d0:	bd08      	pop	{r3, pc}
void* xTraceNextFreeEventBufferSlot(void)
{
	if (! RecorderDataPtr->recorderActive)
	{
		// If the associated XTS or XPS event prio to the main event has filled the buffer and store mode "stop when full".
		return NULL;
   825d2:	2000      	movs	r0, #0
	{
		vTraceError("Attempt to index outside event buffer!");
		return NULL;
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
}
   825d4:	bd08      	pop	{r3, pc}
   825d6:	bf00      	nop
   825d8:	2007abbc 	.word	0x2007abbc
   825dc:	00086764 	.word	0x00086764
   825e0:	000823ed 	.word	0x000823ed

000825e4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(objectHandleType objecthandle, uint8_t objectclass)
{
   825e4:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   825e6:	2906      	cmp	r1, #6
   825e8:	d904      	bls.n	825f4 <uiIndexOfObject+0x10>
   825ea:	480f      	ldr	r0, [pc, #60]	; (82628 <uiIndexOfObject+0x44>)
   825ec:	4b0f      	ldr	r3, [pc, #60]	; (8262c <uiIndexOfObject+0x48>)
   825ee:	4798      	blx	r3
   825f0:	2000      	movs	r0, #0
   825f2:	bd10      	pop	{r4, pc}
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   825f4:	b130      	cbz	r0, 82604 <uiIndexOfObject+0x20>
   825f6:	4b0e      	ldr	r3, [pc, #56]	; (82630 <uiIndexOfObject+0x4c>)
   825f8:	681a      	ldr	r2, [r3, #0]
   825fa:	1853      	adds	r3, r2, r1
   825fc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82600:	4283      	cmp	r3, r0
   82602:	d204      	bcs.n	8260e <uiIndexOfObject+0x2a>
   82604:	480b      	ldr	r0, [pc, #44]	; (82634 <uiIndexOfObject+0x50>)
   82606:	4b09      	ldr	r3, [pc, #36]	; (8262c <uiIndexOfObject+0x48>)
   82608:	4798      	blx	r3
   8260a:	2000      	movs	r0, #0
   8260c:	bd10      	pop	{r4, pc}

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   8260e:	1853      	adds	r3, r2, r1
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   82610:	f893 4074 	ldrb.w	r4, [r3, #116]	; 0x74
   82614:	1e43      	subs	r3, r0, #1
   82616:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8261a:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
   8261e:	fb04 2003 	mla	r0, r4, r3, r2
   82622:	b280      	uxth	r0, r0
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
	}

	vTraceError("Object table lookup with invalid object handle or object class!");
	return 0;
}
   82624:	bd10      	pop	{r4, pc}
   82626:	bf00      	nop
   82628:	0008678c 	.word	0x0008678c
   8262c:	000823ed 	.word	0x000823ed
   82630:	2007abbc 	.word	0x2007abbc
   82634:	000867cc 	.word	0x000867cc

00082638 <xTraceGetObjectHandle>:
 * contains the mapping between object handle and object name which was valid up
 * to this point in time. The object name is stored as a symbol table entry.
 ******************************************************************************/

objectHandleType xTraceGetObjectHandle(traceObjectClass objectclass)
{
   82638:	b510      	push	{r4, lr}
	objectHandleType handle;
	static int indexOfHandle;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   8263a:	2806      	cmp	r0, #6
   8263c:	d904      	bls.n	82648 <xTraceGetObjectHandle+0x10>
   8263e:	484c      	ldr	r0, [pc, #304]	; (82770 <xTraceGetObjectHandle+0x138>)
   82640:	4b4c      	ldr	r3, [pc, #304]	; (82774 <xTraceGetObjectHandle+0x13c>)
   82642:	4798      	blx	r3
   82644:	2000      	movs	r0, #0
   82646:	bd10      	pop	{r4, pc}
		"xTraceGetObjectHandle: Invalid value for objectclass", (objectHandleType)0);

	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   82648:	4a4b      	ldr	r2, [pc, #300]	; (82778 <xTraceGetObjectHandle+0x140>)
   8264a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   8264e:	441a      	add	r2, r3
   82650:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   82654:	b942      	cbnz	r2, 82668 <xTraceGetObjectHandle+0x30>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   82656:	4948      	ldr	r1, [pc, #288]	; (82778 <xTraceGetObjectHandle+0x140>)
   82658:	18cc      	adds	r4, r1, r3
   8265a:	1c5a      	adds	r2, r3, #1
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   8265c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   82660:	7b89      	ldrb	r1, [r1, #14]
   82662:	1a52      	subs	r2, r2, r1
   82664:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   82668:	4a43      	ldr	r2, [pc, #268]	; (82778 <xTraceGetObjectHandle+0x140>)
   8266a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   8266e:	8b92      	ldrh	r2, [r2, #28]
   82670:	429a      	cmp	r2, r3
   82672:	d205      	bcs.n	82680 <xTraceGetObjectHandle+0x48>
		> objectHandleStacks.highestIndexOfClass[objectclass])
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   82674:	4b41      	ldr	r3, [pc, #260]	; (8277c <xTraceGetObjectHandle+0x144>)
   82676:	4798      	blx	r3
   82678:	4b3e      	ldr	r3, [pc, #248]	; (82774 <xTraceGetObjectHandle+0x13c>)
   8267a:	4798      	blx	r3

		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
   8267c:	2000      	movs	r0, #0
   8267e:	bd10      	pop	{r4, pc}
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   82680:	4a3d      	ldr	r2, [pc, #244]	; (82778 <xTraceGetObjectHandle+0x140>)
   82682:	18d1      	adds	r1, r2, r3
   82684:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   82688:	3301      	adds	r3, #1
   8268a:	b29b      	uxth	r3, r3
   8268c:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];
   82690:	eb02 0440 	add.w	r4, r2, r0, lsl #1
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   82694:	89e4      	ldrh	r4, [r4, #14]
   82696:	1b1b      	subs	r3, r3, r4
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   82698:	eb02 0240 	add.w	r2, r2, r0, lsl #1
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
			objectHandleStacks.lowestIndexOfClass[objectclass];

		if (hndCount >
   8269c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   8269e:	4293      	cmp	r3, r2
   826a0:	dd04      	ble.n	826ac <xTraceGetObjectHandle+0x74>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   826a2:	4a35      	ldr	r2, [pc, #212]	; (82778 <xTraceGetObjectHandle+0x140>)
   826a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   826a8:	b2db      	uxtb	r3, r3
   826aa:	8553      	strh	r3, [r2, #42]	; 0x2a
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826ac:	2806      	cmp	r0, #6
   826ae:	d85d      	bhi.n	8276c <xTraceGetObjectHandle+0x134>
   826b0:	e8df f000 	tbb	[pc, r0]
   826b4:	2f201104 	.word	0x2f201104
   826b8:	3e5c      	.short	0x3e5c
   826ba:	4d          	.byte	0x4d
   826bb:	00          	.byte	0x00
   826bc:	08c8      	lsrs	r0, r1, #3
   826be:	4c30      	ldr	r4, [pc, #192]	; (82780 <xTraceGetObjectHandle+0x148>)
   826c0:	f001 0207 	and.w	r2, r1, #7
   826c4:	2301      	movs	r3, #1
   826c6:	fa03 f202 	lsl.w	r2, r3, r2
   826ca:	5c23      	ldrb	r3, [r4, r0]
   826cc:	ea23 0302 	bic.w	r3, r3, r2
   826d0:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   826d2:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826d4:	bd10      	pop	{r4, pc}
   826d6:	f101 030b 	add.w	r3, r1, #11
   826da:	10d8      	asrs	r0, r3, #3
   826dc:	4c28      	ldr	r4, [pc, #160]	; (82780 <xTraceGetObjectHandle+0x148>)
   826de:	f003 0307 	and.w	r3, r3, #7
   826e2:	2201      	movs	r2, #1
   826e4:	fa02 f303 	lsl.w	r3, r2, r3
   826e8:	5c22      	ldrb	r2, [r4, r0]
   826ea:	ea22 0303 	bic.w	r3, r2, r3
   826ee:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   826f0:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826f2:	bd10      	pop	{r4, pc}
   826f4:	f101 0316 	add.w	r3, r1, #22
   826f8:	10d8      	asrs	r0, r3, #3
   826fa:	4c21      	ldr	r4, [pc, #132]	; (82780 <xTraceGetObjectHandle+0x148>)
   826fc:	f003 0307 	and.w	r3, r3, #7
   82700:	2201      	movs	r2, #1
   82702:	fa02 f303 	lsl.w	r3, r2, r3
   82706:	5c22      	ldrb	r2, [r4, r0]
   82708:	ea22 0303 	bic.w	r3, r2, r3
   8270c:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8270e:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   82710:	bd10      	pop	{r4, pc}
   82712:	f101 0321 	add.w	r3, r1, #33	; 0x21
   82716:	10d8      	asrs	r0, r3, #3
   82718:	4c19      	ldr	r4, [pc, #100]	; (82780 <xTraceGetObjectHandle+0x148>)
   8271a:	f003 0307 	and.w	r3, r3, #7
   8271e:	2201      	movs	r2, #1
   82720:	fa02 f303 	lsl.w	r3, r2, r3
   82724:	5c22      	ldrb	r2, [r4, r0]
   82726:	ea22 0303 	bic.w	r3, r2, r3
   8272a:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8272c:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   8272e:	bd10      	pop	{r4, pc}
   82730:	f101 0331 	add.w	r3, r1, #49	; 0x31
   82734:	10d8      	asrs	r0, r3, #3
   82736:	4c12      	ldr	r4, [pc, #72]	; (82780 <xTraceGetObjectHandle+0x148>)
   82738:	f003 0307 	and.w	r3, r3, #7
   8273c:	2201      	movs	r2, #1
   8273e:	fa02 f303 	lsl.w	r3, r2, r3
   82742:	5c22      	ldrb	r2, [r4, r0]
   82744:	ea22 0303 	bic.w	r3, r2, r3
   82748:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8274a:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   8274c:	bd10      	pop	{r4, pc}
   8274e:	f101 0334 	add.w	r3, r1, #52	; 0x34
   82752:	10d8      	asrs	r0, r3, #3
   82754:	4c0a      	ldr	r4, [pc, #40]	; (82780 <xTraceGetObjectHandle+0x148>)
   82756:	f003 0307 	and.w	r3, r3, #7
   8275a:	2201      	movs	r2, #1
   8275c:	fa02 f303 	lsl.w	r3, r2, r3
   82760:	5c22      	ldrb	r2, [r4, r0]
   82762:	ea22 0303 	bic.w	r3, r2, r3
   82766:	5423      	strb	r3, [r4, r0]
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   82768:	4608      	mov	r0, r1
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(objectHandleType)hndCount;
		}

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   8276a:	bd10      	pop	{r4, pc}
		objectHandleStacks.objectHandles[indexOfHandle] =
			(objectHandleType)(1 + indexOfHandle -
			objectHandleStacks.lowestIndexOfClass[objectclass]);
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8276c:	4608      	mov	r0, r1

		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
	}

	return handle;
}
   8276e:	bd10      	pop	{r4, pc}
   82770:	0008680c 	.word	0x0008680c
   82774:	000823ed 	.word	0x000823ed
   82778:	2007abc0 	.word	0x2007abc0
   8277c:	00083219 	.word	0x00083219
   82780:	2007ac30 	.word	0x2007ac30

00082784 <vTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void vTraceSetObjectName(traceObjectClass objectclass,
						 objectHandleType handle,
						 const char* name)
{
   82784:	b538      	push	{r3, r4, r5, lr}
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
   82786:	b91a      	cbnz	r2, 82790 <vTraceSetObjectName+0xc>
   82788:	4817      	ldr	r0, [pc, #92]	; (827e8 <vTraceSetObjectName+0x64>)
   8278a:	4b18      	ldr	r3, [pc, #96]	; (827ec <vTraceSetObjectName+0x68>)
   8278c:	4798      	blx	r3
   8278e:	bd38      	pop	{r3, r4, r5, pc}
   82790:	4604      	mov	r4, r0
   82792:	4608      	mov	r0, r1
   82794:	4615      	mov	r5, r2

	if (objectclass >= TRACE_NCLASSES)
   82796:	2c06      	cmp	r4, #6
   82798:	d903      	bls.n	827a2 <vTraceSetObjectName+0x1e>
	{
		vTraceError("Illegal object class in vTraceSetObjectName");
   8279a:	4815      	ldr	r0, [pc, #84]	; (827f0 <vTraceSetObjectName+0x6c>)
   8279c:	4b13      	ldr	r3, [pc, #76]	; (827ec <vTraceSetObjectName+0x68>)
   8279e:	4798      	blx	r3
		return;
   827a0:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (handle == 0)
   827a2:	b919      	cbnz	r1, 827ac <vTraceSetObjectName+0x28>
	{
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
   827a4:	4813      	ldr	r0, [pc, #76]	; (827f4 <vTraceSetObjectName+0x70>)
   827a6:	4b11      	ldr	r3, [pc, #68]	; (827ec <vTraceSetObjectName+0x68>)
   827a8:	4798      	blx	r3
		return;
   827aa:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   827ac:	4b12      	ldr	r3, [pc, #72]	; (827f8 <vTraceSetObjectName+0x74>)
   827ae:	681b      	ldr	r3, [r3, #0]
   827b0:	4423      	add	r3, r4
   827b2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   827b6:	428b      	cmp	r3, r1
   827b8:	d205      	bcs.n	827c6 <vTraceSetObjectName+0x42>
	{
		/* ERROR */
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   827ba:	4620      	mov	r0, r4
   827bc:	4b0f      	ldr	r3, [pc, #60]	; (827fc <vTraceSetObjectName+0x78>)
   827be:	4798      	blx	r3
   827c0:	4b0a      	ldr	r3, [pc, #40]	; (827ec <vTraceSetObjectName+0x68>)
   827c2:	4798      	blx	r3
   827c4:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   827c6:	4621      	mov	r1, r4
   827c8:	4b0d      	ldr	r3, [pc, #52]	; (82800 <vTraceSetObjectName+0x7c>)
   827ca:	4798      	blx	r3

		if (traceErrorMessage == NULL)
   827cc:	4b0d      	ldr	r3, [pc, #52]	; (82804 <vTraceSetObjectName+0x80>)
   827ce:	681b      	ldr	r3, [r3, #0]
   827d0:	b94b      	cbnz	r3, 827e6 <vTraceSetObjectName+0x62>
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   827d2:	4b09      	ldr	r3, [pc, #36]	; (827f8 <vTraceSetObjectName+0x74>)
   827d4:	681b      	ldr	r3, [r3, #0]
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   827d6:	441c      	add	r4, r3
	{
		idx = uiIndexOfObject(handle, objectclass);

		if (traceErrorMessage == NULL)
		{
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   827d8:	4418      	add	r0, r3
   827da:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   827de:	4629      	mov	r1, r5
   827e0:	308c      	adds	r0, #140	; 0x8c
   827e2:	4b09      	ldr	r3, [pc, #36]	; (82808 <vTraceSetObjectName+0x84>)
   827e4:	4798      	blx	r3
   827e6:	bd38      	pop	{r3, r4, r5, pc}
   827e8:	00086904 	.word	0x00086904
   827ec:	000823ed 	.word	0x000823ed
   827f0:	00086934 	.word	0x00086934
   827f4:	00086960 	.word	0x00086960
   827f8:	2007abbc 	.word	0x2007abbc
   827fc:	00083219 	.word	0x00083219
   82800:	000825e5 	.word	0x000825e5
   82804:	2007abb0 	.word	0x2007abb0
   82808:	00083ac5 	.word	0x00083ac5

0008280c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   8280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   82810:	b118      	cbz	r0, 8281a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xe>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   82812:	4605      	mov	r5, r0
   82814:	b930      	cbnz	r0, 82824 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
   82816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   8281a:	481f      	ldr	r0, [pc, #124]	; (82898 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x8c>)
   8281c:	4b1f      	ldr	r3, [pc, #124]	; (8289c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>)
   8281e:	4798      	blx	r3
   82820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   82824:	2400      	movs	r4, #0
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   82826:	4e1e      	ldr	r6, [pc, #120]	; (828a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>)
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   82828:	4627      	mov	r7, r4
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
   8282a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 828a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x98>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   8282e:	6830      	ldr	r0, [r6, #0]
   82830:	69c3      	ldr	r3, [r0, #28]
   82832:	4423      	add	r3, r4
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   82834:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   82838:	eb00 020e 	add.w	r2, r0, lr
   8283c:	f892 2830 	ldrb.w	r2, [r2, #2096]	; 0x830
   82840:	f102 0167 	add.w	r1, r2, #103	; 0x67
   82844:	b2c9      	uxtb	r1, r1
   82846:	290e      	cmp	r1, #14
   82848:	d80d      	bhi.n	82866 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x5a>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   8284a:	3268      	adds	r2, #104	; 0x68
   8284c:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   8284e:	4413      	add	r3, r2
   82850:	6981      	ldr	r1, [r0, #24]
   82852:	428b      	cmp	r3, r1
   82854:	d21b      	bcs.n	8288e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
   82856:	3201      	adds	r2, #1
   82858:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   8285c:	0092      	lsls	r2, r2, #2
   8285e:	4639      	mov	r1, r7
   82860:	4470      	add	r0, lr
   82862:	47c0      	blx	r8
   82864:	e013      	b.n	8288e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   82866:	2a01      	cmp	r2, #1
   82868:	d111      	bne.n	8288e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   8286a:	3301      	adds	r3, #1
   8286c:	6982      	ldr	r2, [r0, #24]
   8286e:	4293      	cmp	r3, r2
   82870:	d207      	bcs.n	82882 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x76>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   82872:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   82876:	eb00 030e 	add.w	r3, r0, lr
   8287a:	f840 700e 	str.w	r7, [r0, lr]
   8287e:	605f      	str	r7, [r3, #4]
   82880:	e005      	b.n	8288e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   82882:	f8c0 7830 	str.w	r7, [r0, #2096]	; 0x830
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   82886:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   8288a:	f840 700e 	str.w	r7, [r0, lr]
			}
		}
		i++;
   8288e:	3401      	adds	r4, #1
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   82890:	42ac      	cmp	r4, r5
   82892:	d1cc      	bne.n	8282e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x22>
   82894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82898:	0008698c 	.word	0x0008698c
   8289c:	000823ed 	.word	0x000823ed
   828a0:	2007abbc 	.word	0x2007abbc
   828a4:	0008386d 	.word	0x0008386d

000828a8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   828a8:	b508      	push	{r3, lr}
	if (RecorderDataPtr->recorderActive == 0)
   828aa:	4b0a      	ldr	r3, [pc, #40]	; (828d4 <prvTraceUpdateCounters+0x2c>)
   828ac:	681b      	ldr	r3, [r3, #0]
   828ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   828b0:	b17a      	cbz	r2, 828d2 <prvTraceUpdateCounters+0x2a>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   828b2:	695a      	ldr	r2, [r3, #20]
   828b4:	3201      	adds	r2, #1
   828b6:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   828b8:	69da      	ldr	r2, [r3, #28]
   828ba:	3201      	adds	r2, #1
   828bc:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
   828be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   828c2:	d303      	bcc.n	828cc <prvTraceUpdateCounters+0x24>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   828c4:	2201      	movs	r2, #1
   828c6:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   828c8:	2200      	movs	r2, #0
   828ca:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   828cc:	2001      	movs	r0, #1
   828ce:	4b02      	ldr	r3, [pc, #8]	; (828d8 <prvTraceUpdateCounters+0x30>)
   828d0:	4798      	blx	r3
   828d2:	bd08      	pop	{r3, pc}
   828d4:	2007abbc 	.word	0x2007abbc
   828d8:	0008280d 	.word	0x0008280d

000828dc <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   828dc:	b530      	push	{r4, r5, lr}
   828de:	b083      	sub	sp, #12
   828e0:	4604      	mov	r4, r0
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
   828e2:	2300      	movs	r3, #0
   828e4:	9301      	str	r3, [sp, #4]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   828e6:	28ff      	cmp	r0, #255	; 0xff
   828e8:	d008      	beq.n	828fc <prvTraceGetDTS+0x20>
   828ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   828ee:	4298      	cmp	r0, r3
   828f0:	d004      	beq.n	828fc <prvTraceGetDTS+0x20>
   828f2:	482f      	ldr	r0, [pc, #188]	; (829b0 <prvTraceGetDTS+0xd4>)
   828f4:	4b2f      	ldr	r3, [pc, #188]	; (829b4 <prvTraceGetDTS+0xd8>)
   828f6:	4798      	blx	r3
   828f8:	2000      	movs	r0, #0
   828fa:	e057      	b.n	829ac <prvTraceGetDTS+0xd0>

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
   828fc:	4b2e      	ldr	r3, [pc, #184]	; (829b8 <prvTraceGetDTS+0xdc>)
   828fe:	681b      	ldr	r3, [r3, #0]
   82900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   82902:	b952      	cbnz	r2, 8291a <prvTraceGetDTS+0x3e>
   82904:	4a2d      	ldr	r2, [pc, #180]	; (829bc <prvTraceGetDTS+0xe0>)
   82906:	6811      	ldr	r1, [r2, #0]
   82908:	4a2d      	ldr	r2, [pc, #180]	; (829c0 <prvTraceGetDTS+0xe4>)
   8290a:	6812      	ldr	r2, [r2, #0]
   8290c:	440a      	add	r2, r1
   8290e:	492d      	ldr	r1, [pc, #180]	; (829c4 <prvTraceGetDTS+0xe8>)
   82910:	6809      	ldr	r1, [r1, #0]
   82912:	428a      	cmp	r2, r1
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = TRACE_CPU_CLOCK_HZ / HWTC_DIVISOR;//(HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
   82914:	bf1c      	itt	ne
   82916:	4a2c      	ldrne	r2, [pc, #176]	; (829c8 <prvTraceGetDTS+0xec>)
   82918:	625a      	strne	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
   8291a:	a801      	add	r0, sp, #4
   8291c:	4b2b      	ldr	r3, [pc, #172]	; (829cc <prvTraceGetDTS+0xf0>)
   8291e:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   82920:	9a01      	ldr	r2, [sp, #4]
   82922:	4b2b      	ldr	r3, [pc, #172]	; (829d0 <prvTraceGetDTS+0xf4>)
   82924:	6818      	ldr	r0, [r3, #0]
   82926:	1a15      	subs	r5, r2, r0
	old_timestamp = timestamp;
   82928:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   8292a:	4b23      	ldr	r3, [pc, #140]	; (829b8 <prvTraceGetDTS+0xdc>)
   8292c:	681b      	ldr	r3, [r3, #0]
   8292e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   82930:	b1d9      	cbz	r1, 8296a <prvTraceGetDTS+0x8e>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   82932:	428d      	cmp	r5, r1
   82934:	d90a      	bls.n	8294c <prvTraceGetDTS+0x70>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   82936:	fbb5 f2f1 	udiv	r2, r5, r1
   8293a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   8293c:	4410      	add	r0, r2
   8293e:	62d8      	str	r0, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   82940:	fb01 5112 	mls	r1, r1, r2, r5
   82944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82946:	4411      	add	r1, r2
   82948:	6299      	str	r1, [r3, #40]	; 0x28
   8294a:	e002      	b.n	82952 <prvTraceGetDTS+0x76>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   8294c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8294e:	442a      	add	r2, r5
   82950:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   82952:	4b19      	ldr	r3, [pc, #100]	; (829b8 <prvTraceGetDTS+0xdc>)
   82954:	681b      	ldr	r3, [r3, #0]
   82956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82958:	6a59      	ldr	r1, [r3, #36]	; 0x24
   8295a:	428a      	cmp	r2, r1
   8295c:	d306      	bcc.n	8296c <prvTraceGetDTS+0x90>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   8295e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   82960:	3001      	adds	r0, #1
   82962:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   82964:	1a52      	subs	r2, r2, r1
   82966:	629a      	str	r2, [r3, #40]	; 0x28
   82968:	e000      	b.n	8296c <prvTraceGetDTS+0x90>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   8296a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   8296c:	42a5      	cmp	r5, r4
   8296e:	d91b      	bls.n	829a8 <prvTraceGetDTS+0xcc>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
   82970:	4b18      	ldr	r3, [pc, #96]	; (829d4 <prvTraceGetDTS+0xf8>)
   82972:	4798      	blx	r3

		if (xts != NULL)
   82974:	b1c0      	cbz	r0, 829a8 <prvTraceGetDTS+0xcc>
		{
			if (param_maxDTS == 0xFFFF)
   82976:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8297a:	4294      	cmp	r4, r2
   8297c:	d106      	bne.n	8298c <prvTraceGetDTS+0xb0>
			{
				xts->type = XTS16;
   8297e:	22a9      	movs	r2, #169	; 0xa9
   82980:	7002      	strb	r2, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   82982:	0c2a      	lsrs	r2, r5, #16
   82984:	8042      	strh	r2, [r0, #2]
				xts->xts_8 = 0;
   82986:	2200      	movs	r2, #0
   82988:	7042      	strb	r2, [r0, #1]
   8298a:	e00b      	b.n	829a4 <prvTraceGetDTS+0xc8>
			}
			else if (param_maxDTS == 0xFF)
   8298c:	2cff      	cmp	r4, #255	; 0xff
   8298e:	d106      	bne.n	8299e <prvTraceGetDTS+0xc2>
			{
				xts->type = XTS8;
   82990:	22a8      	movs	r2, #168	; 0xa8
   82992:	7002      	strb	r2, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   82994:	0a2a      	lsrs	r2, r5, #8
   82996:	8042      	strh	r2, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   82998:	0e2a      	lsrs	r2, r5, #24
   8299a:	7042      	strb	r2, [r0, #1]
   8299c:	e002      	b.n	829a4 <prvTraceGetDTS+0xc8>
			}
			else
			{
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
   8299e:	480e      	ldr	r0, [pc, #56]	; (829d8 <prvTraceGetDTS+0xfc>)
   829a0:	4b04      	ldr	r3, [pc, #16]	; (829b4 <prvTraceGetDTS+0xd8>)
   829a2:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   829a4:	4b0d      	ldr	r3, [pc, #52]	; (829dc <prvTraceGetDTS+0x100>)
   829a6:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   829a8:	ea05 0004 	and.w	r0, r5, r4
}
   829ac:	b003      	add	sp, #12
   829ae:	bd30      	pop	{r4, r5, pc}
   829b0:	000869e4 	.word	0x000869e4
   829b4:	000823ed 	.word	0x000823ed
   829b8:	2007abbc 	.word	0x2007abbc
   829bc:	e0001004 	.word	0xe0001004
   829c0:	2007ac48 	.word	0x2007ac48
   829c4:	2007c478 	.word	0x2007c478
   829c8:	01406f40 	.word	0x01406f40
   829cc:	00082a35 	.word	0x00082a35
   829d0:	2007abb4 	.word	0x2007abb4
   829d4:	000825ad 	.word	0x000825ad
   829d8:	00086a24 	.word	0x00086a24
   829dc:	000828a9 	.word	0x000828a9

000829e0 <prvTraceInitCortexM>:
uint32_t DWT_CYCLES_ADDED = 0; /* Used on ARM Cortex-M only */

#if (SELECTED_PORT == PORT_ARM_CortexM) /* ONLY DWT PORT SHOULD BE HERE */

void prvTraceInitCortexM()
{
   829e0:	b508      	push	{r3, lr}
	/* Make sure DWT is enabled is enabled, if supported */
	REG_DEMCR |= DEMCR_TRCENA;
   829e2:	4b0e      	ldr	r3, [pc, #56]	; (82a1c <prvTraceInitCortexM+0x3c>)
   829e4:	681a      	ldr	r2, [r3, #0]
   829e6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   829ea:	601a      	str	r2, [r3, #0]

	do{
		/* Verify that DWT is supported */
		if (REG_DEMCR == 0)
   829ec:	681b      	ldr	r3, [r3, #0]
   829ee:	b91b      	cbnz	r3, 829f8 <prvTraceInitCortexM+0x18>
		{
			vTraceError("DWT not supported by this chip!");
   829f0:	480b      	ldr	r0, [pc, #44]	; (82a20 <prvTraceInitCortexM+0x40>)
   829f2:	4b0c      	ldr	r3, [pc, #48]	; (82a24 <prvTraceInitCortexM+0x44>)
   829f4:	4798      	blx	r3
			break;
   829f6:	bd08      	pop	{r3, pc}
		}

		/* Verify that DWT_CYCCNT is supported */
		if (REG_DWT_CTRL & DWT_CTRL_NOCYCCNT)
   829f8:	4b0b      	ldr	r3, [pc, #44]	; (82a28 <prvTraceInitCortexM+0x48>)
   829fa:	681b      	ldr	r3, [r3, #0]
   829fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   82a00:	d003      	beq.n	82a0a <prvTraceInitCortexM+0x2a>
		{
			vTraceError("DWT_CYCCNT not supported by this chip!");
   82a02:	480a      	ldr	r0, [pc, #40]	; (82a2c <prvTraceInitCortexM+0x4c>)
   82a04:	4b07      	ldr	r3, [pc, #28]	; (82a24 <prvTraceInitCortexM+0x44>)
   82a06:	4798      	blx	r3
			break;
   82a08:	bd08      	pop	{r3, pc}
		}

		/* Reset the cycle counter */
		REG_DWT_CYCCNT = 0;
   82a0a:	2200      	movs	r2, #0
   82a0c:	4b08      	ldr	r3, [pc, #32]	; (82a30 <prvTraceInitCortexM+0x50>)
   82a0e:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		REG_DWT_CTRL |= DWT_CTRL_CYCCNTENA;
   82a10:	4a05      	ldr	r2, [pc, #20]	; (82a28 <prvTraceInitCortexM+0x48>)
   82a12:	6813      	ldr	r3, [r2, #0]
   82a14:	f043 0301 	orr.w	r3, r3, #1
   82a18:	6013      	str	r3, [r2, #0]
   82a1a:	bd08      	pop	{r3, pc}
   82a1c:	e000edfc 	.word	0xe000edfc
   82a20:	00086c38 	.word	0x00086c38
   82a24:	000823ed 	.word	0x000823ed
   82a28:	e0001000 	.word	0xe0001000
   82a2c:	00086c58 	.word	0x00086c58
   82a30:	e0001004 	.word	0xe0001004

00082a34 <vTracePortGetTimeStamp>:
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*HWTC_TYPE == HWTC_TYPE_SYSTICK*/

	if (trace_disable_timestamp == 1)
   82a34:	4b11      	ldr	r3, [pc, #68]	; (82a7c <vTracePortGetTimeStamp+0x48>)
   82a36:	681b      	ldr	r3, [r3, #0]
   82a38:	2b01      	cmp	r3, #1
   82a3a:	d104      	bne.n	82a46 <vTracePortGetTimeStamp+0x12>
	{
		if (pTimestamp)
   82a3c:	b1e0      	cbz	r0, 82a78 <vTracePortGetTimeStamp+0x44>
			*pTimestamp = last_timestamp;
   82a3e:	4b10      	ldr	r3, [pc, #64]	; (82a80 <vTracePortGetTimeStamp+0x4c>)
   82a40:	681b      	ldr	r3, [r3, #0]
   82a42:	6003      	str	r3, [r0, #0]
   82a44:	4770      	bx	lr
 * or the trace recorder library. Typically you should not need to change
 * the code of vTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void vTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   82a46:	b410      	push	{r4}
	}

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	/* Get the increasing tick count */
	hwtc_count = HWTC_COUNT;
   82a48:	4b0e      	ldr	r3, [pc, #56]	; (82a84 <vTracePortGetTimeStamp+0x50>)
   82a4a:	681a      	ldr	r2, [r3, #0]
   82a4c:	4b0e      	ldr	r3, [pc, #56]	; (82a88 <vTracePortGetTimeStamp+0x54>)
   82a4e:	681b      	ldr	r3, [r3, #0]
   82a50:	4413      	add	r3, r2
	/* This seemingly unnecessarily complicated code will handle free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will wrap at (2^32 / HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that went missing when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
   82a52:	4a0e      	ldr	r2, [pc, #56]	; (82a8c <vTracePortGetTimeStamp+0x58>)
   82a54:	6812      	ldr	r2, [r2, #0]
   82a56:	1a99      	subs	r1, r3, r2
   82a58:	4c0d      	ldr	r4, [pc, #52]	; (82a90 <vTracePortGetTimeStamp+0x5c>)
   82a5a:	6822      	ldr	r2, [r4, #0]
   82a5c:	440a      	add	r2, r1
	
	/* Scale down the diff */
    diff_scaled = diff / HWTC_DIVISOR;
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
    last_hwtc_rest = diff % HWTC_DIVISOR;
   82a5e:	f002 0103 	and.w	r1, r2, #3
   82a62:	6021      	str	r1, [r4, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
   82a64:	4c06      	ldr	r4, [pc, #24]	; (82a80 <vTracePortGetTimeStamp+0x4c>)
   82a66:	6821      	ldr	r1, [r4, #0]
   82a68:	eb01 0292 	add.w	r2, r1, r2, lsr #2
   82a6c:	6022      	str	r2, [r4, #0]
#endif /*HWTC_TYPE == HWTC_TYPE_SYSTICK*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   82a6e:	b100      	cbz	r0, 82a72 <vTracePortGetTimeStamp+0x3e>
		*pTimestamp = last_timestamp;
   82a70:	6002      	str	r2, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   82a72:	4a06      	ldr	r2, [pc, #24]	; (82a8c <vTracePortGetTimeStamp+0x58>)
   82a74:	6013      	str	r3, [r2, #0]
}
   82a76:	bc10      	pop	{r4}
   82a78:	4770      	bx	lr
   82a7a:	bf00      	nop
   82a7c:	2007ac40 	.word	0x2007ac40
   82a80:	2007ac44 	.word	0x2007ac44
   82a84:	e0001004 	.word	0xe0001004
   82a88:	2007ac48 	.word	0x2007ac48
   82a8c:	2007ac3c 	.word	0x2007ac3c
   82a90:	2007ac4c 	.word	0x2007ac4c

00082a94 <prvTraceGetParam>:
 * Used for storing extra bytes for kernel calls with numeric parameters.
 *
 * May only be called within a critical section!
 ******************************************************************************/
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   82a94:	b538      	push	{r3, r4, r5, lr}
   82a96:	4605      	mov	r5, r0
   82a98:	460c      	mov	r4, r1
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   82a9a:	28ff      	cmp	r0, #255	; 0xff
   82a9c:	d008      	beq.n	82ab0 <prvTraceGetParam+0x1c>
   82a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82aa2:	4298      	cmp	r0, r3
   82aa4:	d004      	beq.n	82ab0 <prvTraceGetParam+0x1c>
   82aa6:	480c      	ldr	r0, [pc, #48]	; (82ad8 <prvTraceGetParam+0x44>)
   82aa8:	4b0c      	ldr	r3, [pc, #48]	; (82adc <prvTraceGetParam+0x48>)
   82aaa:	4798      	blx	r3
   82aac:	4620      	mov	r0, r4
   82aae:	bd38      	pop	{r3, r4, r5, pc}
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   82ab0:	42a5      	cmp	r5, r4
   82ab2:	d20f      	bcs.n	82ad4 <prvTraceGetParam+0x40>
	{
		return param;
	}
	else
	{
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
   82ab4:	4b0a      	ldr	r3, [pc, #40]	; (82ae0 <prvTraceGetParam+0x4c>)
   82ab6:	4798      	blx	r3
		if (xps != NULL)
   82ab8:	b148      	cbz	r0, 82ace <prvTraceGetParam+0x3a>
		{
			xps->type = DIV_XPS;
   82aba:	2301      	movs	r3, #1
   82abc:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
   82abe:	ea24 0305 	bic.w	r3, r4, r5
   82ac2:	0a19      	lsrs	r1, r3, #8
   82ac4:	7041      	strb	r1, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
   82ac6:	0c1b      	lsrs	r3, r3, #16
   82ac8:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   82aca:	4b06      	ldr	r3, [pc, #24]	; (82ae4 <prvTraceGetParam+0x50>)
   82acc:	4798      	blx	r3
		}

		return param & param_max;
   82ace:	ea05 0004 	and.w	r0, r5, r4
   82ad2:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
	{
		return param;
   82ad4:	4620      	mov	r0, r4
			prvTraceUpdateCounters();
		}

		return param & param_max;
	}
}
   82ad6:	bd38      	pop	{r3, r4, r5, pc}
   82ad8:	00086c80 	.word	0x00086c80
   82adc:	000823ed 	.word	0x000823ed
   82ae0:	000825ad 	.word	0x000825ad
   82ae4:	000828a9 	.word	0x000828a9

00082ae8 <vTraceStoreTaskReady>:
	TREvent* tr;
	uint8_t hnd8;

	TRACE_SR_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   82ae8:	2800      	cmp	r0, #0
   82aea:	d040      	beq.n	82b6e <vTraceStoreTaskReady+0x86>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   82aec:	4a20      	ldr	r2, [pc, #128]	; (82b70 <vTraceStoreTaskReady+0x88>)
   82aee:	6812      	ldr	r2, [r2, #0]
   82af0:	2a00      	cmp	r2, #0
   82af2:	d03c      	beq.n	82b6e <vTraceStoreTaskReady+0x86>
 * vTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void vTraceStoreTaskReady(objectHandleType handle)
{
   82af4:	b570      	push	{r4, r5, r6, lr}
   82af6:	4604      	mov	r4, r0
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
   82af8:	280f      	cmp	r0, #15
   82afa:	d903      	bls.n	82b04 <vTraceStoreTaskReady+0x1c>
   82afc:	481d      	ldr	r0, [pc, #116]	; (82b74 <vTraceStoreTaskReady+0x8c>)
   82afe:	4b1e      	ldr	r3, [pc, #120]	; (82b78 <vTraceStoreTaskReady+0x90>)
   82b00:	4798      	blx	r3
   82b02:	bd70      	pop	{r4, r5, r6, pc}

	if (recorder_busy)
   82b04:	4b1d      	ldr	r3, [pc, #116]	; (82b7c <vTraceStoreTaskReady+0x94>)
   82b06:	681b      	ldr	r3, [r3, #0]
   82b08:	b11b      	cbz	r3, 82b12 <vTraceStoreTaskReady+0x2a>
	 * This should never occur, as the tick- and kernel call ISR is on lowest
	 * interrupt priority and always are disabled during the critical sections
	 * of the recorder.
	 ***********************************************************************/

	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
   82b0a:	481d      	ldr	r0, [pc, #116]	; (82b80 <vTraceStoreTaskReady+0x98>)
   82b0c:	4b1a      	ldr	r3, [pc, #104]	; (82b78 <vTraceStoreTaskReady+0x90>)
   82b0e:	4798      	blx	r3
	 return;
   82b10:	bd70      	pop	{r4, r5, r6, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82b12:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82b16:	2301      	movs	r3, #1
   82b18:	f383 8810 	msr	PRIMASK, r3
	}

	trcCRITICAL_SECTION_BEGIN();
   82b1c:	4a17      	ldr	r2, [pc, #92]	; (82b7c <vTraceStoreTaskReady+0x94>)
   82b1e:	6813      	ldr	r3, [r2, #0]
   82b20:	3301      	adds	r3, #1
   82b22:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   82b24:	4b17      	ldr	r3, [pc, #92]	; (82b84 <vTraceStoreTaskReady+0x9c>)
   82b26:	681b      	ldr	r3, [r3, #0]
   82b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b2a:	b1cb      	cbz	r3, 82b60 <vTraceStoreTaskReady+0x78>
	{
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
   82b2c:	f100 0321 	add.w	r3, r0, #33	; 0x21
   82b30:	10da      	asrs	r2, r3, #3
   82b32:	4915      	ldr	r1, [pc, #84]	; (82b88 <vTraceStoreTaskReady+0xa0>)
   82b34:	5c8a      	ldrb	r2, [r1, r2]
   82b36:	f003 0307 	and.w	r3, r3, #7
   82b3a:	fa42 f303 	asr.w	r3, r2, r3
   82b3e:	f013 0f01 	tst.w	r3, #1
   82b42:	d10d      	bne.n	82b60 <vTraceStoreTaskReady+0x78>
		{
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82b44:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82b48:	4b10      	ldr	r3, [pc, #64]	; (82b8c <vTraceStoreTaskReady+0xa4>)
   82b4a:	4798      	blx	r3
   82b4c:	4606      	mov	r6, r0
			hnd8 = prvTraceGet8BitHandle(handle);
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
   82b4e:	4b10      	ldr	r3, [pc, #64]	; (82b90 <vTraceStoreTaskReady+0xa8>)
   82b50:	4798      	blx	r3
			if (tr != NULL)
   82b52:	b128      	cbz	r0, 82b60 <vTraceStoreTaskReady+0x78>
			{
				tr->type = DIV_TASK_READY;
   82b54:	2202      	movs	r2, #2
   82b56:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
   82b58:	8046      	strh	r6, [r0, #2]
				tr->objHandle = hnd8;
   82b5a:	7044      	strb	r4, [r0, #1]
				prvTraceUpdateCounters();
   82b5c:	4b0d      	ldr	r3, [pc, #52]	; (82b94 <vTraceStoreTaskReady+0xac>)
   82b5e:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82b60:	4a06      	ldr	r2, [pc, #24]	; (82b7c <vTraceStoreTaskReady+0x94>)
   82b62:	6813      	ldr	r3, [r2, #0]
   82b64:	3b01      	subs	r3, #1
   82b66:	6013      	str	r3, [r2, #0]
   82b68:	f385 8810 	msr	PRIMASK, r5
   82b6c:	bd70      	pop	{r4, r5, r6, pc}
   82b6e:	4770      	bx	lr
   82b70:	2007013c 	.word	0x2007013c
   82b74:	00086cbc 	.word	0x00086cbc
   82b78:	000823ed 	.word	0x000823ed
   82b7c:	2007abb8 	.word	0x2007abb8
   82b80:	00086cfc 	.word	0x00086cfc
   82b84:	2007abbc 	.word	0x2007abbc
   82b88:	2007ac30 	.word	0x2007ac30
   82b8c:	000828dd 	.word	0x000828dd
   82b90:	000825ad 	.word	0x000825ad
   82b94:	000828a9 	.word	0x000828a9

00082b98 <vTraceStoreKernelCall>:
 *
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
void vTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   82b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b9a:	4604      	mov	r4, r0
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
   82b9c:	28fe      	cmp	r0, #254	; 0xfe
   82b9e:	d903      	bls.n	82ba8 <vTraceStoreKernelCall+0x10>
   82ba0:	482b      	ldr	r0, [pc, #172]	; (82c50 <vTraceStoreKernelCall+0xb8>)
   82ba2:	4b2c      	ldr	r3, [pc, #176]	; (82c54 <vTraceStoreKernelCall+0xbc>)
   82ba4:	4798      	blx	r3
   82ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ba8:	4608      	mov	r0, r1
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
   82baa:	2906      	cmp	r1, #6
   82bac:	d903      	bls.n	82bb6 <vTraceStoreKernelCall+0x1e>
   82bae:	482a      	ldr	r0, [pc, #168]	; (82c58 <vTraceStoreKernelCall+0xc0>)
   82bb0:	4b28      	ldr	r3, [pc, #160]	; (82c54 <vTraceStoreKernelCall+0xbc>)
   82bb2:	4798      	blx	r3
   82bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
   82bb6:	4b29      	ldr	r3, [pc, #164]	; (82c5c <vTraceStoreKernelCall+0xc4>)
   82bb8:	681b      	ldr	r3, [r3, #0]
   82bba:	440b      	add	r3, r1
   82bbc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82bc0:	4293      	cmp	r3, r2
   82bc2:	d203      	bcs.n	82bcc <vTraceStoreKernelCall+0x34>
   82bc4:	4826      	ldr	r0, [pc, #152]	; (82c60 <vTraceStoreKernelCall+0xc8>)
   82bc6:	4b23      	ldr	r3, [pc, #140]	; (82c54 <vTraceStoreKernelCall+0xbc>)
   82bc8:	4798      	blx	r3
   82bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (recorder_busy)
   82bcc:	4b25      	ldr	r3, [pc, #148]	; (82c64 <vTraceStoreKernelCall+0xcc>)
   82bce:	681b      	ldr	r3, [r3, #0]
   82bd0:	b11b      	cbz	r3, 82bda <vTraceStoreKernelCall+0x42>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (2)");
   82bd2:	4825      	ldr	r0, [pc, #148]	; (82c68 <vTraceStoreKernelCall+0xd0>)
   82bd4:	4b1f      	ldr	r3, [pc, #124]	; (82c54 <vTraceStoreKernelCall+0xbc>)
   82bd6:	4798      	blx	r3
		return;
   82bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (handle_of_last_logged_task == 0)
   82bda:	4b24      	ldr	r3, [pc, #144]	; (82c6c <vTraceStoreKernelCall+0xd4>)
   82bdc:	781b      	ldrb	r3, [r3, #0]
   82bde:	2b00      	cmp	r3, #0
   82be0:	d034      	beq.n	82c4c <vTraceStoreKernelCall+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82be2:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82be6:	2301      	movs	r3, #1
   82be8:	f383 8810 	msr	PRIMASK, r3
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   82bec:	491d      	ldr	r1, [pc, #116]	; (82c64 <vTraceStoreKernelCall+0xcc>)
   82bee:	680b      	ldr	r3, [r1, #0]
   82bf0:	3301      	adds	r3, #1
   82bf2:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive)
   82bf4:	4b19      	ldr	r3, [pc, #100]	; (82c5c <vTraceStoreKernelCall+0xc4>)
   82bf6:	681b      	ldr	r3, [r3, #0]
   82bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82bfa:	b30b      	cbz	r3, 82c40 <vTraceStoreKernelCall+0xa8>
	{
		/* If it is an ISR or NOT an excluded task, this kernel call will be stored in the trace */
		if (nISRactive || !inExcludedTask)
   82bfc:	4b1c      	ldr	r3, [pc, #112]	; (82c70 <vTraceStoreKernelCall+0xd8>)
   82bfe:	f993 3000 	ldrsb.w	r3, [r3]
   82c02:	b913      	cbnz	r3, 82c0a <vTraceStoreKernelCall+0x72>
   82c04:	4b1b      	ldr	r3, [pc, #108]	; (82c74 <vTraceStoreKernelCall+0xdc>)
   82c06:	781b      	ldrb	r3, [r3, #0]
   82c08:	b9d3      	cbnz	r3, 82c40 <vTraceStoreKernelCall+0xa8>
		{
			/* Check if the referenced object or the event code is excluded */
			if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) && !TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(ecode))
   82c0a:	b2d6      	uxtb	r6, r2
   82c0c:	4631      	mov	r1, r6
   82c0e:	4b1a      	ldr	r3, [pc, #104]	; (82c78 <vTraceStoreKernelCall+0xe0>)
   82c10:	4798      	blx	r3
   82c12:	b9a8      	cbnz	r0, 82c40 <vTraceStoreKernelCall+0xa8>
   82c14:	08e3      	lsrs	r3, r4, #3
   82c16:	4a19      	ldr	r2, [pc, #100]	; (82c7c <vTraceStoreKernelCall+0xe4>)
   82c18:	5cd3      	ldrb	r3, [r2, r3]
   82c1a:	f004 0207 	and.w	r2, r4, #7
   82c1e:	4113      	asrs	r3, r2
   82c20:	f013 0f01 	tst.w	r3, #1
   82c24:	d10c      	bne.n	82c40 <vTraceStoreKernelCall+0xa8>
			{
				dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82c26:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82c2a:	4b15      	ldr	r3, [pc, #84]	; (82c80 <vTraceStoreKernelCall+0xe8>)
   82c2c:	4798      	blx	r3
   82c2e:	4607      	mov	r7, r0
				hnd8 = prvTraceGet8BitHandle(objectNumber);
				kse = (KernelCall*) xTraceNextFreeEventBufferSlot();
   82c30:	4b14      	ldr	r3, [pc, #80]	; (82c84 <vTraceStoreKernelCall+0xec>)
   82c32:	4798      	blx	r3
				if (kse != NULL)
   82c34:	b120      	cbz	r0, 82c40 <vTraceStoreKernelCall+0xa8>
				{
					kse->dts = dts1;
   82c36:	8047      	strh	r7, [r0, #2]
					kse->type = (uint8_t)ecode;
   82c38:	7004      	strb	r4, [r0, #0]
					kse->objHandle = hnd8;
   82c3a:	7046      	strb	r6, [r0, #1]
					prvTraceUpdateCounters();
   82c3c:	4b12      	ldr	r3, [pc, #72]	; (82c88 <vTraceStoreKernelCall+0xf0>)
   82c3e:	4798      	blx	r3
				}
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82c40:	4a08      	ldr	r2, [pc, #32]	; (82c64 <vTraceStoreKernelCall+0xcc>)
   82c42:	6813      	ldr	r3, [r2, #0]
   82c44:	3b01      	subs	r3, #1
   82c46:	6013      	str	r3, [r2, #0]
   82c48:	f385 8810 	msr	PRIMASK, r5
   82c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c4e:	bf00      	nop
   82c50:	00086d6c 	.word	0x00086d6c
   82c54:	000823ed 	.word	0x000823ed
   82c58:	00086da0 	.word	0x00086da0
   82c5c:	2007abbc 	.word	0x2007abbc
   82c60:	00086de4 	.word	0x00086de4
   82c64:	2007abb8 	.word	0x2007abb8
   82c68:	00086e28 	.word	0x00086e28
   82c6c:	2007ac51 	.word	0x2007ac51
   82c70:	2007ac52 	.word	0x2007ac52
   82c74:	2007ac50 	.word	0x2007ac50
   82c78:	00083269 	.word	0x00083269
   82c7c:	2007ab8c 	.word	0x2007ab8c
   82c80:	000828dd 	.word	0x000828dd
   82c84:	000825ad 	.word	0x000825ad
   82c88:	000828a9 	.word	0x000828a9

00082c8c <vTraceStoreKernelCallWithParam>:
 ******************************************************************************/
void vTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   82c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c90:	4604      	mov	r4, r0
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
   82c92:	28fe      	cmp	r0, #254	; 0xfe
   82c94:	d904      	bls.n	82ca0 <vTraceStoreKernelCallWithParam+0x14>
   82c96:	4831      	ldr	r0, [pc, #196]	; (82d5c <vTraceStoreKernelCallWithParam+0xd0>)
   82c98:	4b31      	ldr	r3, [pc, #196]	; (82d60 <vTraceStoreKernelCallWithParam+0xd4>)
   82c9a:	4798      	blx	r3
   82c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ca0:	4608      	mov	r0, r1
   82ca2:	461d      	mov	r5, r3
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
   82ca4:	2906      	cmp	r1, #6
   82ca6:	d904      	bls.n	82cb2 <vTraceStoreKernelCallWithParam+0x26>
   82ca8:	482e      	ldr	r0, [pc, #184]	; (82d64 <vTraceStoreKernelCallWithParam+0xd8>)
   82caa:	4b2d      	ldr	r3, [pc, #180]	; (82d60 <vTraceStoreKernelCallWithParam+0xd4>)
   82cac:	4798      	blx	r3
   82cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
   82cb2:	4b2d      	ldr	r3, [pc, #180]	; (82d68 <vTraceStoreKernelCallWithParam+0xdc>)
   82cb4:	681b      	ldr	r3, [r3, #0]
   82cb6:	440b      	add	r3, r1
   82cb8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82cbc:	4293      	cmp	r3, r2
   82cbe:	d204      	bcs.n	82cca <vTraceStoreKernelCallWithParam+0x3e>
   82cc0:	482a      	ldr	r0, [pc, #168]	; (82d6c <vTraceStoreKernelCallWithParam+0xe0>)
   82cc2:	4b27      	ldr	r3, [pc, #156]	; (82d60 <vTraceStoreKernelCallWithParam+0xd4>)
   82cc4:	4798      	blx	r3
   82cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (recorder_busy)
   82cca:	4b29      	ldr	r3, [pc, #164]	; (82d70 <vTraceStoreKernelCallWithParam+0xe4>)
   82ccc:	681b      	ldr	r3, [r3, #0]
   82cce:	b123      	cbz	r3, 82cda <vTraceStoreKernelCallWithParam+0x4e>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (3)");
   82cd0:	4828      	ldr	r0, [pc, #160]	; (82d74 <vTraceStoreKernelCallWithParam+0xe8>)
   82cd2:	4b23      	ldr	r3, [pc, #140]	; (82d60 <vTraceStoreKernelCallWithParam+0xd4>)
   82cd4:	4798      	blx	r3
		return;
   82cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82cda:	f3ef 8610 	mrs	r6, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82cde:	2301      	movs	r3, #1
   82ce0:	f383 8810 	msr	PRIMASK, r3
	}

	trcCRITICAL_SECTION_BEGIN();
   82ce4:	4922      	ldr	r1, [pc, #136]	; (82d70 <vTraceStoreKernelCallWithParam+0xe4>)
   82ce6:	680b      	ldr	r3, [r1, #0]
   82ce8:	3301      	adds	r3, #1
   82cea:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
   82cec:	4b1e      	ldr	r3, [pc, #120]	; (82d68 <vTraceStoreKernelCallWithParam+0xdc>)
   82cee:	681b      	ldr	r3, [r3, #0]
   82cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82cf2:	b353      	cbz	r3, 82d4a <vTraceStoreKernelCallWithParam+0xbe>
   82cf4:	4b20      	ldr	r3, [pc, #128]	; (82d78 <vTraceStoreKernelCallWithParam+0xec>)
   82cf6:	781b      	ldrb	r3, [r3, #0]
   82cf8:	b33b      	cbz	r3, 82d4a <vTraceStoreKernelCallWithParam+0xbe>
   82cfa:	4b20      	ldr	r3, [pc, #128]	; (82d7c <vTraceStoreKernelCallWithParam+0xf0>)
   82cfc:	781b      	ldrb	r3, [r3, #0]
   82cfe:	b11b      	cbz	r3, 82d08 <vTraceStoreKernelCallWithParam+0x7c>
   82d00:	4b1f      	ldr	r3, [pc, #124]	; (82d80 <vTraceStoreKernelCallWithParam+0xf4>)
   82d02:	f993 3000 	ldrsb.w	r3, [r3]
   82d06:	b303      	cbz	r3, 82d4a <vTraceStoreKernelCallWithParam+0xbe>
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
   82d08:	b2d7      	uxtb	r7, r2
   82d0a:	4639      	mov	r1, r7
   82d0c:	4b1d      	ldr	r3, [pc, #116]	; (82d84 <vTraceStoreKernelCallWithParam+0xf8>)
   82d0e:	4798      	blx	r3
   82d10:	b9d8      	cbnz	r0, 82d4a <vTraceStoreKernelCallWithParam+0xbe>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
   82d12:	08e3      	lsrs	r3, r4, #3

	trcCRITICAL_SECTION_BEGIN();
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
	{
		/* Check if the referenced object or the event code is excluded */
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
   82d14:	4a1c      	ldr	r2, [pc, #112]	; (82d88 <vTraceStoreKernelCallWithParam+0xfc>)
   82d16:	5cd3      	ldrb	r3, [r2, r3]
   82d18:	f004 0207 	and.w	r2, r4, #7
   82d1c:	4113      	asrs	r3, r2
   82d1e:	f013 0f01 	tst.w	r3, #1
   82d22:	d112      	bne.n	82d4a <vTraceStoreKernelCallWithParam+0xbe>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
		{
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   82d24:	20ff      	movs	r0, #255	; 0xff
   82d26:	4b19      	ldr	r3, [pc, #100]	; (82d8c <vTraceStoreKernelCallWithParam+0x100>)
   82d28:	4798      	blx	r3
   82d2a:	4680      	mov	r8, r0
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   82d2c:	4629      	mov	r1, r5
   82d2e:	20ff      	movs	r0, #255	; 0xff
   82d30:	4b17      	ldr	r3, [pc, #92]	; (82d90 <vTraceStoreKernelCallWithParam+0x104>)
   82d32:	4798      	blx	r3
   82d34:	4605      	mov	r5, r0
			hnd8 = prvTraceGet8BitHandle((objectHandleType)objectNumber);
			kse = (KernelCallWithParamAndHandle*) xTraceNextFreeEventBufferSlot();
   82d36:	4b17      	ldr	r3, [pc, #92]	; (82d94 <vTraceStoreKernelCallWithParam+0x108>)
   82d38:	4798      	blx	r3
			if (kse != NULL)
   82d3a:	b130      	cbz	r0, 82d4a <vTraceStoreKernelCallWithParam+0xbe>
			{
				kse->dts = dts2;
   82d3c:	f880 8003 	strb.w	r8, [r0, #3]
				kse->type = (uint8_t)evtcode;
   82d40:	7004      	strb	r4, [r0, #0]
				kse->objHandle = hnd8;
   82d42:	7047      	strb	r7, [r0, #1]
				kse->param = p8;
   82d44:	7085      	strb	r5, [r0, #2]
				prvTraceUpdateCounters();
   82d46:	4b14      	ldr	r3, [pc, #80]	; (82d98 <vTraceStoreKernelCallWithParam+0x10c>)
   82d48:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82d4a:	4a09      	ldr	r2, [pc, #36]	; (82d70 <vTraceStoreKernelCallWithParam+0xe4>)
   82d4c:	6813      	ldr	r3, [r2, #0]
   82d4e:	3b01      	subs	r3, #1
   82d50:	6013      	str	r3, [r2, #0]
   82d52:	f386 8810 	msr	PRIMASK, r6
   82d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d5a:	bf00      	nop
   82d5c:	00086e60 	.word	0x00086e60
   82d60:	000823ed 	.word	0x000823ed
   82d64:	00086e98 	.word	0x00086e98
   82d68:	2007abbc 	.word	0x2007abbc
   82d6c:	00086ee4 	.word	0x00086ee4
   82d70:	2007abb8 	.word	0x2007abb8
   82d74:	00086f34 	.word	0x00086f34
   82d78:	2007ac51 	.word	0x2007ac51
   82d7c:	2007ac50 	.word	0x2007ac50
   82d80:	2007ac52 	.word	0x2007ac52
   82d84:	00083269 	.word	0x00083269
   82d88:	2007ab8c 	.word	0x2007ab8c
   82d8c:	000828dd 	.word	0x000828dd
   82d90:	00082a95 	.word	0x00082a95
   82d94:	000825ad 	.word	0x000825ad
   82d98:	000828a9 	.word	0x000828a9

00082d9c <vTraceStoreKernelCallWithNumericParamOnly>:
 *
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
void vTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   82d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t restParam;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	restParam = 0;

	TRACE_ASSERT(evtcode < 0xFF,
   82d9e:	28fe      	cmp	r0, #254	; 0xfe
   82da0:	d903      	bls.n	82daa <vTraceStoreKernelCallWithNumericParamOnly+0xe>
   82da2:	4823      	ldr	r0, [pc, #140]	; (82e30 <vTraceStoreKernelCallWithNumericParamOnly+0x94>)
   82da4:	4b23      	ldr	r3, [pc, #140]	; (82e34 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82da6:	4798      	blx	r3
   82da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82daa:	4604      	mov	r4, r0
   82dac:	460e      	mov	r6, r1
		"vTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", );

	if (recorder_busy)
   82dae:	4b22      	ldr	r3, [pc, #136]	; (82e38 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82db0:	681b      	ldr	r3, [r3, #0]
   82db2:	b11b      	cbz	r3, 82dbc <vTraceStoreKernelCallWithNumericParamOnly+0x20>
		* or creates a user event.
		* Only ISRs that are disabled by TRACE_ENTER_CRITICAL_SECTION may use system calls
		* or user events (see TRACE_MAX_SYSCALL_INTERRUPT_PRIORITY).
		*************************************************************************/

		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
   82db4:	4821      	ldr	r0, [pc, #132]	; (82e3c <vTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   82db6:	4b1f      	ldr	r3, [pc, #124]	; (82e34 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82db8:	4798      	blx	r3
		return;
   82dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82dbc:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82dc0:	2301      	movs	r3, #1
   82dc2:	f383 8810 	msr	PRIMASK, r3
	}

	trcCRITICAL_SECTION_BEGIN();
   82dc6:	4a1c      	ldr	r2, [pc, #112]	; (82e38 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82dc8:	6813      	ldr	r3, [r2, #0]
   82dca:	3301      	adds	r3, #1
   82dcc:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task
   82dce:	4b1c      	ldr	r3, [pc, #112]	; (82e40 <vTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   82dd0:	681b      	ldr	r3, [r3, #0]
   82dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82dd4:	b323      	cbz	r3, 82e20 <vTraceStoreKernelCallWithNumericParamOnly+0x84>
   82dd6:	4b1b      	ldr	r3, [pc, #108]	; (82e44 <vTraceStoreKernelCallWithNumericParamOnly+0xa8>)
   82dd8:	781b      	ldrb	r3, [r3, #0]
   82dda:	b30b      	cbz	r3, 82e20 <vTraceStoreKernelCallWithNumericParamOnly+0x84>
		&& (! inExcludedTask || nISRactive))
   82ddc:	4b1a      	ldr	r3, [pc, #104]	; (82e48 <vTraceStoreKernelCallWithNumericParamOnly+0xac>)
   82dde:	781b      	ldrb	r3, [r3, #0]
   82de0:	b11b      	cbz	r3, 82dea <vTraceStoreKernelCallWithNumericParamOnly+0x4e>
   82de2:	4b1a      	ldr	r3, [pc, #104]	; (82e4c <vTraceStoreKernelCallWithNumericParamOnly+0xb0>)
   82de4:	f993 3000 	ldrsb.w	r3, [r3]
   82de8:	b1d3      	cbz	r3, 82e20 <vTraceStoreKernelCallWithNumericParamOnly+0x84>
	{
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
   82dea:	08e3      	lsrs	r3, r4, #3
   82dec:	4a18      	ldr	r2, [pc, #96]	; (82e50 <vTraceStoreKernelCallWithNumericParamOnly+0xb4>)
   82dee:	5cd3      	ldrb	r3, [r2, r3]
   82df0:	f004 0207 	and.w	r2, r4, #7
   82df4:	4113      	asrs	r3, r2
   82df6:	f013 0f01 	tst.w	r3, #1
   82dfa:	d111      	bne.n	82e20 <vTraceStoreKernelCallWithNumericParamOnly+0x84>
		{
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   82dfc:	20ff      	movs	r0, #255	; 0xff
   82dfe:	4b15      	ldr	r3, [pc, #84]	; (82e54 <vTraceStoreKernelCallWithNumericParamOnly+0xb8>)
   82e00:	4798      	blx	r3
   82e02:	4607      	mov	r7, r0
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   82e04:	4631      	mov	r1, r6
   82e06:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82e0a:	4b13      	ldr	r3, [pc, #76]	; (82e58 <vTraceStoreKernelCallWithNumericParamOnly+0xbc>)
   82e0c:	4798      	blx	r3
   82e0e:	4606      	mov	r6, r0
			kse = (KernelCallWithParam16*) xTraceNextFreeEventBufferSlot();
   82e10:	4b12      	ldr	r3, [pc, #72]	; (82e5c <vTraceStoreKernelCallWithNumericParamOnly+0xc0>)
   82e12:	4798      	blx	r3
			if (kse != NULL)
   82e14:	b120      	cbz	r0, 82e20 <vTraceStoreKernelCallWithNumericParamOnly+0x84>
			{
				kse->dts = dts6;
   82e16:	7047      	strb	r7, [r0, #1]
				kse->type = (uint8_t)evtcode;
   82e18:	7004      	strb	r4, [r0, #0]
				kse->param = restParam;
   82e1a:	8046      	strh	r6, [r0, #2]
				prvTraceUpdateCounters();
   82e1c:	4b10      	ldr	r3, [pc, #64]	; (82e60 <vTraceStoreKernelCallWithNumericParamOnly+0xc4>)
   82e1e:	4798      	blx	r3
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82e20:	4a05      	ldr	r2, [pc, #20]	; (82e38 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82e22:	6813      	ldr	r3, [r2, #0]
   82e24:	3b01      	subs	r3, #1
   82e26:	6013      	str	r3, [r2, #0]
   82e28:	f385 8810 	msr	PRIMASK, r5
   82e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e2e:	bf00      	nop
   82e30:	00086f6c 	.word	0x00086f6c
   82e34:	000823ed 	.word	0x000823ed
   82e38:	2007abb8 	.word	0x2007abb8
   82e3c:	00086fc0 	.word	0x00086fc0
   82e40:	2007abbc 	.word	0x2007abbc
   82e44:	2007ac51 	.word	0x2007ac51
   82e48:	2007ac50 	.word	0x2007ac50
   82e4c:	2007ac52 	.word	0x2007ac52
   82e50:	2007ab8c 	.word	0x2007ab8c
   82e54:	000828dd 	.word	0x000828dd
   82e58:	00082a95 	.word	0x00082a95
   82e5c:	000825ad 	.word	0x000825ad
   82e60:	000828a9 	.word	0x000828a9

00082e64 <vTraceSetPriorityProperty>:
	}
}
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
   82e64:	b538      	push	{r3, r4, r5, lr}
   82e66:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82e68:	2806      	cmp	r0, #6
   82e6a:	d903      	bls.n	82e74 <vTraceSetPriorityProperty+0x10>
   82e6c:	480e      	ldr	r0, [pc, #56]	; (82ea8 <vTraceSetPriorityProperty+0x44>)
   82e6e:	4b0f      	ldr	r3, [pc, #60]	; (82eac <vTraceSetPriorityProperty+0x48>)
   82e70:	4798      	blx	r3
   82e72:	bd38      	pop	{r3, r4, r5, pc}
   82e74:	4608      	mov	r0, r1
   82e76:	4615      	mov	r5, r2
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82e78:	4b0d      	ldr	r3, [pc, #52]	; (82eb0 <vTraceSetPriorityProperty+0x4c>)
   82e7a:	681b      	ldr	r3, [r3, #0]
   82e7c:	4423      	add	r3, r4
   82e7e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82e82:	428b      	cmp	r3, r1
   82e84:	d203      	bcs.n	82e8e <vTraceSetPriorityProperty+0x2a>
   82e86:	480b      	ldr	r0, [pc, #44]	; (82eb4 <vTraceSetPriorityProperty+0x50>)
   82e88:	4b08      	ldr	r3, [pc, #32]	; (82eac <vTraceSetPriorityProperty+0x48>)
   82e8a:	4798      	blx	r3
   82e8c:	bd38      	pop	{r3, r4, r5, pc}
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   82e8e:	4621      	mov	r1, r4
   82e90:	4b09      	ldr	r3, [pc, #36]	; (82eb8 <vTraceSetPriorityProperty+0x54>)
   82e92:	4798      	blx	r3
   82e94:	4b06      	ldr	r3, [pc, #24]	; (82eb0 <vTraceSetPriorityProperty+0x4c>)
   82e96:	681b      	ldr	r3, [r3, #0]
   82e98:	441c      	add	r4, r3
   82e9a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82e9e:	4418      	add	r0, r3
   82ea0:	4410      	add	r0, r2
   82ea2:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
   82ea6:	bd38      	pop	{r3, r4, r5, pc}
   82ea8:	0008713c 	.word	0x0008713c
   82eac:	000823ed 	.word	0x000823ed
   82eb0:	2007abbc 	.word	0x2007abbc
   82eb4:	00087184 	.word	0x00087184
   82eb8:	000825e5 	.word	0x000825e5

00082ebc <uiTraceGetPriorityProperty>:
}

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
   82ebc:	b510      	push	{r4, lr}
   82ebe:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82ec0:	2806      	cmp	r0, #6
   82ec2:	d904      	bls.n	82ece <uiTraceGetPriorityProperty+0x12>
   82ec4:	480f      	ldr	r0, [pc, #60]	; (82f04 <uiTraceGetPriorityProperty+0x48>)
   82ec6:	4b10      	ldr	r3, [pc, #64]	; (82f08 <uiTraceGetPriorityProperty+0x4c>)
   82ec8:	4798      	blx	r3
   82eca:	2000      	movs	r0, #0
   82ecc:	bd10      	pop	{r4, pc}
   82ece:	4608      	mov	r0, r1
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82ed0:	4b0e      	ldr	r3, [pc, #56]	; (82f0c <uiTraceGetPriorityProperty+0x50>)
   82ed2:	681b      	ldr	r3, [r3, #0]
   82ed4:	4423      	add	r3, r4
   82ed6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82eda:	428b      	cmp	r3, r1
   82edc:	d204      	bcs.n	82ee8 <uiTraceGetPriorityProperty+0x2c>
   82ede:	480c      	ldr	r0, [pc, #48]	; (82f10 <uiTraceGetPriorityProperty+0x54>)
   82ee0:	4b09      	ldr	r3, [pc, #36]	; (82f08 <uiTraceGetPriorityProperty+0x4c>)
   82ee2:	4798      	blx	r3
   82ee4:	2000      	movs	r0, #0
   82ee6:	bd10      	pop	{r4, pc}
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   82ee8:	4621      	mov	r1, r4
   82eea:	4b0a      	ldr	r3, [pc, #40]	; (82f14 <uiTraceGetPriorityProperty+0x58>)
   82eec:	4798      	blx	r3
   82eee:	4b07      	ldr	r3, [pc, #28]	; (82f0c <uiTraceGetPriorityProperty+0x50>)
   82ef0:	681b      	ldr	r3, [r3, #0]
   82ef2:	441c      	add	r4, r3
   82ef4:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82ef8:	4418      	add	r0, r3
   82efa:	4410      	add	r0, r2
   82efc:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
}
   82f00:	bd10      	pop	{r4, pc}
   82f02:	bf00      	nop
   82f04:	000871c4 	.word	0x000871c4
   82f08:	000823ed 	.word	0x000823ed
   82f0c:	2007abbc 	.word	0x2007abbc
   82f10:	0008720c 	.word	0x0008720c
   82f14:	000825e5 	.word	0x000825e5

00082f18 <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
   82f18:	b538      	push	{r3, r4, r5, lr}
   82f1a:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82f1c:	2806      	cmp	r0, #6
   82f1e:	d903      	bls.n	82f28 <vTraceSetObjectState+0x10>
   82f20:	480e      	ldr	r0, [pc, #56]	; (82f5c <vTraceSetObjectState+0x44>)
   82f22:	4b0f      	ldr	r3, [pc, #60]	; (82f60 <vTraceSetObjectState+0x48>)
   82f24:	4798      	blx	r3
   82f26:	bd38      	pop	{r3, r4, r5, pc}
   82f28:	4608      	mov	r0, r1
   82f2a:	4615      	mov	r5, r2
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82f2c:	4b0d      	ldr	r3, [pc, #52]	; (82f64 <vTraceSetObjectState+0x4c>)
   82f2e:	681b      	ldr	r3, [r3, #0]
   82f30:	4423      	add	r3, r4
   82f32:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82f36:	428b      	cmp	r3, r1
   82f38:	d203      	bcs.n	82f42 <vTraceSetObjectState+0x2a>
   82f3a:	480b      	ldr	r0, [pc, #44]	; (82f68 <vTraceSetObjectState+0x50>)
   82f3c:	4b08      	ldr	r3, [pc, #32]	; (82f60 <vTraceSetObjectState+0x48>)
   82f3e:	4798      	blx	r3
   82f40:	bd38      	pop	{r3, r4, r5, pc}
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   82f42:	4621      	mov	r1, r4
   82f44:	4b09      	ldr	r3, [pc, #36]	; (82f6c <vTraceSetObjectState+0x54>)
   82f46:	4798      	blx	r3
   82f48:	4b06      	ldr	r3, [pc, #24]	; (82f64 <vTraceSetObjectState+0x4c>)
   82f4a:	681b      	ldr	r3, [r3, #0]
   82f4c:	441c      	add	r4, r3
   82f4e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82f52:	4418      	add	r0, r3
   82f54:	4410      	add	r0, r2
   82f56:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
   82f5a:	bd38      	pop	{r3, r4, r5, pc}
   82f5c:	0008724c 	.word	0x0008724c
   82f60:	000823ed 	.word	0x000823ed
   82f64:	2007abbc 	.word	0x2007abbc
   82f68:	00087290 	.word	0x00087290
   82f6c:	000825e5 	.word	0x000825e5

00082f70 <uiTraceGetObjectState>:
}

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
   82f70:	b510      	push	{r4, lr}
   82f72:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82f74:	2806      	cmp	r0, #6
   82f76:	d904      	bls.n	82f82 <uiTraceGetObjectState+0x12>
   82f78:	480f      	ldr	r0, [pc, #60]	; (82fb8 <uiTraceGetObjectState+0x48>)
   82f7a:	4b10      	ldr	r3, [pc, #64]	; (82fbc <uiTraceGetObjectState+0x4c>)
   82f7c:	4798      	blx	r3
   82f7e:	2000      	movs	r0, #0
   82f80:	bd10      	pop	{r4, pc}
   82f82:	4608      	mov	r0, r1
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82f84:	4b0e      	ldr	r3, [pc, #56]	; (82fc0 <uiTraceGetObjectState+0x50>)
   82f86:	681b      	ldr	r3, [r3, #0]
   82f88:	4423      	add	r3, r4
   82f8a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82f8e:	428b      	cmp	r3, r1
   82f90:	d204      	bcs.n	82f9c <uiTraceGetObjectState+0x2c>
   82f92:	480c      	ldr	r0, [pc, #48]	; (82fc4 <uiTraceGetObjectState+0x54>)
   82f94:	4b09      	ldr	r3, [pc, #36]	; (82fbc <uiTraceGetObjectState+0x4c>)
   82f96:	4798      	blx	r3
   82f98:	2000      	movs	r0, #0
   82f9a:	bd10      	pop	{r4, pc}
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   82f9c:	4621      	mov	r1, r4
   82f9e:	4b0a      	ldr	r3, [pc, #40]	; (82fc8 <uiTraceGetObjectState+0x58>)
   82fa0:	4798      	blx	r3
   82fa2:	4b07      	ldr	r3, [pc, #28]	; (82fc0 <uiTraceGetObjectState+0x50>)
   82fa4:	681b      	ldr	r3, [r3, #0]
   82fa6:	441c      	add	r4, r3
   82fa8:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82fac:	4418      	add	r0, r3
   82fae:	4410      	add	r0, r2
   82fb0:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
}
   82fb4:	bd10      	pop	{r4, pc}
   82fb6:	bf00      	nop
   82fb8:	000872cc 	.word	0x000872cc
   82fbc:	000823ed 	.word	0x000823ed
   82fc0:	2007abbc 	.word	0x2007abbc
   82fc4:	00087310 	.word	0x00087310
   82fc8:	000825e5 	.word	0x000825e5

00082fcc <vTraceStoreTaskswitch>:
 * vTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void vTraceStoreTaskswitch(objectHandleType task_handle)
{
   82fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	extern int32_t isPendingContextSwitch;
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	skipEvent = 0;

	TRACE_ASSERT(task_handle <= NTask,
   82fce:	280f      	cmp	r0, #15
   82fd0:	d903      	bls.n	82fda <vTraceStoreTaskswitch+0xe>
   82fd2:	4828      	ldr	r0, [pc, #160]	; (83074 <vTraceStoreTaskswitch+0xa8>)
   82fd4:	4b28      	ldr	r3, [pc, #160]	; (83078 <vTraceStoreTaskswitch+0xac>)
   82fd6:	4798      	blx	r3
   82fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82fda:	4604      	mov	r4, r0
	function since critical sections should not be used in the context switch
	event...)
	***************************************************************************/

	/* Skip the event if the task has been excluded, using vTraceExcludeTask */
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
   82fdc:	f100 0321 	add.w	r3, r0, #33	; 0x21
   82fe0:	10da      	asrs	r2, r3, #3
   82fe2:	4926      	ldr	r1, [pc, #152]	; (8307c <vTraceStoreTaskswitch+0xb0>)
   82fe4:	5c8a      	ldrb	r2, [r1, r2]
   82fe6:	f003 0307 	and.w	r3, r3, #7
   82fea:	fa42 f303 	asr.w	r3, r2, r3
   82fee:	f013 0f01 	tst.w	r3, #1
	{
		skipEvent = 1;
		inExcludedTask = 1;
   82ff2:	bf14      	ite	ne
   82ff4:	2301      	movne	r3, #1
	}
	else
	{
		inExcludedTask = 0;
   82ff6:	2300      	moveq	r3, #0
   82ff8:	4a21      	ldr	r2, [pc, #132]	; (83080 <vTraceStoreTaskswitch+0xb4>)
   82ffa:	7013      	strb	r3, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82ffc:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   83000:	2201      	movs	r2, #1
   83002:	f382 8810 	msr	PRIMASK, r2
	}

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   83006:	491f      	ldr	r1, [pc, #124]	; (83084 <vTraceStoreTaskswitch+0xb8>)
   83008:	680a      	ldr	r2, [r1, #0]
   8300a:	3201      	adds	r2, #1
   8300c:	600a      	str	r2, [r1, #0]

	/* Skip the event if the same task is scheduled */
	if (task_handle == handle_of_last_logged_task)
   8300e:	4a1e      	ldr	r2, [pc, #120]	; (83088 <vTraceStoreTaskswitch+0xbc>)
   83010:	7812      	ldrb	r2, [r2, #0]
   83012:	4282      	cmp	r2, r0
   83014:	d026      	beq.n	83064 <vTraceStoreTaskswitch+0x98>
	{
		skipEvent = 1;
	}

	if (!RecorderDataPtr->recorderActive)
   83016:	4a1d      	ldr	r2, [pc, #116]	; (8308c <vTraceStoreTaskswitch+0xc0>)
   83018:	6812      	ldr	r2, [r2, #0]
   8301a:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8301c:	b312      	cbz	r2, 83064 <vTraceStoreTaskswitch+0x98>
	{
		skipEvent = 1;
	}

	/* If this event should be logged, log it! */
	if (skipEvent == 0)
   8301e:	bb0b      	cbnz	r3, 83064 <vTraceStoreTaskswitch+0x98>
	{
		isPendingContextSwitch = 0;
   83020:	2200      	movs	r2, #0
   83022:	4b1b      	ldr	r3, [pc, #108]	; (83090 <vTraceStoreTaskswitch+0xc4>)
   83024:	601a      	str	r2, [r3, #0]

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   83026:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8302a:	4b1a      	ldr	r3, [pc, #104]	; (83094 <vTraceStoreTaskswitch+0xc8>)
   8302c:	4798      	blx	r3
   8302e:	4607      	mov	r7, r0
		handle_of_last_logged_task = task_handle;
   83030:	4b15      	ldr	r3, [pc, #84]	; (83088 <vTraceStoreTaskswitch+0xbc>)
   83032:	701c      	strb	r4, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
   83034:	4b18      	ldr	r3, [pc, #96]	; (83098 <vTraceStoreTaskswitch+0xcc>)
   83036:	4798      	blx	r3

		if (ts != NULL)
   83038:	4606      	mov	r6, r0
   8303a:	b198      	cbz	r0, 83064 <vTraceStoreTaskswitch+0x98>
		{
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
   8303c:	4b12      	ldr	r3, [pc, #72]	; (83088 <vTraceStoreTaskswitch+0xbc>)
   8303e:	7819      	ldrb	r1, [r3, #0]
   83040:	2003      	movs	r0, #3
   83042:	4b16      	ldr	r3, [pc, #88]	; (8309c <vTraceStoreTaskswitch+0xd0>)
   83044:	4798      	blx	r3
   83046:	2801      	cmp	r0, #1
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   83048:	bf0c      	ite	eq
   8304a:	2307      	moveq	r3, #7
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   8304c:	2306      	movne	r3, #6
   8304e:	7033      	strb	r3, [r6, #0]
			}

			ts->dts = dts3;
   83050:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   83052:	7074      	strb	r4, [r6, #1]

			vTraceSetObjectState(TRACE_CLASS_TASK,
   83054:	2201      	movs	r2, #1
   83056:	4b0c      	ldr	r3, [pc, #48]	; (83088 <vTraceStoreTaskswitch+0xbc>)
   83058:	7819      	ldrb	r1, [r3, #0]
   8305a:	2003      	movs	r0, #3
   8305c:	4b10      	ldr	r3, [pc, #64]	; (830a0 <vTraceStoreTaskswitch+0xd4>)
   8305e:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   83060:	4b10      	ldr	r3, [pc, #64]	; (830a4 <vTraceStoreTaskswitch+0xd8>)
   83062:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   83064:	4a07      	ldr	r2, [pc, #28]	; (83084 <vTraceStoreTaskswitch+0xb8>)
   83066:	6813      	ldr	r3, [r2, #0]
   83068:	3b01      	subs	r3, #1
   8306a:	6013      	str	r3, [r2, #0]
   8306c:	f385 8810 	msr	PRIMASK, r5
   83070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83072:	bf00      	nop
   83074:	0008734c 	.word	0x0008734c
   83078:	000823ed 	.word	0x000823ed
   8307c:	2007ac30 	.word	0x2007ac30
   83080:	2007ac50 	.word	0x2007ac50
   83084:	2007abb8 	.word	0x2007abb8
   83088:	2007ac51 	.word	0x2007ac51
   8308c:	2007abbc 	.word	0x2007abbc
   83090:	2007ac54 	.word	0x2007ac54
   83094:	000828dd 	.word	0x000828dd
   83098:	000825ad 	.word	0x000825ad
   8309c:	00082f71 	.word	0x00082f71
   830a0:	00082f19 	.word	0x00082f19
   830a4:	000828a9 	.word	0x000828a9

000830a8 <vTraceSetTaskInstanceFinished>:

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
}

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
   830a8:	b508      	push	{r3, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   830aa:	4b0b      	ldr	r3, [pc, #44]	; (830d8 <vTraceSetTaskInstanceFinished+0x30>)
   830ac:	681b      	ldr	r3, [r3, #0]
   830ae:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
   830b2:	4283      	cmp	r3, r0
   830b4:	d203      	bcs.n	830be <vTraceSetTaskInstanceFinished+0x16>
   830b6:	4809      	ldr	r0, [pc, #36]	; (830dc <vTraceSetTaskInstanceFinished+0x34>)
   830b8:	4b09      	ldr	r3, [pc, #36]	; (830e0 <vTraceSetTaskInstanceFinished+0x38>)
   830ba:	4798      	blx	r3
   830bc:	bd08      	pop	{r3, pc}
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   830be:	2103      	movs	r1, #3
   830c0:	4b08      	ldr	r3, [pc, #32]	; (830e4 <vTraceSetTaskInstanceFinished+0x3c>)
   830c2:	4798      	blx	r3
   830c4:	4b04      	ldr	r3, [pc, #16]	; (830d8 <vTraceSetTaskInstanceFinished+0x30>)
   830c6:	681b      	ldr	r3, [r3, #0]
   830c8:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   830cc:	4418      	add	r0, r3
   830ce:	4410      	add	r0, r2
   830d0:	2300      	movs	r3, #0
   830d2:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
   830d6:	bd08      	pop	{r3, pc}
   830d8:	2007abbc 	.word	0x2007abbc
   830dc:	00087390 	.word	0x00087390
   830e0:	000823ed 	.word	0x000823ed
   830e4:	000825e5 	.word	0x000825e5

000830e8 <prvTraceGetObjectNumber>:
int uiInEventGroupSetBitsFromISR = 0;

#if (FREERTOS_VERSION < FREERTOS_VERSION_8_X)

objectHandleType prvTraceGetObjectNumber(void* handle)
{
   830e8:	b508      	push	{r3, lr}
	return (objectHandleType) ucQueueGetQueueNumber(handle);
   830ea:	4b01      	ldr	r3, [pc, #4]	; (830f0 <prvTraceGetObjectNumber+0x8>)
   830ec:	4798      	blx	r3
}
   830ee:	bd08      	pop	{r3, pc}
   830f0:	00080d31 	.word	0x00080d31

000830f4 <prvTraceGetObjectType>:
}

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
   830f4:	b508      	push	{r3, lr}
	return ucQueueGetQueueType(handle);
   830f6:	4b01      	ldr	r3, [pc, #4]	; (830fc <prvTraceGetObjectType+0x8>)
   830f8:	4798      	blx	r3
}
   830fa:	bd08      	pop	{r3, pc}
   830fc:	00080d39 	.word	0x00080d39

00083100 <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
   83100:	b508      	push	{r3, lr}
	return (objectHandleType)uxTaskGetTaskNumber(handle);
   83102:	4b02      	ldr	r3, [pc, #8]	; (8310c <prvTraceGetTaskNumber+0xc>)
   83104:	4798      	blx	r3
}
   83106:	b2c0      	uxtb	r0, r0
   83108:	bd08      	pop	{r3, pc}
   8310a:	bf00      	nop
   8310c:	00081729 	.word	0x00081729

00083110 <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
   83110:	b508      	push	{r3, lr}
	return xTaskGetCurrentTaskHandle();
   83112:	4b01      	ldr	r3, [pc, #4]	; (83118 <prvTraceGetCurrentTaskHandle+0x8>)
   83114:	4798      	blx	r3
}
   83116:	bd08      	pop	{r3, pc}
   83118:	00081735 	.word	0x00081735

0008311c <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   8311c:	4b29      	ldr	r3, [pc, #164]	; (831c4 <vTraceInitObjectPropertyTable+0xa8>)
   8311e:	681b      	ldr	r3, [r3, #0]
   83120:	2207      	movs	r2, #7
   83122:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
   83124:	220a      	movs	r2, #10
   83126:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
   8312a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
   8312e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
   83132:	220f      	movs	r2, #15
   83134:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
   83138:	2105      	movs	r1, #5
   8313a:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
   8313e:	2102      	movs	r1, #2
   83140:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
   83144:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
   83148:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
   8314c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
   83150:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
   83154:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
   83158:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
   8315c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
   83160:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   83164:	2210      	movs	r2, #16
   83166:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   8316a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   8316e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   83172:	2113      	movs	r1, #19
   83174:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   83178:	2011      	movs	r0, #17
   8317a:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   8317e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   83182:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   83186:	2200      	movs	r2, #0
   83188:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   8318c:	22a0      	movs	r2, #160	; 0xa0
   8318e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   83192:	f44f 72a0 	mov.w	r2, #320	; 0x140
   83196:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   8319a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   8319e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   831a2:	f240 22fd 	movw	r2, #765	; 0x2fd
   831a6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   831aa:	f240 3252 	movw	r2, #850	; 0x352
   831ae:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   831b2:	f240 3272 	movw	r2, #882	; 0x372
   831b6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   831ba:	f44f 7266 	mov.w	r2, #920	; 0x398
   831be:	661a      	str	r2, [r3, #96]	; 0x60
   831c0:	4770      	bx	lr
   831c2:	bf00      	nop
   831c4:	2007abbc 	.word	0x2007abbc

000831c8 <vTraceInitObjectHandleStack>:
}

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   831c8:	4b12      	ldr	r3, [pc, #72]	; (83214 <vTraceInitObjectHandleStack+0x4c>)
   831ca:	2200      	movs	r2, #0
   831cc:	81da      	strh	r2, [r3, #14]
   831ce:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
   831d0:	220a      	movs	r2, #10
   831d2:	821a      	strh	r2, [r3, #16]
   831d4:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
   831d6:	2214      	movs	r2, #20
   831d8:	825a      	strh	r2, [r3, #18]
   831da:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
   831dc:	221e      	movs	r2, #30
   831de:	829a      	strh	r2, [r3, #20]
   831e0:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
   831e2:	222d      	movs	r2, #45	; 0x2d
   831e4:	82da      	strh	r2, [r3, #22]
   831e6:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
   831e8:	2232      	movs	r2, #50	; 0x32
   831ea:	831a      	strh	r2, [r3, #24]
   831ec:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
   831ee:	2234      	movs	r2, #52	; 0x34
   831f0:	835a      	strh	r2, [r3, #26]
   831f2:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
   831f4:	2209      	movs	r2, #9
   831f6:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
   831f8:	2213      	movs	r2, #19
   831fa:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
   831fc:	221d      	movs	r2, #29
   831fe:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
   83200:	222c      	movs	r2, #44	; 0x2c
   83202:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
   83204:	2231      	movs	r2, #49	; 0x31
   83206:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
   83208:	2233      	movs	r2, #51	; 0x33
   8320a:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
   8320c:	2235      	movs	r2, #53	; 0x35
   8320e:	851a      	strh	r2, [r3, #40]	; 0x28
   83210:	4770      	bx	lr
   83212:	bf00      	nop
   83214:	2007abc0 	.word	0x2007abc0

00083218 <pszTraceGetErrorNotEnoughHandles>:
}
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   83218:	2806      	cmp	r0, #6
   8321a:	d811      	bhi.n	83240 <pszTraceGetErrorNotEnoughHandles+0x28>
   8321c:	e8df f000 	tbb	[pc, r0]
   83220:	1208060a 	.word	0x1208060a
   83224:	0c04      	.short	0x0c04
   83226:	0e          	.byte	0x0e
   83227:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
   83228:	4807      	ldr	r0, [pc, #28]	; (83248 <pszTraceGetErrorNotEnoughHandles+0x30>)
   8322a:	4770      	bx	lr
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
   8322c:	4807      	ldr	r0, [pc, #28]	; (8324c <pszTraceGetErrorNotEnoughHandles+0x34>)
   8322e:	4770      	bx	lr
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
   83230:	4807      	ldr	r0, [pc, #28]	; (83250 <pszTraceGetErrorNotEnoughHandles+0x38>)
   83232:	4770      	bx	lr
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
   83234:	4807      	ldr	r0, [pc, #28]	; (83254 <pszTraceGetErrorNotEnoughHandles+0x3c>)
   83236:	4770      	bx	lr
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
   83238:	4807      	ldr	r0, [pc, #28]	; (83258 <pszTraceGetErrorNotEnoughHandles+0x40>)
   8323a:	4770      	bx	lr
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
   8323c:	4807      	ldr	r0, [pc, #28]	; (8325c <pszTraceGetErrorNotEnoughHandles+0x44>)
   8323e:	4770      	bx	lr
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   83240:	4807      	ldr	r0, [pc, #28]	; (83260 <pszTraceGetErrorNotEnoughHandles+0x48>)
   83242:	4770      	bx	lr
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
   83244:	4807      	ldr	r0, [pc, #28]	; (83264 <pszTraceGetErrorNotEnoughHandles+0x4c>)
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
   83246:	4770      	bx	lr
   83248:	00087410 	.word	0x00087410
   8324c:	00087448 	.word	0x00087448
   83250:	0008748c 	.word	0x0008748c
   83254:	000874c8 	.word	0x000874c8
   83258:	00087504 	.word	0x00087504
   8325c:	00087540 	.word	0x00087540
   83260:	00087584 	.word	0x00087584
   83264:	000873d8 	.word	0x000873d8

00083268 <uiTraceIsObjectExcluded>:

/* Returns the exclude state of the object */
uint8_t uiTraceIsObjectExcluded(traceObjectClass objectclass, objectHandleType handle)
{
   83268:	b508      	push	{r3, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
   8326a:	2806      	cmp	r0, #6
   8326c:	d904      	bls.n	83278 <uiTraceIsObjectExcluded+0x10>
   8326e:	482f      	ldr	r0, [pc, #188]	; (8332c <uiTraceIsObjectExcluded+0xc4>)
   83270:	4b2f      	ldr	r3, [pc, #188]	; (83330 <uiTraceIsObjectExcluded+0xc8>)
   83272:	4798      	blx	r3
   83274:	2001      	movs	r0, #1
   83276:	bd08      	pop	{r3, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
   83278:	4b2e      	ldr	r3, [pc, #184]	; (83334 <uiTraceIsObjectExcluded+0xcc>)
   8327a:	681b      	ldr	r3, [r3, #0]
   8327c:	4403      	add	r3, r0
   8327e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   83282:	428b      	cmp	r3, r1
   83284:	d204      	bcs.n	83290 <uiTraceIsObjectExcluded+0x28>
   83286:	482c      	ldr	r0, [pc, #176]	; (83338 <uiTraceIsObjectExcluded+0xd0>)
   83288:	4b29      	ldr	r3, [pc, #164]	; (83330 <uiTraceIsObjectExcluded+0xc8>)
   8328a:	4798      	blx	r3
   8328c:	2001      	movs	r0, #1
   8328e:	bd08      	pop	{r3, pc}
	
	switch(objectclass)
   83290:	2806      	cmp	r0, #6
   83292:	d846      	bhi.n	83322 <uiTraceIsObjectExcluded+0xba>
   83294:	e8df f000 	tbb	[pc, r0]
   83298:	041a0f25 	.word	0x041a0f25
   8329c:	2f45      	.short	0x2f45
   8329e:	3a          	.byte	0x3a
   8329f:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return TRACE_GET_TASK_FLAG_ISEXCLUDED(handle);
   832a0:	3121      	adds	r1, #33	; 0x21
   832a2:	10cb      	asrs	r3, r1, #3
   832a4:	f001 0107 	and.w	r1, r1, #7
   832a8:	2001      	movs	r0, #1
   832aa:	fa00 f101 	lsl.w	r1, r0, r1
   832ae:	4a23      	ldr	r2, [pc, #140]	; (8333c <uiTraceIsObjectExcluded+0xd4>)
   832b0:	5cd0      	ldrb	r0, [r2, r3]
   832b2:	4008      	ands	r0, r1
   832b4:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_SEMAPHORE:
		return TRACE_GET_SEMAPHORE_FLAG_ISEXCLUDED(handle);
   832b6:	310b      	adds	r1, #11
   832b8:	10cb      	asrs	r3, r1, #3
   832ba:	f001 0107 	and.w	r1, r1, #7
   832be:	2001      	movs	r0, #1
   832c0:	fa00 f101 	lsl.w	r1, r0, r1
   832c4:	4a1d      	ldr	r2, [pc, #116]	; (8333c <uiTraceIsObjectExcluded+0xd4>)
   832c6:	5cd0      	ldrb	r0, [r2, r3]
   832c8:	4008      	ands	r0, r1
   832ca:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_MUTEX:
		return TRACE_GET_MUTEX_FLAG_ISEXCLUDED(handle);
   832cc:	3116      	adds	r1, #22
   832ce:	10cb      	asrs	r3, r1, #3
   832d0:	f001 0107 	and.w	r1, r1, #7
   832d4:	2001      	movs	r0, #1
   832d6:	fa00 f101 	lsl.w	r1, r0, r1
   832da:	4a18      	ldr	r2, [pc, #96]	; (8333c <uiTraceIsObjectExcluded+0xd4>)
   832dc:	5cd0      	ldrb	r0, [r2, r3]
   832de:	4008      	ands	r0, r1
   832e0:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_QUEUE:
		return TRACE_GET_QUEUE_FLAG_ISEXCLUDED(handle);
   832e2:	08cb      	lsrs	r3, r1, #3
   832e4:	f001 0107 	and.w	r1, r1, #7
   832e8:	2001      	movs	r0, #1
   832ea:	fa00 f101 	lsl.w	r1, r0, r1
   832ee:	4a13      	ldr	r2, [pc, #76]	; (8333c <uiTraceIsObjectExcluded+0xd4>)
   832f0:	5cd0      	ldrb	r0, [r2, r3]
   832f2:	4008      	ands	r0, r1
   832f4:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_TIMER:
		return TRACE_GET_TIMER_FLAG_ISEXCLUDED(handle);		
   832f6:	3131      	adds	r1, #49	; 0x31
   832f8:	10cb      	asrs	r3, r1, #3
   832fa:	f001 0107 	and.w	r1, r1, #7
   832fe:	2001      	movs	r0, #1
   83300:	fa00 f101 	lsl.w	r1, r0, r1
   83304:	4a0d      	ldr	r2, [pc, #52]	; (8333c <uiTraceIsObjectExcluded+0xd4>)
   83306:	5cd0      	ldrb	r0, [r2, r3]
   83308:	4008      	ands	r0, r1
   8330a:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_EVENTGROUP:
		return TRACE_GET_EVENTGROUP_FLAG_ISEXCLUDED(handle);				
   8330c:	3134      	adds	r1, #52	; 0x34
   8330e:	10cb      	asrs	r3, r1, #3
   83310:	f001 0107 	and.w	r1, r1, #7
   83314:	2001      	movs	r0, #1
   83316:	fa00 f101 	lsl.w	r1, r0, r1
   8331a:	4a08      	ldr	r2, [pc, #32]	; (8333c <uiTraceIsObjectExcluded+0xd4>)
   8331c:	5cd0      	ldrb	r0, [r2, r3]
   8331e:	4008      	ands	r0, r1
   83320:	bd08      	pop	{r3, pc}
	}
	
	vTraceError("Invalid object class ID in uiTraceIsObjectExcluded!");
   83322:	4807      	ldr	r0, [pc, #28]	; (83340 <uiTraceIsObjectExcluded+0xd8>)
   83324:	4b02      	ldr	r3, [pc, #8]	; (83330 <uiTraceIsObjectExcluded+0xc8>)
   83326:	4798      	blx	r3
	
	/* Must never reach */
	return 1;
   83328:	2001      	movs	r0, #1
}
   8332a:	bd08      	pop	{r3, pc}
   8332c:	000875b4 	.word	0x000875b4
   83330:	000823ed 	.word	0x000823ed
   83334:	2007abbc 	.word	0x2007abbc
   83338:	000875fc 	.word	0x000875fc
   8333c:	2007ac30 	.word	0x2007ac30
   83340:	0008763c 	.word	0x0008763c

00083344 <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
   83344:	b508      	push	{r3, lr}
	prvTraceInitTraceData();
   83346:	4b01      	ldr	r3, [pc, #4]	; (8334c <vTraceInitTraceData+0x8>)
   83348:	4798      	blx	r3
   8334a:	bd08      	pop	{r3, pc}
   8334c:	0008243d 	.word	0x0008243d

00083350 <uiTraceStart>:
 * error. In that case, check vTraceGetLastError to get the error message.
 * Any error message is also presented when opening a trace file.
 ******************************************************************************/

uint32_t uiTraceStart(void)
{
   83350:	b538      	push	{r3, r4, r5, lr}
	objectHandleType handle;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	handle = 0;

	if (RecorderDataPtr == NULL)
   83352:	4b1c      	ldr	r3, [pc, #112]	; (833c4 <uiTraceStart+0x74>)
   83354:	681b      	ldr	r3, [r3, #0]
   83356:	b923      	cbnz	r3, 83362 <uiTraceStart+0x12>
	{
		vTraceError("RecorderDataPtr is NULL. Call vTraceInitTraceData() before starting trace.");
   83358:	481b      	ldr	r0, [pc, #108]	; (833c8 <uiTraceStart+0x78>)
   8335a:	4b1c      	ldr	r3, [pc, #112]	; (833cc <uiTraceStart+0x7c>)
   8335c:	4798      	blx	r3
		return 0;
   8335e:	2000      	movs	r0, #0
   83360:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (traceErrorMessage == NULL)
   83362:	4b1b      	ldr	r3, [pc, #108]	; (833d0 <uiTraceStart+0x80>)
   83364:	681b      	ldr	r3, [r3, #0]
   83366:	bb43      	cbnz	r3, 833ba <uiTraceStart+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83368:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   8336c:	2201      	movs	r2, #1
   8336e:	f382 8810 	msr	PRIMASK, r2
	{
		trcCRITICAL_SECTION_BEGIN();
   83372:	4918      	ldr	r1, [pc, #96]	; (833d4 <uiTraceStart+0x84>)
   83374:	680b      	ldr	r3, [r1, #0]
   83376:	4413      	add	r3, r2
   83378:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   8337a:	4b12      	ldr	r3, [pc, #72]	; (833c4 <uiTraceStart+0x74>)
   8337c:	681b      	ldr	r3, [r3, #0]
   8337e:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   83380:	4b15      	ldr	r3, [pc, #84]	; (833d8 <uiTraceStart+0x88>)
   83382:	4798      	blx	r3
   83384:	4b15      	ldr	r3, [pc, #84]	; (833dc <uiTraceStart+0x8c>)
   83386:	4798      	blx	r3
		if (handle == 0)
   83388:	4605      	mov	r5, r0
   8338a:	b968      	cbnz	r0, 833a8 <uiTraceStart+0x58>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = xTraceGetObjectHandle(TRACE_CLASS_TASK);
   8338c:	2003      	movs	r0, #3
   8338e:	4b14      	ldr	r3, [pc, #80]	; (833e0 <uiTraceStart+0x90>)
   83390:	4798      	blx	r3
   83392:	4605      	mov	r5, r0
			vTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   83394:	4a13      	ldr	r2, [pc, #76]	; (833e4 <uiTraceStart+0x94>)
   83396:	4601      	mov	r1, r0
   83398:	2003      	movs	r0, #3
   8339a:	4b13      	ldr	r3, [pc, #76]	; (833e8 <uiTraceStart+0x98>)
   8339c:	4798      	blx	r3

			vTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   8339e:	2200      	movs	r2, #0
   833a0:	4629      	mov	r1, r5
   833a2:	2003      	movs	r0, #3
   833a4:	4b11      	ldr	r3, [pc, #68]	; (833ec <uiTraceStart+0x9c>)
   833a6:	4798      	blx	r3
		}

		vTraceStoreTaskswitch(handle); /* Register the currently running task */
   833a8:	4628      	mov	r0, r5
   833aa:	4b11      	ldr	r3, [pc, #68]	; (833f0 <uiTraceStart+0xa0>)
   833ac:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   833ae:	4a09      	ldr	r2, [pc, #36]	; (833d4 <uiTraceStart+0x84>)
   833b0:	6813      	ldr	r3, [r2, #0]
   833b2:	3b01      	subs	r3, #1
   833b4:	6013      	str	r3, [r2, #0]
   833b6:	f384 8810 	msr	PRIMASK, r4
	}

	return RecorderDataPtr->recorderActive;
   833ba:	4b02      	ldr	r3, [pc, #8]	; (833c4 <uiTraceStart+0x74>)
   833bc:	681b      	ldr	r3, [r3, #0]
   833be:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   833c0:	bd38      	pop	{r3, r4, r5, pc}
   833c2:	bf00      	nop
   833c4:	2007abbc 	.word	0x2007abbc
   833c8:	000876c8 	.word	0x000876c8
   833cc:	000823ed 	.word	0x000823ed
   833d0:	2007abb0 	.word	0x2007abb0
   833d4:	2007abb8 	.word	0x2007abb8
   833d8:	00083111 	.word	0x00083111
   833dc:	00083101 	.word	0x00083101
   833e0:	00082639 	.word	0x00082639
   833e4:	00087714 	.word	0x00087714
   833e8:	00082785 	.word	0x00082785
   833ec:	00082e65 	.word	0x00082e65
   833f0:	00082fcd 	.word	0x00082fcd

000833f4 <vPeriodicTask>:
    }
}
/*-----------------------------------------------------------*/

static void vPeriodicTask( void *pvParameters )
{
   833f4:	b508      	push	{r3, lr}
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
        /* This task is just used to 'simulate' an interrupt.  This is done by
        periodically generating a software interrupt. */
        vTaskDelay( 500 / portTICK_RATE_MS );
   833f6:	4e07      	ldr	r6, [pc, #28]	; (83414 <vPeriodicTask+0x20>)

        /* Generate the interrupt, printing a message both before hand and
        afterwards so the sequence of execution is evident from the output. */
        printf( "Periodic task - About to generate an interrupt.\n" );
   833f8:	4d07      	ldr	r5, [pc, #28]	; (83418 <vPeriodicTask+0x24>)
   833fa:	4c08      	ldr	r4, [pc, #32]	; (8341c <vPeriodicTask+0x28>)
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
        /* This task is just used to 'simulate' an interrupt.  This is done by
        periodically generating a software interrupt. */
        vTaskDelay( 500 / portTICK_RATE_MS );
   833fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   83400:	47b0      	blx	r6

        /* Generate the interrupt, printing a message both before hand and
        afterwards so the sequence of execution is evident from the output. */
        printf( "Periodic task - About to generate an interrupt.\n" );
   83402:	4628      	mov	r0, r5
   83404:	47a0      	blx	r4

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
   83406:	2210      	movs	r2, #16
   83408:	4b05      	ldr	r3, [pc, #20]	; (83420 <vPeriodicTask+0x2c>)
   8340a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        mainTRIGGER_INTERRUPT();
        printf( "Periodic task - Interrupt generated.\n\n" );
   8340e:	4805      	ldr	r0, [pc, #20]	; (83424 <vPeriodicTask+0x30>)
   83410:	47a0      	blx	r4
   83412:	e7f3      	b.n	833fc <vPeriodicTask+0x8>
   83414:	00081359 	.word	0x00081359
   83418:	000879a4 	.word	0x000879a4
   8341c:	00083759 	.word	0x00083759
   83420:	e000e100 	.word	0xe000e100
   83424:	000879d8 	.word	0x000879d8

00083428 <vHandlerTask>:
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vHandlerTask( void *pvParameters )
{
   83428:	b508      	push	{r3, lr}
    /* As per most tasks, this task is implemented within an infinite loop.

    Take the semaphore once to start with so the semaphore is empty before the
    infinite loop is entered.  The semaphore was created before the scheduler
    was started so before this task ran for the first time.*/
    xSemaphoreTake( xBinarySemaphore, 0 );
   8342a:	2300      	movs	r3, #0
   8342c:	461a      	mov	r2, r3
   8342e:	4619      	mov	r1, r3
   83430:	4808      	ldr	r0, [pc, #32]	; (83454 <vHandlerTask+0x2c>)
   83432:	6800      	ldr	r0, [r0, #0]
   83434:	4c08      	ldr	r4, [pc, #32]	; (83458 <vHandlerTask+0x30>)
   83436:	47a0      	blx	r4
    {
        /* Use the semaphore to wait for the event.  The task blocks
        indefinitely meaning this function call will only return once the
        semaphore has been successfully obtained - so there is no need to check
        the returned value. */
        xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
   83438:	4e06      	ldr	r6, [pc, #24]	; (83454 <vHandlerTask+0x2c>)
   8343a:	4625      	mov	r5, r4

        /* To get here the event must have occurred.  Process the event (in this
        case we just print out a message). */
        printf( "Handler task - Processing event.\n" );
   8343c:	4c07      	ldr	r4, [pc, #28]	; (8345c <vHandlerTask+0x34>)
    {
        /* Use the semaphore to wait for the event.  The task blocks
        indefinitely meaning this function call will only return once the
        semaphore has been successfully obtained - so there is no need to check
        the returned value. */
        xSemaphoreTake( xBinarySemaphore, portMAX_DELAY );
   8343e:	2300      	movs	r3, #0
   83440:	f04f 32ff 	mov.w	r2, #4294967295
   83444:	4619      	mov	r1, r3
   83446:	6830      	ldr	r0, [r6, #0]
   83448:	47a8      	blx	r5

        /* To get here the event must have occurred.  Process the event (in this
        case we just print out a message). */
        printf( "Handler task - Processing event.\n" );
   8344a:	4620      	mov	r0, r4
   8344c:	4b04      	ldr	r3, [pc, #16]	; (83460 <vHandlerTask+0x38>)
   8344e:	4798      	blx	r3
   83450:	e7f5      	b.n	8343e <vHandlerTask+0x16>
   83452:	bf00      	nop
   83454:	2007c47c 	.word	0x2007c47c
   83458:	00080a99 	.word	0x00080a99
   8345c:	00087a00 	.word	0x00087a00
   83460:	00083759 	.word	0x00083759

00083464 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   83464:	b5f0      	push	{r4, r5, r6, r7, lr}
   83466:	b083      	sub	sp, #12
   83468:	4604      	mov	r4, r0
   8346a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8346c:	2300      	movs	r3, #0
   8346e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   83470:	4b1f      	ldr	r3, [pc, #124]	; (834f0 <usart_serial_getchar+0x8c>)
   83472:	4298      	cmp	r0, r3
   83474:	d107      	bne.n	83486 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   83476:	461f      	mov	r7, r3
   83478:	4e1e      	ldr	r6, [pc, #120]	; (834f4 <usart_serial_getchar+0x90>)
   8347a:	4629      	mov	r1, r5
   8347c:	4638      	mov	r0, r7
   8347e:	47b0      	blx	r6
   83480:	2800      	cmp	r0, #0
   83482:	d1fa      	bne.n	8347a <usart_serial_getchar+0x16>
   83484:	e019      	b.n	834ba <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83486:	4b1c      	ldr	r3, [pc, #112]	; (834f8 <usart_serial_getchar+0x94>)
   83488:	4298      	cmp	r0, r3
   8348a:	d109      	bne.n	834a0 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8348c:	461f      	mov	r7, r3
   8348e:	4e1b      	ldr	r6, [pc, #108]	; (834fc <usart_serial_getchar+0x98>)
   83490:	a901      	add	r1, sp, #4
   83492:	4638      	mov	r0, r7
   83494:	47b0      	blx	r6
   83496:	2800      	cmp	r0, #0
   83498:	d1fa      	bne.n	83490 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8349a:	9b01      	ldr	r3, [sp, #4]
   8349c:	702b      	strb	r3, [r5, #0]
   8349e:	e019      	b.n	834d4 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   834a0:	4b17      	ldr	r3, [pc, #92]	; (83500 <usart_serial_getchar+0x9c>)
   834a2:	4298      	cmp	r0, r3
   834a4:	d109      	bne.n	834ba <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   834a6:	461e      	mov	r6, r3
   834a8:	4c14      	ldr	r4, [pc, #80]	; (834fc <usart_serial_getchar+0x98>)
   834aa:	a901      	add	r1, sp, #4
   834ac:	4630      	mov	r0, r6
   834ae:	47a0      	blx	r4
   834b0:	2800      	cmp	r0, #0
   834b2:	d1fa      	bne.n	834aa <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   834b4:	9b01      	ldr	r3, [sp, #4]
   834b6:	702b      	strb	r3, [r5, #0]
   834b8:	e018      	b.n	834ec <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   834ba:	4b12      	ldr	r3, [pc, #72]	; (83504 <usart_serial_getchar+0xa0>)
   834bc:	429c      	cmp	r4, r3
   834be:	d109      	bne.n	834d4 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   834c0:	461e      	mov	r6, r3
   834c2:	4c0e      	ldr	r4, [pc, #56]	; (834fc <usart_serial_getchar+0x98>)
   834c4:	a901      	add	r1, sp, #4
   834c6:	4630      	mov	r0, r6
   834c8:	47a0      	blx	r4
   834ca:	2800      	cmp	r0, #0
   834cc:	d1fa      	bne.n	834c4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   834ce:	9b01      	ldr	r3, [sp, #4]
   834d0:	702b      	strb	r3, [r5, #0]
   834d2:	e00b      	b.n	834ec <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   834d4:	4b0c      	ldr	r3, [pc, #48]	; (83508 <usart_serial_getchar+0xa4>)
   834d6:	429c      	cmp	r4, r3
   834d8:	d108      	bne.n	834ec <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   834da:	461e      	mov	r6, r3
   834dc:	4c07      	ldr	r4, [pc, #28]	; (834fc <usart_serial_getchar+0x98>)
   834de:	a901      	add	r1, sp, #4
   834e0:	4630      	mov	r0, r6
   834e2:	47a0      	blx	r4
   834e4:	2800      	cmp	r0, #0
   834e6:	d1fa      	bne.n	834de <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   834e8:	9b01      	ldr	r3, [sp, #4]
   834ea:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   834ec:	b003      	add	sp, #12
   834ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834f0:	400e0800 	.word	0x400e0800
   834f4:	00081ce1 	.word	0x00081ce1
   834f8:	40098000 	.word	0x40098000
   834fc:	000801a1 	.word	0x000801a1
   83500:	4009c000 	.word	0x4009c000
   83504:	400a0000 	.word	0x400a0000
   83508:	400a4000 	.word	0x400a4000

0008350c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8350c:	b570      	push	{r4, r5, r6, lr}
   8350e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   83510:	4b1e      	ldr	r3, [pc, #120]	; (8358c <usart_serial_putchar+0x80>)
   83512:	4298      	cmp	r0, r3
   83514:	d108      	bne.n	83528 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   83516:	461e      	mov	r6, r3
   83518:	4d1d      	ldr	r5, [pc, #116]	; (83590 <usart_serial_putchar+0x84>)
   8351a:	4621      	mov	r1, r4
   8351c:	4630      	mov	r0, r6
   8351e:	47a8      	blx	r5
   83520:	2800      	cmp	r0, #0
   83522:	d1fa      	bne.n	8351a <usart_serial_putchar+0xe>
		return 1;
   83524:	2001      	movs	r0, #1
   83526:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83528:	4b1a      	ldr	r3, [pc, #104]	; (83594 <usart_serial_putchar+0x88>)
   8352a:	4298      	cmp	r0, r3
   8352c:	d108      	bne.n	83540 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8352e:	461e      	mov	r6, r3
   83530:	4d19      	ldr	r5, [pc, #100]	; (83598 <usart_serial_putchar+0x8c>)
   83532:	4621      	mov	r1, r4
   83534:	4630      	mov	r0, r6
   83536:	47a8      	blx	r5
   83538:	2800      	cmp	r0, #0
   8353a:	d1fa      	bne.n	83532 <usart_serial_putchar+0x26>
		return 1;
   8353c:	2001      	movs	r0, #1
   8353e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83540:	4b16      	ldr	r3, [pc, #88]	; (8359c <usart_serial_putchar+0x90>)
   83542:	4298      	cmp	r0, r3
   83544:	d108      	bne.n	83558 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   83546:	461e      	mov	r6, r3
   83548:	4d13      	ldr	r5, [pc, #76]	; (83598 <usart_serial_putchar+0x8c>)
   8354a:	4621      	mov	r1, r4
   8354c:	4630      	mov	r0, r6
   8354e:	47a8      	blx	r5
   83550:	2800      	cmp	r0, #0
   83552:	d1fa      	bne.n	8354a <usart_serial_putchar+0x3e>
		return 1;
   83554:	2001      	movs	r0, #1
   83556:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83558:	4b11      	ldr	r3, [pc, #68]	; (835a0 <usart_serial_putchar+0x94>)
   8355a:	4298      	cmp	r0, r3
   8355c:	d108      	bne.n	83570 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   8355e:	461e      	mov	r6, r3
   83560:	4d0d      	ldr	r5, [pc, #52]	; (83598 <usart_serial_putchar+0x8c>)
   83562:	4621      	mov	r1, r4
   83564:	4630      	mov	r0, r6
   83566:	47a8      	blx	r5
   83568:	2800      	cmp	r0, #0
   8356a:	d1fa      	bne.n	83562 <usart_serial_putchar+0x56>
		return 1;
   8356c:	2001      	movs	r0, #1
   8356e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83570:	4b0c      	ldr	r3, [pc, #48]	; (835a4 <usart_serial_putchar+0x98>)
   83572:	4298      	cmp	r0, r3
   83574:	d108      	bne.n	83588 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   83576:	461e      	mov	r6, r3
   83578:	4d07      	ldr	r5, [pc, #28]	; (83598 <usart_serial_putchar+0x8c>)
   8357a:	4621      	mov	r1, r4
   8357c:	4630      	mov	r0, r6
   8357e:	47a8      	blx	r5
   83580:	2800      	cmp	r0, #0
   83582:	d1fa      	bne.n	8357a <usart_serial_putchar+0x6e>
		return 1;
   83584:	2001      	movs	r0, #1
   83586:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   83588:	2000      	movs	r0, #0
}
   8358a:	bd70      	pop	{r4, r5, r6, pc}
   8358c:	400e0800 	.word	0x400e0800
   83590:	00081cd1 	.word	0x00081cd1
   83594:	40098000 	.word	0x40098000
   83598:	0008018d 	.word	0x0008018d
   8359c:	4009c000 	.word	0x4009c000
   835a0:	400a0000 	.word	0x400a0000
   835a4:	400a4000 	.word	0x400a4000

000835a8 <main>:
	stdio_serial_init(CONSOLE_UART, &printf);
}


int main( void )
{
   835a8:	b500      	push	{lr}
   835aa:	b089      	sub	sp, #36	; 0x24
   /* This function initializes the MCU clock  */
	sysclk_init();
   835ac:	4b2d      	ldr	r3, [pc, #180]	; (83664 <main+0xbc>)
   835ae:	4798      	blx	r3
	/* Board initialization */
	board_init();
   835b0:	4b2d      	ldr	r3, [pc, #180]	; (83668 <main+0xc0>)
   835b2:	4798      	blx	r3
   835b4:	2008      	movs	r0, #8
   835b6:	4d2d      	ldr	r5, [pc, #180]	; (8366c <main+0xc4>)
   835b8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   835ba:	4c2d      	ldr	r4, [pc, #180]	; (83670 <main+0xc8>)
   835bc:	4b2d      	ldr	r3, [pc, #180]	; (83674 <main+0xcc>)
   835be:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   835c0:	4a2d      	ldr	r2, [pc, #180]	; (83678 <main+0xd0>)
   835c2:	4b2e      	ldr	r3, [pc, #184]	; (8367c <main+0xd4>)
   835c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   835c6:	4a2e      	ldr	r2, [pc, #184]	; (83680 <main+0xd8>)
   835c8:	4b2e      	ldr	r3, [pc, #184]	; (83684 <main+0xdc>)
   835ca:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   835cc:	4b2e      	ldr	r3, [pc, #184]	; (83688 <main+0xe0>)
   835ce:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   835d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   835d4:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   835d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   835da:	9307      	str	r3, [sp, #28]
   835dc:	2008      	movs	r0, #8
   835de:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   835e0:	a905      	add	r1, sp, #20
   835e2:	4620      	mov	r0, r4
   835e4:	4b29      	ldr	r3, [pc, #164]	; (8368c <main+0xe4>)
   835e6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   835e8:	4d29      	ldr	r5, [pc, #164]	; (83690 <main+0xe8>)
   835ea:	682b      	ldr	r3, [r5, #0]
   835ec:	2100      	movs	r1, #0
   835ee:	6898      	ldr	r0, [r3, #8]
   835f0:	4c28      	ldr	r4, [pc, #160]	; (83694 <main+0xec>)
   835f2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   835f4:	682b      	ldr	r3, [r5, #0]
   835f6:	2100      	movs	r1, #0
   835f8:	6858      	ldr	r0, [r3, #4]
   835fa:	47a0      	blx	r4
	configure_console();

	
#if (configUSE_TRACE_FACILITY == 1)
	/*Allocates, if necessary, and initializes the recorder data structure */
	vTraceInitTraceData();
   835fc:	4b26      	ldr	r3, [pc, #152]	; (83698 <main+0xf0>)
   835fe:	4798      	blx	r3

	/*Starts the recorder*/
	uiTraceStart();
   83600:	4b26      	ldr	r3, [pc, #152]	; (8369c <main+0xf4>)
   83602:	4798      	blx	r3
#endif

    /* Before a semaphore is used it must be explicitly created.  In this example
    a binary semaphore is created. */
    vSemaphoreCreateBinary( xBinarySemaphore );
   83604:	2203      	movs	r2, #3
   83606:	2100      	movs	r1, #0
   83608:	2001      	movs	r0, #1
   8360a:	4b25      	ldr	r3, [pc, #148]	; (836a0 <main+0xf8>)
   8360c:	4798      	blx	r3
   8360e:	4b25      	ldr	r3, [pc, #148]	; (836a4 <main+0xfc>)
   83610:	6018      	str	r0, [r3, #0]
   83612:	b120      	cbz	r0, 8361e <main+0x76>
   83614:	2300      	movs	r3, #0
   83616:	461a      	mov	r2, r3
   83618:	4619      	mov	r1, r3
   8361a:	4c23      	ldr	r4, [pc, #140]	; (836a8 <main+0x100>)
   8361c:	47a0      	blx	r4

    /* Check the semaphore was created successfully. */
    if( xBinarySemaphore != NULL )
   8361e:	4b21      	ldr	r3, [pc, #132]	; (836a4 <main+0xfc>)
   83620:	681b      	ldr	r3, [r3, #0]
   83622:	b1eb      	cbz	r3, 83660 <main+0xb8>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83624:	4b21      	ldr	r3, [pc, #132]	; (836ac <main+0x104>)
   83626:	2250      	movs	r2, #80	; 0x50
   83628:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8362c:	2210      	movs	r2, #16
   8362e:	601a      	str	r2, [r3, #0]

        /* Create the 'handler' task.  This is the task that will be synchronized
        with the interrupt.  The handler task is created with a high priority to
        ensure it runs immediately after the interrupt exits.  In this case a
        priority of 3 is chosen. */
        xTaskCreate( vHandlerTask, "Handler", 240, NULL, 3, NULL );
   83630:	2400      	movs	r4, #0
   83632:	9403      	str	r4, [sp, #12]
   83634:	9402      	str	r4, [sp, #8]
   83636:	9401      	str	r4, [sp, #4]
   83638:	2303      	movs	r3, #3
   8363a:	9300      	str	r3, [sp, #0]
   8363c:	4623      	mov	r3, r4
   8363e:	22f0      	movs	r2, #240	; 0xf0
   83640:	491b      	ldr	r1, [pc, #108]	; (836b0 <main+0x108>)
   83642:	481c      	ldr	r0, [pc, #112]	; (836b4 <main+0x10c>)
   83644:	4d1c      	ldr	r5, [pc, #112]	; (836b8 <main+0x110>)
   83646:	47a8      	blx	r5

        /* Create the task that will periodically generate a software interrupt.
        This is created with a priority below the handler task to ensure it will
        get preempted each time the handler task exits the Blocked state. */
        xTaskCreate( vPeriodicTask, "Periodic", 240, NULL, 1, NULL );
   83648:	9403      	str	r4, [sp, #12]
   8364a:	9402      	str	r4, [sp, #8]
   8364c:	9401      	str	r4, [sp, #4]
   8364e:	2301      	movs	r3, #1
   83650:	9300      	str	r3, [sp, #0]
   83652:	4623      	mov	r3, r4
   83654:	22f0      	movs	r2, #240	; 0xf0
   83656:	4919      	ldr	r1, [pc, #100]	; (836bc <main+0x114>)
   83658:	4819      	ldr	r0, [pc, #100]	; (836c0 <main+0x118>)
   8365a:	47a8      	blx	r5

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
   8365c:	4b19      	ldr	r3, [pc, #100]	; (836c4 <main+0x11c>)
   8365e:	4798      	blx	r3
   83660:	e7fe      	b.n	83660 <main+0xb8>
   83662:	bf00      	nop
   83664:	00081cf5 	.word	0x00081cf5
   83668:	00081d59 	.word	0x00081d59
   8366c:	0008217d 	.word	0x0008217d
   83670:	400e0800 	.word	0x400e0800
   83674:	2007ac94 	.word	0x2007ac94
   83678:	0008350d 	.word	0x0008350d
   8367c:	2007ac90 	.word	0x2007ac90
   83680:	00083465 	.word	0x00083465
   83684:	2007ac8c 	.word	0x2007ac8c
   83688:	0501bd00 	.word	0x0501bd00
   8368c:	00081c99 	.word	0x00081c99
   83690:	20070570 	.word	0x20070570
   83694:	00083909 	.word	0x00083909
   83698:	00083345 	.word	0x00083345
   8369c:	00083351 	.word	0x00083351
   836a0:	000806b5 	.word	0x000806b5
   836a4:	2007c47c 	.word	0x2007c47c
   836a8:	00080785 	.word	0x00080785
   836ac:	e000e100 	.word	0xe000e100
   836b0:	00087a24 	.word	0x00087a24
   836b4:	00083429 	.word	0x00083429
   836b8:	00080de5 	.word	0x00080de5
   836bc:	00087a2c 	.word	0x00087a2c
   836c0:	000833f5 	.word	0x000833f5
   836c4:	00081051 	.word	0x00081051

000836c8 <WDT_Handler>:
	NVIC_EnableIRQ( mainSW_INTERRUPT_ID );
}
/*-----------------------------------------------------------*/

void WDT_Handler( void )
{
   836c8:	b510      	push	{r4, lr}
   836ca:	b082      	sub	sp, #8
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   836cc:	2100      	movs	r1, #0
   836ce:	aa02      	add	r2, sp, #8
   836d0:	f842 1d04 	str.w	r1, [r2, #-4]!

    /* 'Give' the semaphore to unblock the task. */
    xSemaphoreGiveFromISR( xBinarySemaphore, &xHigherPriorityTaskWoken );
   836d4:	460b      	mov	r3, r1
   836d6:	4807      	ldr	r0, [pc, #28]	; (836f4 <WDT_Handler+0x2c>)
   836d8:	6800      	ldr	r0, [r0, #0]
   836da:	4c07      	ldr	r4, [pc, #28]	; (836f8 <WDT_Handler+0x30>)
   836dc:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   836de:	2210      	movs	r2, #16
   836e0:	4b06      	ldr	r3, [pc, #24]	; (836fc <WDT_Handler+0x34>)
   836e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   836e6:	9b01      	ldr	r3, [sp, #4]
   836e8:	b10b      	cbz	r3, 836ee <WDT_Handler+0x26>
   836ea:	4b05      	ldr	r3, [pc, #20]	; (83700 <WDT_Handler+0x38>)
   836ec:	4798      	blx	r3
}
   836ee:	b002      	add	sp, #8
   836f0:	bd10      	pop	{r4, pc}
   836f2:	bf00      	nop
   836f4:	2007c47c 	.word	0x2007c47c
   836f8:	00080989 	.word	0x00080989
   836fc:	e000e100 	.word	0xe000e100
   83700:	000802a9 	.word	0x000802a9

00083704 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   83704:	e7fe      	b.n	83704 <vApplicationMallocFailedHook>
   83706:	bf00      	nop

00083708 <__libc_init_array>:
   83708:	b570      	push	{r4, r5, r6, lr}
   8370a:	4e0f      	ldr	r6, [pc, #60]	; (83748 <__libc_init_array+0x40>)
   8370c:	4d0f      	ldr	r5, [pc, #60]	; (8374c <__libc_init_array+0x44>)
   8370e:	1b76      	subs	r6, r6, r5
   83710:	10b6      	asrs	r6, r6, #2
   83712:	bf18      	it	ne
   83714:	2400      	movne	r4, #0
   83716:	d005      	beq.n	83724 <__libc_init_array+0x1c>
   83718:	3401      	adds	r4, #1
   8371a:	f855 3b04 	ldr.w	r3, [r5], #4
   8371e:	4798      	blx	r3
   83720:	42a6      	cmp	r6, r4
   83722:	d1f9      	bne.n	83718 <__libc_init_array+0x10>
   83724:	4e0a      	ldr	r6, [pc, #40]	; (83750 <__libc_init_array+0x48>)
   83726:	4d0b      	ldr	r5, [pc, #44]	; (83754 <__libc_init_array+0x4c>)
   83728:	f004 f9b2 	bl	87a90 <_init>
   8372c:	1b76      	subs	r6, r6, r5
   8372e:	10b6      	asrs	r6, r6, #2
   83730:	bf18      	it	ne
   83732:	2400      	movne	r4, #0
   83734:	d006      	beq.n	83744 <__libc_init_array+0x3c>
   83736:	3401      	adds	r4, #1
   83738:	f855 3b04 	ldr.w	r3, [r5], #4
   8373c:	4798      	blx	r3
   8373e:	42a6      	cmp	r6, r4
   83740:	d1f9      	bne.n	83736 <__libc_init_array+0x2e>
   83742:	bd70      	pop	{r4, r5, r6, pc}
   83744:	bd70      	pop	{r4, r5, r6, pc}
   83746:	bf00      	nop
   83748:	00087a9c 	.word	0x00087a9c
   8374c:	00087a9c 	.word	0x00087a9c
   83750:	00087aa4 	.word	0x00087aa4
   83754:	00087a9c 	.word	0x00087a9c

00083758 <iprintf>:
   83758:	b40f      	push	{r0, r1, r2, r3}
   8375a:	b510      	push	{r4, lr}
   8375c:	4b07      	ldr	r3, [pc, #28]	; (8377c <iprintf+0x24>)
   8375e:	b082      	sub	sp, #8
   83760:	ac04      	add	r4, sp, #16
   83762:	f854 2b04 	ldr.w	r2, [r4], #4
   83766:	6818      	ldr	r0, [r3, #0]
   83768:	4623      	mov	r3, r4
   8376a:	6881      	ldr	r1, [r0, #8]
   8376c:	9401      	str	r4, [sp, #4]
   8376e:	f000 fa19 	bl	83ba4 <_vfiprintf_r>
   83772:	b002      	add	sp, #8
   83774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83778:	b004      	add	sp, #16
   8377a:	4770      	bx	lr
   8377c:	20070570 	.word	0x20070570

00083780 <memcpy>:
   83780:	4684      	mov	ip, r0
   83782:	ea41 0300 	orr.w	r3, r1, r0
   83786:	f013 0303 	ands.w	r3, r3, #3
   8378a:	d149      	bne.n	83820 <memcpy+0xa0>
   8378c:	3a40      	subs	r2, #64	; 0x40
   8378e:	d323      	bcc.n	837d8 <memcpy+0x58>
   83790:	680b      	ldr	r3, [r1, #0]
   83792:	6003      	str	r3, [r0, #0]
   83794:	684b      	ldr	r3, [r1, #4]
   83796:	6043      	str	r3, [r0, #4]
   83798:	688b      	ldr	r3, [r1, #8]
   8379a:	6083      	str	r3, [r0, #8]
   8379c:	68cb      	ldr	r3, [r1, #12]
   8379e:	60c3      	str	r3, [r0, #12]
   837a0:	690b      	ldr	r3, [r1, #16]
   837a2:	6103      	str	r3, [r0, #16]
   837a4:	694b      	ldr	r3, [r1, #20]
   837a6:	6143      	str	r3, [r0, #20]
   837a8:	698b      	ldr	r3, [r1, #24]
   837aa:	6183      	str	r3, [r0, #24]
   837ac:	69cb      	ldr	r3, [r1, #28]
   837ae:	61c3      	str	r3, [r0, #28]
   837b0:	6a0b      	ldr	r3, [r1, #32]
   837b2:	6203      	str	r3, [r0, #32]
   837b4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   837b6:	6243      	str	r3, [r0, #36]	; 0x24
   837b8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   837ba:	6283      	str	r3, [r0, #40]	; 0x28
   837bc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   837be:	62c3      	str	r3, [r0, #44]	; 0x2c
   837c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   837c2:	6303      	str	r3, [r0, #48]	; 0x30
   837c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   837c6:	6343      	str	r3, [r0, #52]	; 0x34
   837c8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   837ca:	6383      	str	r3, [r0, #56]	; 0x38
   837cc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   837ce:	63c3      	str	r3, [r0, #60]	; 0x3c
   837d0:	3040      	adds	r0, #64	; 0x40
   837d2:	3140      	adds	r1, #64	; 0x40
   837d4:	3a40      	subs	r2, #64	; 0x40
   837d6:	d2db      	bcs.n	83790 <memcpy+0x10>
   837d8:	3230      	adds	r2, #48	; 0x30
   837da:	d30b      	bcc.n	837f4 <memcpy+0x74>
   837dc:	680b      	ldr	r3, [r1, #0]
   837de:	6003      	str	r3, [r0, #0]
   837e0:	684b      	ldr	r3, [r1, #4]
   837e2:	6043      	str	r3, [r0, #4]
   837e4:	688b      	ldr	r3, [r1, #8]
   837e6:	6083      	str	r3, [r0, #8]
   837e8:	68cb      	ldr	r3, [r1, #12]
   837ea:	60c3      	str	r3, [r0, #12]
   837ec:	3010      	adds	r0, #16
   837ee:	3110      	adds	r1, #16
   837f0:	3a10      	subs	r2, #16
   837f2:	d2f3      	bcs.n	837dc <memcpy+0x5c>
   837f4:	320c      	adds	r2, #12
   837f6:	d305      	bcc.n	83804 <memcpy+0x84>
   837f8:	f851 3b04 	ldr.w	r3, [r1], #4
   837fc:	f840 3b04 	str.w	r3, [r0], #4
   83800:	3a04      	subs	r2, #4
   83802:	d2f9      	bcs.n	837f8 <memcpy+0x78>
   83804:	3204      	adds	r2, #4
   83806:	d008      	beq.n	8381a <memcpy+0x9a>
   83808:	07d2      	lsls	r2, r2, #31
   8380a:	bf1c      	itt	ne
   8380c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83810:	f800 3b01 	strbne.w	r3, [r0], #1
   83814:	d301      	bcc.n	8381a <memcpy+0x9a>
   83816:	880b      	ldrh	r3, [r1, #0]
   83818:	8003      	strh	r3, [r0, #0]
   8381a:	4660      	mov	r0, ip
   8381c:	4770      	bx	lr
   8381e:	bf00      	nop
   83820:	2a08      	cmp	r2, #8
   83822:	d313      	bcc.n	8384c <memcpy+0xcc>
   83824:	078b      	lsls	r3, r1, #30
   83826:	d0b1      	beq.n	8378c <memcpy+0xc>
   83828:	f010 0303 	ands.w	r3, r0, #3
   8382c:	d0ae      	beq.n	8378c <memcpy+0xc>
   8382e:	f1c3 0304 	rsb	r3, r3, #4
   83832:	1ad2      	subs	r2, r2, r3
   83834:	07db      	lsls	r3, r3, #31
   83836:	bf1c      	itt	ne
   83838:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8383c:	f800 3b01 	strbne.w	r3, [r0], #1
   83840:	d3a4      	bcc.n	8378c <memcpy+0xc>
   83842:	f831 3b02 	ldrh.w	r3, [r1], #2
   83846:	f820 3b02 	strh.w	r3, [r0], #2
   8384a:	e79f      	b.n	8378c <memcpy+0xc>
   8384c:	3a04      	subs	r2, #4
   8384e:	d3d9      	bcc.n	83804 <memcpy+0x84>
   83850:	3a01      	subs	r2, #1
   83852:	f811 3b01 	ldrb.w	r3, [r1], #1
   83856:	f800 3b01 	strb.w	r3, [r0], #1
   8385a:	d2f9      	bcs.n	83850 <memcpy+0xd0>
   8385c:	780b      	ldrb	r3, [r1, #0]
   8385e:	7003      	strb	r3, [r0, #0]
   83860:	784b      	ldrb	r3, [r1, #1]
   83862:	7043      	strb	r3, [r0, #1]
   83864:	788b      	ldrb	r3, [r1, #2]
   83866:	7083      	strb	r3, [r0, #2]
   83868:	4660      	mov	r0, ip
   8386a:	4770      	bx	lr

0008386c <memset>:
   8386c:	b470      	push	{r4, r5, r6}
   8386e:	0784      	lsls	r4, r0, #30
   83870:	d046      	beq.n	83900 <memset+0x94>
   83872:	1e54      	subs	r4, r2, #1
   83874:	2a00      	cmp	r2, #0
   83876:	d041      	beq.n	838fc <memset+0x90>
   83878:	b2cd      	uxtb	r5, r1
   8387a:	4603      	mov	r3, r0
   8387c:	e002      	b.n	83884 <memset+0x18>
   8387e:	1e62      	subs	r2, r4, #1
   83880:	b3e4      	cbz	r4, 838fc <memset+0x90>
   83882:	4614      	mov	r4, r2
   83884:	f803 5b01 	strb.w	r5, [r3], #1
   83888:	079a      	lsls	r2, r3, #30
   8388a:	d1f8      	bne.n	8387e <memset+0x12>
   8388c:	2c03      	cmp	r4, #3
   8388e:	d92e      	bls.n	838ee <memset+0x82>
   83890:	b2cd      	uxtb	r5, r1
   83892:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83896:	2c0f      	cmp	r4, #15
   83898:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8389c:	d919      	bls.n	838d2 <memset+0x66>
   8389e:	4626      	mov	r6, r4
   838a0:	f103 0210 	add.w	r2, r3, #16
   838a4:	3e10      	subs	r6, #16
   838a6:	2e0f      	cmp	r6, #15
   838a8:	f842 5c10 	str.w	r5, [r2, #-16]
   838ac:	f842 5c0c 	str.w	r5, [r2, #-12]
   838b0:	f842 5c08 	str.w	r5, [r2, #-8]
   838b4:	f842 5c04 	str.w	r5, [r2, #-4]
   838b8:	f102 0210 	add.w	r2, r2, #16
   838bc:	d8f2      	bhi.n	838a4 <memset+0x38>
   838be:	f1a4 0210 	sub.w	r2, r4, #16
   838c2:	f022 020f 	bic.w	r2, r2, #15
   838c6:	f004 040f 	and.w	r4, r4, #15
   838ca:	3210      	adds	r2, #16
   838cc:	2c03      	cmp	r4, #3
   838ce:	4413      	add	r3, r2
   838d0:	d90d      	bls.n	838ee <memset+0x82>
   838d2:	461e      	mov	r6, r3
   838d4:	4622      	mov	r2, r4
   838d6:	3a04      	subs	r2, #4
   838d8:	2a03      	cmp	r2, #3
   838da:	f846 5b04 	str.w	r5, [r6], #4
   838de:	d8fa      	bhi.n	838d6 <memset+0x6a>
   838e0:	1f22      	subs	r2, r4, #4
   838e2:	f022 0203 	bic.w	r2, r2, #3
   838e6:	3204      	adds	r2, #4
   838e8:	4413      	add	r3, r2
   838ea:	f004 0403 	and.w	r4, r4, #3
   838ee:	b12c      	cbz	r4, 838fc <memset+0x90>
   838f0:	b2c9      	uxtb	r1, r1
   838f2:	441c      	add	r4, r3
   838f4:	f803 1b01 	strb.w	r1, [r3], #1
   838f8:	42a3      	cmp	r3, r4
   838fa:	d1fb      	bne.n	838f4 <memset+0x88>
   838fc:	bc70      	pop	{r4, r5, r6}
   838fe:	4770      	bx	lr
   83900:	4614      	mov	r4, r2
   83902:	4603      	mov	r3, r0
   83904:	e7c2      	b.n	8388c <memset+0x20>
   83906:	bf00      	nop

00083908 <setbuf>:
   83908:	2900      	cmp	r1, #0
   8390a:	bf0c      	ite	eq
   8390c:	2202      	moveq	r2, #2
   8390e:	2200      	movne	r2, #0
   83910:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83914:	f000 b800 	b.w	83918 <setvbuf>

00083918 <setvbuf>:
   83918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8391c:	4d51      	ldr	r5, [pc, #324]	; (83a64 <setvbuf+0x14c>)
   8391e:	b083      	sub	sp, #12
   83920:	682d      	ldr	r5, [r5, #0]
   83922:	4604      	mov	r4, r0
   83924:	460f      	mov	r7, r1
   83926:	4690      	mov	r8, r2
   83928:	461e      	mov	r6, r3
   8392a:	b115      	cbz	r5, 83932 <setvbuf+0x1a>
   8392c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8392e:	2b00      	cmp	r3, #0
   83930:	d079      	beq.n	83a26 <setvbuf+0x10e>
   83932:	f1b8 0f02 	cmp.w	r8, #2
   83936:	d004      	beq.n	83942 <setvbuf+0x2a>
   83938:	f1b8 0f01 	cmp.w	r8, #1
   8393c:	d87f      	bhi.n	83a3e <setvbuf+0x126>
   8393e:	2e00      	cmp	r6, #0
   83940:	db7d      	blt.n	83a3e <setvbuf+0x126>
   83942:	4621      	mov	r1, r4
   83944:	4628      	mov	r0, r5
   83946:	f001 f96f 	bl	84c28 <_fflush_r>
   8394a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8394c:	b141      	cbz	r1, 83960 <setvbuf+0x48>
   8394e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83952:	4299      	cmp	r1, r3
   83954:	d002      	beq.n	8395c <setvbuf+0x44>
   83956:	4628      	mov	r0, r5
   83958:	f001 fac2 	bl	84ee0 <_free_r>
   8395c:	2300      	movs	r3, #0
   8395e:	6323      	str	r3, [r4, #48]	; 0x30
   83960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83964:	2200      	movs	r2, #0
   83966:	61a2      	str	r2, [r4, #24]
   83968:	6062      	str	r2, [r4, #4]
   8396a:	061a      	lsls	r2, r3, #24
   8396c:	d454      	bmi.n	83a18 <setvbuf+0x100>
   8396e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83972:	f023 0303 	bic.w	r3, r3, #3
   83976:	f1b8 0f02 	cmp.w	r8, #2
   8397a:	81a3      	strh	r3, [r4, #12]
   8397c:	d039      	beq.n	839f2 <setvbuf+0xda>
   8397e:	ab01      	add	r3, sp, #4
   83980:	466a      	mov	r2, sp
   83982:	4621      	mov	r1, r4
   83984:	4628      	mov	r0, r5
   83986:	f001 fd49 	bl	8541c <__swhatbuf_r>
   8398a:	89a3      	ldrh	r3, [r4, #12]
   8398c:	4318      	orrs	r0, r3
   8398e:	81a0      	strh	r0, [r4, #12]
   83990:	b326      	cbz	r6, 839dc <setvbuf+0xc4>
   83992:	b327      	cbz	r7, 839de <setvbuf+0xc6>
   83994:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83996:	2b00      	cmp	r3, #0
   83998:	d04d      	beq.n	83a36 <setvbuf+0x11e>
   8399a:	9b00      	ldr	r3, [sp, #0]
   8399c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   839a0:	429e      	cmp	r6, r3
   839a2:	bf1c      	itt	ne
   839a4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   839a8:	81a0      	strhne	r0, [r4, #12]
   839aa:	f1b8 0f01 	cmp.w	r8, #1
   839ae:	bf08      	it	eq
   839b0:	f040 0001 	orreq.w	r0, r0, #1
   839b4:	b283      	uxth	r3, r0
   839b6:	bf08      	it	eq
   839b8:	81a0      	strheq	r0, [r4, #12]
   839ba:	f003 0008 	and.w	r0, r3, #8
   839be:	b280      	uxth	r0, r0
   839c0:	6027      	str	r7, [r4, #0]
   839c2:	6127      	str	r7, [r4, #16]
   839c4:	6166      	str	r6, [r4, #20]
   839c6:	b318      	cbz	r0, 83a10 <setvbuf+0xf8>
   839c8:	f013 0001 	ands.w	r0, r3, #1
   839cc:	d02f      	beq.n	83a2e <setvbuf+0x116>
   839ce:	2000      	movs	r0, #0
   839d0:	4276      	negs	r6, r6
   839d2:	61a6      	str	r6, [r4, #24]
   839d4:	60a0      	str	r0, [r4, #8]
   839d6:	b003      	add	sp, #12
   839d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839dc:	9e00      	ldr	r6, [sp, #0]
   839de:	4630      	mov	r0, r6
   839e0:	f001 fd90 	bl	85504 <malloc>
   839e4:	4607      	mov	r7, r0
   839e6:	b368      	cbz	r0, 83a44 <setvbuf+0x12c>
   839e8:	89a3      	ldrh	r3, [r4, #12]
   839ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   839ee:	81a3      	strh	r3, [r4, #12]
   839f0:	e7d0      	b.n	83994 <setvbuf+0x7c>
   839f2:	2000      	movs	r0, #0
   839f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   839f8:	f043 0302 	orr.w	r3, r3, #2
   839fc:	2500      	movs	r5, #0
   839fe:	2101      	movs	r1, #1
   83a00:	81a3      	strh	r3, [r4, #12]
   83a02:	60a5      	str	r5, [r4, #8]
   83a04:	6022      	str	r2, [r4, #0]
   83a06:	6122      	str	r2, [r4, #16]
   83a08:	6161      	str	r1, [r4, #20]
   83a0a:	b003      	add	sp, #12
   83a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a10:	60a0      	str	r0, [r4, #8]
   83a12:	b003      	add	sp, #12
   83a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a18:	6921      	ldr	r1, [r4, #16]
   83a1a:	4628      	mov	r0, r5
   83a1c:	f001 fa60 	bl	84ee0 <_free_r>
   83a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a24:	e7a3      	b.n	8396e <setvbuf+0x56>
   83a26:	4628      	mov	r0, r5
   83a28:	f001 f992 	bl	84d50 <__sinit>
   83a2c:	e781      	b.n	83932 <setvbuf+0x1a>
   83a2e:	60a6      	str	r6, [r4, #8]
   83a30:	b003      	add	sp, #12
   83a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a36:	4628      	mov	r0, r5
   83a38:	f001 f98a 	bl	84d50 <__sinit>
   83a3c:	e7ad      	b.n	8399a <setvbuf+0x82>
   83a3e:	f04f 30ff 	mov.w	r0, #4294967295
   83a42:	e7e2      	b.n	83a0a <setvbuf+0xf2>
   83a44:	f8dd 9000 	ldr.w	r9, [sp]
   83a48:	45b1      	cmp	r9, r6
   83a4a:	d006      	beq.n	83a5a <setvbuf+0x142>
   83a4c:	4648      	mov	r0, r9
   83a4e:	f001 fd59 	bl	85504 <malloc>
   83a52:	4607      	mov	r7, r0
   83a54:	b108      	cbz	r0, 83a5a <setvbuf+0x142>
   83a56:	464e      	mov	r6, r9
   83a58:	e7c6      	b.n	839e8 <setvbuf+0xd0>
   83a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a5e:	f04f 30ff 	mov.w	r0, #4294967295
   83a62:	e7c7      	b.n	839f4 <setvbuf+0xdc>
   83a64:	20070570 	.word	0x20070570

00083a68 <strlen>:
   83a68:	f020 0103 	bic.w	r1, r0, #3
   83a6c:	f010 0003 	ands.w	r0, r0, #3
   83a70:	f1c0 0000 	rsb	r0, r0, #0
   83a74:	f851 3b04 	ldr.w	r3, [r1], #4
   83a78:	f100 0c04 	add.w	ip, r0, #4
   83a7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83a80:	f06f 0200 	mvn.w	r2, #0
   83a84:	bf1c      	itt	ne
   83a86:	fa22 f20c 	lsrne.w	r2, r2, ip
   83a8a:	4313      	orrne	r3, r2
   83a8c:	f04f 0c01 	mov.w	ip, #1
   83a90:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83a94:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83a98:	eba3 020c 	sub.w	r2, r3, ip
   83a9c:	ea22 0203 	bic.w	r2, r2, r3
   83aa0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83aa4:	bf04      	itt	eq
   83aa6:	f851 3b04 	ldreq.w	r3, [r1], #4
   83aaa:	3004      	addeq	r0, #4
   83aac:	d0f4      	beq.n	83a98 <strlen+0x30>
   83aae:	f1c2 0100 	rsb	r1, r2, #0
   83ab2:	ea02 0201 	and.w	r2, r2, r1
   83ab6:	fab2 f282 	clz	r2, r2
   83aba:	f1c2 021f 	rsb	r2, r2, #31
   83abe:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83ac2:	4770      	bx	lr

00083ac4 <strncpy>:
   83ac4:	ea40 0301 	orr.w	r3, r0, r1
   83ac8:	079b      	lsls	r3, r3, #30
   83aca:	b470      	push	{r4, r5, r6}
   83acc:	d12b      	bne.n	83b26 <strncpy+0x62>
   83ace:	2a03      	cmp	r2, #3
   83ad0:	d929      	bls.n	83b26 <strncpy+0x62>
   83ad2:	460c      	mov	r4, r1
   83ad4:	4603      	mov	r3, r0
   83ad6:	4621      	mov	r1, r4
   83ad8:	f854 6b04 	ldr.w	r6, [r4], #4
   83adc:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83ae0:	ea25 0506 	bic.w	r5, r5, r6
   83ae4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83ae8:	d106      	bne.n	83af8 <strncpy+0x34>
   83aea:	3a04      	subs	r2, #4
   83aec:	2a03      	cmp	r2, #3
   83aee:	f843 6b04 	str.w	r6, [r3], #4
   83af2:	4621      	mov	r1, r4
   83af4:	d8ef      	bhi.n	83ad6 <strncpy+0x12>
   83af6:	b1a2      	cbz	r2, 83b22 <strncpy+0x5e>
   83af8:	780c      	ldrb	r4, [r1, #0]
   83afa:	3a01      	subs	r2, #1
   83afc:	701c      	strb	r4, [r3, #0]
   83afe:	3101      	adds	r1, #1
   83b00:	3301      	adds	r3, #1
   83b02:	b13c      	cbz	r4, 83b14 <strncpy+0x50>
   83b04:	b16a      	cbz	r2, 83b22 <strncpy+0x5e>
   83b06:	f811 4b01 	ldrb.w	r4, [r1], #1
   83b0a:	3a01      	subs	r2, #1
   83b0c:	f803 4b01 	strb.w	r4, [r3], #1
   83b10:	2c00      	cmp	r4, #0
   83b12:	d1f7      	bne.n	83b04 <strncpy+0x40>
   83b14:	b12a      	cbz	r2, 83b22 <strncpy+0x5e>
   83b16:	441a      	add	r2, r3
   83b18:	2100      	movs	r1, #0
   83b1a:	f803 1b01 	strb.w	r1, [r3], #1
   83b1e:	429a      	cmp	r2, r3
   83b20:	d1fb      	bne.n	83b1a <strncpy+0x56>
   83b22:	bc70      	pop	{r4, r5, r6}
   83b24:	4770      	bx	lr
   83b26:	4603      	mov	r3, r0
   83b28:	e7e5      	b.n	83af6 <strncpy+0x32>
   83b2a:	bf00      	nop

00083b2c <__sprint_r.part.0>:
   83b2c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83b32:	049c      	lsls	r4, r3, #18
   83b34:	4692      	mov	sl, r2
   83b36:	d52c      	bpl.n	83b92 <__sprint_r.part.0+0x66>
   83b38:	6893      	ldr	r3, [r2, #8]
   83b3a:	6812      	ldr	r2, [r2, #0]
   83b3c:	b33b      	cbz	r3, 83b8e <__sprint_r.part.0+0x62>
   83b3e:	460f      	mov	r7, r1
   83b40:	4680      	mov	r8, r0
   83b42:	f102 0908 	add.w	r9, r2, #8
   83b46:	e919 0060 	ldmdb	r9, {r5, r6}
   83b4a:	08b6      	lsrs	r6, r6, #2
   83b4c:	d017      	beq.n	83b7e <__sprint_r.part.0+0x52>
   83b4e:	3d04      	subs	r5, #4
   83b50:	2400      	movs	r4, #0
   83b52:	e001      	b.n	83b58 <__sprint_r.part.0+0x2c>
   83b54:	42a6      	cmp	r6, r4
   83b56:	d010      	beq.n	83b7a <__sprint_r.part.0+0x4e>
   83b58:	463a      	mov	r2, r7
   83b5a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83b5e:	4640      	mov	r0, r8
   83b60:	f001 f95e 	bl	84e20 <_fputwc_r>
   83b64:	1c43      	adds	r3, r0, #1
   83b66:	f104 0401 	add.w	r4, r4, #1
   83b6a:	d1f3      	bne.n	83b54 <__sprint_r.part.0+0x28>
   83b6c:	2300      	movs	r3, #0
   83b6e:	f8ca 3008 	str.w	r3, [sl, #8]
   83b72:	f8ca 3004 	str.w	r3, [sl, #4]
   83b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b7a:	f8da 3008 	ldr.w	r3, [sl, #8]
   83b7e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83b82:	f8ca 3008 	str.w	r3, [sl, #8]
   83b86:	f109 0908 	add.w	r9, r9, #8
   83b8a:	2b00      	cmp	r3, #0
   83b8c:	d1db      	bne.n	83b46 <__sprint_r.part.0+0x1a>
   83b8e:	2000      	movs	r0, #0
   83b90:	e7ec      	b.n	83b6c <__sprint_r.part.0+0x40>
   83b92:	f001 fa8d 	bl	850b0 <__sfvwrite_r>
   83b96:	2300      	movs	r3, #0
   83b98:	f8ca 3008 	str.w	r3, [sl, #8]
   83b9c:	f8ca 3004 	str.w	r3, [sl, #4]
   83ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083ba4 <_vfiprintf_r>:
   83ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ba8:	b0ab      	sub	sp, #172	; 0xac
   83baa:	461c      	mov	r4, r3
   83bac:	9100      	str	r1, [sp, #0]
   83bae:	4690      	mov	r8, r2
   83bb0:	9304      	str	r3, [sp, #16]
   83bb2:	9005      	str	r0, [sp, #20]
   83bb4:	b118      	cbz	r0, 83bbe <_vfiprintf_r+0x1a>
   83bb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83bb8:	2b00      	cmp	r3, #0
   83bba:	f000 80de 	beq.w	83d7a <_vfiprintf_r+0x1d6>
   83bbe:	9800      	ldr	r0, [sp, #0]
   83bc0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   83bc4:	b28a      	uxth	r2, r1
   83bc6:	0495      	lsls	r5, r2, #18
   83bc8:	d407      	bmi.n	83bda <_vfiprintf_r+0x36>
   83bca:	6e43      	ldr	r3, [r0, #100]	; 0x64
   83bcc:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83bd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83bd4:	8182      	strh	r2, [r0, #12]
   83bd6:	6643      	str	r3, [r0, #100]	; 0x64
   83bd8:	b292      	uxth	r2, r2
   83bda:	0711      	lsls	r1, r2, #28
   83bdc:	f140 80b1 	bpl.w	83d42 <_vfiprintf_r+0x19e>
   83be0:	9b00      	ldr	r3, [sp, #0]
   83be2:	691b      	ldr	r3, [r3, #16]
   83be4:	2b00      	cmp	r3, #0
   83be6:	f000 80ac 	beq.w	83d42 <_vfiprintf_r+0x19e>
   83bea:	f002 021a 	and.w	r2, r2, #26
   83bee:	2a0a      	cmp	r2, #10
   83bf0:	f000 80b5 	beq.w	83d5e <_vfiprintf_r+0x1ba>
   83bf4:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83bf8:	46d3      	mov	fp, sl
   83bfa:	2300      	movs	r3, #0
   83bfc:	9302      	str	r3, [sp, #8]
   83bfe:	930f      	str	r3, [sp, #60]	; 0x3c
   83c00:	930e      	str	r3, [sp, #56]	; 0x38
   83c02:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83c06:	f898 3000 	ldrb.w	r3, [r8]
   83c0a:	4644      	mov	r4, r8
   83c0c:	b1fb      	cbz	r3, 83c4e <_vfiprintf_r+0xaa>
   83c0e:	2b25      	cmp	r3, #37	; 0x25
   83c10:	d102      	bne.n	83c18 <_vfiprintf_r+0x74>
   83c12:	e01c      	b.n	83c4e <_vfiprintf_r+0xaa>
   83c14:	2b25      	cmp	r3, #37	; 0x25
   83c16:	d003      	beq.n	83c20 <_vfiprintf_r+0x7c>
   83c18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83c1c:	2b00      	cmp	r3, #0
   83c1e:	d1f9      	bne.n	83c14 <_vfiprintf_r+0x70>
   83c20:	ebc8 0504 	rsb	r5, r8, r4
   83c24:	b19d      	cbz	r5, 83c4e <_vfiprintf_r+0xaa>
   83c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83c28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83c2a:	3301      	adds	r3, #1
   83c2c:	442a      	add	r2, r5
   83c2e:	2b07      	cmp	r3, #7
   83c30:	f8cb 8000 	str.w	r8, [fp]
   83c34:	f8cb 5004 	str.w	r5, [fp, #4]
   83c38:	920f      	str	r2, [sp, #60]	; 0x3c
   83c3a:	930e      	str	r3, [sp, #56]	; 0x38
   83c3c:	dd7b      	ble.n	83d36 <_vfiprintf_r+0x192>
   83c3e:	2a00      	cmp	r2, #0
   83c40:	f040 851f 	bne.w	84682 <_vfiprintf_r+0xade>
   83c44:	46d3      	mov	fp, sl
   83c46:	9b02      	ldr	r3, [sp, #8]
   83c48:	920e      	str	r2, [sp, #56]	; 0x38
   83c4a:	442b      	add	r3, r5
   83c4c:	9302      	str	r3, [sp, #8]
   83c4e:	7823      	ldrb	r3, [r4, #0]
   83c50:	2b00      	cmp	r3, #0
   83c52:	f000 843b 	beq.w	844cc <_vfiprintf_r+0x928>
   83c56:	f04f 0300 	mov.w	r3, #0
   83c5a:	2100      	movs	r1, #0
   83c5c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83c60:	f104 0801 	add.w	r8, r4, #1
   83c64:	7863      	ldrb	r3, [r4, #1]
   83c66:	4608      	mov	r0, r1
   83c68:	460e      	mov	r6, r1
   83c6a:	460c      	mov	r4, r1
   83c6c:	f04f 32ff 	mov.w	r2, #4294967295
   83c70:	9201      	str	r2, [sp, #4]
   83c72:	f108 0801 	add.w	r8, r8, #1
   83c76:	f1a3 0220 	sub.w	r2, r3, #32
   83c7a:	2a58      	cmp	r2, #88	; 0x58
   83c7c:	f200 838b 	bhi.w	84396 <_vfiprintf_r+0x7f2>
   83c80:	e8df f012 	tbh	[pc, r2, lsl #1]
   83c84:	0389033d 	.word	0x0389033d
   83c88:	03450389 	.word	0x03450389
   83c8c:	03890389 	.word	0x03890389
   83c90:	03890389 	.word	0x03890389
   83c94:	03890389 	.word	0x03890389
   83c98:	026b007e 	.word	0x026b007e
   83c9c:	00860389 	.word	0x00860389
   83ca0:	03890270 	.word	0x03890270
   83ca4:	025d01cc 	.word	0x025d01cc
   83ca8:	025d025d 	.word	0x025d025d
   83cac:	025d025d 	.word	0x025d025d
   83cb0:	025d025d 	.word	0x025d025d
   83cb4:	025d025d 	.word	0x025d025d
   83cb8:	03890389 	.word	0x03890389
   83cbc:	03890389 	.word	0x03890389
   83cc0:	03890389 	.word	0x03890389
   83cc4:	03890389 	.word	0x03890389
   83cc8:	03890389 	.word	0x03890389
   83ccc:	038901d1 	.word	0x038901d1
   83cd0:	03890389 	.word	0x03890389
   83cd4:	03890389 	.word	0x03890389
   83cd8:	03890389 	.word	0x03890389
   83cdc:	03890389 	.word	0x03890389
   83ce0:	021a0389 	.word	0x021a0389
   83ce4:	03890389 	.word	0x03890389
   83ce8:	03890389 	.word	0x03890389
   83cec:	02e50389 	.word	0x02e50389
   83cf0:	03890389 	.word	0x03890389
   83cf4:	03890308 	.word	0x03890308
   83cf8:	03890389 	.word	0x03890389
   83cfc:	03890389 	.word	0x03890389
   83d00:	03890389 	.word	0x03890389
   83d04:	03890389 	.word	0x03890389
   83d08:	032b0389 	.word	0x032b0389
   83d0c:	03890382 	.word	0x03890382
   83d10:	03890389 	.word	0x03890389
   83d14:	0382035e 	.word	0x0382035e
   83d18:	03890389 	.word	0x03890389
   83d1c:	03890363 	.word	0x03890363
   83d20:	028d0370 	.word	0x028d0370
   83d24:	02e0008b 	.word	0x02e0008b
   83d28:	02930389 	.word	0x02930389
   83d2c:	02b20389 	.word	0x02b20389
   83d30:	03890389 	.word	0x03890389
   83d34:	034a      	.short	0x034a
   83d36:	f10b 0b08 	add.w	fp, fp, #8
   83d3a:	9b02      	ldr	r3, [sp, #8]
   83d3c:	442b      	add	r3, r5
   83d3e:	9302      	str	r3, [sp, #8]
   83d40:	e785      	b.n	83c4e <_vfiprintf_r+0xaa>
   83d42:	9900      	ldr	r1, [sp, #0]
   83d44:	9805      	ldr	r0, [sp, #20]
   83d46:	f000 fe57 	bl	849f8 <__swsetup_r>
   83d4a:	2800      	cmp	r0, #0
   83d4c:	f040 8545 	bne.w	847da <_vfiprintf_r+0xc36>
   83d50:	9b00      	ldr	r3, [sp, #0]
   83d52:	899a      	ldrh	r2, [r3, #12]
   83d54:	f002 021a 	and.w	r2, r2, #26
   83d58:	2a0a      	cmp	r2, #10
   83d5a:	f47f af4b 	bne.w	83bf4 <_vfiprintf_r+0x50>
   83d5e:	9900      	ldr	r1, [sp, #0]
   83d60:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   83d64:	2b00      	cmp	r3, #0
   83d66:	f6ff af45 	blt.w	83bf4 <_vfiprintf_r+0x50>
   83d6a:	4623      	mov	r3, r4
   83d6c:	4642      	mov	r2, r8
   83d6e:	9805      	ldr	r0, [sp, #20]
   83d70:	f000 fe0c 	bl	8498c <__sbprintf>
   83d74:	b02b      	add	sp, #172	; 0xac
   83d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d7a:	f000 ffe9 	bl	84d50 <__sinit>
   83d7e:	e71e      	b.n	83bbe <_vfiprintf_r+0x1a>
   83d80:	9a04      	ldr	r2, [sp, #16]
   83d82:	4613      	mov	r3, r2
   83d84:	6814      	ldr	r4, [r2, #0]
   83d86:	3304      	adds	r3, #4
   83d88:	2c00      	cmp	r4, #0
   83d8a:	9304      	str	r3, [sp, #16]
   83d8c:	da02      	bge.n	83d94 <_vfiprintf_r+0x1f0>
   83d8e:	4264      	negs	r4, r4
   83d90:	f046 0604 	orr.w	r6, r6, #4
   83d94:	f898 3000 	ldrb.w	r3, [r8]
   83d98:	e76b      	b.n	83c72 <_vfiprintf_r+0xce>
   83d9a:	f04f 0300 	mov.w	r3, #0
   83d9e:	9804      	ldr	r0, [sp, #16]
   83da0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83da4:	4603      	mov	r3, r0
   83da6:	2130      	movs	r1, #48	; 0x30
   83da8:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   83dac:	9901      	ldr	r1, [sp, #4]
   83dae:	2278      	movs	r2, #120	; 0x78
   83db0:	2900      	cmp	r1, #0
   83db2:	9406      	str	r4, [sp, #24]
   83db4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   83db8:	6804      	ldr	r4, [r0, #0]
   83dba:	f103 0304 	add.w	r3, r3, #4
   83dbe:	f04f 0500 	mov.w	r5, #0
   83dc2:	f046 0202 	orr.w	r2, r6, #2
   83dc6:	f2c0 850c 	blt.w	847e2 <_vfiprintf_r+0xc3e>
   83dca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83dce:	ea54 0205 	orrs.w	r2, r4, r5
   83dd2:	f046 0602 	orr.w	r6, r6, #2
   83dd6:	9304      	str	r3, [sp, #16]
   83dd8:	f040 84b5 	bne.w	84746 <_vfiprintf_r+0xba2>
   83ddc:	48b3      	ldr	r0, [pc, #716]	; (840ac <_vfiprintf_r+0x508>)
   83dde:	9b01      	ldr	r3, [sp, #4]
   83de0:	2b00      	cmp	r3, #0
   83de2:	f040 8462 	bne.w	846aa <_vfiprintf_r+0xb06>
   83de6:	4699      	mov	r9, r3
   83de8:	4657      	mov	r7, sl
   83dea:	2300      	movs	r3, #0
   83dec:	9301      	str	r3, [sp, #4]
   83dee:	9303      	str	r3, [sp, #12]
   83df0:	9b01      	ldr	r3, [sp, #4]
   83df2:	9a03      	ldr	r2, [sp, #12]
   83df4:	4293      	cmp	r3, r2
   83df6:	bfb8      	it	lt
   83df8:	4613      	movlt	r3, r2
   83dfa:	461d      	mov	r5, r3
   83dfc:	f1b9 0f00 	cmp.w	r9, #0
   83e00:	d000      	beq.n	83e04 <_vfiprintf_r+0x260>
   83e02:	3501      	adds	r5, #1
   83e04:	f016 0302 	ands.w	r3, r6, #2
   83e08:	9307      	str	r3, [sp, #28]
   83e0a:	bf18      	it	ne
   83e0c:	3502      	addne	r5, #2
   83e0e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   83e12:	9308      	str	r3, [sp, #32]
   83e14:	f040 82e8 	bne.w	843e8 <_vfiprintf_r+0x844>
   83e18:	9b06      	ldr	r3, [sp, #24]
   83e1a:	1b5c      	subs	r4, r3, r5
   83e1c:	2c00      	cmp	r4, #0
   83e1e:	f340 82e3 	ble.w	843e8 <_vfiprintf_r+0x844>
   83e22:	2c10      	cmp	r4, #16
   83e24:	f340 853c 	ble.w	848a0 <_vfiprintf_r+0xcfc>
   83e28:	f8df 9284 	ldr.w	r9, [pc, #644]	; 840b0 <_vfiprintf_r+0x50c>
   83e2c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83e30:	46dc      	mov	ip, fp
   83e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e34:	46c3      	mov	fp, r8
   83e36:	2310      	movs	r3, #16
   83e38:	46a8      	mov	r8, r5
   83e3a:	4670      	mov	r0, lr
   83e3c:	464d      	mov	r5, r9
   83e3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83e42:	e007      	b.n	83e54 <_vfiprintf_r+0x2b0>
   83e44:	f100 0e02 	add.w	lr, r0, #2
   83e48:	4608      	mov	r0, r1
   83e4a:	f10c 0c08 	add.w	ip, ip, #8
   83e4e:	3c10      	subs	r4, #16
   83e50:	2c10      	cmp	r4, #16
   83e52:	dd13      	ble.n	83e7c <_vfiprintf_r+0x2d8>
   83e54:	1c41      	adds	r1, r0, #1
   83e56:	3210      	adds	r2, #16
   83e58:	2907      	cmp	r1, #7
   83e5a:	920f      	str	r2, [sp, #60]	; 0x3c
   83e5c:	f8cc 5000 	str.w	r5, [ip]
   83e60:	f8cc 3004 	str.w	r3, [ip, #4]
   83e64:	910e      	str	r1, [sp, #56]	; 0x38
   83e66:	dded      	ble.n	83e44 <_vfiprintf_r+0x2a0>
   83e68:	2a00      	cmp	r2, #0
   83e6a:	f040 82a5 	bne.w	843b8 <_vfiprintf_r+0x814>
   83e6e:	3c10      	subs	r4, #16
   83e70:	2c10      	cmp	r4, #16
   83e72:	4610      	mov	r0, r2
   83e74:	f04f 0e01 	mov.w	lr, #1
   83e78:	46d4      	mov	ip, sl
   83e7a:	dceb      	bgt.n	83e54 <_vfiprintf_r+0x2b0>
   83e7c:	46a9      	mov	r9, r5
   83e7e:	4670      	mov	r0, lr
   83e80:	4645      	mov	r5, r8
   83e82:	46d8      	mov	r8, fp
   83e84:	46e3      	mov	fp, ip
   83e86:	4422      	add	r2, r4
   83e88:	2807      	cmp	r0, #7
   83e8a:	920f      	str	r2, [sp, #60]	; 0x3c
   83e8c:	f8cb 9000 	str.w	r9, [fp]
   83e90:	f8cb 4004 	str.w	r4, [fp, #4]
   83e94:	900e      	str	r0, [sp, #56]	; 0x38
   83e96:	f300 836d 	bgt.w	84574 <_vfiprintf_r+0x9d0>
   83e9a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83e9e:	f10b 0b08 	add.w	fp, fp, #8
   83ea2:	f100 0e01 	add.w	lr, r0, #1
   83ea6:	2b00      	cmp	r3, #0
   83ea8:	f040 82a7 	bne.w	843fa <_vfiprintf_r+0x856>
   83eac:	9b07      	ldr	r3, [sp, #28]
   83eae:	2b00      	cmp	r3, #0
   83eb0:	f000 82ba 	beq.w	84428 <_vfiprintf_r+0x884>
   83eb4:	3202      	adds	r2, #2
   83eb6:	a90c      	add	r1, sp, #48	; 0x30
   83eb8:	2302      	movs	r3, #2
   83eba:	f1be 0f07 	cmp.w	lr, #7
   83ebe:	920f      	str	r2, [sp, #60]	; 0x3c
   83ec0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83ec4:	e88b 000a 	stmia.w	fp, {r1, r3}
   83ec8:	f340 8370 	ble.w	845ac <_vfiprintf_r+0xa08>
   83ecc:	2a00      	cmp	r2, #0
   83ece:	f040 8400 	bne.w	846d2 <_vfiprintf_r+0xb2e>
   83ed2:	9b08      	ldr	r3, [sp, #32]
   83ed4:	f04f 0e01 	mov.w	lr, #1
   83ed8:	2b80      	cmp	r3, #128	; 0x80
   83eda:	4610      	mov	r0, r2
   83edc:	46d3      	mov	fp, sl
   83ede:	f040 82a7 	bne.w	84430 <_vfiprintf_r+0x88c>
   83ee2:	9b06      	ldr	r3, [sp, #24]
   83ee4:	1b5c      	subs	r4, r3, r5
   83ee6:	2c00      	cmp	r4, #0
   83ee8:	f340 82a2 	ble.w	84430 <_vfiprintf_r+0x88c>
   83eec:	2c10      	cmp	r4, #16
   83eee:	f340 84f8 	ble.w	848e2 <_vfiprintf_r+0xd3e>
   83ef2:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 840b4 <_vfiprintf_r+0x510>
   83ef6:	46de      	mov	lr, fp
   83ef8:	2310      	movs	r3, #16
   83efa:	46c3      	mov	fp, r8
   83efc:	46a8      	mov	r8, r5
   83efe:	464d      	mov	r5, r9
   83f00:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83f04:	e007      	b.n	83f16 <_vfiprintf_r+0x372>
   83f06:	f100 0c02 	add.w	ip, r0, #2
   83f0a:	4608      	mov	r0, r1
   83f0c:	f10e 0e08 	add.w	lr, lr, #8
   83f10:	3c10      	subs	r4, #16
   83f12:	2c10      	cmp	r4, #16
   83f14:	dd13      	ble.n	83f3e <_vfiprintf_r+0x39a>
   83f16:	1c41      	adds	r1, r0, #1
   83f18:	3210      	adds	r2, #16
   83f1a:	2907      	cmp	r1, #7
   83f1c:	920f      	str	r2, [sp, #60]	; 0x3c
   83f1e:	f8ce 5000 	str.w	r5, [lr]
   83f22:	f8ce 3004 	str.w	r3, [lr, #4]
   83f26:	910e      	str	r1, [sp, #56]	; 0x38
   83f28:	dded      	ble.n	83f06 <_vfiprintf_r+0x362>
   83f2a:	2a00      	cmp	r2, #0
   83f2c:	f040 830c 	bne.w	84548 <_vfiprintf_r+0x9a4>
   83f30:	3c10      	subs	r4, #16
   83f32:	2c10      	cmp	r4, #16
   83f34:	f04f 0c01 	mov.w	ip, #1
   83f38:	4610      	mov	r0, r2
   83f3a:	46d6      	mov	lr, sl
   83f3c:	dceb      	bgt.n	83f16 <_vfiprintf_r+0x372>
   83f3e:	46a9      	mov	r9, r5
   83f40:	4645      	mov	r5, r8
   83f42:	46d8      	mov	r8, fp
   83f44:	46f3      	mov	fp, lr
   83f46:	4422      	add	r2, r4
   83f48:	f1bc 0f07 	cmp.w	ip, #7
   83f4c:	920f      	str	r2, [sp, #60]	; 0x3c
   83f4e:	f8cb 9000 	str.w	r9, [fp]
   83f52:	f8cb 4004 	str.w	r4, [fp, #4]
   83f56:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   83f5a:	f300 83c8 	bgt.w	846ee <_vfiprintf_r+0xb4a>
   83f5e:	9b01      	ldr	r3, [sp, #4]
   83f60:	9903      	ldr	r1, [sp, #12]
   83f62:	f10b 0b08 	add.w	fp, fp, #8
   83f66:	1a5c      	subs	r4, r3, r1
   83f68:	2c00      	cmp	r4, #0
   83f6a:	f10c 0e01 	add.w	lr, ip, #1
   83f6e:	4660      	mov	r0, ip
   83f70:	f300 8264 	bgt.w	8443c <_vfiprintf_r+0x898>
   83f74:	9903      	ldr	r1, [sp, #12]
   83f76:	f1be 0f07 	cmp.w	lr, #7
   83f7a:	440a      	add	r2, r1
   83f7c:	920f      	str	r2, [sp, #60]	; 0x3c
   83f7e:	f8cb 7000 	str.w	r7, [fp]
   83f82:	f8cb 1004 	str.w	r1, [fp, #4]
   83f86:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83f8a:	f340 82c5 	ble.w	84518 <_vfiprintf_r+0x974>
   83f8e:	2a00      	cmp	r2, #0
   83f90:	f040 8332 	bne.w	845f8 <_vfiprintf_r+0xa54>
   83f94:	0770      	lsls	r0, r6, #29
   83f96:	920e      	str	r2, [sp, #56]	; 0x38
   83f98:	d538      	bpl.n	8400c <_vfiprintf_r+0x468>
   83f9a:	9b06      	ldr	r3, [sp, #24]
   83f9c:	1b5c      	subs	r4, r3, r5
   83f9e:	2c00      	cmp	r4, #0
   83fa0:	dd34      	ble.n	8400c <_vfiprintf_r+0x468>
   83fa2:	46d3      	mov	fp, sl
   83fa4:	2c10      	cmp	r4, #16
   83fa6:	f340 8496 	ble.w	848d6 <_vfiprintf_r+0xd32>
   83faa:	f8df 9104 	ldr.w	r9, [pc, #260]	; 840b0 <_vfiprintf_r+0x50c>
   83fae:	990e      	ldr	r1, [sp, #56]	; 0x38
   83fb0:	464f      	mov	r7, r9
   83fb2:	2610      	movs	r6, #16
   83fb4:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83fb8:	e006      	b.n	83fc8 <_vfiprintf_r+0x424>
   83fba:	1c88      	adds	r0, r1, #2
   83fbc:	4619      	mov	r1, r3
   83fbe:	f10b 0b08 	add.w	fp, fp, #8
   83fc2:	3c10      	subs	r4, #16
   83fc4:	2c10      	cmp	r4, #16
   83fc6:	dd13      	ble.n	83ff0 <_vfiprintf_r+0x44c>
   83fc8:	1c4b      	adds	r3, r1, #1
   83fca:	3210      	adds	r2, #16
   83fcc:	2b07      	cmp	r3, #7
   83fce:	920f      	str	r2, [sp, #60]	; 0x3c
   83fd0:	f8cb 7000 	str.w	r7, [fp]
   83fd4:	f8cb 6004 	str.w	r6, [fp, #4]
   83fd8:	930e      	str	r3, [sp, #56]	; 0x38
   83fda:	ddee      	ble.n	83fba <_vfiprintf_r+0x416>
   83fdc:	2a00      	cmp	r2, #0
   83fde:	f040 8285 	bne.w	844ec <_vfiprintf_r+0x948>
   83fe2:	3c10      	subs	r4, #16
   83fe4:	2c10      	cmp	r4, #16
   83fe6:	f04f 0001 	mov.w	r0, #1
   83fea:	4611      	mov	r1, r2
   83fec:	46d3      	mov	fp, sl
   83fee:	dceb      	bgt.n	83fc8 <_vfiprintf_r+0x424>
   83ff0:	46b9      	mov	r9, r7
   83ff2:	4422      	add	r2, r4
   83ff4:	2807      	cmp	r0, #7
   83ff6:	920f      	str	r2, [sp, #60]	; 0x3c
   83ff8:	f8cb 9000 	str.w	r9, [fp]
   83ffc:	f8cb 4004 	str.w	r4, [fp, #4]
   84000:	900e      	str	r0, [sp, #56]	; 0x38
   84002:	f340 8292 	ble.w	8452a <_vfiprintf_r+0x986>
   84006:	2a00      	cmp	r2, #0
   84008:	f040 840c 	bne.w	84824 <_vfiprintf_r+0xc80>
   8400c:	9b02      	ldr	r3, [sp, #8]
   8400e:	9a06      	ldr	r2, [sp, #24]
   84010:	42aa      	cmp	r2, r5
   84012:	bfac      	ite	ge
   84014:	189b      	addge	r3, r3, r2
   84016:	195b      	addlt	r3, r3, r5
   84018:	9302      	str	r3, [sp, #8]
   8401a:	e290      	b.n	8453e <_vfiprintf_r+0x99a>
   8401c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   84020:	f898 3000 	ldrb.w	r3, [r8]
   84024:	e625      	b.n	83c72 <_vfiprintf_r+0xce>
   84026:	9406      	str	r4, [sp, #24]
   84028:	2900      	cmp	r1, #0
   8402a:	f040 8485 	bne.w	84938 <_vfiprintf_r+0xd94>
   8402e:	f046 0610 	orr.w	r6, r6, #16
   84032:	06b3      	lsls	r3, r6, #26
   84034:	f140 8304 	bpl.w	84640 <_vfiprintf_r+0xa9c>
   84038:	9904      	ldr	r1, [sp, #16]
   8403a:	3107      	adds	r1, #7
   8403c:	f021 0107 	bic.w	r1, r1, #7
   84040:	e9d1 2300 	ldrd	r2, r3, [r1]
   84044:	4614      	mov	r4, r2
   84046:	461d      	mov	r5, r3
   84048:	3108      	adds	r1, #8
   8404a:	9104      	str	r1, [sp, #16]
   8404c:	2a00      	cmp	r2, #0
   8404e:	f173 0300 	sbcs.w	r3, r3, #0
   84052:	f2c0 837c 	blt.w	8474e <_vfiprintf_r+0xbaa>
   84056:	9b01      	ldr	r3, [sp, #4]
   84058:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8405c:	2b00      	cmp	r3, #0
   8405e:	f2c0 830b 	blt.w	84678 <_vfiprintf_r+0xad4>
   84062:	ea54 0305 	orrs.w	r3, r4, r5
   84066:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8406a:	f000 80de 	beq.w	8422a <_vfiprintf_r+0x686>
   8406e:	2d00      	cmp	r5, #0
   84070:	bf08      	it	eq
   84072:	2c0a      	cmpeq	r4, #10
   84074:	f0c0 80de 	bcc.w	84234 <_vfiprintf_r+0x690>
   84078:	4657      	mov	r7, sl
   8407a:	4620      	mov	r0, r4
   8407c:	4629      	mov	r1, r5
   8407e:	220a      	movs	r2, #10
   84080:	2300      	movs	r3, #0
   84082:	f002 f97d 	bl	86380 <__aeabi_uldivmod>
   84086:	3230      	adds	r2, #48	; 0x30
   84088:	f807 2d01 	strb.w	r2, [r7, #-1]!
   8408c:	4620      	mov	r0, r4
   8408e:	4629      	mov	r1, r5
   84090:	2300      	movs	r3, #0
   84092:	220a      	movs	r2, #10
   84094:	f002 f974 	bl	86380 <__aeabi_uldivmod>
   84098:	4604      	mov	r4, r0
   8409a:	460d      	mov	r5, r1
   8409c:	ea54 0305 	orrs.w	r3, r4, r5
   840a0:	d1eb      	bne.n	8407a <_vfiprintf_r+0x4d6>
   840a2:	ebc7 030a 	rsb	r3, r7, sl
   840a6:	9303      	str	r3, [sp, #12]
   840a8:	e6a2      	b.n	83df0 <_vfiprintf_r+0x24c>
   840aa:	bf00      	nop
   840ac:	00087a64 	.word	0x00087a64
   840b0:	00087a80 	.word	0x00087a80
   840b4:	00087a40 	.word	0x00087a40
   840b8:	9406      	str	r4, [sp, #24]
   840ba:	2900      	cmp	r1, #0
   840bc:	f040 8438 	bne.w	84930 <_vfiprintf_r+0xd8c>
   840c0:	f046 0610 	orr.w	r6, r6, #16
   840c4:	f016 0320 	ands.w	r3, r6, #32
   840c8:	f000 82a1 	beq.w	8460e <_vfiprintf_r+0xa6a>
   840cc:	f04f 0200 	mov.w	r2, #0
   840d0:	9b04      	ldr	r3, [sp, #16]
   840d2:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   840d6:	3307      	adds	r3, #7
   840d8:	f023 0307 	bic.w	r3, r3, #7
   840dc:	f103 0208 	add.w	r2, r3, #8
   840e0:	e9d3 4500 	ldrd	r4, r5, [r3]
   840e4:	9b01      	ldr	r3, [sp, #4]
   840e6:	9204      	str	r2, [sp, #16]
   840e8:	2b00      	cmp	r3, #0
   840ea:	db0a      	blt.n	84102 <_vfiprintf_r+0x55e>
   840ec:	ea54 0305 	orrs.w	r3, r4, r5
   840f0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   840f4:	d105      	bne.n	84102 <_vfiprintf_r+0x55e>
   840f6:	9b01      	ldr	r3, [sp, #4]
   840f8:	2b00      	cmp	r3, #0
   840fa:	f000 8427 	beq.w	8494c <_vfiprintf_r+0xda8>
   840fe:	2400      	movs	r4, #0
   84100:	2500      	movs	r5, #0
   84102:	f04f 0900 	mov.w	r9, #0
   84106:	4657      	mov	r7, sl
   84108:	08e2      	lsrs	r2, r4, #3
   8410a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8410e:	08e9      	lsrs	r1, r5, #3
   84110:	f004 0307 	and.w	r3, r4, #7
   84114:	460d      	mov	r5, r1
   84116:	4614      	mov	r4, r2
   84118:	3330      	adds	r3, #48	; 0x30
   8411a:	ea54 0205 	orrs.w	r2, r4, r5
   8411e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84122:	d1f1      	bne.n	84108 <_vfiprintf_r+0x564>
   84124:	07f4      	lsls	r4, r6, #31
   84126:	d5bc      	bpl.n	840a2 <_vfiprintf_r+0x4fe>
   84128:	2b30      	cmp	r3, #48	; 0x30
   8412a:	d0ba      	beq.n	840a2 <_vfiprintf_r+0x4fe>
   8412c:	2230      	movs	r2, #48	; 0x30
   8412e:	1e7b      	subs	r3, r7, #1
   84130:	f807 2c01 	strb.w	r2, [r7, #-1]
   84134:	ebc3 020a 	rsb	r2, r3, sl
   84138:	9203      	str	r2, [sp, #12]
   8413a:	461f      	mov	r7, r3
   8413c:	e658      	b.n	83df0 <_vfiprintf_r+0x24c>
   8413e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84142:	2400      	movs	r4, #0
   84144:	f818 3b01 	ldrb.w	r3, [r8], #1
   84148:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8414c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   84150:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84154:	2a09      	cmp	r2, #9
   84156:	d9f5      	bls.n	84144 <_vfiprintf_r+0x5a0>
   84158:	e58d      	b.n	83c76 <_vfiprintf_r+0xd2>
   8415a:	f898 3000 	ldrb.w	r3, [r8]
   8415e:	2101      	movs	r1, #1
   84160:	202b      	movs	r0, #43	; 0x2b
   84162:	e586      	b.n	83c72 <_vfiprintf_r+0xce>
   84164:	f898 3000 	ldrb.w	r3, [r8]
   84168:	f108 0501 	add.w	r5, r8, #1
   8416c:	2b2a      	cmp	r3, #42	; 0x2a
   8416e:	f000 83cc 	beq.w	8490a <_vfiprintf_r+0xd66>
   84172:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84176:	2a09      	cmp	r2, #9
   84178:	46a8      	mov	r8, r5
   8417a:	bf98      	it	ls
   8417c:	2500      	movls	r5, #0
   8417e:	f200 83b5 	bhi.w	848ec <_vfiprintf_r+0xd48>
   84182:	f818 3b01 	ldrb.w	r3, [r8], #1
   84186:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8418a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8418e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84192:	2a09      	cmp	r2, #9
   84194:	d9f5      	bls.n	84182 <_vfiprintf_r+0x5de>
   84196:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   8419a:	9201      	str	r2, [sp, #4]
   8419c:	e56b      	b.n	83c76 <_vfiprintf_r+0xd2>
   8419e:	9406      	str	r4, [sp, #24]
   841a0:	2900      	cmp	r1, #0
   841a2:	d08f      	beq.n	840c4 <_vfiprintf_r+0x520>
   841a4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   841a8:	e78c      	b.n	840c4 <_vfiprintf_r+0x520>
   841aa:	f04f 0300 	mov.w	r3, #0
   841ae:	9a04      	ldr	r2, [sp, #16]
   841b0:	9406      	str	r4, [sp, #24]
   841b2:	6817      	ldr	r7, [r2, #0]
   841b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   841b8:	1d14      	adds	r4, r2, #4
   841ba:	9b01      	ldr	r3, [sp, #4]
   841bc:	2f00      	cmp	r7, #0
   841be:	f000 837f 	beq.w	848c0 <_vfiprintf_r+0xd1c>
   841c2:	2b00      	cmp	r3, #0
   841c4:	f2c0 8353 	blt.w	8486e <_vfiprintf_r+0xcca>
   841c8:	461a      	mov	r2, r3
   841ca:	2100      	movs	r1, #0
   841cc:	4638      	mov	r0, r7
   841ce:	f001 fc4d 	bl	85a6c <memchr>
   841d2:	2800      	cmp	r0, #0
   841d4:	f000 838e 	beq.w	848f4 <_vfiprintf_r+0xd50>
   841d8:	1bc3      	subs	r3, r0, r7
   841da:	9303      	str	r3, [sp, #12]
   841dc:	2300      	movs	r3, #0
   841de:	9404      	str	r4, [sp, #16]
   841e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   841e4:	9301      	str	r3, [sp, #4]
   841e6:	e603      	b.n	83df0 <_vfiprintf_r+0x24c>
   841e8:	9406      	str	r4, [sp, #24]
   841ea:	2900      	cmp	r1, #0
   841ec:	f040 839d 	bne.w	8492a <_vfiprintf_r+0xd86>
   841f0:	f016 0920 	ands.w	r9, r6, #32
   841f4:	d134      	bne.n	84260 <_vfiprintf_r+0x6bc>
   841f6:	f016 0310 	ands.w	r3, r6, #16
   841fa:	d103      	bne.n	84204 <_vfiprintf_r+0x660>
   841fc:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84200:	f040 831f 	bne.w	84842 <_vfiprintf_r+0xc9e>
   84204:	9a04      	ldr	r2, [sp, #16]
   84206:	2500      	movs	r5, #0
   84208:	4613      	mov	r3, r2
   8420a:	6814      	ldr	r4, [r2, #0]
   8420c:	9a01      	ldr	r2, [sp, #4]
   8420e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84212:	2a00      	cmp	r2, #0
   84214:	f103 0304 	add.w	r3, r3, #4
   84218:	f2c0 8327 	blt.w	8486a <_vfiprintf_r+0xcc6>
   8421c:	ea54 0205 	orrs.w	r2, r4, r5
   84220:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84224:	9304      	str	r3, [sp, #16]
   84226:	f47f af22 	bne.w	8406e <_vfiprintf_r+0x4ca>
   8422a:	9b01      	ldr	r3, [sp, #4]
   8422c:	2b00      	cmp	r3, #0
   8422e:	f43f addb 	beq.w	83de8 <_vfiprintf_r+0x244>
   84232:	2400      	movs	r4, #0
   84234:	af2a      	add	r7, sp, #168	; 0xa8
   84236:	3430      	adds	r4, #48	; 0x30
   84238:	f807 4d41 	strb.w	r4, [r7, #-65]!
   8423c:	ebc7 030a 	rsb	r3, r7, sl
   84240:	9303      	str	r3, [sp, #12]
   84242:	e5d5      	b.n	83df0 <_vfiprintf_r+0x24c>
   84244:	f046 0620 	orr.w	r6, r6, #32
   84248:	f898 3000 	ldrb.w	r3, [r8]
   8424c:	e511      	b.n	83c72 <_vfiprintf_r+0xce>
   8424e:	9406      	str	r4, [sp, #24]
   84250:	2900      	cmp	r1, #0
   84252:	f040 8375 	bne.w	84940 <_vfiprintf_r+0xd9c>
   84256:	f046 0610 	orr.w	r6, r6, #16
   8425a:	f016 0920 	ands.w	r9, r6, #32
   8425e:	d0ca      	beq.n	841f6 <_vfiprintf_r+0x652>
   84260:	f04f 0200 	mov.w	r2, #0
   84264:	9b04      	ldr	r3, [sp, #16]
   84266:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8426a:	3307      	adds	r3, #7
   8426c:	f023 0307 	bic.w	r3, r3, #7
   84270:	f103 0208 	add.w	r2, r3, #8
   84274:	e9d3 4500 	ldrd	r4, r5, [r3]
   84278:	9b01      	ldr	r3, [sp, #4]
   8427a:	9204      	str	r2, [sp, #16]
   8427c:	2b00      	cmp	r3, #0
   8427e:	f2c0 81f9 	blt.w	84674 <_vfiprintf_r+0xad0>
   84282:	ea54 0305 	orrs.w	r3, r4, r5
   84286:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8428a:	f04f 0900 	mov.w	r9, #0
   8428e:	f47f aeee 	bne.w	8406e <_vfiprintf_r+0x4ca>
   84292:	e7ca      	b.n	8422a <_vfiprintf_r+0x686>
   84294:	9406      	str	r4, [sp, #24]
   84296:	2900      	cmp	r1, #0
   84298:	f040 8355 	bne.w	84946 <_vfiprintf_r+0xda2>
   8429c:	06b2      	lsls	r2, r6, #26
   8429e:	48b2      	ldr	r0, [pc, #712]	; (84568 <_vfiprintf_r+0x9c4>)
   842a0:	d541      	bpl.n	84326 <_vfiprintf_r+0x782>
   842a2:	9a04      	ldr	r2, [sp, #16]
   842a4:	3207      	adds	r2, #7
   842a6:	f022 0207 	bic.w	r2, r2, #7
   842aa:	f102 0108 	add.w	r1, r2, #8
   842ae:	9104      	str	r1, [sp, #16]
   842b0:	e9d2 4500 	ldrd	r4, r5, [r2]
   842b4:	f016 0901 	ands.w	r9, r6, #1
   842b8:	f000 817e 	beq.w	845b8 <_vfiprintf_r+0xa14>
   842bc:	ea54 0205 	orrs.w	r2, r4, r5
   842c0:	f040 822b 	bne.w	8471a <_vfiprintf_r+0xb76>
   842c4:	f04f 0300 	mov.w	r3, #0
   842c8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   842cc:	9b01      	ldr	r3, [sp, #4]
   842ce:	2b00      	cmp	r3, #0
   842d0:	f2c0 82f3 	blt.w	848ba <_vfiprintf_r+0xd16>
   842d4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   842d8:	e581      	b.n	83dde <_vfiprintf_r+0x23a>
   842da:	9a04      	ldr	r2, [sp, #16]
   842dc:	f04f 0100 	mov.w	r1, #0
   842e0:	6813      	ldr	r3, [r2, #0]
   842e2:	2501      	movs	r5, #1
   842e4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   842e8:	4613      	mov	r3, r2
   842ea:	3304      	adds	r3, #4
   842ec:	9406      	str	r4, [sp, #24]
   842ee:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   842f2:	9304      	str	r3, [sp, #16]
   842f4:	9503      	str	r5, [sp, #12]
   842f6:	af10      	add	r7, sp, #64	; 0x40
   842f8:	2300      	movs	r3, #0
   842fa:	9301      	str	r3, [sp, #4]
   842fc:	e582      	b.n	83e04 <_vfiprintf_r+0x260>
   842fe:	f898 3000 	ldrb.w	r3, [r8]
   84302:	2800      	cmp	r0, #0
   84304:	f47f acb5 	bne.w	83c72 <_vfiprintf_r+0xce>
   84308:	2101      	movs	r1, #1
   8430a:	2020      	movs	r0, #32
   8430c:	e4b1      	b.n	83c72 <_vfiprintf_r+0xce>
   8430e:	f046 0601 	orr.w	r6, r6, #1
   84312:	f898 3000 	ldrb.w	r3, [r8]
   84316:	e4ac      	b.n	83c72 <_vfiprintf_r+0xce>
   84318:	9406      	str	r4, [sp, #24]
   8431a:	2900      	cmp	r1, #0
   8431c:	f040 832a 	bne.w	84974 <_vfiprintf_r+0xdd0>
   84320:	06b2      	lsls	r2, r6, #26
   84322:	4892      	ldr	r0, [pc, #584]	; (8456c <_vfiprintf_r+0x9c8>)
   84324:	d4bd      	bmi.n	842a2 <_vfiprintf_r+0x6fe>
   84326:	9904      	ldr	r1, [sp, #16]
   84328:	06f7      	lsls	r7, r6, #27
   8432a:	460a      	mov	r2, r1
   8432c:	f100 819d 	bmi.w	8466a <_vfiprintf_r+0xac6>
   84330:	0675      	lsls	r5, r6, #25
   84332:	f140 819a 	bpl.w	8466a <_vfiprintf_r+0xac6>
   84336:	3204      	adds	r2, #4
   84338:	880c      	ldrh	r4, [r1, #0]
   8433a:	9204      	str	r2, [sp, #16]
   8433c:	2500      	movs	r5, #0
   8433e:	e7b9      	b.n	842b4 <_vfiprintf_r+0x710>
   84340:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   84344:	f898 3000 	ldrb.w	r3, [r8]
   84348:	e493      	b.n	83c72 <_vfiprintf_r+0xce>
   8434a:	f898 3000 	ldrb.w	r3, [r8]
   8434e:	2b6c      	cmp	r3, #108	; 0x6c
   84350:	bf03      	ittte	eq
   84352:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   84356:	f046 0620 	orreq.w	r6, r6, #32
   8435a:	f108 0801 	addeq.w	r8, r8, #1
   8435e:	f046 0610 	orrne.w	r6, r6, #16
   84362:	e486      	b.n	83c72 <_vfiprintf_r+0xce>
   84364:	2900      	cmp	r1, #0
   84366:	f040 8302 	bne.w	8496e <_vfiprintf_r+0xdca>
   8436a:	06b4      	lsls	r4, r6, #26
   8436c:	f140 8220 	bpl.w	847b0 <_vfiprintf_r+0xc0c>
   84370:	9a04      	ldr	r2, [sp, #16]
   84372:	4613      	mov	r3, r2
   84374:	3304      	adds	r3, #4
   84376:	9304      	str	r3, [sp, #16]
   84378:	9b02      	ldr	r3, [sp, #8]
   8437a:	6811      	ldr	r1, [r2, #0]
   8437c:	17dd      	asrs	r5, r3, #31
   8437e:	461a      	mov	r2, r3
   84380:	462b      	mov	r3, r5
   84382:	e9c1 2300 	strd	r2, r3, [r1]
   84386:	e43e      	b.n	83c06 <_vfiprintf_r+0x62>
   84388:	9406      	str	r4, [sp, #24]
   8438a:	2900      	cmp	r1, #0
   8438c:	f43f ae51 	beq.w	84032 <_vfiprintf_r+0x48e>
   84390:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84394:	e64d      	b.n	84032 <_vfiprintf_r+0x48e>
   84396:	9406      	str	r4, [sp, #24]
   84398:	2900      	cmp	r1, #0
   8439a:	f040 82e5 	bne.w	84968 <_vfiprintf_r+0xdc4>
   8439e:	2b00      	cmp	r3, #0
   843a0:	f000 8094 	beq.w	844cc <_vfiprintf_r+0x928>
   843a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   843a8:	f04f 0300 	mov.w	r3, #0
   843ac:	2501      	movs	r5, #1
   843ae:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   843b2:	9503      	str	r5, [sp, #12]
   843b4:	af10      	add	r7, sp, #64	; 0x40
   843b6:	e79f      	b.n	842f8 <_vfiprintf_r+0x754>
   843b8:	aa0d      	add	r2, sp, #52	; 0x34
   843ba:	9900      	ldr	r1, [sp, #0]
   843bc:	4648      	mov	r0, r9
   843be:	9309      	str	r3, [sp, #36]	; 0x24
   843c0:	f7ff fbb4 	bl	83b2c <__sprint_r.part.0>
   843c4:	2800      	cmp	r0, #0
   843c6:	f040 8088 	bne.w	844da <_vfiprintf_r+0x936>
   843ca:	980e      	ldr	r0, [sp, #56]	; 0x38
   843cc:	46d4      	mov	ip, sl
   843ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   843d0:	f100 0e01 	add.w	lr, r0, #1
   843d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   843d6:	e53a      	b.n	83e4e <_vfiprintf_r+0x2aa>
   843d8:	aa0d      	add	r2, sp, #52	; 0x34
   843da:	9900      	ldr	r1, [sp, #0]
   843dc:	9805      	ldr	r0, [sp, #20]
   843de:	f7ff fba5 	bl	83b2c <__sprint_r.part.0>
   843e2:	2800      	cmp	r0, #0
   843e4:	d179      	bne.n	844da <_vfiprintf_r+0x936>
   843e6:	46d3      	mov	fp, sl
   843e8:	980e      	ldr	r0, [sp, #56]	; 0x38
   843ea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   843ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   843f0:	f100 0e01 	add.w	lr, r0, #1
   843f4:	2b00      	cmp	r3, #0
   843f6:	f43f ad59 	beq.w	83eac <_vfiprintf_r+0x308>
   843fa:	3201      	adds	r2, #1
   843fc:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84400:	2301      	movs	r3, #1
   84402:	f1be 0f07 	cmp.w	lr, #7
   84406:	920f      	str	r2, [sp, #60]	; 0x3c
   84408:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8440c:	e88b 000a 	stmia.w	fp, {r1, r3}
   84410:	f340 80c0 	ble.w	84594 <_vfiprintf_r+0x9f0>
   84414:	2a00      	cmp	r2, #0
   84416:	f040 814d 	bne.w	846b4 <_vfiprintf_r+0xb10>
   8441a:	9907      	ldr	r1, [sp, #28]
   8441c:	2900      	cmp	r1, #0
   8441e:	f040 80bf 	bne.w	845a0 <_vfiprintf_r+0x9fc>
   84422:	469e      	mov	lr, r3
   84424:	4610      	mov	r0, r2
   84426:	46d3      	mov	fp, sl
   84428:	9b08      	ldr	r3, [sp, #32]
   8442a:	2b80      	cmp	r3, #128	; 0x80
   8442c:	f43f ad59 	beq.w	83ee2 <_vfiprintf_r+0x33e>
   84430:	9b01      	ldr	r3, [sp, #4]
   84432:	9903      	ldr	r1, [sp, #12]
   84434:	1a5c      	subs	r4, r3, r1
   84436:	2c00      	cmp	r4, #0
   84438:	f77f ad9c 	ble.w	83f74 <_vfiprintf_r+0x3d0>
   8443c:	2c10      	cmp	r4, #16
   8443e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 84570 <_vfiprintf_r+0x9cc>
   84442:	dd25      	ble.n	84490 <_vfiprintf_r+0x8ec>
   84444:	46dc      	mov	ip, fp
   84446:	2310      	movs	r3, #16
   84448:	46c3      	mov	fp, r8
   8444a:	46a8      	mov	r8, r5
   8444c:	464d      	mov	r5, r9
   8444e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84452:	e007      	b.n	84464 <_vfiprintf_r+0x8c0>
   84454:	f100 0e02 	add.w	lr, r0, #2
   84458:	4608      	mov	r0, r1
   8445a:	f10c 0c08 	add.w	ip, ip, #8
   8445e:	3c10      	subs	r4, #16
   84460:	2c10      	cmp	r4, #16
   84462:	dd11      	ble.n	84488 <_vfiprintf_r+0x8e4>
   84464:	1c41      	adds	r1, r0, #1
   84466:	3210      	adds	r2, #16
   84468:	2907      	cmp	r1, #7
   8446a:	920f      	str	r2, [sp, #60]	; 0x3c
   8446c:	f8cc 5000 	str.w	r5, [ip]
   84470:	f8cc 3004 	str.w	r3, [ip, #4]
   84474:	910e      	str	r1, [sp, #56]	; 0x38
   84476:	dded      	ble.n	84454 <_vfiprintf_r+0x8b0>
   84478:	b9d2      	cbnz	r2, 844b0 <_vfiprintf_r+0x90c>
   8447a:	3c10      	subs	r4, #16
   8447c:	2c10      	cmp	r4, #16
   8447e:	f04f 0e01 	mov.w	lr, #1
   84482:	4610      	mov	r0, r2
   84484:	46d4      	mov	ip, sl
   84486:	dced      	bgt.n	84464 <_vfiprintf_r+0x8c0>
   84488:	46a9      	mov	r9, r5
   8448a:	4645      	mov	r5, r8
   8448c:	46d8      	mov	r8, fp
   8448e:	46e3      	mov	fp, ip
   84490:	4422      	add	r2, r4
   84492:	f1be 0f07 	cmp.w	lr, #7
   84496:	920f      	str	r2, [sp, #60]	; 0x3c
   84498:	f8cb 9000 	str.w	r9, [fp]
   8449c:	f8cb 4004 	str.w	r4, [fp, #4]
   844a0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   844a4:	dc2e      	bgt.n	84504 <_vfiprintf_r+0x960>
   844a6:	f10b 0b08 	add.w	fp, fp, #8
   844aa:	f10e 0e01 	add.w	lr, lr, #1
   844ae:	e561      	b.n	83f74 <_vfiprintf_r+0x3d0>
   844b0:	aa0d      	add	r2, sp, #52	; 0x34
   844b2:	9900      	ldr	r1, [sp, #0]
   844b4:	4648      	mov	r0, r9
   844b6:	9301      	str	r3, [sp, #4]
   844b8:	f7ff fb38 	bl	83b2c <__sprint_r.part.0>
   844bc:	b968      	cbnz	r0, 844da <_vfiprintf_r+0x936>
   844be:	980e      	ldr	r0, [sp, #56]	; 0x38
   844c0:	46d4      	mov	ip, sl
   844c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   844c4:	f100 0e01 	add.w	lr, r0, #1
   844c8:	9b01      	ldr	r3, [sp, #4]
   844ca:	e7c8      	b.n	8445e <_vfiprintf_r+0x8ba>
   844cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   844ce:	b123      	cbz	r3, 844da <_vfiprintf_r+0x936>
   844d0:	9805      	ldr	r0, [sp, #20]
   844d2:	aa0d      	add	r2, sp, #52	; 0x34
   844d4:	9900      	ldr	r1, [sp, #0]
   844d6:	f7ff fb29 	bl	83b2c <__sprint_r.part.0>
   844da:	9b00      	ldr	r3, [sp, #0]
   844dc:	899b      	ldrh	r3, [r3, #12]
   844de:	065a      	lsls	r2, r3, #25
   844e0:	f100 817b 	bmi.w	847da <_vfiprintf_r+0xc36>
   844e4:	9802      	ldr	r0, [sp, #8]
   844e6:	b02b      	add	sp, #172	; 0xac
   844e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844ec:	aa0d      	add	r2, sp, #52	; 0x34
   844ee:	9900      	ldr	r1, [sp, #0]
   844f0:	4648      	mov	r0, r9
   844f2:	f7ff fb1b 	bl	83b2c <__sprint_r.part.0>
   844f6:	2800      	cmp	r0, #0
   844f8:	d1ef      	bne.n	844da <_vfiprintf_r+0x936>
   844fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   844fc:	46d3      	mov	fp, sl
   844fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84500:	1c48      	adds	r0, r1, #1
   84502:	e55e      	b.n	83fc2 <_vfiprintf_r+0x41e>
   84504:	2a00      	cmp	r2, #0
   84506:	f040 80fa 	bne.w	846fe <_vfiprintf_r+0xb5a>
   8450a:	46d3      	mov	fp, sl
   8450c:	9a03      	ldr	r2, [sp, #12]
   8450e:	2301      	movs	r3, #1
   84510:	921b      	str	r2, [sp, #108]	; 0x6c
   84512:	920f      	str	r2, [sp, #60]	; 0x3c
   84514:	971a      	str	r7, [sp, #104]	; 0x68
   84516:	930e      	str	r3, [sp, #56]	; 0x38
   84518:	f10b 0b08 	add.w	fp, fp, #8
   8451c:	0771      	lsls	r1, r6, #29
   8451e:	d504      	bpl.n	8452a <_vfiprintf_r+0x986>
   84520:	9b06      	ldr	r3, [sp, #24]
   84522:	1b5c      	subs	r4, r3, r5
   84524:	2c00      	cmp	r4, #0
   84526:	f73f ad3d 	bgt.w	83fa4 <_vfiprintf_r+0x400>
   8452a:	9b02      	ldr	r3, [sp, #8]
   8452c:	9906      	ldr	r1, [sp, #24]
   8452e:	42a9      	cmp	r1, r5
   84530:	bfac      	ite	ge
   84532:	185b      	addge	r3, r3, r1
   84534:	195b      	addlt	r3, r3, r5
   84536:	9302      	str	r3, [sp, #8]
   84538:	2a00      	cmp	r2, #0
   8453a:	f040 80ad 	bne.w	84698 <_vfiprintf_r+0xaf4>
   8453e:	2300      	movs	r3, #0
   84540:	930e      	str	r3, [sp, #56]	; 0x38
   84542:	46d3      	mov	fp, sl
   84544:	f7ff bb5f 	b.w	83c06 <_vfiprintf_r+0x62>
   84548:	aa0d      	add	r2, sp, #52	; 0x34
   8454a:	9900      	ldr	r1, [sp, #0]
   8454c:	4648      	mov	r0, r9
   8454e:	9307      	str	r3, [sp, #28]
   84550:	f7ff faec 	bl	83b2c <__sprint_r.part.0>
   84554:	2800      	cmp	r0, #0
   84556:	d1c0      	bne.n	844da <_vfiprintf_r+0x936>
   84558:	980e      	ldr	r0, [sp, #56]	; 0x38
   8455a:	46d6      	mov	lr, sl
   8455c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8455e:	f100 0c01 	add.w	ip, r0, #1
   84562:	9b07      	ldr	r3, [sp, #28]
   84564:	e4d4      	b.n	83f10 <_vfiprintf_r+0x36c>
   84566:	bf00      	nop
   84568:	00087a50 	.word	0x00087a50
   8456c:	00087a64 	.word	0x00087a64
   84570:	00087a40 	.word	0x00087a40
   84574:	2a00      	cmp	r2, #0
   84576:	f47f af2f 	bne.w	843d8 <_vfiprintf_r+0x834>
   8457a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8457e:	2b00      	cmp	r3, #0
   84580:	f000 80f3 	beq.w	8476a <_vfiprintf_r+0xbc6>
   84584:	2301      	movs	r3, #1
   84586:	461a      	mov	r2, r3
   84588:	469e      	mov	lr, r3
   8458a:	46d3      	mov	fp, sl
   8458c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84590:	931b      	str	r3, [sp, #108]	; 0x6c
   84592:	911a      	str	r1, [sp, #104]	; 0x68
   84594:	4670      	mov	r0, lr
   84596:	f10b 0b08 	add.w	fp, fp, #8
   8459a:	f10e 0e01 	add.w	lr, lr, #1
   8459e:	e485      	b.n	83eac <_vfiprintf_r+0x308>
   845a0:	469e      	mov	lr, r3
   845a2:	46d3      	mov	fp, sl
   845a4:	a90c      	add	r1, sp, #48	; 0x30
   845a6:	2202      	movs	r2, #2
   845a8:	911a      	str	r1, [sp, #104]	; 0x68
   845aa:	921b      	str	r2, [sp, #108]	; 0x6c
   845ac:	4670      	mov	r0, lr
   845ae:	f10b 0b08 	add.w	fp, fp, #8
   845b2:	f10e 0e01 	add.w	lr, lr, #1
   845b6:	e737      	b.n	84428 <_vfiprintf_r+0x884>
   845b8:	9b01      	ldr	r3, [sp, #4]
   845ba:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   845be:	2b00      	cmp	r3, #0
   845c0:	f2c0 811b 	blt.w	847fa <_vfiprintf_r+0xc56>
   845c4:	ea54 0305 	orrs.w	r3, r4, r5
   845c8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   845cc:	f43f ac07 	beq.w	83dde <_vfiprintf_r+0x23a>
   845d0:	4657      	mov	r7, sl
   845d2:	0923      	lsrs	r3, r4, #4
   845d4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   845d8:	0929      	lsrs	r1, r5, #4
   845da:	f004 020f 	and.w	r2, r4, #15
   845de:	460d      	mov	r5, r1
   845e0:	461c      	mov	r4, r3
   845e2:	5c83      	ldrb	r3, [r0, r2]
   845e4:	f807 3d01 	strb.w	r3, [r7, #-1]!
   845e8:	ea54 0305 	orrs.w	r3, r4, r5
   845ec:	d1f1      	bne.n	845d2 <_vfiprintf_r+0xa2e>
   845ee:	ebc7 030a 	rsb	r3, r7, sl
   845f2:	9303      	str	r3, [sp, #12]
   845f4:	f7ff bbfc 	b.w	83df0 <_vfiprintf_r+0x24c>
   845f8:	aa0d      	add	r2, sp, #52	; 0x34
   845fa:	9900      	ldr	r1, [sp, #0]
   845fc:	9805      	ldr	r0, [sp, #20]
   845fe:	f7ff fa95 	bl	83b2c <__sprint_r.part.0>
   84602:	2800      	cmp	r0, #0
   84604:	f47f af69 	bne.w	844da <_vfiprintf_r+0x936>
   84608:	46d3      	mov	fp, sl
   8460a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8460c:	e786      	b.n	8451c <_vfiprintf_r+0x978>
   8460e:	f016 0210 	ands.w	r2, r6, #16
   84612:	f000 80b5 	beq.w	84780 <_vfiprintf_r+0xbdc>
   84616:	9904      	ldr	r1, [sp, #16]
   84618:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8461c:	460a      	mov	r2, r1
   8461e:	680c      	ldr	r4, [r1, #0]
   84620:	9901      	ldr	r1, [sp, #4]
   84622:	3204      	adds	r2, #4
   84624:	2900      	cmp	r1, #0
   84626:	f04f 0500 	mov.w	r5, #0
   8462a:	f2c0 8152 	blt.w	848d2 <_vfiprintf_r+0xd2e>
   8462e:	ea54 0105 	orrs.w	r1, r4, r5
   84632:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84636:	9204      	str	r2, [sp, #16]
   84638:	f43f ad5d 	beq.w	840f6 <_vfiprintf_r+0x552>
   8463c:	4699      	mov	r9, r3
   8463e:	e562      	b.n	84106 <_vfiprintf_r+0x562>
   84640:	9a04      	ldr	r2, [sp, #16]
   84642:	06f7      	lsls	r7, r6, #27
   84644:	4613      	mov	r3, r2
   84646:	d409      	bmi.n	8465c <_vfiprintf_r+0xab8>
   84648:	0675      	lsls	r5, r6, #25
   8464a:	d507      	bpl.n	8465c <_vfiprintf_r+0xab8>
   8464c:	f9b2 4000 	ldrsh.w	r4, [r2]
   84650:	3304      	adds	r3, #4
   84652:	17e5      	asrs	r5, r4, #31
   84654:	9304      	str	r3, [sp, #16]
   84656:	4622      	mov	r2, r4
   84658:	462b      	mov	r3, r5
   8465a:	e4f7      	b.n	8404c <_vfiprintf_r+0x4a8>
   8465c:	681c      	ldr	r4, [r3, #0]
   8465e:	3304      	adds	r3, #4
   84660:	17e5      	asrs	r5, r4, #31
   84662:	9304      	str	r3, [sp, #16]
   84664:	4622      	mov	r2, r4
   84666:	462b      	mov	r3, r5
   84668:	e4f0      	b.n	8404c <_vfiprintf_r+0x4a8>
   8466a:	6814      	ldr	r4, [r2, #0]
   8466c:	3204      	adds	r2, #4
   8466e:	9204      	str	r2, [sp, #16]
   84670:	2500      	movs	r5, #0
   84672:	e61f      	b.n	842b4 <_vfiprintf_r+0x710>
   84674:	f04f 0900 	mov.w	r9, #0
   84678:	ea54 0305 	orrs.w	r3, r4, r5
   8467c:	f47f acf7 	bne.w	8406e <_vfiprintf_r+0x4ca>
   84680:	e5d8      	b.n	84234 <_vfiprintf_r+0x690>
   84682:	aa0d      	add	r2, sp, #52	; 0x34
   84684:	9900      	ldr	r1, [sp, #0]
   84686:	9805      	ldr	r0, [sp, #20]
   84688:	f7ff fa50 	bl	83b2c <__sprint_r.part.0>
   8468c:	2800      	cmp	r0, #0
   8468e:	f47f af24 	bne.w	844da <_vfiprintf_r+0x936>
   84692:	46d3      	mov	fp, sl
   84694:	f7ff bb51 	b.w	83d3a <_vfiprintf_r+0x196>
   84698:	aa0d      	add	r2, sp, #52	; 0x34
   8469a:	9900      	ldr	r1, [sp, #0]
   8469c:	9805      	ldr	r0, [sp, #20]
   8469e:	f7ff fa45 	bl	83b2c <__sprint_r.part.0>
   846a2:	2800      	cmp	r0, #0
   846a4:	f43f af4b 	beq.w	8453e <_vfiprintf_r+0x99a>
   846a8:	e717      	b.n	844da <_vfiprintf_r+0x936>
   846aa:	2400      	movs	r4, #0
   846ac:	2500      	movs	r5, #0
   846ae:	f04f 0900 	mov.w	r9, #0
   846b2:	e78d      	b.n	845d0 <_vfiprintf_r+0xa2c>
   846b4:	aa0d      	add	r2, sp, #52	; 0x34
   846b6:	9900      	ldr	r1, [sp, #0]
   846b8:	9805      	ldr	r0, [sp, #20]
   846ba:	f7ff fa37 	bl	83b2c <__sprint_r.part.0>
   846be:	2800      	cmp	r0, #0
   846c0:	f47f af0b 	bne.w	844da <_vfiprintf_r+0x936>
   846c4:	980e      	ldr	r0, [sp, #56]	; 0x38
   846c6:	46d3      	mov	fp, sl
   846c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846ca:	f100 0e01 	add.w	lr, r0, #1
   846ce:	f7ff bbed 	b.w	83eac <_vfiprintf_r+0x308>
   846d2:	aa0d      	add	r2, sp, #52	; 0x34
   846d4:	9900      	ldr	r1, [sp, #0]
   846d6:	9805      	ldr	r0, [sp, #20]
   846d8:	f7ff fa28 	bl	83b2c <__sprint_r.part.0>
   846dc:	2800      	cmp	r0, #0
   846de:	f47f aefc 	bne.w	844da <_vfiprintf_r+0x936>
   846e2:	980e      	ldr	r0, [sp, #56]	; 0x38
   846e4:	46d3      	mov	fp, sl
   846e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   846e8:	f100 0e01 	add.w	lr, r0, #1
   846ec:	e69c      	b.n	84428 <_vfiprintf_r+0x884>
   846ee:	2a00      	cmp	r2, #0
   846f0:	f040 80c8 	bne.w	84884 <_vfiprintf_r+0xce0>
   846f4:	f04f 0e01 	mov.w	lr, #1
   846f8:	4610      	mov	r0, r2
   846fa:	46d3      	mov	fp, sl
   846fc:	e698      	b.n	84430 <_vfiprintf_r+0x88c>
   846fe:	aa0d      	add	r2, sp, #52	; 0x34
   84700:	9900      	ldr	r1, [sp, #0]
   84702:	9805      	ldr	r0, [sp, #20]
   84704:	f7ff fa12 	bl	83b2c <__sprint_r.part.0>
   84708:	2800      	cmp	r0, #0
   8470a:	f47f aee6 	bne.w	844da <_vfiprintf_r+0x936>
   8470e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84710:	46d3      	mov	fp, sl
   84712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84714:	f103 0e01 	add.w	lr, r3, #1
   84718:	e42c      	b.n	83f74 <_vfiprintf_r+0x3d0>
   8471a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8471e:	f04f 0300 	mov.w	r3, #0
   84722:	2230      	movs	r2, #48	; 0x30
   84724:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84728:	9a01      	ldr	r2, [sp, #4]
   8472a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8472e:	2a00      	cmp	r2, #0
   84730:	f046 0302 	orr.w	r3, r6, #2
   84734:	f2c0 80bb 	blt.w	848ae <_vfiprintf_r+0xd0a>
   84738:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8473c:	f046 0602 	orr.w	r6, r6, #2
   84740:	f04f 0900 	mov.w	r9, #0
   84744:	e744      	b.n	845d0 <_vfiprintf_r+0xa2c>
   84746:	f04f 0900 	mov.w	r9, #0
   8474a:	488c      	ldr	r0, [pc, #560]	; (8497c <_vfiprintf_r+0xdd8>)
   8474c:	e740      	b.n	845d0 <_vfiprintf_r+0xa2c>
   8474e:	9b01      	ldr	r3, [sp, #4]
   84750:	4264      	negs	r4, r4
   84752:	f04f 092d 	mov.w	r9, #45	; 0x2d
   84756:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8475a:	2b00      	cmp	r3, #0
   8475c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84760:	f6ff ac85 	blt.w	8406e <_vfiprintf_r+0x4ca>
   84764:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84768:	e481      	b.n	8406e <_vfiprintf_r+0x4ca>
   8476a:	9b07      	ldr	r3, [sp, #28]
   8476c:	2b00      	cmp	r3, #0
   8476e:	d063      	beq.n	84838 <_vfiprintf_r+0xc94>
   84770:	ab0c      	add	r3, sp, #48	; 0x30
   84772:	2202      	movs	r2, #2
   84774:	931a      	str	r3, [sp, #104]	; 0x68
   84776:	921b      	str	r2, [sp, #108]	; 0x6c
   84778:	f04f 0e01 	mov.w	lr, #1
   8477c:	46d3      	mov	fp, sl
   8477e:	e715      	b.n	845ac <_vfiprintf_r+0xa08>
   84780:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84784:	d03b      	beq.n	847fe <_vfiprintf_r+0xc5a>
   84786:	9904      	ldr	r1, [sp, #16]
   84788:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8478c:	460b      	mov	r3, r1
   8478e:	880c      	ldrh	r4, [r1, #0]
   84790:	9901      	ldr	r1, [sp, #4]
   84792:	3304      	adds	r3, #4
   84794:	2900      	cmp	r1, #0
   84796:	f04f 0500 	mov.w	r5, #0
   8479a:	f2c0 808c 	blt.w	848b6 <_vfiprintf_r+0xd12>
   8479e:	ea54 0105 	orrs.w	r1, r4, r5
   847a2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   847a6:	9304      	str	r3, [sp, #16]
   847a8:	f43f aca5 	beq.w	840f6 <_vfiprintf_r+0x552>
   847ac:	4691      	mov	r9, r2
   847ae:	e4aa      	b.n	84106 <_vfiprintf_r+0x562>
   847b0:	06f0      	lsls	r0, r6, #27
   847b2:	d40a      	bmi.n	847ca <_vfiprintf_r+0xc26>
   847b4:	0671      	lsls	r1, r6, #25
   847b6:	d508      	bpl.n	847ca <_vfiprintf_r+0xc26>
   847b8:	9a04      	ldr	r2, [sp, #16]
   847ba:	6813      	ldr	r3, [r2, #0]
   847bc:	3204      	adds	r2, #4
   847be:	9204      	str	r2, [sp, #16]
   847c0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   847c4:	801a      	strh	r2, [r3, #0]
   847c6:	f7ff ba1e 	b.w	83c06 <_vfiprintf_r+0x62>
   847ca:	9a04      	ldr	r2, [sp, #16]
   847cc:	6813      	ldr	r3, [r2, #0]
   847ce:	3204      	adds	r2, #4
   847d0:	9204      	str	r2, [sp, #16]
   847d2:	9a02      	ldr	r2, [sp, #8]
   847d4:	601a      	str	r2, [r3, #0]
   847d6:	f7ff ba16 	b.w	83c06 <_vfiprintf_r+0x62>
   847da:	f04f 30ff 	mov.w	r0, #4294967295
   847de:	f7ff bac9 	b.w	83d74 <_vfiprintf_r+0x1d0>
   847e2:	4616      	mov	r6, r2
   847e4:	4865      	ldr	r0, [pc, #404]	; (8497c <_vfiprintf_r+0xdd8>)
   847e6:	ea54 0205 	orrs.w	r2, r4, r5
   847ea:	9304      	str	r3, [sp, #16]
   847ec:	f04f 0900 	mov.w	r9, #0
   847f0:	f47f aeee 	bne.w	845d0 <_vfiprintf_r+0xa2c>
   847f4:	2400      	movs	r4, #0
   847f6:	2500      	movs	r5, #0
   847f8:	e6ea      	b.n	845d0 <_vfiprintf_r+0xa2c>
   847fa:	9b04      	ldr	r3, [sp, #16]
   847fc:	e7f3      	b.n	847e6 <_vfiprintf_r+0xc42>
   847fe:	9a04      	ldr	r2, [sp, #16]
   84800:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84804:	4613      	mov	r3, r2
   84806:	6814      	ldr	r4, [r2, #0]
   84808:	9a01      	ldr	r2, [sp, #4]
   8480a:	3304      	adds	r3, #4
   8480c:	2a00      	cmp	r2, #0
   8480e:	f04f 0500 	mov.w	r5, #0
   84812:	db50      	blt.n	848b6 <_vfiprintf_r+0xd12>
   84814:	ea54 0205 	orrs.w	r2, r4, r5
   84818:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8481c:	9304      	str	r3, [sp, #16]
   8481e:	f47f ac72 	bne.w	84106 <_vfiprintf_r+0x562>
   84822:	e468      	b.n	840f6 <_vfiprintf_r+0x552>
   84824:	aa0d      	add	r2, sp, #52	; 0x34
   84826:	9900      	ldr	r1, [sp, #0]
   84828:	9805      	ldr	r0, [sp, #20]
   8482a:	f7ff f97f 	bl	83b2c <__sprint_r.part.0>
   8482e:	2800      	cmp	r0, #0
   84830:	f47f ae53 	bne.w	844da <_vfiprintf_r+0x936>
   84834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84836:	e678      	b.n	8452a <_vfiprintf_r+0x986>
   84838:	4610      	mov	r0, r2
   8483a:	f04f 0e01 	mov.w	lr, #1
   8483e:	46d3      	mov	fp, sl
   84840:	e5f6      	b.n	84430 <_vfiprintf_r+0x88c>
   84842:	9904      	ldr	r1, [sp, #16]
   84844:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84848:	460a      	mov	r2, r1
   8484a:	880c      	ldrh	r4, [r1, #0]
   8484c:	9901      	ldr	r1, [sp, #4]
   8484e:	3204      	adds	r2, #4
   84850:	2900      	cmp	r1, #0
   84852:	f04f 0500 	mov.w	r5, #0
   84856:	db55      	blt.n	84904 <_vfiprintf_r+0xd60>
   84858:	ea54 0105 	orrs.w	r1, r4, r5
   8485c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84860:	9204      	str	r2, [sp, #16]
   84862:	4699      	mov	r9, r3
   84864:	f47f ac03 	bne.w	8406e <_vfiprintf_r+0x4ca>
   84868:	e4df      	b.n	8422a <_vfiprintf_r+0x686>
   8486a:	9304      	str	r3, [sp, #16]
   8486c:	e704      	b.n	84678 <_vfiprintf_r+0xad4>
   8486e:	4638      	mov	r0, r7
   84870:	9404      	str	r4, [sp, #16]
   84872:	f7ff f8f9 	bl	83a68 <strlen>
   84876:	2300      	movs	r3, #0
   84878:	9003      	str	r0, [sp, #12]
   8487a:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8487e:	9301      	str	r3, [sp, #4]
   84880:	f7ff bab6 	b.w	83df0 <_vfiprintf_r+0x24c>
   84884:	aa0d      	add	r2, sp, #52	; 0x34
   84886:	9900      	ldr	r1, [sp, #0]
   84888:	9805      	ldr	r0, [sp, #20]
   8488a:	f7ff f94f 	bl	83b2c <__sprint_r.part.0>
   8488e:	2800      	cmp	r0, #0
   84890:	f47f ae23 	bne.w	844da <_vfiprintf_r+0x936>
   84894:	980e      	ldr	r0, [sp, #56]	; 0x38
   84896:	46d3      	mov	fp, sl
   84898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8489a:	f100 0e01 	add.w	lr, r0, #1
   8489e:	e5c7      	b.n	84430 <_vfiprintf_r+0x88c>
   848a0:	980e      	ldr	r0, [sp, #56]	; 0x38
   848a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848a4:	3001      	adds	r0, #1
   848a6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 84984 <_vfiprintf_r+0xde0>
   848aa:	f7ff baec 	b.w	83e86 <_vfiprintf_r+0x2e2>
   848ae:	461e      	mov	r6, r3
   848b0:	f04f 0900 	mov.w	r9, #0
   848b4:	e68c      	b.n	845d0 <_vfiprintf_r+0xa2c>
   848b6:	9304      	str	r3, [sp, #16]
   848b8:	e423      	b.n	84102 <_vfiprintf_r+0x55e>
   848ba:	f04f 0900 	mov.w	r9, #0
   848be:	e799      	b.n	847f4 <_vfiprintf_r+0xc50>
   848c0:	2b06      	cmp	r3, #6
   848c2:	bf28      	it	cs
   848c4:	2306      	movcs	r3, #6
   848c6:	9303      	str	r3, [sp, #12]
   848c8:	9404      	str	r4, [sp, #16]
   848ca:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   848ce:	4f2c      	ldr	r7, [pc, #176]	; (84980 <_vfiprintf_r+0xddc>)
   848d0:	e512      	b.n	842f8 <_vfiprintf_r+0x754>
   848d2:	9204      	str	r2, [sp, #16]
   848d4:	e415      	b.n	84102 <_vfiprintf_r+0x55e>
   848d6:	980e      	ldr	r0, [sp, #56]	; 0x38
   848d8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 84984 <_vfiprintf_r+0xde0>
   848dc:	3001      	adds	r0, #1
   848de:	f7ff bb88 	b.w	83ff2 <_vfiprintf_r+0x44e>
   848e2:	46f4      	mov	ip, lr
   848e4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 84988 <_vfiprintf_r+0xde4>
   848e8:	f7ff bb2d 	b.w	83f46 <_vfiprintf_r+0x3a2>
   848ec:	2200      	movs	r2, #0
   848ee:	9201      	str	r2, [sp, #4]
   848f0:	f7ff b9c1 	b.w	83c76 <_vfiprintf_r+0xd2>
   848f4:	9b01      	ldr	r3, [sp, #4]
   848f6:	9404      	str	r4, [sp, #16]
   848f8:	9303      	str	r3, [sp, #12]
   848fa:	9001      	str	r0, [sp, #4]
   848fc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84900:	f7ff ba76 	b.w	83df0 <_vfiprintf_r+0x24c>
   84904:	9204      	str	r2, [sp, #16]
   84906:	4699      	mov	r9, r3
   84908:	e6b6      	b.n	84678 <_vfiprintf_r+0xad4>
   8490a:	9a04      	ldr	r2, [sp, #16]
   8490c:	6813      	ldr	r3, [r2, #0]
   8490e:	3204      	adds	r2, #4
   84910:	2b00      	cmp	r3, #0
   84912:	9301      	str	r3, [sp, #4]
   84914:	9204      	str	r2, [sp, #16]
   84916:	f898 3001 	ldrb.w	r3, [r8, #1]
   8491a:	46a8      	mov	r8, r5
   8491c:	f6bf a9a9 	bge.w	83c72 <_vfiprintf_r+0xce>
   84920:	f04f 32ff 	mov.w	r2, #4294967295
   84924:	9201      	str	r2, [sp, #4]
   84926:	f7ff b9a4 	b.w	83c72 <_vfiprintf_r+0xce>
   8492a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8492e:	e45f      	b.n	841f0 <_vfiprintf_r+0x64c>
   84930:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84934:	f7ff bbc4 	b.w	840c0 <_vfiprintf_r+0x51c>
   84938:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8493c:	f7ff bb77 	b.w	8402e <_vfiprintf_r+0x48a>
   84940:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84944:	e487      	b.n	84256 <_vfiprintf_r+0x6b2>
   84946:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8494a:	e4a7      	b.n	8429c <_vfiprintf_r+0x6f8>
   8494c:	4699      	mov	r9, r3
   8494e:	07f3      	lsls	r3, r6, #31
   84950:	d505      	bpl.n	8495e <_vfiprintf_r+0xdba>
   84952:	af2a      	add	r7, sp, #168	; 0xa8
   84954:	2330      	movs	r3, #48	; 0x30
   84956:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8495a:	f7ff bba2 	b.w	840a2 <_vfiprintf_r+0x4fe>
   8495e:	9b01      	ldr	r3, [sp, #4]
   84960:	4657      	mov	r7, sl
   84962:	9303      	str	r3, [sp, #12]
   84964:	f7ff ba44 	b.w	83df0 <_vfiprintf_r+0x24c>
   84968:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8496c:	e517      	b.n	8439e <_vfiprintf_r+0x7fa>
   8496e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84972:	e4fa      	b.n	8436a <_vfiprintf_r+0x7c6>
   84974:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84978:	e4d2      	b.n	84320 <_vfiprintf_r+0x77c>
   8497a:	bf00      	nop
   8497c:	00087a64 	.word	0x00087a64
   84980:	00087a78 	.word	0x00087a78
   84984:	00087a80 	.word	0x00087a80
   84988:	00087a40 	.word	0x00087a40

0008498c <__sbprintf>:
   8498c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8498e:	460c      	mov	r4, r1
   84990:	8989      	ldrh	r1, [r1, #12]
   84992:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84996:	6e65      	ldr	r5, [r4, #100]	; 0x64
   84998:	f021 0102 	bic.w	r1, r1, #2
   8499c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8499e:	f8ad 100c 	strh.w	r1, [sp, #12]
   849a2:	69e1      	ldr	r1, [r4, #28]
   849a4:	89e7      	ldrh	r7, [r4, #14]
   849a6:	9519      	str	r5, [sp, #100]	; 0x64
   849a8:	2500      	movs	r5, #0
   849aa:	9107      	str	r1, [sp, #28]
   849ac:	9609      	str	r6, [sp, #36]	; 0x24
   849ae:	9506      	str	r5, [sp, #24]
   849b0:	ae1a      	add	r6, sp, #104	; 0x68
   849b2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   849b6:	4669      	mov	r1, sp
   849b8:	9600      	str	r6, [sp, #0]
   849ba:	9604      	str	r6, [sp, #16]
   849bc:	9502      	str	r5, [sp, #8]
   849be:	9505      	str	r5, [sp, #20]
   849c0:	f8ad 700e 	strh.w	r7, [sp, #14]
   849c4:	4606      	mov	r6, r0
   849c6:	f7ff f8ed 	bl	83ba4 <_vfiprintf_r>
   849ca:	1e05      	subs	r5, r0, #0
   849cc:	db07      	blt.n	849de <__sbprintf+0x52>
   849ce:	4630      	mov	r0, r6
   849d0:	4669      	mov	r1, sp
   849d2:	f000 f929 	bl	84c28 <_fflush_r>
   849d6:	2800      	cmp	r0, #0
   849d8:	bf18      	it	ne
   849da:	f04f 35ff 	movne.w	r5, #4294967295
   849de:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   849e2:	065b      	lsls	r3, r3, #25
   849e4:	d503      	bpl.n	849ee <__sbprintf+0x62>
   849e6:	89a3      	ldrh	r3, [r4, #12]
   849e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   849ec:	81a3      	strh	r3, [r4, #12]
   849ee:	4628      	mov	r0, r5
   849f0:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   849f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   849f6:	bf00      	nop

000849f8 <__swsetup_r>:
   849f8:	b538      	push	{r3, r4, r5, lr}
   849fa:	4b30      	ldr	r3, [pc, #192]	; (84abc <__swsetup_r+0xc4>)
   849fc:	4605      	mov	r5, r0
   849fe:	6818      	ldr	r0, [r3, #0]
   84a00:	460c      	mov	r4, r1
   84a02:	b110      	cbz	r0, 84a0a <__swsetup_r+0x12>
   84a04:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84a06:	2b00      	cmp	r3, #0
   84a08:	d038      	beq.n	84a7c <__swsetup_r+0x84>
   84a0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84a0e:	b293      	uxth	r3, r2
   84a10:	0718      	lsls	r0, r3, #28
   84a12:	d50c      	bpl.n	84a2e <__swsetup_r+0x36>
   84a14:	6920      	ldr	r0, [r4, #16]
   84a16:	b1a8      	cbz	r0, 84a44 <__swsetup_r+0x4c>
   84a18:	f013 0201 	ands.w	r2, r3, #1
   84a1c:	d01e      	beq.n	84a5c <__swsetup_r+0x64>
   84a1e:	6963      	ldr	r3, [r4, #20]
   84a20:	2200      	movs	r2, #0
   84a22:	425b      	negs	r3, r3
   84a24:	61a3      	str	r3, [r4, #24]
   84a26:	60a2      	str	r2, [r4, #8]
   84a28:	b1f0      	cbz	r0, 84a68 <__swsetup_r+0x70>
   84a2a:	2000      	movs	r0, #0
   84a2c:	bd38      	pop	{r3, r4, r5, pc}
   84a2e:	06d9      	lsls	r1, r3, #27
   84a30:	d53b      	bpl.n	84aaa <__swsetup_r+0xb2>
   84a32:	0758      	lsls	r0, r3, #29
   84a34:	d425      	bmi.n	84a82 <__swsetup_r+0x8a>
   84a36:	6920      	ldr	r0, [r4, #16]
   84a38:	f042 0308 	orr.w	r3, r2, #8
   84a3c:	81a3      	strh	r3, [r4, #12]
   84a3e:	b29b      	uxth	r3, r3
   84a40:	2800      	cmp	r0, #0
   84a42:	d1e9      	bne.n	84a18 <__swsetup_r+0x20>
   84a44:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84a48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84a4c:	d0e4      	beq.n	84a18 <__swsetup_r+0x20>
   84a4e:	4628      	mov	r0, r5
   84a50:	4621      	mov	r1, r4
   84a52:	f000 fd13 	bl	8547c <__smakebuf_r>
   84a56:	89a3      	ldrh	r3, [r4, #12]
   84a58:	6920      	ldr	r0, [r4, #16]
   84a5a:	e7dd      	b.n	84a18 <__swsetup_r+0x20>
   84a5c:	0799      	lsls	r1, r3, #30
   84a5e:	bf58      	it	pl
   84a60:	6962      	ldrpl	r2, [r4, #20]
   84a62:	60a2      	str	r2, [r4, #8]
   84a64:	2800      	cmp	r0, #0
   84a66:	d1e0      	bne.n	84a2a <__swsetup_r+0x32>
   84a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84a6c:	061a      	lsls	r2, r3, #24
   84a6e:	d5dd      	bpl.n	84a2c <__swsetup_r+0x34>
   84a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84a74:	81a3      	strh	r3, [r4, #12]
   84a76:	f04f 30ff 	mov.w	r0, #4294967295
   84a7a:	bd38      	pop	{r3, r4, r5, pc}
   84a7c:	f000 f968 	bl	84d50 <__sinit>
   84a80:	e7c3      	b.n	84a0a <__swsetup_r+0x12>
   84a82:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84a84:	b151      	cbz	r1, 84a9c <__swsetup_r+0xa4>
   84a86:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84a8a:	4299      	cmp	r1, r3
   84a8c:	d004      	beq.n	84a98 <__swsetup_r+0xa0>
   84a8e:	4628      	mov	r0, r5
   84a90:	f000 fa26 	bl	84ee0 <_free_r>
   84a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84a98:	2300      	movs	r3, #0
   84a9a:	6323      	str	r3, [r4, #48]	; 0x30
   84a9c:	6920      	ldr	r0, [r4, #16]
   84a9e:	2300      	movs	r3, #0
   84aa0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84aa4:	e884 0009 	stmia.w	r4, {r0, r3}
   84aa8:	e7c6      	b.n	84a38 <__swsetup_r+0x40>
   84aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84aae:	2309      	movs	r3, #9
   84ab0:	602b      	str	r3, [r5, #0]
   84ab2:	f04f 30ff 	mov.w	r0, #4294967295
   84ab6:	81a2      	strh	r2, [r4, #12]
   84ab8:	bd38      	pop	{r3, r4, r5, pc}
   84aba:	bf00      	nop
   84abc:	20070570 	.word	0x20070570

00084ac0 <register_fini>:
   84ac0:	4b02      	ldr	r3, [pc, #8]	; (84acc <register_fini+0xc>)
   84ac2:	b113      	cbz	r3, 84aca <register_fini+0xa>
   84ac4:	4802      	ldr	r0, [pc, #8]	; (84ad0 <register_fini+0x10>)
   84ac6:	f000 b805 	b.w	84ad4 <atexit>
   84aca:	4770      	bx	lr
   84acc:	00000000 	.word	0x00000000
   84ad0:	00084d65 	.word	0x00084d65

00084ad4 <atexit>:
   84ad4:	2300      	movs	r3, #0
   84ad6:	4601      	mov	r1, r0
   84ad8:	461a      	mov	r2, r3
   84ada:	4618      	mov	r0, r3
   84adc:	f001 bb58 	b.w	86190 <__register_exitproc>

00084ae0 <__sflush_r>:
   84ae0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ae8:	b29a      	uxth	r2, r3
   84aea:	460d      	mov	r5, r1
   84aec:	0711      	lsls	r1, r2, #28
   84aee:	4680      	mov	r8, r0
   84af0:	d43c      	bmi.n	84b6c <__sflush_r+0x8c>
   84af2:	686a      	ldr	r2, [r5, #4]
   84af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84af8:	2a00      	cmp	r2, #0
   84afa:	81ab      	strh	r3, [r5, #12]
   84afc:	dd73      	ble.n	84be6 <__sflush_r+0x106>
   84afe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84b00:	2c00      	cmp	r4, #0
   84b02:	d04b      	beq.n	84b9c <__sflush_r+0xbc>
   84b04:	b29b      	uxth	r3, r3
   84b06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84b0a:	2100      	movs	r1, #0
   84b0c:	b292      	uxth	r2, r2
   84b0e:	f8d8 6000 	ldr.w	r6, [r8]
   84b12:	f8c8 1000 	str.w	r1, [r8]
   84b16:	2a00      	cmp	r2, #0
   84b18:	d069      	beq.n	84bee <__sflush_r+0x10e>
   84b1a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84b1c:	075f      	lsls	r7, r3, #29
   84b1e:	d505      	bpl.n	84b2c <__sflush_r+0x4c>
   84b20:	6869      	ldr	r1, [r5, #4]
   84b22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84b24:	1a52      	subs	r2, r2, r1
   84b26:	b10b      	cbz	r3, 84b2c <__sflush_r+0x4c>
   84b28:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84b2a:	1ad2      	subs	r2, r2, r3
   84b2c:	2300      	movs	r3, #0
   84b2e:	69e9      	ldr	r1, [r5, #28]
   84b30:	4640      	mov	r0, r8
   84b32:	47a0      	blx	r4
   84b34:	1c44      	adds	r4, r0, #1
   84b36:	d03c      	beq.n	84bb2 <__sflush_r+0xd2>
   84b38:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84b3c:	6929      	ldr	r1, [r5, #16]
   84b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b42:	2200      	movs	r2, #0
   84b44:	81ab      	strh	r3, [r5, #12]
   84b46:	04db      	lsls	r3, r3, #19
   84b48:	e885 0006 	stmia.w	r5, {r1, r2}
   84b4c:	d449      	bmi.n	84be2 <__sflush_r+0x102>
   84b4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84b50:	f8c8 6000 	str.w	r6, [r8]
   84b54:	b311      	cbz	r1, 84b9c <__sflush_r+0xbc>
   84b56:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84b5a:	4299      	cmp	r1, r3
   84b5c:	d002      	beq.n	84b64 <__sflush_r+0x84>
   84b5e:	4640      	mov	r0, r8
   84b60:	f000 f9be 	bl	84ee0 <_free_r>
   84b64:	2000      	movs	r0, #0
   84b66:	6328      	str	r0, [r5, #48]	; 0x30
   84b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b6c:	692e      	ldr	r6, [r5, #16]
   84b6e:	b1ae      	cbz	r6, 84b9c <__sflush_r+0xbc>
   84b70:	0790      	lsls	r0, r2, #30
   84b72:	682c      	ldr	r4, [r5, #0]
   84b74:	bf0c      	ite	eq
   84b76:	696b      	ldreq	r3, [r5, #20]
   84b78:	2300      	movne	r3, #0
   84b7a:	602e      	str	r6, [r5, #0]
   84b7c:	1ba4      	subs	r4, r4, r6
   84b7e:	60ab      	str	r3, [r5, #8]
   84b80:	e00a      	b.n	84b98 <__sflush_r+0xb8>
   84b82:	4623      	mov	r3, r4
   84b84:	4632      	mov	r2, r6
   84b86:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84b88:	69e9      	ldr	r1, [r5, #28]
   84b8a:	4640      	mov	r0, r8
   84b8c:	47b8      	blx	r7
   84b8e:	2800      	cmp	r0, #0
   84b90:	eba4 0400 	sub.w	r4, r4, r0
   84b94:	4406      	add	r6, r0
   84b96:	dd04      	ble.n	84ba2 <__sflush_r+0xc2>
   84b98:	2c00      	cmp	r4, #0
   84b9a:	dcf2      	bgt.n	84b82 <__sflush_r+0xa2>
   84b9c:	2000      	movs	r0, #0
   84b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ba2:	89ab      	ldrh	r3, [r5, #12]
   84ba4:	f04f 30ff 	mov.w	r0, #4294967295
   84ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84bac:	81ab      	strh	r3, [r5, #12]
   84bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84bb2:	f8d8 2000 	ldr.w	r2, [r8]
   84bb6:	2a1d      	cmp	r2, #29
   84bb8:	d8f3      	bhi.n	84ba2 <__sflush_r+0xc2>
   84bba:	4b1a      	ldr	r3, [pc, #104]	; (84c24 <__sflush_r+0x144>)
   84bbc:	40d3      	lsrs	r3, r2
   84bbe:	f003 0301 	and.w	r3, r3, #1
   84bc2:	f083 0401 	eor.w	r4, r3, #1
   84bc6:	2b00      	cmp	r3, #0
   84bc8:	d0eb      	beq.n	84ba2 <__sflush_r+0xc2>
   84bca:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84bce:	6929      	ldr	r1, [r5, #16]
   84bd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84bd4:	6029      	str	r1, [r5, #0]
   84bd6:	04d9      	lsls	r1, r3, #19
   84bd8:	606c      	str	r4, [r5, #4]
   84bda:	81ab      	strh	r3, [r5, #12]
   84bdc:	d5b7      	bpl.n	84b4e <__sflush_r+0x6e>
   84bde:	2a00      	cmp	r2, #0
   84be0:	d1b5      	bne.n	84b4e <__sflush_r+0x6e>
   84be2:	6528      	str	r0, [r5, #80]	; 0x50
   84be4:	e7b3      	b.n	84b4e <__sflush_r+0x6e>
   84be6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84be8:	2a00      	cmp	r2, #0
   84bea:	dc88      	bgt.n	84afe <__sflush_r+0x1e>
   84bec:	e7d6      	b.n	84b9c <__sflush_r+0xbc>
   84bee:	2301      	movs	r3, #1
   84bf0:	69e9      	ldr	r1, [r5, #28]
   84bf2:	4640      	mov	r0, r8
   84bf4:	47a0      	blx	r4
   84bf6:	1c43      	adds	r3, r0, #1
   84bf8:	4602      	mov	r2, r0
   84bfa:	d002      	beq.n	84c02 <__sflush_r+0x122>
   84bfc:	89ab      	ldrh	r3, [r5, #12]
   84bfe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84c00:	e78c      	b.n	84b1c <__sflush_r+0x3c>
   84c02:	f8d8 3000 	ldr.w	r3, [r8]
   84c06:	2b00      	cmp	r3, #0
   84c08:	d0f8      	beq.n	84bfc <__sflush_r+0x11c>
   84c0a:	2b1d      	cmp	r3, #29
   84c0c:	d001      	beq.n	84c12 <__sflush_r+0x132>
   84c0e:	2b16      	cmp	r3, #22
   84c10:	d102      	bne.n	84c18 <__sflush_r+0x138>
   84c12:	f8c8 6000 	str.w	r6, [r8]
   84c16:	e7c1      	b.n	84b9c <__sflush_r+0xbc>
   84c18:	89ab      	ldrh	r3, [r5, #12]
   84c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84c1e:	81ab      	strh	r3, [r5, #12]
   84c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84c24:	20400001 	.word	0x20400001

00084c28 <_fflush_r>:
   84c28:	b510      	push	{r4, lr}
   84c2a:	4604      	mov	r4, r0
   84c2c:	b082      	sub	sp, #8
   84c2e:	b108      	cbz	r0, 84c34 <_fflush_r+0xc>
   84c30:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84c32:	b153      	cbz	r3, 84c4a <_fflush_r+0x22>
   84c34:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84c38:	b908      	cbnz	r0, 84c3e <_fflush_r+0x16>
   84c3a:	b002      	add	sp, #8
   84c3c:	bd10      	pop	{r4, pc}
   84c3e:	4620      	mov	r0, r4
   84c40:	b002      	add	sp, #8
   84c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84c46:	f7ff bf4b 	b.w	84ae0 <__sflush_r>
   84c4a:	9101      	str	r1, [sp, #4]
   84c4c:	f000 f880 	bl	84d50 <__sinit>
   84c50:	9901      	ldr	r1, [sp, #4]
   84c52:	e7ef      	b.n	84c34 <_fflush_r+0xc>

00084c54 <_cleanup_r>:
   84c54:	4901      	ldr	r1, [pc, #4]	; (84c5c <_cleanup_r+0x8>)
   84c56:	f000 bbaf 	b.w	853b8 <_fwalk_reent>
   84c5a:	bf00      	nop
   84c5c:	00086259 	.word	0x00086259

00084c60 <__sinit.part.1>:
   84c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c64:	4607      	mov	r7, r0
   84c66:	4835      	ldr	r0, [pc, #212]	; (84d3c <__sinit.part.1+0xdc>)
   84c68:	687d      	ldr	r5, [r7, #4]
   84c6a:	2400      	movs	r4, #0
   84c6c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84c70:	2304      	movs	r3, #4
   84c72:	2103      	movs	r1, #3
   84c74:	63f8      	str	r0, [r7, #60]	; 0x3c
   84c76:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84c7a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84c7e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84c82:	b083      	sub	sp, #12
   84c84:	602c      	str	r4, [r5, #0]
   84c86:	606c      	str	r4, [r5, #4]
   84c88:	60ac      	str	r4, [r5, #8]
   84c8a:	666c      	str	r4, [r5, #100]	; 0x64
   84c8c:	81ec      	strh	r4, [r5, #14]
   84c8e:	612c      	str	r4, [r5, #16]
   84c90:	616c      	str	r4, [r5, #20]
   84c92:	61ac      	str	r4, [r5, #24]
   84c94:	81ab      	strh	r3, [r5, #12]
   84c96:	4621      	mov	r1, r4
   84c98:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84c9c:	2208      	movs	r2, #8
   84c9e:	f7fe fde5 	bl	8386c <memset>
   84ca2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84d40 <__sinit.part.1+0xe0>
   84ca6:	68be      	ldr	r6, [r7, #8]
   84ca8:	f8df a098 	ldr.w	sl, [pc, #152]	; 84d44 <__sinit.part.1+0xe4>
   84cac:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84d48 <__sinit.part.1+0xe8>
   84cb0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84d4c <__sinit.part.1+0xec>
   84cb4:	2301      	movs	r3, #1
   84cb6:	2209      	movs	r2, #9
   84cb8:	f8c5 b020 	str.w	fp, [r5, #32]
   84cbc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84cc0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84cc4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84cc8:	61ed      	str	r5, [r5, #28]
   84cca:	4621      	mov	r1, r4
   84ccc:	81f3      	strh	r3, [r6, #14]
   84cce:	81b2      	strh	r2, [r6, #12]
   84cd0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84cd4:	6034      	str	r4, [r6, #0]
   84cd6:	6074      	str	r4, [r6, #4]
   84cd8:	60b4      	str	r4, [r6, #8]
   84cda:	6674      	str	r4, [r6, #100]	; 0x64
   84cdc:	6134      	str	r4, [r6, #16]
   84cde:	6174      	str	r4, [r6, #20]
   84ce0:	61b4      	str	r4, [r6, #24]
   84ce2:	2208      	movs	r2, #8
   84ce4:	9301      	str	r3, [sp, #4]
   84ce6:	f7fe fdc1 	bl	8386c <memset>
   84cea:	68fd      	ldr	r5, [r7, #12]
   84cec:	2012      	movs	r0, #18
   84cee:	2202      	movs	r2, #2
   84cf0:	61f6      	str	r6, [r6, #28]
   84cf2:	f8c6 b020 	str.w	fp, [r6, #32]
   84cf6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84cfa:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84cfe:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84d02:	4621      	mov	r1, r4
   84d04:	81a8      	strh	r0, [r5, #12]
   84d06:	81ea      	strh	r2, [r5, #14]
   84d08:	602c      	str	r4, [r5, #0]
   84d0a:	606c      	str	r4, [r5, #4]
   84d0c:	60ac      	str	r4, [r5, #8]
   84d0e:	666c      	str	r4, [r5, #100]	; 0x64
   84d10:	612c      	str	r4, [r5, #16]
   84d12:	616c      	str	r4, [r5, #20]
   84d14:	61ac      	str	r4, [r5, #24]
   84d16:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84d1a:	2208      	movs	r2, #8
   84d1c:	f7fe fda6 	bl	8386c <memset>
   84d20:	9b01      	ldr	r3, [sp, #4]
   84d22:	61ed      	str	r5, [r5, #28]
   84d24:	f8c5 b020 	str.w	fp, [r5, #32]
   84d28:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84d2c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84d30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84d34:	63bb      	str	r3, [r7, #56]	; 0x38
   84d36:	b003      	add	sp, #12
   84d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d3c:	00084c55 	.word	0x00084c55
   84d40:	00085fc1 	.word	0x00085fc1
   84d44:	00085fe5 	.word	0x00085fe5
   84d48:	00086021 	.word	0x00086021
   84d4c:	00086041 	.word	0x00086041

00084d50 <__sinit>:
   84d50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d52:	b103      	cbz	r3, 84d56 <__sinit+0x6>
   84d54:	4770      	bx	lr
   84d56:	f7ff bf83 	b.w	84c60 <__sinit.part.1>
   84d5a:	bf00      	nop

00084d5c <__sfp_lock_acquire>:
   84d5c:	4770      	bx	lr
   84d5e:	bf00      	nop

00084d60 <__sfp_lock_release>:
   84d60:	4770      	bx	lr
   84d62:	bf00      	nop

00084d64 <__libc_fini_array>:
   84d64:	b538      	push	{r3, r4, r5, lr}
   84d66:	4d07      	ldr	r5, [pc, #28]	; (84d84 <__libc_fini_array+0x20>)
   84d68:	4c07      	ldr	r4, [pc, #28]	; (84d88 <__libc_fini_array+0x24>)
   84d6a:	1b2c      	subs	r4, r5, r4
   84d6c:	10a4      	asrs	r4, r4, #2
   84d6e:	d005      	beq.n	84d7c <__libc_fini_array+0x18>
   84d70:	3c01      	subs	r4, #1
   84d72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84d76:	4798      	blx	r3
   84d78:	2c00      	cmp	r4, #0
   84d7a:	d1f9      	bne.n	84d70 <__libc_fini_array+0xc>
   84d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84d80:	f002 be90 	b.w	87aa4 <_fini>
   84d84:	00087ab4 	.word	0x00087ab4
   84d88:	00087ab0 	.word	0x00087ab0

00084d8c <__fputwc>:
   84d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d90:	b082      	sub	sp, #8
   84d92:	4606      	mov	r6, r0
   84d94:	460f      	mov	r7, r1
   84d96:	4614      	mov	r4, r2
   84d98:	f000 fb3a 	bl	85410 <__locale_mb_cur_max>
   84d9c:	2801      	cmp	r0, #1
   84d9e:	d032      	beq.n	84e06 <__fputwc+0x7a>
   84da0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84da4:	463a      	mov	r2, r7
   84da6:	a901      	add	r1, sp, #4
   84da8:	4630      	mov	r0, r6
   84daa:	f001 f9a3 	bl	860f4 <_wcrtomb_r>
   84dae:	f1b0 3fff 	cmp.w	r0, #4294967295
   84db2:	4680      	mov	r8, r0
   84db4:	d020      	beq.n	84df8 <__fputwc+0x6c>
   84db6:	b370      	cbz	r0, 84e16 <__fputwc+0x8a>
   84db8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84dbc:	2500      	movs	r5, #0
   84dbe:	e008      	b.n	84dd2 <__fputwc+0x46>
   84dc0:	6823      	ldr	r3, [r4, #0]
   84dc2:	1c5a      	adds	r2, r3, #1
   84dc4:	6022      	str	r2, [r4, #0]
   84dc6:	7019      	strb	r1, [r3, #0]
   84dc8:	3501      	adds	r5, #1
   84dca:	4545      	cmp	r5, r8
   84dcc:	d223      	bcs.n	84e16 <__fputwc+0x8a>
   84dce:	ab01      	add	r3, sp, #4
   84dd0:	5d59      	ldrb	r1, [r3, r5]
   84dd2:	68a3      	ldr	r3, [r4, #8]
   84dd4:	3b01      	subs	r3, #1
   84dd6:	2b00      	cmp	r3, #0
   84dd8:	60a3      	str	r3, [r4, #8]
   84dda:	daf1      	bge.n	84dc0 <__fputwc+0x34>
   84ddc:	69a2      	ldr	r2, [r4, #24]
   84dde:	4293      	cmp	r3, r2
   84de0:	db01      	blt.n	84de6 <__fputwc+0x5a>
   84de2:	290a      	cmp	r1, #10
   84de4:	d1ec      	bne.n	84dc0 <__fputwc+0x34>
   84de6:	4622      	mov	r2, r4
   84de8:	4630      	mov	r0, r6
   84dea:	f001 f92d 	bl	86048 <__swbuf_r>
   84dee:	1c43      	adds	r3, r0, #1
   84df0:	d1ea      	bne.n	84dc8 <__fputwc+0x3c>
   84df2:	b002      	add	sp, #8
   84df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84df8:	89a3      	ldrh	r3, [r4, #12]
   84dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84dfe:	81a3      	strh	r3, [r4, #12]
   84e00:	b002      	add	sp, #8
   84e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e06:	1e7b      	subs	r3, r7, #1
   84e08:	2bfe      	cmp	r3, #254	; 0xfe
   84e0a:	d8c9      	bhi.n	84da0 <__fputwc+0x14>
   84e0c:	b2f9      	uxtb	r1, r7
   84e0e:	4680      	mov	r8, r0
   84e10:	f88d 1004 	strb.w	r1, [sp, #4]
   84e14:	e7d2      	b.n	84dbc <__fputwc+0x30>
   84e16:	4638      	mov	r0, r7
   84e18:	b002      	add	sp, #8
   84e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e1e:	bf00      	nop

00084e20 <_fputwc_r>:
   84e20:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   84e24:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84e28:	d10a      	bne.n	84e40 <_fputwc_r+0x20>
   84e2a:	b410      	push	{r4}
   84e2c:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84e32:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84e36:	6654      	str	r4, [r2, #100]	; 0x64
   84e38:	8193      	strh	r3, [r2, #12]
   84e3a:	bc10      	pop	{r4}
   84e3c:	f7ff bfa6 	b.w	84d8c <__fputwc>
   84e40:	f7ff bfa4 	b.w	84d8c <__fputwc>

00084e44 <_malloc_trim_r>:
   84e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e46:	460c      	mov	r4, r1
   84e48:	4f22      	ldr	r7, [pc, #136]	; (84ed4 <_malloc_trim_r+0x90>)
   84e4a:	4606      	mov	r6, r0
   84e4c:	f000 feb8 	bl	85bc0 <__malloc_lock>
   84e50:	68bb      	ldr	r3, [r7, #8]
   84e52:	685d      	ldr	r5, [r3, #4]
   84e54:	f025 0503 	bic.w	r5, r5, #3
   84e58:	1b29      	subs	r1, r5, r4
   84e5a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84e5e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84e62:	f021 010f 	bic.w	r1, r1, #15
   84e66:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84e6a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84e6e:	db07      	blt.n	84e80 <_malloc_trim_r+0x3c>
   84e70:	2100      	movs	r1, #0
   84e72:	4630      	mov	r0, r6
   84e74:	f001 f892 	bl	85f9c <_sbrk_r>
   84e78:	68bb      	ldr	r3, [r7, #8]
   84e7a:	442b      	add	r3, r5
   84e7c:	4298      	cmp	r0, r3
   84e7e:	d004      	beq.n	84e8a <_malloc_trim_r+0x46>
   84e80:	4630      	mov	r0, r6
   84e82:	f000 fe9f 	bl	85bc4 <__malloc_unlock>
   84e86:	2000      	movs	r0, #0
   84e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e8a:	4261      	negs	r1, r4
   84e8c:	4630      	mov	r0, r6
   84e8e:	f001 f885 	bl	85f9c <_sbrk_r>
   84e92:	3001      	adds	r0, #1
   84e94:	d00d      	beq.n	84eb2 <_malloc_trim_r+0x6e>
   84e96:	4b10      	ldr	r3, [pc, #64]	; (84ed8 <_malloc_trim_r+0x94>)
   84e98:	68ba      	ldr	r2, [r7, #8]
   84e9a:	6819      	ldr	r1, [r3, #0]
   84e9c:	1b2d      	subs	r5, r5, r4
   84e9e:	f045 0501 	orr.w	r5, r5, #1
   84ea2:	4630      	mov	r0, r6
   84ea4:	1b09      	subs	r1, r1, r4
   84ea6:	6055      	str	r5, [r2, #4]
   84ea8:	6019      	str	r1, [r3, #0]
   84eaa:	f000 fe8b 	bl	85bc4 <__malloc_unlock>
   84eae:	2001      	movs	r0, #1
   84eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84eb2:	2100      	movs	r1, #0
   84eb4:	4630      	mov	r0, r6
   84eb6:	f001 f871 	bl	85f9c <_sbrk_r>
   84eba:	68ba      	ldr	r2, [r7, #8]
   84ebc:	1a83      	subs	r3, r0, r2
   84ebe:	2b0f      	cmp	r3, #15
   84ec0:	ddde      	ble.n	84e80 <_malloc_trim_r+0x3c>
   84ec2:	4c06      	ldr	r4, [pc, #24]	; (84edc <_malloc_trim_r+0x98>)
   84ec4:	4904      	ldr	r1, [pc, #16]	; (84ed8 <_malloc_trim_r+0x94>)
   84ec6:	6824      	ldr	r4, [r4, #0]
   84ec8:	f043 0301 	orr.w	r3, r3, #1
   84ecc:	1b00      	subs	r0, r0, r4
   84ece:	6053      	str	r3, [r2, #4]
   84ed0:	6008      	str	r0, [r1, #0]
   84ed2:	e7d5      	b.n	84e80 <_malloc_trim_r+0x3c>
   84ed4:	20070598 	.word	0x20070598
   84ed8:	2007ac64 	.word	0x2007ac64
   84edc:	200709a4 	.word	0x200709a4

00084ee0 <_free_r>:
   84ee0:	2900      	cmp	r1, #0
   84ee2:	d045      	beq.n	84f70 <_free_r+0x90>
   84ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ee8:	460d      	mov	r5, r1
   84eea:	4680      	mov	r8, r0
   84eec:	f000 fe68 	bl	85bc0 <__malloc_lock>
   84ef0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84ef4:	496a      	ldr	r1, [pc, #424]	; (850a0 <_free_r+0x1c0>)
   84ef6:	f1a5 0408 	sub.w	r4, r5, #8
   84efa:	f027 0301 	bic.w	r3, r7, #1
   84efe:	18e2      	adds	r2, r4, r3
   84f00:	688e      	ldr	r6, [r1, #8]
   84f02:	6850      	ldr	r0, [r2, #4]
   84f04:	42b2      	cmp	r2, r6
   84f06:	f020 0003 	bic.w	r0, r0, #3
   84f0a:	d062      	beq.n	84fd2 <_free_r+0xf2>
   84f0c:	07fe      	lsls	r6, r7, #31
   84f0e:	6050      	str	r0, [r2, #4]
   84f10:	d40b      	bmi.n	84f2a <_free_r+0x4a>
   84f12:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84f16:	f101 0e08 	add.w	lr, r1, #8
   84f1a:	1be4      	subs	r4, r4, r7
   84f1c:	68a5      	ldr	r5, [r4, #8]
   84f1e:	443b      	add	r3, r7
   84f20:	4575      	cmp	r5, lr
   84f22:	d06f      	beq.n	85004 <_free_r+0x124>
   84f24:	68e7      	ldr	r7, [r4, #12]
   84f26:	60ef      	str	r7, [r5, #12]
   84f28:	60bd      	str	r5, [r7, #8]
   84f2a:	1815      	adds	r5, r2, r0
   84f2c:	686d      	ldr	r5, [r5, #4]
   84f2e:	07ed      	lsls	r5, r5, #31
   84f30:	d542      	bpl.n	84fb8 <_free_r+0xd8>
   84f32:	f043 0201 	orr.w	r2, r3, #1
   84f36:	6062      	str	r2, [r4, #4]
   84f38:	50e3      	str	r3, [r4, r3]
   84f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84f3e:	d218      	bcs.n	84f72 <_free_r+0x92>
   84f40:	08db      	lsrs	r3, r3, #3
   84f42:	6848      	ldr	r0, [r1, #4]
   84f44:	109d      	asrs	r5, r3, #2
   84f46:	2201      	movs	r2, #1
   84f48:	3301      	adds	r3, #1
   84f4a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   84f4e:	fa02 f505 	lsl.w	r5, r2, r5
   84f52:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   84f56:	4328      	orrs	r0, r5
   84f58:	3a08      	subs	r2, #8
   84f5a:	60e2      	str	r2, [r4, #12]
   84f5c:	60a7      	str	r7, [r4, #8]
   84f5e:	6048      	str	r0, [r1, #4]
   84f60:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   84f64:	60fc      	str	r4, [r7, #12]
   84f66:	4640      	mov	r0, r8
   84f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f6c:	f000 be2a 	b.w	85bc4 <__malloc_unlock>
   84f70:	4770      	bx	lr
   84f72:	0a5a      	lsrs	r2, r3, #9
   84f74:	2a04      	cmp	r2, #4
   84f76:	d853      	bhi.n	85020 <_free_r+0x140>
   84f78:	099a      	lsrs	r2, r3, #6
   84f7a:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84f7e:	007f      	lsls	r7, r7, #1
   84f80:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84f84:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   84f88:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   84f8c:	3808      	subs	r0, #8
   84f8e:	4290      	cmp	r0, r2
   84f90:	4943      	ldr	r1, [pc, #268]	; (850a0 <_free_r+0x1c0>)
   84f92:	d04d      	beq.n	85030 <_free_r+0x150>
   84f94:	6851      	ldr	r1, [r2, #4]
   84f96:	f021 0103 	bic.w	r1, r1, #3
   84f9a:	428b      	cmp	r3, r1
   84f9c:	d202      	bcs.n	84fa4 <_free_r+0xc4>
   84f9e:	6892      	ldr	r2, [r2, #8]
   84fa0:	4290      	cmp	r0, r2
   84fa2:	d1f7      	bne.n	84f94 <_free_r+0xb4>
   84fa4:	68d0      	ldr	r0, [r2, #12]
   84fa6:	60e0      	str	r0, [r4, #12]
   84fa8:	60a2      	str	r2, [r4, #8]
   84faa:	6084      	str	r4, [r0, #8]
   84fac:	60d4      	str	r4, [r2, #12]
   84fae:	4640      	mov	r0, r8
   84fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84fb4:	f000 be06 	b.w	85bc4 <__malloc_unlock>
   84fb8:	6895      	ldr	r5, [r2, #8]
   84fba:	4f3a      	ldr	r7, [pc, #232]	; (850a4 <_free_r+0x1c4>)
   84fbc:	4403      	add	r3, r0
   84fbe:	42bd      	cmp	r5, r7
   84fc0:	d03f      	beq.n	85042 <_free_r+0x162>
   84fc2:	68d0      	ldr	r0, [r2, #12]
   84fc4:	f043 0201 	orr.w	r2, r3, #1
   84fc8:	60e8      	str	r0, [r5, #12]
   84fca:	6085      	str	r5, [r0, #8]
   84fcc:	6062      	str	r2, [r4, #4]
   84fce:	50e3      	str	r3, [r4, r3]
   84fd0:	e7b3      	b.n	84f3a <_free_r+0x5a>
   84fd2:	07ff      	lsls	r7, r7, #31
   84fd4:	4403      	add	r3, r0
   84fd6:	d407      	bmi.n	84fe8 <_free_r+0x108>
   84fd8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84fdc:	1b64      	subs	r4, r4, r5
   84fde:	68e2      	ldr	r2, [r4, #12]
   84fe0:	68a0      	ldr	r0, [r4, #8]
   84fe2:	442b      	add	r3, r5
   84fe4:	60c2      	str	r2, [r0, #12]
   84fe6:	6090      	str	r0, [r2, #8]
   84fe8:	4a2f      	ldr	r2, [pc, #188]	; (850a8 <_free_r+0x1c8>)
   84fea:	f043 0001 	orr.w	r0, r3, #1
   84fee:	6812      	ldr	r2, [r2, #0]
   84ff0:	6060      	str	r0, [r4, #4]
   84ff2:	4293      	cmp	r3, r2
   84ff4:	608c      	str	r4, [r1, #8]
   84ff6:	d3b6      	bcc.n	84f66 <_free_r+0x86>
   84ff8:	4b2c      	ldr	r3, [pc, #176]	; (850ac <_free_r+0x1cc>)
   84ffa:	4640      	mov	r0, r8
   84ffc:	6819      	ldr	r1, [r3, #0]
   84ffe:	f7ff ff21 	bl	84e44 <_malloc_trim_r>
   85002:	e7b0      	b.n	84f66 <_free_r+0x86>
   85004:	1811      	adds	r1, r2, r0
   85006:	6849      	ldr	r1, [r1, #4]
   85008:	07c9      	lsls	r1, r1, #31
   8500a:	d444      	bmi.n	85096 <_free_r+0x1b6>
   8500c:	6891      	ldr	r1, [r2, #8]
   8500e:	4403      	add	r3, r0
   85010:	68d2      	ldr	r2, [r2, #12]
   85012:	f043 0001 	orr.w	r0, r3, #1
   85016:	60ca      	str	r2, [r1, #12]
   85018:	6091      	str	r1, [r2, #8]
   8501a:	6060      	str	r0, [r4, #4]
   8501c:	50e3      	str	r3, [r4, r3]
   8501e:	e7a2      	b.n	84f66 <_free_r+0x86>
   85020:	2a14      	cmp	r2, #20
   85022:	d817      	bhi.n	85054 <_free_r+0x174>
   85024:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85028:	007f      	lsls	r7, r7, #1
   8502a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8502e:	e7a9      	b.n	84f84 <_free_r+0xa4>
   85030:	10aa      	asrs	r2, r5, #2
   85032:	684b      	ldr	r3, [r1, #4]
   85034:	2501      	movs	r5, #1
   85036:	fa05 f202 	lsl.w	r2, r5, r2
   8503a:	4313      	orrs	r3, r2
   8503c:	604b      	str	r3, [r1, #4]
   8503e:	4602      	mov	r2, r0
   85040:	e7b1      	b.n	84fa6 <_free_r+0xc6>
   85042:	f043 0201 	orr.w	r2, r3, #1
   85046:	614c      	str	r4, [r1, #20]
   85048:	610c      	str	r4, [r1, #16]
   8504a:	60e5      	str	r5, [r4, #12]
   8504c:	60a5      	str	r5, [r4, #8]
   8504e:	6062      	str	r2, [r4, #4]
   85050:	50e3      	str	r3, [r4, r3]
   85052:	e788      	b.n	84f66 <_free_r+0x86>
   85054:	2a54      	cmp	r2, #84	; 0x54
   85056:	d806      	bhi.n	85066 <_free_r+0x186>
   85058:	0b1a      	lsrs	r2, r3, #12
   8505a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8505e:	007f      	lsls	r7, r7, #1
   85060:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85064:	e78e      	b.n	84f84 <_free_r+0xa4>
   85066:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8506a:	d806      	bhi.n	8507a <_free_r+0x19a>
   8506c:	0bda      	lsrs	r2, r3, #15
   8506e:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85072:	007f      	lsls	r7, r7, #1
   85074:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85078:	e784      	b.n	84f84 <_free_r+0xa4>
   8507a:	f240 5054 	movw	r0, #1364	; 0x554
   8507e:	4282      	cmp	r2, r0
   85080:	d806      	bhi.n	85090 <_free_r+0x1b0>
   85082:	0c9a      	lsrs	r2, r3, #18
   85084:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85088:	007f      	lsls	r7, r7, #1
   8508a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8508e:	e779      	b.n	84f84 <_free_r+0xa4>
   85090:	27fe      	movs	r7, #254	; 0xfe
   85092:	257e      	movs	r5, #126	; 0x7e
   85094:	e776      	b.n	84f84 <_free_r+0xa4>
   85096:	f043 0201 	orr.w	r2, r3, #1
   8509a:	6062      	str	r2, [r4, #4]
   8509c:	50e3      	str	r3, [r4, r3]
   8509e:	e762      	b.n	84f66 <_free_r+0x86>
   850a0:	20070598 	.word	0x20070598
   850a4:	200705a0 	.word	0x200705a0
   850a8:	200709a0 	.word	0x200709a0
   850ac:	2007ac60 	.word	0x2007ac60

000850b0 <__sfvwrite_r>:
   850b0:	6893      	ldr	r3, [r2, #8]
   850b2:	2b00      	cmp	r3, #0
   850b4:	f000 80ab 	beq.w	8520e <__sfvwrite_r+0x15e>
   850b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850bc:	898b      	ldrh	r3, [r1, #12]
   850be:	b085      	sub	sp, #20
   850c0:	460c      	mov	r4, r1
   850c2:	0719      	lsls	r1, r3, #28
   850c4:	9002      	str	r0, [sp, #8]
   850c6:	4616      	mov	r6, r2
   850c8:	d528      	bpl.n	8511c <__sfvwrite_r+0x6c>
   850ca:	6922      	ldr	r2, [r4, #16]
   850cc:	b332      	cbz	r2, 8511c <__sfvwrite_r+0x6c>
   850ce:	f003 0802 	and.w	r8, r3, #2
   850d2:	fa1f f088 	uxth.w	r0, r8
   850d6:	6835      	ldr	r5, [r6, #0]
   850d8:	b378      	cbz	r0, 8513a <__sfvwrite_r+0x8a>
   850da:	f04f 0900 	mov.w	r9, #0
   850de:	46c8      	mov	r8, r9
   850e0:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 853b4 <__sfvwrite_r+0x304>
   850e4:	f1b8 0f00 	cmp.w	r8, #0
   850e8:	f000 808b 	beq.w	85202 <__sfvwrite_r+0x152>
   850ec:	45d0      	cmp	r8, sl
   850ee:	4643      	mov	r3, r8
   850f0:	464a      	mov	r2, r9
   850f2:	bf28      	it	cs
   850f4:	4653      	movcs	r3, sl
   850f6:	69e1      	ldr	r1, [r4, #28]
   850f8:	9802      	ldr	r0, [sp, #8]
   850fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   850fc:	47b8      	blx	r7
   850fe:	2800      	cmp	r0, #0
   85100:	f340 80a5 	ble.w	8524e <__sfvwrite_r+0x19e>
   85104:	68b3      	ldr	r3, [r6, #8]
   85106:	4481      	add	r9, r0
   85108:	1a1b      	subs	r3, r3, r0
   8510a:	ebc0 0808 	rsb	r8, r0, r8
   8510e:	60b3      	str	r3, [r6, #8]
   85110:	2b00      	cmp	r3, #0
   85112:	d1e7      	bne.n	850e4 <__sfvwrite_r+0x34>
   85114:	2000      	movs	r0, #0
   85116:	b005      	add	sp, #20
   85118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8511c:	4621      	mov	r1, r4
   8511e:	9802      	ldr	r0, [sp, #8]
   85120:	f7ff fc6a 	bl	849f8 <__swsetup_r>
   85124:	2800      	cmp	r0, #0
   85126:	f040 813c 	bne.w	853a2 <__sfvwrite_r+0x2f2>
   8512a:	89a3      	ldrh	r3, [r4, #12]
   8512c:	6835      	ldr	r5, [r6, #0]
   8512e:	f003 0802 	and.w	r8, r3, #2
   85132:	fa1f f088 	uxth.w	r0, r8
   85136:	2800      	cmp	r0, #0
   85138:	d1cf      	bne.n	850da <__sfvwrite_r+0x2a>
   8513a:	f013 0901 	ands.w	r9, r3, #1
   8513e:	f040 8090 	bne.w	85262 <__sfvwrite_r+0x1b2>
   85142:	464f      	mov	r7, r9
   85144:	9601      	str	r6, [sp, #4]
   85146:	2f00      	cmp	r7, #0
   85148:	d056      	beq.n	851f8 <__sfvwrite_r+0x148>
   8514a:	059a      	lsls	r2, r3, #22
   8514c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   85150:	d55f      	bpl.n	85212 <__sfvwrite_r+0x162>
   85152:	4547      	cmp	r7, r8
   85154:	46c2      	mov	sl, r8
   85156:	f0c0 80bf 	bcc.w	852d8 <__sfvwrite_r+0x228>
   8515a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8515e:	f000 80bd 	beq.w	852dc <__sfvwrite_r+0x22c>
   85162:	6962      	ldr	r2, [r4, #20]
   85164:	6820      	ldr	r0, [r4, #0]
   85166:	6921      	ldr	r1, [r4, #16]
   85168:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8516c:	ebc1 0a00 	rsb	sl, r1, r0
   85170:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85174:	f10a 0001 	add.w	r0, sl, #1
   85178:	ea4f 0868 	mov.w	r8, r8, asr #1
   8517c:	4438      	add	r0, r7
   8517e:	4540      	cmp	r0, r8
   85180:	4642      	mov	r2, r8
   85182:	bf84      	itt	hi
   85184:	4680      	movhi	r8, r0
   85186:	4642      	movhi	r2, r8
   85188:	055b      	lsls	r3, r3, #21
   8518a:	f140 80f2 	bpl.w	85372 <__sfvwrite_r+0x2c2>
   8518e:	4611      	mov	r1, r2
   85190:	9802      	ldr	r0, [sp, #8]
   85192:	f000 f9bf 	bl	85514 <_malloc_r>
   85196:	4683      	mov	fp, r0
   85198:	2800      	cmp	r0, #0
   8519a:	f000 8105 	beq.w	853a8 <__sfvwrite_r+0x2f8>
   8519e:	4652      	mov	r2, sl
   851a0:	6921      	ldr	r1, [r4, #16]
   851a2:	f7fe faed 	bl	83780 <memcpy>
   851a6:	89a3      	ldrh	r3, [r4, #12]
   851a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   851ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   851b0:	81a3      	strh	r3, [r4, #12]
   851b2:	ebca 0308 	rsb	r3, sl, r8
   851b6:	eb0b 000a 	add.w	r0, fp, sl
   851ba:	f8c4 8014 	str.w	r8, [r4, #20]
   851be:	46ba      	mov	sl, r7
   851c0:	46b8      	mov	r8, r7
   851c2:	f8c4 b010 	str.w	fp, [r4, #16]
   851c6:	6020      	str	r0, [r4, #0]
   851c8:	60a3      	str	r3, [r4, #8]
   851ca:	4652      	mov	r2, sl
   851cc:	4649      	mov	r1, r9
   851ce:	f000 fc93 	bl	85af8 <memmove>
   851d2:	68a0      	ldr	r0, [r4, #8]
   851d4:	6823      	ldr	r3, [r4, #0]
   851d6:	ebc8 0000 	rsb	r0, r8, r0
   851da:	60a0      	str	r0, [r4, #8]
   851dc:	4638      	mov	r0, r7
   851de:	4453      	add	r3, sl
   851e0:	6023      	str	r3, [r4, #0]
   851e2:	9a01      	ldr	r2, [sp, #4]
   851e4:	4481      	add	r9, r0
   851e6:	6893      	ldr	r3, [r2, #8]
   851e8:	1a3f      	subs	r7, r7, r0
   851ea:	1a1b      	subs	r3, r3, r0
   851ec:	6093      	str	r3, [r2, #8]
   851ee:	2b00      	cmp	r3, #0
   851f0:	d090      	beq.n	85114 <__sfvwrite_r+0x64>
   851f2:	89a3      	ldrh	r3, [r4, #12]
   851f4:	2f00      	cmp	r7, #0
   851f6:	d1a8      	bne.n	8514a <__sfvwrite_r+0x9a>
   851f8:	f8d5 9000 	ldr.w	r9, [r5]
   851fc:	686f      	ldr	r7, [r5, #4]
   851fe:	3508      	adds	r5, #8
   85200:	e7a1      	b.n	85146 <__sfvwrite_r+0x96>
   85202:	f8d5 9000 	ldr.w	r9, [r5]
   85206:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8520a:	3508      	adds	r5, #8
   8520c:	e76a      	b.n	850e4 <__sfvwrite_r+0x34>
   8520e:	2000      	movs	r0, #0
   85210:	4770      	bx	lr
   85212:	6820      	ldr	r0, [r4, #0]
   85214:	6923      	ldr	r3, [r4, #16]
   85216:	4298      	cmp	r0, r3
   85218:	d803      	bhi.n	85222 <__sfvwrite_r+0x172>
   8521a:	6962      	ldr	r2, [r4, #20]
   8521c:	4297      	cmp	r7, r2
   8521e:	f080 8083 	bcs.w	85328 <__sfvwrite_r+0x278>
   85222:	45b8      	cmp	r8, r7
   85224:	bf28      	it	cs
   85226:	46b8      	movcs	r8, r7
   85228:	4649      	mov	r1, r9
   8522a:	4642      	mov	r2, r8
   8522c:	f000 fc64 	bl	85af8 <memmove>
   85230:	68a3      	ldr	r3, [r4, #8]
   85232:	6822      	ldr	r2, [r4, #0]
   85234:	ebc8 0303 	rsb	r3, r8, r3
   85238:	4442      	add	r2, r8
   8523a:	60a3      	str	r3, [r4, #8]
   8523c:	6022      	str	r2, [r4, #0]
   8523e:	2b00      	cmp	r3, #0
   85240:	d148      	bne.n	852d4 <__sfvwrite_r+0x224>
   85242:	4621      	mov	r1, r4
   85244:	9802      	ldr	r0, [sp, #8]
   85246:	f7ff fcef 	bl	84c28 <_fflush_r>
   8524a:	2800      	cmp	r0, #0
   8524c:	d042      	beq.n	852d4 <__sfvwrite_r+0x224>
   8524e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85256:	f04f 30ff 	mov.w	r0, #4294967295
   8525a:	81a3      	strh	r3, [r4, #12]
   8525c:	b005      	add	sp, #20
   8525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85262:	4680      	mov	r8, r0
   85264:	4682      	mov	sl, r0
   85266:	4681      	mov	r9, r0
   85268:	9001      	str	r0, [sp, #4]
   8526a:	f1b9 0f00 	cmp.w	r9, #0
   8526e:	d029      	beq.n	852c4 <__sfvwrite_r+0x214>
   85270:	9b01      	ldr	r3, [sp, #4]
   85272:	2b00      	cmp	r3, #0
   85274:	d04b      	beq.n	8530e <__sfvwrite_r+0x25e>
   85276:	45c8      	cmp	r8, r9
   85278:	46c3      	mov	fp, r8
   8527a:	bf28      	it	cs
   8527c:	46cb      	movcs	fp, r9
   8527e:	6820      	ldr	r0, [r4, #0]
   85280:	6923      	ldr	r3, [r4, #16]
   85282:	465f      	mov	r7, fp
   85284:	4298      	cmp	r0, r3
   85286:	6962      	ldr	r2, [r4, #20]
   85288:	d903      	bls.n	85292 <__sfvwrite_r+0x1e2>
   8528a:	68a3      	ldr	r3, [r4, #8]
   8528c:	4413      	add	r3, r2
   8528e:	459b      	cmp	fp, r3
   85290:	dc5c      	bgt.n	8534c <__sfvwrite_r+0x29c>
   85292:	4593      	cmp	fp, r2
   85294:	db24      	blt.n	852e0 <__sfvwrite_r+0x230>
   85296:	4613      	mov	r3, r2
   85298:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8529a:	4652      	mov	r2, sl
   8529c:	69e1      	ldr	r1, [r4, #28]
   8529e:	9802      	ldr	r0, [sp, #8]
   852a0:	47b8      	blx	r7
   852a2:	1e07      	subs	r7, r0, #0
   852a4:	ddd3      	ble.n	8524e <__sfvwrite_r+0x19e>
   852a6:	ebb8 0807 	subs.w	r8, r8, r7
   852aa:	d027      	beq.n	852fc <__sfvwrite_r+0x24c>
   852ac:	68b3      	ldr	r3, [r6, #8]
   852ae:	44ba      	add	sl, r7
   852b0:	1bdb      	subs	r3, r3, r7
   852b2:	ebc7 0909 	rsb	r9, r7, r9
   852b6:	60b3      	str	r3, [r6, #8]
   852b8:	2b00      	cmp	r3, #0
   852ba:	f43f af2b 	beq.w	85114 <__sfvwrite_r+0x64>
   852be:	f1b9 0f00 	cmp.w	r9, #0
   852c2:	d1d5      	bne.n	85270 <__sfvwrite_r+0x1c0>
   852c4:	2300      	movs	r3, #0
   852c6:	f8d5 a000 	ldr.w	sl, [r5]
   852ca:	f8d5 9004 	ldr.w	r9, [r5, #4]
   852ce:	9301      	str	r3, [sp, #4]
   852d0:	3508      	adds	r5, #8
   852d2:	e7ca      	b.n	8526a <__sfvwrite_r+0x1ba>
   852d4:	4640      	mov	r0, r8
   852d6:	e784      	b.n	851e2 <__sfvwrite_r+0x132>
   852d8:	46b8      	mov	r8, r7
   852da:	46ba      	mov	sl, r7
   852dc:	6820      	ldr	r0, [r4, #0]
   852de:	e774      	b.n	851ca <__sfvwrite_r+0x11a>
   852e0:	465a      	mov	r2, fp
   852e2:	4651      	mov	r1, sl
   852e4:	f000 fc08 	bl	85af8 <memmove>
   852e8:	68a2      	ldr	r2, [r4, #8]
   852ea:	6823      	ldr	r3, [r4, #0]
   852ec:	ebcb 0202 	rsb	r2, fp, r2
   852f0:	445b      	add	r3, fp
   852f2:	ebb8 0807 	subs.w	r8, r8, r7
   852f6:	60a2      	str	r2, [r4, #8]
   852f8:	6023      	str	r3, [r4, #0]
   852fa:	d1d7      	bne.n	852ac <__sfvwrite_r+0x1fc>
   852fc:	4621      	mov	r1, r4
   852fe:	9802      	ldr	r0, [sp, #8]
   85300:	f7ff fc92 	bl	84c28 <_fflush_r>
   85304:	2800      	cmp	r0, #0
   85306:	d1a2      	bne.n	8524e <__sfvwrite_r+0x19e>
   85308:	f8cd 8004 	str.w	r8, [sp, #4]
   8530c:	e7ce      	b.n	852ac <__sfvwrite_r+0x1fc>
   8530e:	464a      	mov	r2, r9
   85310:	210a      	movs	r1, #10
   85312:	4650      	mov	r0, sl
   85314:	f000 fbaa 	bl	85a6c <memchr>
   85318:	2800      	cmp	r0, #0
   8531a:	d03d      	beq.n	85398 <__sfvwrite_r+0x2e8>
   8531c:	3001      	adds	r0, #1
   8531e:	2301      	movs	r3, #1
   85320:	ebca 0800 	rsb	r8, sl, r0
   85324:	9301      	str	r3, [sp, #4]
   85326:	e7a6      	b.n	85276 <__sfvwrite_r+0x1c6>
   85328:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8532c:	42bb      	cmp	r3, r7
   8532e:	bf28      	it	cs
   85330:	463b      	movcs	r3, r7
   85332:	fb93 f3f2 	sdiv	r3, r3, r2
   85336:	69e1      	ldr	r1, [r4, #28]
   85338:	fb02 f303 	mul.w	r3, r2, r3
   8533c:	9802      	ldr	r0, [sp, #8]
   8533e:	464a      	mov	r2, r9
   85340:	6a66      	ldr	r6, [r4, #36]	; 0x24
   85342:	47b0      	blx	r6
   85344:	2800      	cmp	r0, #0
   85346:	f73f af4c 	bgt.w	851e2 <__sfvwrite_r+0x132>
   8534a:	e780      	b.n	8524e <__sfvwrite_r+0x19e>
   8534c:	461a      	mov	r2, r3
   8534e:	4651      	mov	r1, sl
   85350:	9303      	str	r3, [sp, #12]
   85352:	f000 fbd1 	bl	85af8 <memmove>
   85356:	6822      	ldr	r2, [r4, #0]
   85358:	9b03      	ldr	r3, [sp, #12]
   8535a:	4621      	mov	r1, r4
   8535c:	441a      	add	r2, r3
   8535e:	6022      	str	r2, [r4, #0]
   85360:	9802      	ldr	r0, [sp, #8]
   85362:	f7ff fc61 	bl	84c28 <_fflush_r>
   85366:	9b03      	ldr	r3, [sp, #12]
   85368:	2800      	cmp	r0, #0
   8536a:	f47f af70 	bne.w	8524e <__sfvwrite_r+0x19e>
   8536e:	461f      	mov	r7, r3
   85370:	e799      	b.n	852a6 <__sfvwrite_r+0x1f6>
   85372:	9802      	ldr	r0, [sp, #8]
   85374:	f000 fc28 	bl	85bc8 <_realloc_r>
   85378:	4683      	mov	fp, r0
   8537a:	2800      	cmp	r0, #0
   8537c:	f47f af19 	bne.w	851b2 <__sfvwrite_r+0x102>
   85380:	9d02      	ldr	r5, [sp, #8]
   85382:	6921      	ldr	r1, [r4, #16]
   85384:	4628      	mov	r0, r5
   85386:	f7ff fdab 	bl	84ee0 <_free_r>
   8538a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8538e:	220c      	movs	r2, #12
   85390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85394:	602a      	str	r2, [r5, #0]
   85396:	e75c      	b.n	85252 <__sfvwrite_r+0x1a2>
   85398:	2301      	movs	r3, #1
   8539a:	f109 0801 	add.w	r8, r9, #1
   8539e:	9301      	str	r3, [sp, #4]
   853a0:	e769      	b.n	85276 <__sfvwrite_r+0x1c6>
   853a2:	f04f 30ff 	mov.w	r0, #4294967295
   853a6:	e6b6      	b.n	85116 <__sfvwrite_r+0x66>
   853a8:	9a02      	ldr	r2, [sp, #8]
   853aa:	230c      	movs	r3, #12
   853ac:	6013      	str	r3, [r2, #0]
   853ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   853b2:	e74e      	b.n	85252 <__sfvwrite_r+0x1a2>
   853b4:	7ffffc00 	.word	0x7ffffc00

000853b8 <_fwalk_reent>:
   853b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   853bc:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   853c0:	d01e      	beq.n	85400 <_fwalk_reent+0x48>
   853c2:	4688      	mov	r8, r1
   853c4:	4607      	mov	r7, r0
   853c6:	f04f 0900 	mov.w	r9, #0
   853ca:	6875      	ldr	r5, [r6, #4]
   853cc:	68b4      	ldr	r4, [r6, #8]
   853ce:	3d01      	subs	r5, #1
   853d0:	d410      	bmi.n	853f4 <_fwalk_reent+0x3c>
   853d2:	89a3      	ldrh	r3, [r4, #12]
   853d4:	3d01      	subs	r5, #1
   853d6:	2b01      	cmp	r3, #1
   853d8:	d908      	bls.n	853ec <_fwalk_reent+0x34>
   853da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   853de:	3301      	adds	r3, #1
   853e0:	d004      	beq.n	853ec <_fwalk_reent+0x34>
   853e2:	4621      	mov	r1, r4
   853e4:	4638      	mov	r0, r7
   853e6:	47c0      	blx	r8
   853e8:	ea49 0900 	orr.w	r9, r9, r0
   853ec:	1c6b      	adds	r3, r5, #1
   853ee:	f104 0468 	add.w	r4, r4, #104	; 0x68
   853f2:	d1ee      	bne.n	853d2 <_fwalk_reent+0x1a>
   853f4:	6836      	ldr	r6, [r6, #0]
   853f6:	2e00      	cmp	r6, #0
   853f8:	d1e7      	bne.n	853ca <_fwalk_reent+0x12>
   853fa:	4648      	mov	r0, r9
   853fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85400:	46b1      	mov	r9, r6
   85402:	4648      	mov	r0, r9
   85404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085408 <__locale_charset>:
   85408:	4800      	ldr	r0, [pc, #0]	; (8540c <__locale_charset+0x4>)
   8540a:	4770      	bx	lr
   8540c:	20070574 	.word	0x20070574

00085410 <__locale_mb_cur_max>:
   85410:	4b01      	ldr	r3, [pc, #4]	; (85418 <__locale_mb_cur_max+0x8>)
   85412:	6818      	ldr	r0, [r3, #0]
   85414:	4770      	bx	lr
   85416:	bf00      	nop
   85418:	20070594 	.word	0x20070594

0008541c <__swhatbuf_r>:
   8541c:	b570      	push	{r4, r5, r6, lr}
   8541e:	460e      	mov	r6, r1
   85420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85424:	b090      	sub	sp, #64	; 0x40
   85426:	2900      	cmp	r1, #0
   85428:	4614      	mov	r4, r2
   8542a:	461d      	mov	r5, r3
   8542c:	db14      	blt.n	85458 <__swhatbuf_r+0x3c>
   8542e:	aa01      	add	r2, sp, #4
   85430:	f000 ff54 	bl	862dc <_fstat_r>
   85434:	2800      	cmp	r0, #0
   85436:	db0f      	blt.n	85458 <__swhatbuf_r+0x3c>
   85438:	9a02      	ldr	r2, [sp, #8]
   8543a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8543e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   85442:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   85446:	fab2 f282 	clz	r2, r2
   8544a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8544e:	0952      	lsrs	r2, r2, #5
   85450:	602a      	str	r2, [r5, #0]
   85452:	6023      	str	r3, [r4, #0]
   85454:	b010      	add	sp, #64	; 0x40
   85456:	bd70      	pop	{r4, r5, r6, pc}
   85458:	89b2      	ldrh	r2, [r6, #12]
   8545a:	2000      	movs	r0, #0
   8545c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   85460:	b292      	uxth	r2, r2
   85462:	6028      	str	r0, [r5, #0]
   85464:	b11a      	cbz	r2, 8546e <__swhatbuf_r+0x52>
   85466:	2340      	movs	r3, #64	; 0x40
   85468:	6023      	str	r3, [r4, #0]
   8546a:	b010      	add	sp, #64	; 0x40
   8546c:	bd70      	pop	{r4, r5, r6, pc}
   8546e:	4610      	mov	r0, r2
   85470:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85474:	6023      	str	r3, [r4, #0]
   85476:	b010      	add	sp, #64	; 0x40
   85478:	bd70      	pop	{r4, r5, r6, pc}
   8547a:	bf00      	nop

0008547c <__smakebuf_r>:
   8547c:	898a      	ldrh	r2, [r1, #12]
   8547e:	460b      	mov	r3, r1
   85480:	0792      	lsls	r2, r2, #30
   85482:	d506      	bpl.n	85492 <__smakebuf_r+0x16>
   85484:	f101 0243 	add.w	r2, r1, #67	; 0x43
   85488:	2101      	movs	r1, #1
   8548a:	601a      	str	r2, [r3, #0]
   8548c:	611a      	str	r2, [r3, #16]
   8548e:	6159      	str	r1, [r3, #20]
   85490:	4770      	bx	lr
   85492:	b5f0      	push	{r4, r5, r6, r7, lr}
   85494:	b083      	sub	sp, #12
   85496:	ab01      	add	r3, sp, #4
   85498:	466a      	mov	r2, sp
   8549a:	460c      	mov	r4, r1
   8549c:	4605      	mov	r5, r0
   8549e:	f7ff ffbd 	bl	8541c <__swhatbuf_r>
   854a2:	9900      	ldr	r1, [sp, #0]
   854a4:	4606      	mov	r6, r0
   854a6:	4628      	mov	r0, r5
   854a8:	f000 f834 	bl	85514 <_malloc_r>
   854ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   854b0:	b1d0      	cbz	r0, 854e8 <__smakebuf_r+0x6c>
   854b2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   854b6:	4f12      	ldr	r7, [pc, #72]	; (85500 <__smakebuf_r+0x84>)
   854b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   854bc:	63ef      	str	r7, [r5, #60]	; 0x3c
   854be:	81a3      	strh	r3, [r4, #12]
   854c0:	6020      	str	r0, [r4, #0]
   854c2:	6120      	str	r0, [r4, #16]
   854c4:	6161      	str	r1, [r4, #20]
   854c6:	b91a      	cbnz	r2, 854d0 <__smakebuf_r+0x54>
   854c8:	4333      	orrs	r3, r6
   854ca:	81a3      	strh	r3, [r4, #12]
   854cc:	b003      	add	sp, #12
   854ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   854d0:	4628      	mov	r0, r5
   854d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   854d6:	f000 ff15 	bl	86304 <_isatty_r>
   854da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   854de:	2800      	cmp	r0, #0
   854e0:	d0f2      	beq.n	854c8 <__smakebuf_r+0x4c>
   854e2:	f043 0301 	orr.w	r3, r3, #1
   854e6:	e7ef      	b.n	854c8 <__smakebuf_r+0x4c>
   854e8:	059a      	lsls	r2, r3, #22
   854ea:	d4ef      	bmi.n	854cc <__smakebuf_r+0x50>
   854ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
   854f0:	f043 0302 	orr.w	r3, r3, #2
   854f4:	2101      	movs	r1, #1
   854f6:	81a3      	strh	r3, [r4, #12]
   854f8:	6022      	str	r2, [r4, #0]
   854fa:	6122      	str	r2, [r4, #16]
   854fc:	6161      	str	r1, [r4, #20]
   854fe:	e7e5      	b.n	854cc <__smakebuf_r+0x50>
   85500:	00084c55 	.word	0x00084c55

00085504 <malloc>:
   85504:	4b02      	ldr	r3, [pc, #8]	; (85510 <malloc+0xc>)
   85506:	4601      	mov	r1, r0
   85508:	6818      	ldr	r0, [r3, #0]
   8550a:	f000 b803 	b.w	85514 <_malloc_r>
   8550e:	bf00      	nop
   85510:	20070570 	.word	0x20070570

00085514 <_malloc_r>:
   85514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85518:	f101 050b 	add.w	r5, r1, #11
   8551c:	2d16      	cmp	r5, #22
   8551e:	b083      	sub	sp, #12
   85520:	4606      	mov	r6, r0
   85522:	f240 80a0 	bls.w	85666 <_malloc_r+0x152>
   85526:	f035 0507 	bics.w	r5, r5, #7
   8552a:	f100 80c0 	bmi.w	856ae <_malloc_r+0x19a>
   8552e:	42a9      	cmp	r1, r5
   85530:	f200 80bd 	bhi.w	856ae <_malloc_r+0x19a>
   85534:	f000 fb44 	bl	85bc0 <__malloc_lock>
   85538:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8553c:	f0c0 8290 	bcc.w	85a60 <_malloc_r+0x54c>
   85540:	0a6b      	lsrs	r3, r5, #9
   85542:	f000 80bb 	beq.w	856bc <_malloc_r+0x1a8>
   85546:	2b04      	cmp	r3, #4
   85548:	f200 8177 	bhi.w	8583a <_malloc_r+0x326>
   8554c:	09a8      	lsrs	r0, r5, #6
   8554e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   85552:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85556:	3038      	adds	r0, #56	; 0x38
   85558:	4fbe      	ldr	r7, [pc, #760]	; (85854 <_malloc_r+0x340>)
   8555a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8555e:	684c      	ldr	r4, [r1, #4]
   85560:	3908      	subs	r1, #8
   85562:	42a1      	cmp	r1, r4
   85564:	d107      	bne.n	85576 <_malloc_r+0x62>
   85566:	e0ae      	b.n	856c6 <_malloc_r+0x1b2>
   85568:	2a00      	cmp	r2, #0
   8556a:	f280 80ae 	bge.w	856ca <_malloc_r+0x1b6>
   8556e:	68e4      	ldr	r4, [r4, #12]
   85570:	42a1      	cmp	r1, r4
   85572:	f000 80a8 	beq.w	856c6 <_malloc_r+0x1b2>
   85576:	6863      	ldr	r3, [r4, #4]
   85578:	f023 0303 	bic.w	r3, r3, #3
   8557c:	1b5a      	subs	r2, r3, r5
   8557e:	2a0f      	cmp	r2, #15
   85580:	ddf2      	ble.n	85568 <_malloc_r+0x54>
   85582:	49b4      	ldr	r1, [pc, #720]	; (85854 <_malloc_r+0x340>)
   85584:	693c      	ldr	r4, [r7, #16]
   85586:	f101 0e08 	add.w	lr, r1, #8
   8558a:	4574      	cmp	r4, lr
   8558c:	f000 81a8 	beq.w	858e0 <_malloc_r+0x3cc>
   85590:	6863      	ldr	r3, [r4, #4]
   85592:	f023 0303 	bic.w	r3, r3, #3
   85596:	1b5a      	subs	r2, r3, r5
   85598:	2a0f      	cmp	r2, #15
   8559a:	f300 818e 	bgt.w	858ba <_malloc_r+0x3a6>
   8559e:	2a00      	cmp	r2, #0
   855a0:	f8c1 e014 	str.w	lr, [r1, #20]
   855a4:	f8c1 e010 	str.w	lr, [r1, #16]
   855a8:	f280 8093 	bge.w	856d2 <_malloc_r+0x1be>
   855ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   855b0:	f080 815c 	bcs.w	8586c <_malloc_r+0x358>
   855b4:	08db      	lsrs	r3, r3, #3
   855b6:	684a      	ldr	r2, [r1, #4]
   855b8:	ea4f 09a3 	mov.w	r9, r3, asr #2
   855bc:	f04f 0c01 	mov.w	ip, #1
   855c0:	3301      	adds	r3, #1
   855c2:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   855c6:	fa0c f909 	lsl.w	r9, ip, r9
   855ca:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   855ce:	ea49 0202 	orr.w	r2, r9, r2
   855d2:	f1ac 0c08 	sub.w	ip, ip, #8
   855d6:	f8c4 c00c 	str.w	ip, [r4, #12]
   855da:	f8c4 8008 	str.w	r8, [r4, #8]
   855de:	604a      	str	r2, [r1, #4]
   855e0:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   855e4:	f8c8 400c 	str.w	r4, [r8, #12]
   855e8:	1083      	asrs	r3, r0, #2
   855ea:	2401      	movs	r4, #1
   855ec:	409c      	lsls	r4, r3
   855ee:	4294      	cmp	r4, r2
   855f0:	d87c      	bhi.n	856ec <_malloc_r+0x1d8>
   855f2:	4214      	tst	r4, r2
   855f4:	d106      	bne.n	85604 <_malloc_r+0xf0>
   855f6:	f020 0003 	bic.w	r0, r0, #3
   855fa:	0064      	lsls	r4, r4, #1
   855fc:	4214      	tst	r4, r2
   855fe:	f100 0004 	add.w	r0, r0, #4
   85602:	d0fa      	beq.n	855fa <_malloc_r+0xe6>
   85604:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85608:	46cc      	mov	ip, r9
   8560a:	4680      	mov	r8, r0
   8560c:	f8dc 100c 	ldr.w	r1, [ip, #12]
   85610:	458c      	cmp	ip, r1
   85612:	d107      	bne.n	85624 <_malloc_r+0x110>
   85614:	e166      	b.n	858e4 <_malloc_r+0x3d0>
   85616:	2a00      	cmp	r2, #0
   85618:	f280 8174 	bge.w	85904 <_malloc_r+0x3f0>
   8561c:	68c9      	ldr	r1, [r1, #12]
   8561e:	458c      	cmp	ip, r1
   85620:	f000 8160 	beq.w	858e4 <_malloc_r+0x3d0>
   85624:	684b      	ldr	r3, [r1, #4]
   85626:	f023 0303 	bic.w	r3, r3, #3
   8562a:	1b5a      	subs	r2, r3, r5
   8562c:	2a0f      	cmp	r2, #15
   8562e:	ddf2      	ble.n	85616 <_malloc_r+0x102>
   85630:	460c      	mov	r4, r1
   85632:	68cb      	ldr	r3, [r1, #12]
   85634:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85638:	f045 0801 	orr.w	r8, r5, #1
   8563c:	f8c1 8004 	str.w	r8, [r1, #4]
   85640:	440d      	add	r5, r1
   85642:	f042 0101 	orr.w	r1, r2, #1
   85646:	f8cc 300c 	str.w	r3, [ip, #12]
   8564a:	4630      	mov	r0, r6
   8564c:	f8c3 c008 	str.w	ip, [r3, #8]
   85650:	617d      	str	r5, [r7, #20]
   85652:	613d      	str	r5, [r7, #16]
   85654:	f8c5 e00c 	str.w	lr, [r5, #12]
   85658:	f8c5 e008 	str.w	lr, [r5, #8]
   8565c:	6069      	str	r1, [r5, #4]
   8565e:	50aa      	str	r2, [r5, r2]
   85660:	f000 fab0 	bl	85bc4 <__malloc_unlock>
   85664:	e01f      	b.n	856a6 <_malloc_r+0x192>
   85666:	2910      	cmp	r1, #16
   85668:	d821      	bhi.n	856ae <_malloc_r+0x19a>
   8566a:	f000 faa9 	bl	85bc0 <__malloc_lock>
   8566e:	2510      	movs	r5, #16
   85670:	2306      	movs	r3, #6
   85672:	2002      	movs	r0, #2
   85674:	4f77      	ldr	r7, [pc, #476]	; (85854 <_malloc_r+0x340>)
   85676:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   8567a:	685c      	ldr	r4, [r3, #4]
   8567c:	f1a3 0208 	sub.w	r2, r3, #8
   85680:	4294      	cmp	r4, r2
   85682:	f000 8138 	beq.w	858f6 <_malloc_r+0x3e2>
   85686:	6863      	ldr	r3, [r4, #4]
   85688:	68e1      	ldr	r1, [r4, #12]
   8568a:	f023 0303 	bic.w	r3, r3, #3
   8568e:	4423      	add	r3, r4
   85690:	685a      	ldr	r2, [r3, #4]
   85692:	68a5      	ldr	r5, [r4, #8]
   85694:	f042 0201 	orr.w	r2, r2, #1
   85698:	60e9      	str	r1, [r5, #12]
   8569a:	4630      	mov	r0, r6
   8569c:	608d      	str	r5, [r1, #8]
   8569e:	605a      	str	r2, [r3, #4]
   856a0:	f000 fa90 	bl	85bc4 <__malloc_unlock>
   856a4:	3408      	adds	r4, #8
   856a6:	4620      	mov	r0, r4
   856a8:	b003      	add	sp, #12
   856aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856ae:	2400      	movs	r4, #0
   856b0:	4620      	mov	r0, r4
   856b2:	230c      	movs	r3, #12
   856b4:	6033      	str	r3, [r6, #0]
   856b6:	b003      	add	sp, #12
   856b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856bc:	2180      	movs	r1, #128	; 0x80
   856be:	f04f 0e40 	mov.w	lr, #64	; 0x40
   856c2:	203f      	movs	r0, #63	; 0x3f
   856c4:	e748      	b.n	85558 <_malloc_r+0x44>
   856c6:	4670      	mov	r0, lr
   856c8:	e75b      	b.n	85582 <_malloc_r+0x6e>
   856ca:	4423      	add	r3, r4
   856cc:	685a      	ldr	r2, [r3, #4]
   856ce:	68e1      	ldr	r1, [r4, #12]
   856d0:	e7df      	b.n	85692 <_malloc_r+0x17e>
   856d2:	4423      	add	r3, r4
   856d4:	685a      	ldr	r2, [r3, #4]
   856d6:	4630      	mov	r0, r6
   856d8:	f042 0201 	orr.w	r2, r2, #1
   856dc:	605a      	str	r2, [r3, #4]
   856de:	3408      	adds	r4, #8
   856e0:	f000 fa70 	bl	85bc4 <__malloc_unlock>
   856e4:	4620      	mov	r0, r4
   856e6:	b003      	add	sp, #12
   856e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856ec:	68bc      	ldr	r4, [r7, #8]
   856ee:	6863      	ldr	r3, [r4, #4]
   856f0:	f023 0803 	bic.w	r8, r3, #3
   856f4:	45a8      	cmp	r8, r5
   856f6:	d304      	bcc.n	85702 <_malloc_r+0x1ee>
   856f8:	ebc5 0308 	rsb	r3, r5, r8
   856fc:	2b0f      	cmp	r3, #15
   856fe:	f300 808c 	bgt.w	8581a <_malloc_r+0x306>
   85702:	4b55      	ldr	r3, [pc, #340]	; (85858 <_malloc_r+0x344>)
   85704:	f8df 9160 	ldr.w	r9, [pc, #352]	; 85868 <_malloc_r+0x354>
   85708:	681a      	ldr	r2, [r3, #0]
   8570a:	f8d9 3000 	ldr.w	r3, [r9]
   8570e:	442a      	add	r2, r5
   85710:	3301      	adds	r3, #1
   85712:	eb04 0a08 	add.w	sl, r4, r8
   85716:	f000 8160 	beq.w	859da <_malloc_r+0x4c6>
   8571a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8571e:	320f      	adds	r2, #15
   85720:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85724:	f022 020f 	bic.w	r2, r2, #15
   85728:	4611      	mov	r1, r2
   8572a:	4630      	mov	r0, r6
   8572c:	9201      	str	r2, [sp, #4]
   8572e:	f000 fc35 	bl	85f9c <_sbrk_r>
   85732:	f1b0 3fff 	cmp.w	r0, #4294967295
   85736:	4683      	mov	fp, r0
   85738:	9a01      	ldr	r2, [sp, #4]
   8573a:	f000 8158 	beq.w	859ee <_malloc_r+0x4da>
   8573e:	4582      	cmp	sl, r0
   85740:	f200 80fc 	bhi.w	8593c <_malloc_r+0x428>
   85744:	4b45      	ldr	r3, [pc, #276]	; (8585c <_malloc_r+0x348>)
   85746:	45da      	cmp	sl, fp
   85748:	6819      	ldr	r1, [r3, #0]
   8574a:	4411      	add	r1, r2
   8574c:	6019      	str	r1, [r3, #0]
   8574e:	f000 8153 	beq.w	859f8 <_malloc_r+0x4e4>
   85752:	f8d9 0000 	ldr.w	r0, [r9]
   85756:	f8df e110 	ldr.w	lr, [pc, #272]	; 85868 <_malloc_r+0x354>
   8575a:	3001      	adds	r0, #1
   8575c:	bf1b      	ittet	ne
   8575e:	ebca 0a0b 	rsbne	sl, sl, fp
   85762:	4451      	addne	r1, sl
   85764:	f8ce b000 	streq.w	fp, [lr]
   85768:	6019      	strne	r1, [r3, #0]
   8576a:	f01b 0107 	ands.w	r1, fp, #7
   8576e:	f000 8117 	beq.w	859a0 <_malloc_r+0x48c>
   85772:	f1c1 0008 	rsb	r0, r1, #8
   85776:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8577a:	4483      	add	fp, r0
   8577c:	3108      	adds	r1, #8
   8577e:	445a      	add	r2, fp
   85780:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85784:	ebc2 0901 	rsb	r9, r2, r1
   85788:	4649      	mov	r1, r9
   8578a:	4630      	mov	r0, r6
   8578c:	9301      	str	r3, [sp, #4]
   8578e:	f000 fc05 	bl	85f9c <_sbrk_r>
   85792:	1c43      	adds	r3, r0, #1
   85794:	9b01      	ldr	r3, [sp, #4]
   85796:	f000 813f 	beq.w	85a18 <_malloc_r+0x504>
   8579a:	ebcb 0200 	rsb	r2, fp, r0
   8579e:	444a      	add	r2, r9
   857a0:	f042 0201 	orr.w	r2, r2, #1
   857a4:	6819      	ldr	r1, [r3, #0]
   857a6:	42bc      	cmp	r4, r7
   857a8:	4449      	add	r1, r9
   857aa:	f8c7 b008 	str.w	fp, [r7, #8]
   857ae:	6019      	str	r1, [r3, #0]
   857b0:	f8cb 2004 	str.w	r2, [fp, #4]
   857b4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8585c <_malloc_r+0x348>
   857b8:	d016      	beq.n	857e8 <_malloc_r+0x2d4>
   857ba:	f1b8 0f0f 	cmp.w	r8, #15
   857be:	f240 80fd 	bls.w	859bc <_malloc_r+0x4a8>
   857c2:	6862      	ldr	r2, [r4, #4]
   857c4:	f1a8 030c 	sub.w	r3, r8, #12
   857c8:	f023 0307 	bic.w	r3, r3, #7
   857cc:	f002 0201 	and.w	r2, r2, #1
   857d0:	18e0      	adds	r0, r4, r3
   857d2:	f04f 0e05 	mov.w	lr, #5
   857d6:	431a      	orrs	r2, r3
   857d8:	2b0f      	cmp	r3, #15
   857da:	6062      	str	r2, [r4, #4]
   857dc:	f8c0 e004 	str.w	lr, [r0, #4]
   857e0:	f8c0 e008 	str.w	lr, [r0, #8]
   857e4:	f200 811c 	bhi.w	85a20 <_malloc_r+0x50c>
   857e8:	4b1d      	ldr	r3, [pc, #116]	; (85860 <_malloc_r+0x34c>)
   857ea:	68bc      	ldr	r4, [r7, #8]
   857ec:	681a      	ldr	r2, [r3, #0]
   857ee:	4291      	cmp	r1, r2
   857f0:	bf88      	it	hi
   857f2:	6019      	strhi	r1, [r3, #0]
   857f4:	4b1b      	ldr	r3, [pc, #108]	; (85864 <_malloc_r+0x350>)
   857f6:	681a      	ldr	r2, [r3, #0]
   857f8:	4291      	cmp	r1, r2
   857fa:	6862      	ldr	r2, [r4, #4]
   857fc:	bf88      	it	hi
   857fe:	6019      	strhi	r1, [r3, #0]
   85800:	f022 0203 	bic.w	r2, r2, #3
   85804:	4295      	cmp	r5, r2
   85806:	eba2 0305 	sub.w	r3, r2, r5
   8580a:	d801      	bhi.n	85810 <_malloc_r+0x2fc>
   8580c:	2b0f      	cmp	r3, #15
   8580e:	dc04      	bgt.n	8581a <_malloc_r+0x306>
   85810:	4630      	mov	r0, r6
   85812:	f000 f9d7 	bl	85bc4 <__malloc_unlock>
   85816:	2400      	movs	r4, #0
   85818:	e745      	b.n	856a6 <_malloc_r+0x192>
   8581a:	f045 0201 	orr.w	r2, r5, #1
   8581e:	f043 0301 	orr.w	r3, r3, #1
   85822:	4425      	add	r5, r4
   85824:	6062      	str	r2, [r4, #4]
   85826:	4630      	mov	r0, r6
   85828:	60bd      	str	r5, [r7, #8]
   8582a:	3408      	adds	r4, #8
   8582c:	606b      	str	r3, [r5, #4]
   8582e:	f000 f9c9 	bl	85bc4 <__malloc_unlock>
   85832:	4620      	mov	r0, r4
   85834:	b003      	add	sp, #12
   85836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8583a:	2b14      	cmp	r3, #20
   8583c:	d971      	bls.n	85922 <_malloc_r+0x40e>
   8583e:	2b54      	cmp	r3, #84	; 0x54
   85840:	f200 80a4 	bhi.w	8598c <_malloc_r+0x478>
   85844:	0b28      	lsrs	r0, r5, #12
   85846:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   8584a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8584e:	306e      	adds	r0, #110	; 0x6e
   85850:	e682      	b.n	85558 <_malloc_r+0x44>
   85852:	bf00      	nop
   85854:	20070598 	.word	0x20070598
   85858:	2007ac60 	.word	0x2007ac60
   8585c:	2007ac64 	.word	0x2007ac64
   85860:	2007ac5c 	.word	0x2007ac5c
   85864:	2007ac58 	.word	0x2007ac58
   85868:	200709a4 	.word	0x200709a4
   8586c:	0a5a      	lsrs	r2, r3, #9
   8586e:	2a04      	cmp	r2, #4
   85870:	d95e      	bls.n	85930 <_malloc_r+0x41c>
   85872:	2a14      	cmp	r2, #20
   85874:	f200 80b3 	bhi.w	859de <_malloc_r+0x4ca>
   85878:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8587c:	0049      	lsls	r1, r1, #1
   8587e:	325b      	adds	r2, #91	; 0x5b
   85880:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   85884:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   85888:	f1ac 0c08 	sub.w	ip, ip, #8
   8588c:	458c      	cmp	ip, r1
   8588e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 85a68 <_malloc_r+0x554>
   85892:	f000 8088 	beq.w	859a6 <_malloc_r+0x492>
   85896:	684a      	ldr	r2, [r1, #4]
   85898:	f022 0203 	bic.w	r2, r2, #3
   8589c:	4293      	cmp	r3, r2
   8589e:	d202      	bcs.n	858a6 <_malloc_r+0x392>
   858a0:	6889      	ldr	r1, [r1, #8]
   858a2:	458c      	cmp	ip, r1
   858a4:	d1f7      	bne.n	85896 <_malloc_r+0x382>
   858a6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   858aa:	687a      	ldr	r2, [r7, #4]
   858ac:	f8c4 c00c 	str.w	ip, [r4, #12]
   858b0:	60a1      	str	r1, [r4, #8]
   858b2:	f8cc 4008 	str.w	r4, [ip, #8]
   858b6:	60cc      	str	r4, [r1, #12]
   858b8:	e696      	b.n	855e8 <_malloc_r+0xd4>
   858ba:	f045 0701 	orr.w	r7, r5, #1
   858be:	f042 0301 	orr.w	r3, r2, #1
   858c2:	4425      	add	r5, r4
   858c4:	6067      	str	r7, [r4, #4]
   858c6:	4630      	mov	r0, r6
   858c8:	614d      	str	r5, [r1, #20]
   858ca:	610d      	str	r5, [r1, #16]
   858cc:	f8c5 e00c 	str.w	lr, [r5, #12]
   858d0:	f8c5 e008 	str.w	lr, [r5, #8]
   858d4:	606b      	str	r3, [r5, #4]
   858d6:	50aa      	str	r2, [r5, r2]
   858d8:	3408      	adds	r4, #8
   858da:	f000 f973 	bl	85bc4 <__malloc_unlock>
   858de:	e6e2      	b.n	856a6 <_malloc_r+0x192>
   858e0:	684a      	ldr	r2, [r1, #4]
   858e2:	e681      	b.n	855e8 <_malloc_r+0xd4>
   858e4:	f108 0801 	add.w	r8, r8, #1
   858e8:	f018 0f03 	tst.w	r8, #3
   858ec:	f10c 0c08 	add.w	ip, ip, #8
   858f0:	f47f ae8c 	bne.w	8560c <_malloc_r+0xf8>
   858f4:	e030      	b.n	85958 <_malloc_r+0x444>
   858f6:	68dc      	ldr	r4, [r3, #12]
   858f8:	42a3      	cmp	r3, r4
   858fa:	bf08      	it	eq
   858fc:	3002      	addeq	r0, #2
   858fe:	f43f ae40 	beq.w	85582 <_malloc_r+0x6e>
   85902:	e6c0      	b.n	85686 <_malloc_r+0x172>
   85904:	460c      	mov	r4, r1
   85906:	440b      	add	r3, r1
   85908:	685a      	ldr	r2, [r3, #4]
   8590a:	68c9      	ldr	r1, [r1, #12]
   8590c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85910:	f042 0201 	orr.w	r2, r2, #1
   85914:	605a      	str	r2, [r3, #4]
   85916:	4630      	mov	r0, r6
   85918:	60e9      	str	r1, [r5, #12]
   8591a:	608d      	str	r5, [r1, #8]
   8591c:	f000 f952 	bl	85bc4 <__malloc_unlock>
   85920:	e6c1      	b.n	856a6 <_malloc_r+0x192>
   85922:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85926:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   8592a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8592e:	e613      	b.n	85558 <_malloc_r+0x44>
   85930:	099a      	lsrs	r2, r3, #6
   85932:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85936:	0049      	lsls	r1, r1, #1
   85938:	3238      	adds	r2, #56	; 0x38
   8593a:	e7a1      	b.n	85880 <_malloc_r+0x36c>
   8593c:	42bc      	cmp	r4, r7
   8593e:	4b4a      	ldr	r3, [pc, #296]	; (85a68 <_malloc_r+0x554>)
   85940:	f43f af00 	beq.w	85744 <_malloc_r+0x230>
   85944:	689c      	ldr	r4, [r3, #8]
   85946:	6862      	ldr	r2, [r4, #4]
   85948:	f022 0203 	bic.w	r2, r2, #3
   8594c:	e75a      	b.n	85804 <_malloc_r+0x2f0>
   8594e:	f859 3908 	ldr.w	r3, [r9], #-8
   85952:	4599      	cmp	r9, r3
   85954:	f040 8082 	bne.w	85a5c <_malloc_r+0x548>
   85958:	f010 0f03 	tst.w	r0, #3
   8595c:	f100 30ff 	add.w	r0, r0, #4294967295
   85960:	d1f5      	bne.n	8594e <_malloc_r+0x43a>
   85962:	687b      	ldr	r3, [r7, #4]
   85964:	ea23 0304 	bic.w	r3, r3, r4
   85968:	607b      	str	r3, [r7, #4]
   8596a:	0064      	lsls	r4, r4, #1
   8596c:	429c      	cmp	r4, r3
   8596e:	f63f aebd 	bhi.w	856ec <_malloc_r+0x1d8>
   85972:	2c00      	cmp	r4, #0
   85974:	f43f aeba 	beq.w	856ec <_malloc_r+0x1d8>
   85978:	421c      	tst	r4, r3
   8597a:	4640      	mov	r0, r8
   8597c:	f47f ae42 	bne.w	85604 <_malloc_r+0xf0>
   85980:	0064      	lsls	r4, r4, #1
   85982:	421c      	tst	r4, r3
   85984:	f100 0004 	add.w	r0, r0, #4
   85988:	d0fa      	beq.n	85980 <_malloc_r+0x46c>
   8598a:	e63b      	b.n	85604 <_malloc_r+0xf0>
   8598c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85990:	d818      	bhi.n	859c4 <_malloc_r+0x4b0>
   85992:	0be8      	lsrs	r0, r5, #15
   85994:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85998:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8599c:	3077      	adds	r0, #119	; 0x77
   8599e:	e5db      	b.n	85558 <_malloc_r+0x44>
   859a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   859a4:	e6eb      	b.n	8577e <_malloc_r+0x26a>
   859a6:	2101      	movs	r1, #1
   859a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   859ac:	1092      	asrs	r2, r2, #2
   859ae:	fa01 f202 	lsl.w	r2, r1, r2
   859b2:	431a      	orrs	r2, r3
   859b4:	f8c8 2004 	str.w	r2, [r8, #4]
   859b8:	4661      	mov	r1, ip
   859ba:	e777      	b.n	858ac <_malloc_r+0x398>
   859bc:	2301      	movs	r3, #1
   859be:	f8cb 3004 	str.w	r3, [fp, #4]
   859c2:	e725      	b.n	85810 <_malloc_r+0x2fc>
   859c4:	f240 5254 	movw	r2, #1364	; 0x554
   859c8:	4293      	cmp	r3, r2
   859ca:	d820      	bhi.n	85a0e <_malloc_r+0x4fa>
   859cc:	0ca8      	lsrs	r0, r5, #18
   859ce:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   859d2:	ea4f 014e 	mov.w	r1, lr, lsl #1
   859d6:	307c      	adds	r0, #124	; 0x7c
   859d8:	e5be      	b.n	85558 <_malloc_r+0x44>
   859da:	3210      	adds	r2, #16
   859dc:	e6a4      	b.n	85728 <_malloc_r+0x214>
   859de:	2a54      	cmp	r2, #84	; 0x54
   859e0:	d826      	bhi.n	85a30 <_malloc_r+0x51c>
   859e2:	0b1a      	lsrs	r2, r3, #12
   859e4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   859e8:	0049      	lsls	r1, r1, #1
   859ea:	326e      	adds	r2, #110	; 0x6e
   859ec:	e748      	b.n	85880 <_malloc_r+0x36c>
   859ee:	68bc      	ldr	r4, [r7, #8]
   859f0:	6862      	ldr	r2, [r4, #4]
   859f2:	f022 0203 	bic.w	r2, r2, #3
   859f6:	e705      	b.n	85804 <_malloc_r+0x2f0>
   859f8:	f3ca 000b 	ubfx	r0, sl, #0, #12
   859fc:	2800      	cmp	r0, #0
   859fe:	f47f aea8 	bne.w	85752 <_malloc_r+0x23e>
   85a02:	4442      	add	r2, r8
   85a04:	68bb      	ldr	r3, [r7, #8]
   85a06:	f042 0201 	orr.w	r2, r2, #1
   85a0a:	605a      	str	r2, [r3, #4]
   85a0c:	e6ec      	b.n	857e8 <_malloc_r+0x2d4>
   85a0e:	21fe      	movs	r1, #254	; 0xfe
   85a10:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85a14:	207e      	movs	r0, #126	; 0x7e
   85a16:	e59f      	b.n	85558 <_malloc_r+0x44>
   85a18:	2201      	movs	r2, #1
   85a1a:	f04f 0900 	mov.w	r9, #0
   85a1e:	e6c1      	b.n	857a4 <_malloc_r+0x290>
   85a20:	f104 0108 	add.w	r1, r4, #8
   85a24:	4630      	mov	r0, r6
   85a26:	f7ff fa5b 	bl	84ee0 <_free_r>
   85a2a:	f8d9 1000 	ldr.w	r1, [r9]
   85a2e:	e6db      	b.n	857e8 <_malloc_r+0x2d4>
   85a30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85a34:	d805      	bhi.n	85a42 <_malloc_r+0x52e>
   85a36:	0bda      	lsrs	r2, r3, #15
   85a38:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85a3c:	0049      	lsls	r1, r1, #1
   85a3e:	3277      	adds	r2, #119	; 0x77
   85a40:	e71e      	b.n	85880 <_malloc_r+0x36c>
   85a42:	f240 5154 	movw	r1, #1364	; 0x554
   85a46:	428a      	cmp	r2, r1
   85a48:	d805      	bhi.n	85a56 <_malloc_r+0x542>
   85a4a:	0c9a      	lsrs	r2, r3, #18
   85a4c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85a50:	0049      	lsls	r1, r1, #1
   85a52:	327c      	adds	r2, #124	; 0x7c
   85a54:	e714      	b.n	85880 <_malloc_r+0x36c>
   85a56:	21fe      	movs	r1, #254	; 0xfe
   85a58:	227e      	movs	r2, #126	; 0x7e
   85a5a:	e711      	b.n	85880 <_malloc_r+0x36c>
   85a5c:	687b      	ldr	r3, [r7, #4]
   85a5e:	e784      	b.n	8596a <_malloc_r+0x456>
   85a60:	08e8      	lsrs	r0, r5, #3
   85a62:	1c43      	adds	r3, r0, #1
   85a64:	005b      	lsls	r3, r3, #1
   85a66:	e605      	b.n	85674 <_malloc_r+0x160>
   85a68:	20070598 	.word	0x20070598

00085a6c <memchr>:
   85a6c:	0783      	lsls	r3, r0, #30
   85a6e:	b470      	push	{r4, r5, r6}
   85a70:	b2cd      	uxtb	r5, r1
   85a72:	d03d      	beq.n	85af0 <memchr+0x84>
   85a74:	1e53      	subs	r3, r2, #1
   85a76:	b302      	cbz	r2, 85aba <memchr+0x4e>
   85a78:	7802      	ldrb	r2, [r0, #0]
   85a7a:	42aa      	cmp	r2, r5
   85a7c:	d01e      	beq.n	85abc <memchr+0x50>
   85a7e:	1c42      	adds	r2, r0, #1
   85a80:	e004      	b.n	85a8c <memchr+0x20>
   85a82:	b1d3      	cbz	r3, 85aba <memchr+0x4e>
   85a84:	7804      	ldrb	r4, [r0, #0]
   85a86:	3b01      	subs	r3, #1
   85a88:	42ac      	cmp	r4, r5
   85a8a:	d017      	beq.n	85abc <memchr+0x50>
   85a8c:	f012 0f03 	tst.w	r2, #3
   85a90:	4610      	mov	r0, r2
   85a92:	f102 0201 	add.w	r2, r2, #1
   85a96:	d1f4      	bne.n	85a82 <memchr+0x16>
   85a98:	2b03      	cmp	r3, #3
   85a9a:	d811      	bhi.n	85ac0 <memchr+0x54>
   85a9c:	b353      	cbz	r3, 85af4 <memchr+0x88>
   85a9e:	7802      	ldrb	r2, [r0, #0]
   85aa0:	42aa      	cmp	r2, r5
   85aa2:	d00b      	beq.n	85abc <memchr+0x50>
   85aa4:	4403      	add	r3, r0
   85aa6:	1c42      	adds	r2, r0, #1
   85aa8:	e002      	b.n	85ab0 <memchr+0x44>
   85aaa:	7801      	ldrb	r1, [r0, #0]
   85aac:	42a9      	cmp	r1, r5
   85aae:	d005      	beq.n	85abc <memchr+0x50>
   85ab0:	4293      	cmp	r3, r2
   85ab2:	4610      	mov	r0, r2
   85ab4:	f102 0201 	add.w	r2, r2, #1
   85ab8:	d1f7      	bne.n	85aaa <memchr+0x3e>
   85aba:	2000      	movs	r0, #0
   85abc:	bc70      	pop	{r4, r5, r6}
   85abe:	4770      	bx	lr
   85ac0:	4604      	mov	r4, r0
   85ac2:	020e      	lsls	r6, r1, #8
   85ac4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85ac8:	432e      	orrs	r6, r5
   85aca:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85ace:	6822      	ldr	r2, [r4, #0]
   85ad0:	4620      	mov	r0, r4
   85ad2:	4072      	eors	r2, r6
   85ad4:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85ad8:	ea21 0202 	bic.w	r2, r1, r2
   85adc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85ae0:	f104 0404 	add.w	r4, r4, #4
   85ae4:	d1db      	bne.n	85a9e <memchr+0x32>
   85ae6:	3b04      	subs	r3, #4
   85ae8:	2b03      	cmp	r3, #3
   85aea:	4620      	mov	r0, r4
   85aec:	d8ef      	bhi.n	85ace <memchr+0x62>
   85aee:	e7d5      	b.n	85a9c <memchr+0x30>
   85af0:	4613      	mov	r3, r2
   85af2:	e7d1      	b.n	85a98 <memchr+0x2c>
   85af4:	4618      	mov	r0, r3
   85af6:	e7e1      	b.n	85abc <memchr+0x50>

00085af8 <memmove>:
   85af8:	4288      	cmp	r0, r1
   85afa:	b5f0      	push	{r4, r5, r6, r7, lr}
   85afc:	d90d      	bls.n	85b1a <memmove+0x22>
   85afe:	188b      	adds	r3, r1, r2
   85b00:	4298      	cmp	r0, r3
   85b02:	d20a      	bcs.n	85b1a <memmove+0x22>
   85b04:	1881      	adds	r1, r0, r2
   85b06:	2a00      	cmp	r2, #0
   85b08:	d051      	beq.n	85bae <memmove+0xb6>
   85b0a:	1a9a      	subs	r2, r3, r2
   85b0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85b10:	4293      	cmp	r3, r2
   85b12:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85b16:	d1f9      	bne.n	85b0c <memmove+0x14>
   85b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b1a:	2a0f      	cmp	r2, #15
   85b1c:	d948      	bls.n	85bb0 <memmove+0xb8>
   85b1e:	ea41 0300 	orr.w	r3, r1, r0
   85b22:	079b      	lsls	r3, r3, #30
   85b24:	d146      	bne.n	85bb4 <memmove+0xbc>
   85b26:	4615      	mov	r5, r2
   85b28:	f100 0410 	add.w	r4, r0, #16
   85b2c:	f101 0310 	add.w	r3, r1, #16
   85b30:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85b34:	3d10      	subs	r5, #16
   85b36:	f844 6c10 	str.w	r6, [r4, #-16]
   85b3a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85b3e:	2d0f      	cmp	r5, #15
   85b40:	f844 6c0c 	str.w	r6, [r4, #-12]
   85b44:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85b48:	f104 0410 	add.w	r4, r4, #16
   85b4c:	f844 6c18 	str.w	r6, [r4, #-24]
   85b50:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85b54:	f103 0310 	add.w	r3, r3, #16
   85b58:	f844 6c14 	str.w	r6, [r4, #-20]
   85b5c:	d8e8      	bhi.n	85b30 <memmove+0x38>
   85b5e:	f1a2 0310 	sub.w	r3, r2, #16
   85b62:	f023 030f 	bic.w	r3, r3, #15
   85b66:	f002 0e0f 	and.w	lr, r2, #15
   85b6a:	3310      	adds	r3, #16
   85b6c:	f1be 0f03 	cmp.w	lr, #3
   85b70:	4419      	add	r1, r3
   85b72:	4403      	add	r3, r0
   85b74:	d921      	bls.n	85bba <memmove+0xc2>
   85b76:	460e      	mov	r6, r1
   85b78:	4674      	mov	r4, lr
   85b7a:	1f1d      	subs	r5, r3, #4
   85b7c:	f856 7b04 	ldr.w	r7, [r6], #4
   85b80:	3c04      	subs	r4, #4
   85b82:	2c03      	cmp	r4, #3
   85b84:	f845 7f04 	str.w	r7, [r5, #4]!
   85b88:	d8f8      	bhi.n	85b7c <memmove+0x84>
   85b8a:	f1ae 0404 	sub.w	r4, lr, #4
   85b8e:	f024 0403 	bic.w	r4, r4, #3
   85b92:	3404      	adds	r4, #4
   85b94:	4423      	add	r3, r4
   85b96:	4421      	add	r1, r4
   85b98:	f002 0203 	and.w	r2, r2, #3
   85b9c:	b162      	cbz	r2, 85bb8 <memmove+0xc0>
   85b9e:	3b01      	subs	r3, #1
   85ba0:	440a      	add	r2, r1
   85ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
   85ba6:	428a      	cmp	r2, r1
   85ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
   85bac:	d1f9      	bne.n	85ba2 <memmove+0xaa>
   85bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bb0:	4603      	mov	r3, r0
   85bb2:	e7f3      	b.n	85b9c <memmove+0xa4>
   85bb4:	4603      	mov	r3, r0
   85bb6:	e7f2      	b.n	85b9e <memmove+0xa6>
   85bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bba:	4672      	mov	r2, lr
   85bbc:	e7ee      	b.n	85b9c <memmove+0xa4>
   85bbe:	bf00      	nop

00085bc0 <__malloc_lock>:
   85bc0:	4770      	bx	lr
   85bc2:	bf00      	nop

00085bc4 <__malloc_unlock>:
   85bc4:	4770      	bx	lr
   85bc6:	bf00      	nop

00085bc8 <_realloc_r>:
   85bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85bcc:	4617      	mov	r7, r2
   85bce:	b083      	sub	sp, #12
   85bd0:	2900      	cmp	r1, #0
   85bd2:	f000 808f 	beq.w	85cf4 <_realloc_r+0x12c>
   85bd6:	460d      	mov	r5, r1
   85bd8:	4681      	mov	r9, r0
   85bda:	f107 040b 	add.w	r4, r7, #11
   85bde:	f7ff ffef 	bl	85bc0 <__malloc_lock>
   85be2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   85be6:	2c16      	cmp	r4, #22
   85be8:	f02e 0603 	bic.w	r6, lr, #3
   85bec:	f1a5 0808 	sub.w	r8, r5, #8
   85bf0:	d83c      	bhi.n	85c6c <_realloc_r+0xa4>
   85bf2:	2210      	movs	r2, #16
   85bf4:	4614      	mov	r4, r2
   85bf6:	42a7      	cmp	r7, r4
   85bf8:	d83d      	bhi.n	85c76 <_realloc_r+0xae>
   85bfa:	4296      	cmp	r6, r2
   85bfc:	da42      	bge.n	85c84 <_realloc_r+0xbc>
   85bfe:	4bc6      	ldr	r3, [pc, #792]	; (85f18 <_realloc_r+0x350>)
   85c00:	eb08 0006 	add.w	r0, r8, r6
   85c04:	6899      	ldr	r1, [r3, #8]
   85c06:	4288      	cmp	r0, r1
   85c08:	6841      	ldr	r1, [r0, #4]
   85c0a:	f000 80d7 	beq.w	85dbc <_realloc_r+0x1f4>
   85c0e:	f021 0301 	bic.w	r3, r1, #1
   85c12:	4403      	add	r3, r0
   85c14:	685b      	ldr	r3, [r3, #4]
   85c16:	07db      	lsls	r3, r3, #31
   85c18:	d54c      	bpl.n	85cb4 <_realloc_r+0xec>
   85c1a:	f01e 0f01 	tst.w	lr, #1
   85c1e:	f000 809d 	beq.w	85d5c <_realloc_r+0x194>
   85c22:	4639      	mov	r1, r7
   85c24:	4648      	mov	r0, r9
   85c26:	f7ff fc75 	bl	85514 <_malloc_r>
   85c2a:	4607      	mov	r7, r0
   85c2c:	2800      	cmp	r0, #0
   85c2e:	d03a      	beq.n	85ca6 <_realloc_r+0xde>
   85c30:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85c34:	f1a0 0208 	sub.w	r2, r0, #8
   85c38:	f023 0301 	bic.w	r3, r3, #1
   85c3c:	4443      	add	r3, r8
   85c3e:	429a      	cmp	r2, r3
   85c40:	f000 813e 	beq.w	85ec0 <_realloc_r+0x2f8>
   85c44:	1f32      	subs	r2, r6, #4
   85c46:	2a24      	cmp	r2, #36	; 0x24
   85c48:	f200 812b 	bhi.w	85ea2 <_realloc_r+0x2da>
   85c4c:	2a13      	cmp	r2, #19
   85c4e:	f200 80ff 	bhi.w	85e50 <_realloc_r+0x288>
   85c52:	4603      	mov	r3, r0
   85c54:	462a      	mov	r2, r5
   85c56:	6811      	ldr	r1, [r2, #0]
   85c58:	6019      	str	r1, [r3, #0]
   85c5a:	6851      	ldr	r1, [r2, #4]
   85c5c:	6059      	str	r1, [r3, #4]
   85c5e:	6892      	ldr	r2, [r2, #8]
   85c60:	609a      	str	r2, [r3, #8]
   85c62:	4629      	mov	r1, r5
   85c64:	4648      	mov	r0, r9
   85c66:	f7ff f93b 	bl	84ee0 <_free_r>
   85c6a:	e01c      	b.n	85ca6 <_realloc_r+0xde>
   85c6c:	f024 0407 	bic.w	r4, r4, #7
   85c70:	2c00      	cmp	r4, #0
   85c72:	4622      	mov	r2, r4
   85c74:	dabf      	bge.n	85bf6 <_realloc_r+0x2e>
   85c76:	230c      	movs	r3, #12
   85c78:	2000      	movs	r0, #0
   85c7a:	f8c9 3000 	str.w	r3, [r9]
   85c7e:	b003      	add	sp, #12
   85c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c84:	462f      	mov	r7, r5
   85c86:	1b33      	subs	r3, r6, r4
   85c88:	2b0f      	cmp	r3, #15
   85c8a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85c8e:	d81d      	bhi.n	85ccc <_realloc_r+0x104>
   85c90:	f002 0201 	and.w	r2, r2, #1
   85c94:	4332      	orrs	r2, r6
   85c96:	eb08 0106 	add.w	r1, r8, r6
   85c9a:	f8c8 2004 	str.w	r2, [r8, #4]
   85c9e:	684b      	ldr	r3, [r1, #4]
   85ca0:	f043 0301 	orr.w	r3, r3, #1
   85ca4:	604b      	str	r3, [r1, #4]
   85ca6:	4648      	mov	r0, r9
   85ca8:	f7ff ff8c 	bl	85bc4 <__malloc_unlock>
   85cac:	4638      	mov	r0, r7
   85cae:	b003      	add	sp, #12
   85cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cb4:	f021 0103 	bic.w	r1, r1, #3
   85cb8:	4431      	add	r1, r6
   85cba:	4291      	cmp	r1, r2
   85cbc:	db20      	blt.n	85d00 <_realloc_r+0x138>
   85cbe:	68c3      	ldr	r3, [r0, #12]
   85cc0:	6882      	ldr	r2, [r0, #8]
   85cc2:	462f      	mov	r7, r5
   85cc4:	60d3      	str	r3, [r2, #12]
   85cc6:	460e      	mov	r6, r1
   85cc8:	609a      	str	r2, [r3, #8]
   85cca:	e7dc      	b.n	85c86 <_realloc_r+0xbe>
   85ccc:	f002 0201 	and.w	r2, r2, #1
   85cd0:	eb08 0104 	add.w	r1, r8, r4
   85cd4:	4314      	orrs	r4, r2
   85cd6:	f043 0201 	orr.w	r2, r3, #1
   85cda:	f8c8 4004 	str.w	r4, [r8, #4]
   85cde:	440b      	add	r3, r1
   85ce0:	604a      	str	r2, [r1, #4]
   85ce2:	685a      	ldr	r2, [r3, #4]
   85ce4:	3108      	adds	r1, #8
   85ce6:	f042 0201 	orr.w	r2, r2, #1
   85cea:	605a      	str	r2, [r3, #4]
   85cec:	4648      	mov	r0, r9
   85cee:	f7ff f8f7 	bl	84ee0 <_free_r>
   85cf2:	e7d8      	b.n	85ca6 <_realloc_r+0xde>
   85cf4:	4611      	mov	r1, r2
   85cf6:	b003      	add	sp, #12
   85cf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85cfc:	f7ff bc0a 	b.w	85514 <_malloc_r>
   85d00:	f01e 0f01 	tst.w	lr, #1
   85d04:	d18d      	bne.n	85c22 <_realloc_r+0x5a>
   85d06:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d0a:	ebc3 0a08 	rsb	sl, r3, r8
   85d0e:	f8da 3004 	ldr.w	r3, [sl, #4]
   85d12:	f023 0c03 	bic.w	ip, r3, #3
   85d16:	eb01 0e0c 	add.w	lr, r1, ip
   85d1a:	4596      	cmp	lr, r2
   85d1c:	db26      	blt.n	85d6c <_realloc_r+0x1a4>
   85d1e:	4657      	mov	r7, sl
   85d20:	68c3      	ldr	r3, [r0, #12]
   85d22:	6881      	ldr	r1, [r0, #8]
   85d24:	1f32      	subs	r2, r6, #4
   85d26:	60cb      	str	r3, [r1, #12]
   85d28:	6099      	str	r1, [r3, #8]
   85d2a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85d2e:	f8da 300c 	ldr.w	r3, [sl, #12]
   85d32:	2a24      	cmp	r2, #36	; 0x24
   85d34:	60cb      	str	r3, [r1, #12]
   85d36:	6099      	str	r1, [r3, #8]
   85d38:	f200 80c9 	bhi.w	85ece <_realloc_r+0x306>
   85d3c:	2a13      	cmp	r2, #19
   85d3e:	f240 8092 	bls.w	85e66 <_realloc_r+0x29e>
   85d42:	682b      	ldr	r3, [r5, #0]
   85d44:	2a1b      	cmp	r2, #27
   85d46:	f8ca 3008 	str.w	r3, [sl, #8]
   85d4a:	686b      	ldr	r3, [r5, #4]
   85d4c:	f8ca 300c 	str.w	r3, [sl, #12]
   85d50:	f200 80cd 	bhi.w	85eee <_realloc_r+0x326>
   85d54:	3508      	adds	r5, #8
   85d56:	f10a 0310 	add.w	r3, sl, #16
   85d5a:	e085      	b.n	85e68 <_realloc_r+0x2a0>
   85d5c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d60:	ebc3 0a08 	rsb	sl, r3, r8
   85d64:	f8da 3004 	ldr.w	r3, [sl, #4]
   85d68:	f023 0c03 	bic.w	ip, r3, #3
   85d6c:	eb06 030c 	add.w	r3, r6, ip
   85d70:	4293      	cmp	r3, r2
   85d72:	f6ff af56 	blt.w	85c22 <_realloc_r+0x5a>
   85d76:	4657      	mov	r7, sl
   85d78:	f8da 100c 	ldr.w	r1, [sl, #12]
   85d7c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85d80:	1f32      	subs	r2, r6, #4
   85d82:	2a24      	cmp	r2, #36	; 0x24
   85d84:	60c1      	str	r1, [r0, #12]
   85d86:	6088      	str	r0, [r1, #8]
   85d88:	f200 80aa 	bhi.w	85ee0 <_realloc_r+0x318>
   85d8c:	2a13      	cmp	r2, #19
   85d8e:	f240 80a5 	bls.w	85edc <_realloc_r+0x314>
   85d92:	6829      	ldr	r1, [r5, #0]
   85d94:	2a1b      	cmp	r2, #27
   85d96:	f8ca 1008 	str.w	r1, [sl, #8]
   85d9a:	6869      	ldr	r1, [r5, #4]
   85d9c:	f8ca 100c 	str.w	r1, [sl, #12]
   85da0:	f200 80bc 	bhi.w	85f1c <_realloc_r+0x354>
   85da4:	3508      	adds	r5, #8
   85da6:	f10a 0210 	add.w	r2, sl, #16
   85daa:	6829      	ldr	r1, [r5, #0]
   85dac:	461e      	mov	r6, r3
   85dae:	6011      	str	r1, [r2, #0]
   85db0:	6869      	ldr	r1, [r5, #4]
   85db2:	46d0      	mov	r8, sl
   85db4:	6051      	str	r1, [r2, #4]
   85db6:	68ab      	ldr	r3, [r5, #8]
   85db8:	6093      	str	r3, [r2, #8]
   85dba:	e764      	b.n	85c86 <_realloc_r+0xbe>
   85dbc:	f021 0b03 	bic.w	fp, r1, #3
   85dc0:	f104 0010 	add.w	r0, r4, #16
   85dc4:	44b3      	add	fp, r6
   85dc6:	4583      	cmp	fp, r0
   85dc8:	da57      	bge.n	85e7a <_realloc_r+0x2b2>
   85dca:	f01e 0f01 	tst.w	lr, #1
   85dce:	f47f af28 	bne.w	85c22 <_realloc_r+0x5a>
   85dd2:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85dd6:	ebc1 0a08 	rsb	sl, r1, r8
   85dda:	f8da 1004 	ldr.w	r1, [sl, #4]
   85dde:	f021 0c03 	bic.w	ip, r1, #3
   85de2:	44e3      	add	fp, ip
   85de4:	4558      	cmp	r0, fp
   85de6:	dcc1      	bgt.n	85d6c <_realloc_r+0x1a4>
   85de8:	4657      	mov	r7, sl
   85dea:	f8da 100c 	ldr.w	r1, [sl, #12]
   85dee:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85df2:	1f32      	subs	r2, r6, #4
   85df4:	2a24      	cmp	r2, #36	; 0x24
   85df6:	60c1      	str	r1, [r0, #12]
   85df8:	6088      	str	r0, [r1, #8]
   85dfa:	f200 80b1 	bhi.w	85f60 <_realloc_r+0x398>
   85dfe:	2a13      	cmp	r2, #19
   85e00:	f240 80a2 	bls.w	85f48 <_realloc_r+0x380>
   85e04:	6829      	ldr	r1, [r5, #0]
   85e06:	2a1b      	cmp	r2, #27
   85e08:	f8ca 1008 	str.w	r1, [sl, #8]
   85e0c:	6869      	ldr	r1, [r5, #4]
   85e0e:	f8ca 100c 	str.w	r1, [sl, #12]
   85e12:	f200 80ac 	bhi.w	85f6e <_realloc_r+0x3a6>
   85e16:	3508      	adds	r5, #8
   85e18:	f10a 0210 	add.w	r2, sl, #16
   85e1c:	6829      	ldr	r1, [r5, #0]
   85e1e:	6011      	str	r1, [r2, #0]
   85e20:	6869      	ldr	r1, [r5, #4]
   85e22:	6051      	str	r1, [r2, #4]
   85e24:	68a9      	ldr	r1, [r5, #8]
   85e26:	6091      	str	r1, [r2, #8]
   85e28:	ebc4 020b 	rsb	r2, r4, fp
   85e2c:	eb0a 0104 	add.w	r1, sl, r4
   85e30:	f042 0201 	orr.w	r2, r2, #1
   85e34:	6099      	str	r1, [r3, #8]
   85e36:	604a      	str	r2, [r1, #4]
   85e38:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e3c:	4648      	mov	r0, r9
   85e3e:	f003 0301 	and.w	r3, r3, #1
   85e42:	431c      	orrs	r4, r3
   85e44:	f8ca 4004 	str.w	r4, [sl, #4]
   85e48:	f7ff febc 	bl	85bc4 <__malloc_unlock>
   85e4c:	4638      	mov	r0, r7
   85e4e:	e72e      	b.n	85cae <_realloc_r+0xe6>
   85e50:	682b      	ldr	r3, [r5, #0]
   85e52:	2a1b      	cmp	r2, #27
   85e54:	6003      	str	r3, [r0, #0]
   85e56:	686b      	ldr	r3, [r5, #4]
   85e58:	6043      	str	r3, [r0, #4]
   85e5a:	d826      	bhi.n	85eaa <_realloc_r+0x2e2>
   85e5c:	f100 0308 	add.w	r3, r0, #8
   85e60:	f105 0208 	add.w	r2, r5, #8
   85e64:	e6f7      	b.n	85c56 <_realloc_r+0x8e>
   85e66:	463b      	mov	r3, r7
   85e68:	682a      	ldr	r2, [r5, #0]
   85e6a:	4676      	mov	r6, lr
   85e6c:	601a      	str	r2, [r3, #0]
   85e6e:	686a      	ldr	r2, [r5, #4]
   85e70:	46d0      	mov	r8, sl
   85e72:	605a      	str	r2, [r3, #4]
   85e74:	68aa      	ldr	r2, [r5, #8]
   85e76:	609a      	str	r2, [r3, #8]
   85e78:	e705      	b.n	85c86 <_realloc_r+0xbe>
   85e7a:	ebc4 0b0b 	rsb	fp, r4, fp
   85e7e:	eb08 0104 	add.w	r1, r8, r4
   85e82:	f04b 0201 	orr.w	r2, fp, #1
   85e86:	6099      	str	r1, [r3, #8]
   85e88:	604a      	str	r2, [r1, #4]
   85e8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85e8e:	4648      	mov	r0, r9
   85e90:	f003 0301 	and.w	r3, r3, #1
   85e94:	431c      	orrs	r4, r3
   85e96:	f845 4c04 	str.w	r4, [r5, #-4]
   85e9a:	f7ff fe93 	bl	85bc4 <__malloc_unlock>
   85e9e:	4628      	mov	r0, r5
   85ea0:	e705      	b.n	85cae <_realloc_r+0xe6>
   85ea2:	4629      	mov	r1, r5
   85ea4:	f7ff fe28 	bl	85af8 <memmove>
   85ea8:	e6db      	b.n	85c62 <_realloc_r+0x9a>
   85eaa:	68ab      	ldr	r3, [r5, #8]
   85eac:	2a24      	cmp	r2, #36	; 0x24
   85eae:	6083      	str	r3, [r0, #8]
   85eb0:	68eb      	ldr	r3, [r5, #12]
   85eb2:	60c3      	str	r3, [r0, #12]
   85eb4:	d027      	beq.n	85f06 <_realloc_r+0x33e>
   85eb6:	f100 0310 	add.w	r3, r0, #16
   85eba:	f105 0210 	add.w	r2, r5, #16
   85ebe:	e6ca      	b.n	85c56 <_realloc_r+0x8e>
   85ec0:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85ec4:	462f      	mov	r7, r5
   85ec6:	f023 0303 	bic.w	r3, r3, #3
   85eca:	441e      	add	r6, r3
   85ecc:	e6db      	b.n	85c86 <_realloc_r+0xbe>
   85ece:	4629      	mov	r1, r5
   85ed0:	4638      	mov	r0, r7
   85ed2:	4676      	mov	r6, lr
   85ed4:	46d0      	mov	r8, sl
   85ed6:	f7ff fe0f 	bl	85af8 <memmove>
   85eda:	e6d4      	b.n	85c86 <_realloc_r+0xbe>
   85edc:	463a      	mov	r2, r7
   85ede:	e764      	b.n	85daa <_realloc_r+0x1e2>
   85ee0:	4629      	mov	r1, r5
   85ee2:	4638      	mov	r0, r7
   85ee4:	461e      	mov	r6, r3
   85ee6:	46d0      	mov	r8, sl
   85ee8:	f7ff fe06 	bl	85af8 <memmove>
   85eec:	e6cb      	b.n	85c86 <_realloc_r+0xbe>
   85eee:	68ab      	ldr	r3, [r5, #8]
   85ef0:	2a24      	cmp	r2, #36	; 0x24
   85ef2:	f8ca 3010 	str.w	r3, [sl, #16]
   85ef6:	68eb      	ldr	r3, [r5, #12]
   85ef8:	f8ca 3014 	str.w	r3, [sl, #20]
   85efc:	d01a      	beq.n	85f34 <_realloc_r+0x36c>
   85efe:	3510      	adds	r5, #16
   85f00:	f10a 0318 	add.w	r3, sl, #24
   85f04:	e7b0      	b.n	85e68 <_realloc_r+0x2a0>
   85f06:	692a      	ldr	r2, [r5, #16]
   85f08:	f100 0318 	add.w	r3, r0, #24
   85f0c:	6102      	str	r2, [r0, #16]
   85f0e:	6969      	ldr	r1, [r5, #20]
   85f10:	f105 0218 	add.w	r2, r5, #24
   85f14:	6141      	str	r1, [r0, #20]
   85f16:	e69e      	b.n	85c56 <_realloc_r+0x8e>
   85f18:	20070598 	.word	0x20070598
   85f1c:	68a9      	ldr	r1, [r5, #8]
   85f1e:	2a24      	cmp	r2, #36	; 0x24
   85f20:	f8ca 1010 	str.w	r1, [sl, #16]
   85f24:	68e9      	ldr	r1, [r5, #12]
   85f26:	f8ca 1014 	str.w	r1, [sl, #20]
   85f2a:	d00f      	beq.n	85f4c <_realloc_r+0x384>
   85f2c:	3510      	adds	r5, #16
   85f2e:	f10a 0218 	add.w	r2, sl, #24
   85f32:	e73a      	b.n	85daa <_realloc_r+0x1e2>
   85f34:	692a      	ldr	r2, [r5, #16]
   85f36:	f10a 0320 	add.w	r3, sl, #32
   85f3a:	f8ca 2018 	str.w	r2, [sl, #24]
   85f3e:	696a      	ldr	r2, [r5, #20]
   85f40:	3518      	adds	r5, #24
   85f42:	f8ca 201c 	str.w	r2, [sl, #28]
   85f46:	e78f      	b.n	85e68 <_realloc_r+0x2a0>
   85f48:	463a      	mov	r2, r7
   85f4a:	e767      	b.n	85e1c <_realloc_r+0x254>
   85f4c:	6929      	ldr	r1, [r5, #16]
   85f4e:	f10a 0220 	add.w	r2, sl, #32
   85f52:	f8ca 1018 	str.w	r1, [sl, #24]
   85f56:	6969      	ldr	r1, [r5, #20]
   85f58:	3518      	adds	r5, #24
   85f5a:	f8ca 101c 	str.w	r1, [sl, #28]
   85f5e:	e724      	b.n	85daa <_realloc_r+0x1e2>
   85f60:	4629      	mov	r1, r5
   85f62:	4638      	mov	r0, r7
   85f64:	9301      	str	r3, [sp, #4]
   85f66:	f7ff fdc7 	bl	85af8 <memmove>
   85f6a:	9b01      	ldr	r3, [sp, #4]
   85f6c:	e75c      	b.n	85e28 <_realloc_r+0x260>
   85f6e:	68a9      	ldr	r1, [r5, #8]
   85f70:	2a24      	cmp	r2, #36	; 0x24
   85f72:	f8ca 1010 	str.w	r1, [sl, #16]
   85f76:	68e9      	ldr	r1, [r5, #12]
   85f78:	f8ca 1014 	str.w	r1, [sl, #20]
   85f7c:	d003      	beq.n	85f86 <_realloc_r+0x3be>
   85f7e:	3510      	adds	r5, #16
   85f80:	f10a 0218 	add.w	r2, sl, #24
   85f84:	e74a      	b.n	85e1c <_realloc_r+0x254>
   85f86:	6929      	ldr	r1, [r5, #16]
   85f88:	f10a 0220 	add.w	r2, sl, #32
   85f8c:	f8ca 1018 	str.w	r1, [sl, #24]
   85f90:	6969      	ldr	r1, [r5, #20]
   85f92:	3518      	adds	r5, #24
   85f94:	f8ca 101c 	str.w	r1, [sl, #28]
   85f98:	e740      	b.n	85e1c <_realloc_r+0x254>
   85f9a:	bf00      	nop

00085f9c <_sbrk_r>:
   85f9c:	b538      	push	{r3, r4, r5, lr}
   85f9e:	4c07      	ldr	r4, [pc, #28]	; (85fbc <_sbrk_r+0x20>)
   85fa0:	2300      	movs	r3, #0
   85fa2:	4605      	mov	r5, r0
   85fa4:	4608      	mov	r0, r1
   85fa6:	6023      	str	r3, [r4, #0]
   85fa8:	f7fc f9f8 	bl	8239c <_sbrk>
   85fac:	1c43      	adds	r3, r0, #1
   85fae:	d000      	beq.n	85fb2 <_sbrk_r+0x16>
   85fb0:	bd38      	pop	{r3, r4, r5, pc}
   85fb2:	6823      	ldr	r3, [r4, #0]
   85fb4:	2b00      	cmp	r3, #0
   85fb6:	d0fb      	beq.n	85fb0 <_sbrk_r+0x14>
   85fb8:	602b      	str	r3, [r5, #0]
   85fba:	bd38      	pop	{r3, r4, r5, pc}
   85fbc:	2007c480 	.word	0x2007c480

00085fc0 <__sread>:
   85fc0:	b510      	push	{r4, lr}
   85fc2:	460c      	mov	r4, r1
   85fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85fc8:	f000 f9c4 	bl	86354 <_read_r>
   85fcc:	2800      	cmp	r0, #0
   85fce:	db03      	blt.n	85fd8 <__sread+0x18>
   85fd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85fd2:	4403      	add	r3, r0
   85fd4:	6523      	str	r3, [r4, #80]	; 0x50
   85fd6:	bd10      	pop	{r4, pc}
   85fd8:	89a3      	ldrh	r3, [r4, #12]
   85fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85fde:	81a3      	strh	r3, [r4, #12]
   85fe0:	bd10      	pop	{r4, pc}
   85fe2:	bf00      	nop

00085fe4 <__swrite>:
   85fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85fe8:	460c      	mov	r4, r1
   85fea:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   85fee:	461f      	mov	r7, r3
   85ff0:	05cb      	lsls	r3, r1, #23
   85ff2:	4616      	mov	r6, r2
   85ff4:	4605      	mov	r5, r0
   85ff6:	d507      	bpl.n	86008 <__swrite+0x24>
   85ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85ffc:	2302      	movs	r3, #2
   85ffe:	2200      	movs	r2, #0
   86000:	f000 f992 	bl	86328 <_lseek_r>
   86004:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86008:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8600c:	81a1      	strh	r1, [r4, #12]
   8600e:	463b      	mov	r3, r7
   86010:	4632      	mov	r2, r6
   86012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86016:	4628      	mov	r0, r5
   86018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8601c:	f000 b8a2 	b.w	86164 <_write_r>

00086020 <__sseek>:
   86020:	b510      	push	{r4, lr}
   86022:	460c      	mov	r4, r1
   86024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86028:	f000 f97e 	bl	86328 <_lseek_r>
   8602c:	89a3      	ldrh	r3, [r4, #12]
   8602e:	1c42      	adds	r2, r0, #1
   86030:	bf0e      	itee	eq
   86032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8603a:	6520      	strne	r0, [r4, #80]	; 0x50
   8603c:	81a3      	strh	r3, [r4, #12]
   8603e:	bd10      	pop	{r4, pc}

00086040 <__sclose>:
   86040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86044:	f000 b8f6 	b.w	86234 <_close_r>

00086048 <__swbuf_r>:
   86048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8604a:	460e      	mov	r6, r1
   8604c:	4614      	mov	r4, r2
   8604e:	4607      	mov	r7, r0
   86050:	b110      	cbz	r0, 86058 <__swbuf_r+0x10>
   86052:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86054:	2b00      	cmp	r3, #0
   86056:	d04a      	beq.n	860ee <__swbuf_r+0xa6>
   86058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8605c:	69a3      	ldr	r3, [r4, #24]
   8605e:	b291      	uxth	r1, r2
   86060:	0708      	lsls	r0, r1, #28
   86062:	60a3      	str	r3, [r4, #8]
   86064:	d538      	bpl.n	860d8 <__swbuf_r+0x90>
   86066:	6923      	ldr	r3, [r4, #16]
   86068:	2b00      	cmp	r3, #0
   8606a:	d035      	beq.n	860d8 <__swbuf_r+0x90>
   8606c:	0489      	lsls	r1, r1, #18
   8606e:	b2f5      	uxtb	r5, r6
   86070:	d515      	bpl.n	8609e <__swbuf_r+0x56>
   86072:	6822      	ldr	r2, [r4, #0]
   86074:	6961      	ldr	r1, [r4, #20]
   86076:	1ad3      	subs	r3, r2, r3
   86078:	428b      	cmp	r3, r1
   8607a:	da1c      	bge.n	860b6 <__swbuf_r+0x6e>
   8607c:	3301      	adds	r3, #1
   8607e:	68a1      	ldr	r1, [r4, #8]
   86080:	1c50      	adds	r0, r2, #1
   86082:	3901      	subs	r1, #1
   86084:	60a1      	str	r1, [r4, #8]
   86086:	6020      	str	r0, [r4, #0]
   86088:	7016      	strb	r6, [r2, #0]
   8608a:	6962      	ldr	r2, [r4, #20]
   8608c:	429a      	cmp	r2, r3
   8608e:	d01a      	beq.n	860c6 <__swbuf_r+0x7e>
   86090:	89a3      	ldrh	r3, [r4, #12]
   86092:	07db      	lsls	r3, r3, #31
   86094:	d501      	bpl.n	8609a <__swbuf_r+0x52>
   86096:	2d0a      	cmp	r5, #10
   86098:	d015      	beq.n	860c6 <__swbuf_r+0x7e>
   8609a:	4628      	mov	r0, r5
   8609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8609e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   860a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   860a4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   860a8:	81a2      	strh	r2, [r4, #12]
   860aa:	6822      	ldr	r2, [r4, #0]
   860ac:	6661      	str	r1, [r4, #100]	; 0x64
   860ae:	6961      	ldr	r1, [r4, #20]
   860b0:	1ad3      	subs	r3, r2, r3
   860b2:	428b      	cmp	r3, r1
   860b4:	dbe2      	blt.n	8607c <__swbuf_r+0x34>
   860b6:	4621      	mov	r1, r4
   860b8:	4638      	mov	r0, r7
   860ba:	f7fe fdb5 	bl	84c28 <_fflush_r>
   860be:	b940      	cbnz	r0, 860d2 <__swbuf_r+0x8a>
   860c0:	6822      	ldr	r2, [r4, #0]
   860c2:	2301      	movs	r3, #1
   860c4:	e7db      	b.n	8607e <__swbuf_r+0x36>
   860c6:	4621      	mov	r1, r4
   860c8:	4638      	mov	r0, r7
   860ca:	f7fe fdad 	bl	84c28 <_fflush_r>
   860ce:	2800      	cmp	r0, #0
   860d0:	d0e3      	beq.n	8609a <__swbuf_r+0x52>
   860d2:	f04f 30ff 	mov.w	r0, #4294967295
   860d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   860d8:	4621      	mov	r1, r4
   860da:	4638      	mov	r0, r7
   860dc:	f7fe fc8c 	bl	849f8 <__swsetup_r>
   860e0:	2800      	cmp	r0, #0
   860e2:	d1f6      	bne.n	860d2 <__swbuf_r+0x8a>
   860e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   860e8:	6923      	ldr	r3, [r4, #16]
   860ea:	b291      	uxth	r1, r2
   860ec:	e7be      	b.n	8606c <__swbuf_r+0x24>
   860ee:	f7fe fe2f 	bl	84d50 <__sinit>
   860f2:	e7b1      	b.n	86058 <__swbuf_r+0x10>

000860f4 <_wcrtomb_r>:
   860f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   860f8:	4605      	mov	r5, r0
   860fa:	b086      	sub	sp, #24
   860fc:	461e      	mov	r6, r3
   860fe:	460c      	mov	r4, r1
   86100:	b1a1      	cbz	r1, 8612c <_wcrtomb_r+0x38>
   86102:	4b10      	ldr	r3, [pc, #64]	; (86144 <_wcrtomb_r+0x50>)
   86104:	4617      	mov	r7, r2
   86106:	f8d3 8000 	ldr.w	r8, [r3]
   8610a:	f7ff f97d 	bl	85408 <__locale_charset>
   8610e:	9600      	str	r6, [sp, #0]
   86110:	4603      	mov	r3, r0
   86112:	463a      	mov	r2, r7
   86114:	4621      	mov	r1, r4
   86116:	4628      	mov	r0, r5
   86118:	47c0      	blx	r8
   8611a:	1c43      	adds	r3, r0, #1
   8611c:	d103      	bne.n	86126 <_wcrtomb_r+0x32>
   8611e:	2200      	movs	r2, #0
   86120:	238a      	movs	r3, #138	; 0x8a
   86122:	6032      	str	r2, [r6, #0]
   86124:	602b      	str	r3, [r5, #0]
   86126:	b006      	add	sp, #24
   86128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8612c:	4b05      	ldr	r3, [pc, #20]	; (86144 <_wcrtomb_r+0x50>)
   8612e:	681f      	ldr	r7, [r3, #0]
   86130:	f7ff f96a 	bl	85408 <__locale_charset>
   86134:	9600      	str	r6, [sp, #0]
   86136:	4603      	mov	r3, r0
   86138:	4622      	mov	r2, r4
   8613a:	a903      	add	r1, sp, #12
   8613c:	4628      	mov	r0, r5
   8613e:	47b8      	blx	r7
   86140:	e7eb      	b.n	8611a <_wcrtomb_r+0x26>
   86142:	bf00      	nop
   86144:	200709a8 	.word	0x200709a8

00086148 <__ascii_wctomb>:
   86148:	b121      	cbz	r1, 86154 <__ascii_wctomb+0xc>
   8614a:	2aff      	cmp	r2, #255	; 0xff
   8614c:	d804      	bhi.n	86158 <__ascii_wctomb+0x10>
   8614e:	700a      	strb	r2, [r1, #0]
   86150:	2001      	movs	r0, #1
   86152:	4770      	bx	lr
   86154:	4608      	mov	r0, r1
   86156:	4770      	bx	lr
   86158:	238a      	movs	r3, #138	; 0x8a
   8615a:	6003      	str	r3, [r0, #0]
   8615c:	f04f 30ff 	mov.w	r0, #4294967295
   86160:	4770      	bx	lr
   86162:	bf00      	nop

00086164 <_write_r>:
   86164:	b570      	push	{r4, r5, r6, lr}
   86166:	460d      	mov	r5, r1
   86168:	4c08      	ldr	r4, [pc, #32]	; (8618c <_write_r+0x28>)
   8616a:	4611      	mov	r1, r2
   8616c:	4606      	mov	r6, r0
   8616e:	461a      	mov	r2, r3
   86170:	4628      	mov	r0, r5
   86172:	2300      	movs	r3, #0
   86174:	6023      	str	r3, [r4, #0]
   86176:	f7fb fd67 	bl	81c48 <_write>
   8617a:	1c43      	adds	r3, r0, #1
   8617c:	d000      	beq.n	86180 <_write_r+0x1c>
   8617e:	bd70      	pop	{r4, r5, r6, pc}
   86180:	6823      	ldr	r3, [r4, #0]
   86182:	2b00      	cmp	r3, #0
   86184:	d0fb      	beq.n	8617e <_write_r+0x1a>
   86186:	6033      	str	r3, [r6, #0]
   86188:	bd70      	pop	{r4, r5, r6, pc}
   8618a:	bf00      	nop
   8618c:	2007c480 	.word	0x2007c480

00086190 <__register_exitproc>:
   86190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86194:	4c25      	ldr	r4, [pc, #148]	; (8622c <__register_exitproc+0x9c>)
   86196:	4606      	mov	r6, r0
   86198:	6825      	ldr	r5, [r4, #0]
   8619a:	4688      	mov	r8, r1
   8619c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   861a0:	4692      	mov	sl, r2
   861a2:	4699      	mov	r9, r3
   861a4:	b3c4      	cbz	r4, 86218 <__register_exitproc+0x88>
   861a6:	6860      	ldr	r0, [r4, #4]
   861a8:	281f      	cmp	r0, #31
   861aa:	dc17      	bgt.n	861dc <__register_exitproc+0x4c>
   861ac:	1c41      	adds	r1, r0, #1
   861ae:	b176      	cbz	r6, 861ce <__register_exitproc+0x3e>
   861b0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   861b4:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   861b8:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   861bc:	2201      	movs	r2, #1
   861be:	4082      	lsls	r2, r0
   861c0:	4315      	orrs	r5, r2
   861c2:	2e02      	cmp	r6, #2
   861c4:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   861c8:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   861cc:	d01e      	beq.n	8620c <__register_exitproc+0x7c>
   861ce:	1c83      	adds	r3, r0, #2
   861d0:	6061      	str	r1, [r4, #4]
   861d2:	2000      	movs	r0, #0
   861d4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   861d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   861dc:	4b14      	ldr	r3, [pc, #80]	; (86230 <__register_exitproc+0xa0>)
   861de:	b303      	cbz	r3, 86222 <__register_exitproc+0x92>
   861e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   861e4:	f7ff f98e 	bl	85504 <malloc>
   861e8:	4604      	mov	r4, r0
   861ea:	b1d0      	cbz	r0, 86222 <__register_exitproc+0x92>
   861ec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   861f0:	2700      	movs	r7, #0
   861f2:	e884 0088 	stmia.w	r4, {r3, r7}
   861f6:	4638      	mov	r0, r7
   861f8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   861fc:	2101      	movs	r1, #1
   861fe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   86202:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   86206:	2e00      	cmp	r6, #0
   86208:	d0e1      	beq.n	861ce <__register_exitproc+0x3e>
   8620a:	e7d1      	b.n	861b0 <__register_exitproc+0x20>
   8620c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86210:	431a      	orrs	r2, r3
   86212:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   86216:	e7da      	b.n	861ce <__register_exitproc+0x3e>
   86218:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   8621c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86220:	e7c1      	b.n	861a6 <__register_exitproc+0x16>
   86222:	f04f 30ff 	mov.w	r0, #4294967295
   86226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8622a:	bf00      	nop
   8622c:	00087a3c 	.word	0x00087a3c
   86230:	00085505 	.word	0x00085505

00086234 <_close_r>:
   86234:	b538      	push	{r3, r4, r5, lr}
   86236:	4c07      	ldr	r4, [pc, #28]	; (86254 <_close_r+0x20>)
   86238:	2300      	movs	r3, #0
   8623a:	4605      	mov	r5, r0
   8623c:	4608      	mov	r0, r1
   8623e:	6023      	str	r3, [r4, #0]
   86240:	f7fc f8c6 	bl	823d0 <_close>
   86244:	1c43      	adds	r3, r0, #1
   86246:	d000      	beq.n	8624a <_close_r+0x16>
   86248:	bd38      	pop	{r3, r4, r5, pc}
   8624a:	6823      	ldr	r3, [r4, #0]
   8624c:	2b00      	cmp	r3, #0
   8624e:	d0fb      	beq.n	86248 <_close_r+0x14>
   86250:	602b      	str	r3, [r5, #0]
   86252:	bd38      	pop	{r3, r4, r5, pc}
   86254:	2007c480 	.word	0x2007c480

00086258 <_fclose_r>:
   86258:	2900      	cmp	r1, #0
   8625a:	d03d      	beq.n	862d8 <_fclose_r+0x80>
   8625c:	b570      	push	{r4, r5, r6, lr}
   8625e:	4605      	mov	r5, r0
   86260:	460c      	mov	r4, r1
   86262:	b108      	cbz	r0, 86268 <_fclose_r+0x10>
   86264:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86266:	b37b      	cbz	r3, 862c8 <_fclose_r+0x70>
   86268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8626c:	b90b      	cbnz	r3, 86272 <_fclose_r+0x1a>
   8626e:	2000      	movs	r0, #0
   86270:	bd70      	pop	{r4, r5, r6, pc}
   86272:	4621      	mov	r1, r4
   86274:	4628      	mov	r0, r5
   86276:	f7fe fc33 	bl	84ae0 <__sflush_r>
   8627a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8627c:	4606      	mov	r6, r0
   8627e:	b133      	cbz	r3, 8628e <_fclose_r+0x36>
   86280:	69e1      	ldr	r1, [r4, #28]
   86282:	4628      	mov	r0, r5
   86284:	4798      	blx	r3
   86286:	2800      	cmp	r0, #0
   86288:	bfb8      	it	lt
   8628a:	f04f 36ff 	movlt.w	r6, #4294967295
   8628e:	89a3      	ldrh	r3, [r4, #12]
   86290:	061b      	lsls	r3, r3, #24
   86292:	d41c      	bmi.n	862ce <_fclose_r+0x76>
   86294:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86296:	b141      	cbz	r1, 862aa <_fclose_r+0x52>
   86298:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8629c:	4299      	cmp	r1, r3
   8629e:	d002      	beq.n	862a6 <_fclose_r+0x4e>
   862a0:	4628      	mov	r0, r5
   862a2:	f7fe fe1d 	bl	84ee0 <_free_r>
   862a6:	2300      	movs	r3, #0
   862a8:	6323      	str	r3, [r4, #48]	; 0x30
   862aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
   862ac:	b121      	cbz	r1, 862b8 <_fclose_r+0x60>
   862ae:	4628      	mov	r0, r5
   862b0:	f7fe fe16 	bl	84ee0 <_free_r>
   862b4:	2300      	movs	r3, #0
   862b6:	6463      	str	r3, [r4, #68]	; 0x44
   862b8:	f7fe fd50 	bl	84d5c <__sfp_lock_acquire>
   862bc:	2300      	movs	r3, #0
   862be:	81a3      	strh	r3, [r4, #12]
   862c0:	f7fe fd4e 	bl	84d60 <__sfp_lock_release>
   862c4:	4630      	mov	r0, r6
   862c6:	bd70      	pop	{r4, r5, r6, pc}
   862c8:	f7fe fd42 	bl	84d50 <__sinit>
   862cc:	e7cc      	b.n	86268 <_fclose_r+0x10>
   862ce:	6921      	ldr	r1, [r4, #16]
   862d0:	4628      	mov	r0, r5
   862d2:	f7fe fe05 	bl	84ee0 <_free_r>
   862d6:	e7dd      	b.n	86294 <_fclose_r+0x3c>
   862d8:	2000      	movs	r0, #0
   862da:	4770      	bx	lr

000862dc <_fstat_r>:
   862dc:	b538      	push	{r3, r4, r5, lr}
   862de:	460b      	mov	r3, r1
   862e0:	4c07      	ldr	r4, [pc, #28]	; (86300 <_fstat_r+0x24>)
   862e2:	4605      	mov	r5, r0
   862e4:	4611      	mov	r1, r2
   862e6:	4618      	mov	r0, r3
   862e8:	2300      	movs	r3, #0
   862ea:	6023      	str	r3, [r4, #0]
   862ec:	f7fc f874 	bl	823d8 <_fstat>
   862f0:	1c43      	adds	r3, r0, #1
   862f2:	d000      	beq.n	862f6 <_fstat_r+0x1a>
   862f4:	bd38      	pop	{r3, r4, r5, pc}
   862f6:	6823      	ldr	r3, [r4, #0]
   862f8:	2b00      	cmp	r3, #0
   862fa:	d0fb      	beq.n	862f4 <_fstat_r+0x18>
   862fc:	602b      	str	r3, [r5, #0]
   862fe:	bd38      	pop	{r3, r4, r5, pc}
   86300:	2007c480 	.word	0x2007c480

00086304 <_isatty_r>:
   86304:	b538      	push	{r3, r4, r5, lr}
   86306:	4c07      	ldr	r4, [pc, #28]	; (86324 <_isatty_r+0x20>)
   86308:	2300      	movs	r3, #0
   8630a:	4605      	mov	r5, r0
   8630c:	4608      	mov	r0, r1
   8630e:	6023      	str	r3, [r4, #0]
   86310:	f7fc f868 	bl	823e4 <_isatty>
   86314:	1c43      	adds	r3, r0, #1
   86316:	d000      	beq.n	8631a <_isatty_r+0x16>
   86318:	bd38      	pop	{r3, r4, r5, pc}
   8631a:	6823      	ldr	r3, [r4, #0]
   8631c:	2b00      	cmp	r3, #0
   8631e:	d0fb      	beq.n	86318 <_isatty_r+0x14>
   86320:	602b      	str	r3, [r5, #0]
   86322:	bd38      	pop	{r3, r4, r5, pc}
   86324:	2007c480 	.word	0x2007c480

00086328 <_lseek_r>:
   86328:	b570      	push	{r4, r5, r6, lr}
   8632a:	460d      	mov	r5, r1
   8632c:	4c08      	ldr	r4, [pc, #32]	; (86350 <_lseek_r+0x28>)
   8632e:	4611      	mov	r1, r2
   86330:	4606      	mov	r6, r0
   86332:	461a      	mov	r2, r3
   86334:	4628      	mov	r0, r5
   86336:	2300      	movs	r3, #0
   86338:	6023      	str	r3, [r4, #0]
   8633a:	f7fc f855 	bl	823e8 <_lseek>
   8633e:	1c43      	adds	r3, r0, #1
   86340:	d000      	beq.n	86344 <_lseek_r+0x1c>
   86342:	bd70      	pop	{r4, r5, r6, pc}
   86344:	6823      	ldr	r3, [r4, #0]
   86346:	2b00      	cmp	r3, #0
   86348:	d0fb      	beq.n	86342 <_lseek_r+0x1a>
   8634a:	6033      	str	r3, [r6, #0]
   8634c:	bd70      	pop	{r4, r5, r6, pc}
   8634e:	bf00      	nop
   86350:	2007c480 	.word	0x2007c480

00086354 <_read_r>:
   86354:	b570      	push	{r4, r5, r6, lr}
   86356:	460d      	mov	r5, r1
   86358:	4c08      	ldr	r4, [pc, #32]	; (8637c <_read_r+0x28>)
   8635a:	4611      	mov	r1, r2
   8635c:	4606      	mov	r6, r0
   8635e:	461a      	mov	r2, r3
   86360:	4628      	mov	r0, r5
   86362:	2300      	movs	r3, #0
   86364:	6023      	str	r3, [r4, #0]
   86366:	f7f9 fef3 	bl	80150 <_read>
   8636a:	1c43      	adds	r3, r0, #1
   8636c:	d000      	beq.n	86370 <_read_r+0x1c>
   8636e:	bd70      	pop	{r4, r5, r6, pc}
   86370:	6823      	ldr	r3, [r4, #0]
   86372:	2b00      	cmp	r3, #0
   86374:	d0fb      	beq.n	8636e <_read_r+0x1a>
   86376:	6033      	str	r3, [r6, #0]
   86378:	bd70      	pop	{r4, r5, r6, pc}
   8637a:	bf00      	nop
   8637c:	2007c480 	.word	0x2007c480

00086380 <__aeabi_uldivmod>:
   86380:	b953      	cbnz	r3, 86398 <__aeabi_uldivmod+0x18>
   86382:	b94a      	cbnz	r2, 86398 <__aeabi_uldivmod+0x18>
   86384:	2900      	cmp	r1, #0
   86386:	bf08      	it	eq
   86388:	2800      	cmpeq	r0, #0
   8638a:	bf1c      	itt	ne
   8638c:	f04f 31ff 	movne.w	r1, #4294967295
   86390:	f04f 30ff 	movne.w	r0, #4294967295
   86394:	f000 b982 	b.w	8669c <__aeabi_idiv0>
   86398:	f1ad 0c08 	sub.w	ip, sp, #8
   8639c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   863a0:	f000 f806 	bl	863b0 <__udivmoddi4>
   863a4:	f8dd e004 	ldr.w	lr, [sp, #4]
   863a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   863ac:	b004      	add	sp, #16
   863ae:	4770      	bx	lr

000863b0 <__udivmoddi4>:
   863b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863b4:	468c      	mov	ip, r1
   863b6:	460c      	mov	r4, r1
   863b8:	4605      	mov	r5, r0
   863ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   863bc:	2b00      	cmp	r3, #0
   863be:	d14f      	bne.n	86460 <__udivmoddi4+0xb0>
   863c0:	428a      	cmp	r2, r1
   863c2:	4617      	mov	r7, r2
   863c4:	d96b      	bls.n	8649e <__udivmoddi4+0xee>
   863c6:	fab2 fe82 	clz	lr, r2
   863ca:	f1be 0f00 	cmp.w	lr, #0
   863ce:	d00b      	beq.n	863e8 <__udivmoddi4+0x38>
   863d0:	f1ce 0520 	rsb	r5, lr, #32
   863d4:	fa20 f505 	lsr.w	r5, r0, r5
   863d8:	fa01 f30e 	lsl.w	r3, r1, lr
   863dc:	ea45 0c03 	orr.w	ip, r5, r3
   863e0:	fa02 f70e 	lsl.w	r7, r2, lr
   863e4:	fa00 f50e 	lsl.w	r5, r0, lr
   863e8:	0c39      	lsrs	r1, r7, #16
   863ea:	fbbc f0f1 	udiv	r0, ip, r1
   863ee:	b2ba      	uxth	r2, r7
   863f0:	fb01 c310 	mls	r3, r1, r0, ip
   863f4:	fb00 f802 	mul.w	r8, r0, r2
   863f8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   863fc:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   86400:	45a0      	cmp	r8, r4
   86402:	d909      	bls.n	86418 <__udivmoddi4+0x68>
   86404:	19e4      	adds	r4, r4, r7
   86406:	f100 33ff 	add.w	r3, r0, #4294967295
   8640a:	f080 8128 	bcs.w	8665e <__udivmoddi4+0x2ae>
   8640e:	45a0      	cmp	r8, r4
   86410:	f240 8125 	bls.w	8665e <__udivmoddi4+0x2ae>
   86414:	3802      	subs	r0, #2
   86416:	443c      	add	r4, r7
   86418:	ebc8 0404 	rsb	r4, r8, r4
   8641c:	fbb4 f3f1 	udiv	r3, r4, r1
   86420:	fb01 4c13 	mls	ip, r1, r3, r4
   86424:	fb03 f202 	mul.w	r2, r3, r2
   86428:	b2ac      	uxth	r4, r5
   8642a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   8642e:	428a      	cmp	r2, r1
   86430:	d909      	bls.n	86446 <__udivmoddi4+0x96>
   86432:	19c9      	adds	r1, r1, r7
   86434:	f103 34ff 	add.w	r4, r3, #4294967295
   86438:	f080 810f 	bcs.w	8665a <__udivmoddi4+0x2aa>
   8643c:	428a      	cmp	r2, r1
   8643e:	f240 810c 	bls.w	8665a <__udivmoddi4+0x2aa>
   86442:	3b02      	subs	r3, #2
   86444:	4439      	add	r1, r7
   86446:	1a8a      	subs	r2, r1, r2
   86448:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8644c:	2100      	movs	r1, #0
   8644e:	2e00      	cmp	r6, #0
   86450:	d063      	beq.n	8651a <__udivmoddi4+0x16a>
   86452:	fa22 f20e 	lsr.w	r2, r2, lr
   86456:	2300      	movs	r3, #0
   86458:	e886 000c 	stmia.w	r6, {r2, r3}
   8645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86460:	428b      	cmp	r3, r1
   86462:	d907      	bls.n	86474 <__udivmoddi4+0xc4>
   86464:	2e00      	cmp	r6, #0
   86466:	d056      	beq.n	86516 <__udivmoddi4+0x166>
   86468:	2100      	movs	r1, #0
   8646a:	e886 0011 	stmia.w	r6, {r0, r4}
   8646e:	4608      	mov	r0, r1
   86470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86474:	fab3 f183 	clz	r1, r3
   86478:	2900      	cmp	r1, #0
   8647a:	f040 8093 	bne.w	865a4 <__udivmoddi4+0x1f4>
   8647e:	42a3      	cmp	r3, r4
   86480:	d302      	bcc.n	86488 <__udivmoddi4+0xd8>
   86482:	4282      	cmp	r2, r0
   86484:	f200 80fe 	bhi.w	86684 <__udivmoddi4+0x2d4>
   86488:	1a85      	subs	r5, r0, r2
   8648a:	eb64 0303 	sbc.w	r3, r4, r3
   8648e:	469c      	mov	ip, r3
   86490:	2001      	movs	r0, #1
   86492:	2e00      	cmp	r6, #0
   86494:	d041      	beq.n	8651a <__udivmoddi4+0x16a>
   86496:	e886 1020 	stmia.w	r6, {r5, ip}
   8649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8649e:	b912      	cbnz	r2, 864a6 <__udivmoddi4+0xf6>
   864a0:	2701      	movs	r7, #1
   864a2:	fbb7 f7f2 	udiv	r7, r7, r2
   864a6:	fab7 fe87 	clz	lr, r7
   864aa:	f1be 0f00 	cmp.w	lr, #0
   864ae:	d136      	bne.n	8651e <__udivmoddi4+0x16e>
   864b0:	1be4      	subs	r4, r4, r7
   864b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   864b6:	fa1f f987 	uxth.w	r9, r7
   864ba:	2101      	movs	r1, #1
   864bc:	fbb4 f3f8 	udiv	r3, r4, r8
   864c0:	fb08 4413 	mls	r4, r8, r3, r4
   864c4:	fb09 f203 	mul.w	r2, r9, r3
   864c8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   864cc:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   864d0:	42a2      	cmp	r2, r4
   864d2:	d907      	bls.n	864e4 <__udivmoddi4+0x134>
   864d4:	19e4      	adds	r4, r4, r7
   864d6:	f103 30ff 	add.w	r0, r3, #4294967295
   864da:	d202      	bcs.n	864e2 <__udivmoddi4+0x132>
   864dc:	42a2      	cmp	r2, r4
   864de:	f200 80d3 	bhi.w	86688 <__udivmoddi4+0x2d8>
   864e2:	4603      	mov	r3, r0
   864e4:	1aa4      	subs	r4, r4, r2
   864e6:	fbb4 f0f8 	udiv	r0, r4, r8
   864ea:	fb08 4810 	mls	r8, r8, r0, r4
   864ee:	fb09 f900 	mul.w	r9, r9, r0
   864f2:	b2ac      	uxth	r4, r5
   864f4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   864f8:	4591      	cmp	r9, r2
   864fa:	d907      	bls.n	8650c <__udivmoddi4+0x15c>
   864fc:	19d2      	adds	r2, r2, r7
   864fe:	f100 34ff 	add.w	r4, r0, #4294967295
   86502:	d202      	bcs.n	8650a <__udivmoddi4+0x15a>
   86504:	4591      	cmp	r9, r2
   86506:	f200 80ba 	bhi.w	8667e <__udivmoddi4+0x2ce>
   8650a:	4620      	mov	r0, r4
   8650c:	ebc9 0202 	rsb	r2, r9, r2
   86510:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   86514:	e79b      	b.n	8644e <__udivmoddi4+0x9e>
   86516:	4631      	mov	r1, r6
   86518:	4630      	mov	r0, r6
   8651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8651e:	fa07 f70e 	lsl.w	r7, r7, lr
   86522:	f1ce 0c20 	rsb	ip, lr, #32
   86526:	fa24 f30c 	lsr.w	r3, r4, ip
   8652a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8652e:	fbb3 faf8 	udiv	sl, r3, r8
   86532:	fa1f f987 	uxth.w	r9, r7
   86536:	fb08 351a 	mls	r5, r8, sl, r3
   8653a:	fa20 fc0c 	lsr.w	ip, r0, ip
   8653e:	fa04 f40e 	lsl.w	r4, r4, lr
   86542:	fb0a fb09 	mul.w	fp, sl, r9
   86546:	ea4c 0c04 	orr.w	ip, ip, r4
   8654a:	ea4f 421c 	mov.w	r2, ip, lsr #16
   8654e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   86552:	459b      	cmp	fp, r3
   86554:	fa00 f50e 	lsl.w	r5, r0, lr
   86558:	d90a      	bls.n	86570 <__udivmoddi4+0x1c0>
   8655a:	19db      	adds	r3, r3, r7
   8655c:	f10a 32ff 	add.w	r2, sl, #4294967295
   86560:	f080 808b 	bcs.w	8667a <__udivmoddi4+0x2ca>
   86564:	459b      	cmp	fp, r3
   86566:	f240 8088 	bls.w	8667a <__udivmoddi4+0x2ca>
   8656a:	f1aa 0a02 	sub.w	sl, sl, #2
   8656e:	443b      	add	r3, r7
   86570:	ebcb 0303 	rsb	r3, fp, r3
   86574:	fbb3 f0f8 	udiv	r0, r3, r8
   86578:	fb08 3310 	mls	r3, r8, r0, r3
   8657c:	fb00 f409 	mul.w	r4, r0, r9
   86580:	fa1f fc8c 	uxth.w	ip, ip
   86584:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   86588:	429c      	cmp	r4, r3
   8658a:	d907      	bls.n	8659c <__udivmoddi4+0x1ec>
   8658c:	19db      	adds	r3, r3, r7
   8658e:	f100 32ff 	add.w	r2, r0, #4294967295
   86592:	d26e      	bcs.n	86672 <__udivmoddi4+0x2c2>
   86594:	429c      	cmp	r4, r3
   86596:	d96c      	bls.n	86672 <__udivmoddi4+0x2c2>
   86598:	3802      	subs	r0, #2
   8659a:	443b      	add	r3, r7
   8659c:	1b1c      	subs	r4, r3, r4
   8659e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   865a2:	e78b      	b.n	864bc <__udivmoddi4+0x10c>
   865a4:	f1c1 0e20 	rsb	lr, r1, #32
   865a8:	408b      	lsls	r3, r1
   865aa:	fa22 fc0e 	lsr.w	ip, r2, lr
   865ae:	ea4c 0c03 	orr.w	ip, ip, r3
   865b2:	fa24 f70e 	lsr.w	r7, r4, lr
   865b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   865ba:	fbb7 faf9 	udiv	sl, r7, r9
   865be:	fa1f f38c 	uxth.w	r3, ip
   865c2:	fb09 771a 	mls	r7, r9, sl, r7
   865c6:	fa20 f80e 	lsr.w	r8, r0, lr
   865ca:	408c      	lsls	r4, r1
   865cc:	fb0a f503 	mul.w	r5, sl, r3
   865d0:	ea48 0404 	orr.w	r4, r8, r4
   865d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   865d8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   865dc:	42bd      	cmp	r5, r7
   865de:	fa02 f201 	lsl.w	r2, r2, r1
   865e2:	fa00 fb01 	lsl.w	fp, r0, r1
   865e6:	d909      	bls.n	865fc <__udivmoddi4+0x24c>
   865e8:	eb17 070c 	adds.w	r7, r7, ip
   865ec:	f10a 30ff 	add.w	r0, sl, #4294967295
   865f0:	d241      	bcs.n	86676 <__udivmoddi4+0x2c6>
   865f2:	42bd      	cmp	r5, r7
   865f4:	d93f      	bls.n	86676 <__udivmoddi4+0x2c6>
   865f6:	f1aa 0a02 	sub.w	sl, sl, #2
   865fa:	4467      	add	r7, ip
   865fc:	1b7f      	subs	r7, r7, r5
   865fe:	fbb7 f5f9 	udiv	r5, r7, r9
   86602:	fb09 7715 	mls	r7, r9, r5, r7
   86606:	fb05 f303 	mul.w	r3, r5, r3
   8660a:	b2a4      	uxth	r4, r4
   8660c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   86610:	42bb      	cmp	r3, r7
   86612:	d908      	bls.n	86626 <__udivmoddi4+0x276>
   86614:	eb17 070c 	adds.w	r7, r7, ip
   86618:	f105 30ff 	add.w	r0, r5, #4294967295
   8661c:	d227      	bcs.n	8666e <__udivmoddi4+0x2be>
   8661e:	42bb      	cmp	r3, r7
   86620:	d925      	bls.n	8666e <__udivmoddi4+0x2be>
   86622:	3d02      	subs	r5, #2
   86624:	4467      	add	r7, ip
   86626:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8662a:	fba0 8902 	umull	r8, r9, r0, r2
   8662e:	1aff      	subs	r7, r7, r3
   86630:	454f      	cmp	r7, r9
   86632:	4645      	mov	r5, r8
   86634:	464c      	mov	r4, r9
   86636:	d314      	bcc.n	86662 <__udivmoddi4+0x2b2>
   86638:	d029      	beq.n	8668e <__udivmoddi4+0x2de>
   8663a:	b366      	cbz	r6, 86696 <__udivmoddi4+0x2e6>
   8663c:	ebbb 0305 	subs.w	r3, fp, r5
   86640:	eb67 0704 	sbc.w	r7, r7, r4
   86644:	fa07 fe0e 	lsl.w	lr, r7, lr
   86648:	40cb      	lsrs	r3, r1
   8664a:	40cf      	lsrs	r7, r1
   8664c:	ea4e 0303 	orr.w	r3, lr, r3
   86650:	e886 0088 	stmia.w	r6, {r3, r7}
   86654:	2100      	movs	r1, #0
   86656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8665a:	4623      	mov	r3, r4
   8665c:	e6f3      	b.n	86446 <__udivmoddi4+0x96>
   8665e:	4618      	mov	r0, r3
   86660:	e6da      	b.n	86418 <__udivmoddi4+0x68>
   86662:	ebb8 0502 	subs.w	r5, r8, r2
   86666:	eb69 040c 	sbc.w	r4, r9, ip
   8666a:	3801      	subs	r0, #1
   8666c:	e7e5      	b.n	8663a <__udivmoddi4+0x28a>
   8666e:	4605      	mov	r5, r0
   86670:	e7d9      	b.n	86626 <__udivmoddi4+0x276>
   86672:	4610      	mov	r0, r2
   86674:	e792      	b.n	8659c <__udivmoddi4+0x1ec>
   86676:	4682      	mov	sl, r0
   86678:	e7c0      	b.n	865fc <__udivmoddi4+0x24c>
   8667a:	4692      	mov	sl, r2
   8667c:	e778      	b.n	86570 <__udivmoddi4+0x1c0>
   8667e:	3802      	subs	r0, #2
   86680:	443a      	add	r2, r7
   86682:	e743      	b.n	8650c <__udivmoddi4+0x15c>
   86684:	4608      	mov	r0, r1
   86686:	e704      	b.n	86492 <__udivmoddi4+0xe2>
   86688:	3b02      	subs	r3, #2
   8668a:	443c      	add	r4, r7
   8668c:	e72a      	b.n	864e4 <__udivmoddi4+0x134>
   8668e:	45c3      	cmp	fp, r8
   86690:	d3e7      	bcc.n	86662 <__udivmoddi4+0x2b2>
   86692:	463c      	mov	r4, r7
   86694:	e7d1      	b.n	8663a <__udivmoddi4+0x28a>
   86696:	4631      	mov	r1, r6
   86698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008669c <__aeabi_idiv0>:
   8669c:	4770      	bx	lr
   8669e:	bf00      	nop
   866a0:	09097325 	.word	0x09097325
   866a4:	25096325 	.word	0x25096325
   866a8:	75250975 	.word	0x75250975
   866ac:	0d752509 	.word	0x0d752509
   866b0:	0000000a 	.word	0x0000000a
   866b4:	454c4449 	.word	0x454c4449
   866b8:	00000000 	.word	0x00000000
   866bc:	00000a0d 	.word	0x00000a0d
   866c0:	20726d54 	.word	0x20726d54
   866c4:	00637653 	.word	0x00637653
   866c8:	43415254 	.word	0x43415254
   866cc:	53415f45 	.word	0x53415f45
   866d0:	54524553 	.word	0x54524553
   866d4:	5476203a 	.word	0x5476203a
   866d8:	65636172 	.word	0x65636172
   866dc:	6f727245 	.word	0x6f727245
   866e0:	6d203a72 	.word	0x6d203a72
   866e4:	3d206773 	.word	0x3d206773
   866e8:	554e203d 	.word	0x554e203d
   866ec:	00004c4c 	.word	0x00004c4c
   866f0:	43415254 	.word	0x43415254
   866f4:	53415f45 	.word	0x53415f45
   866f8:	54524553 	.word	0x54524553
   866fc:	5476203a 	.word	0x5476203a
   86700:	65636172 	.word	0x65636172
   86704:	6f727245 	.word	0x6f727245
   86708:	52203a72 	.word	0x52203a72
   8670c:	726f6365 	.word	0x726f6365
   86710:	44726564 	.word	0x44726564
   86714:	50617461 	.word	0x50617461
   86718:	3d207274 	.word	0x3d207274
   8671c:	554e203d 	.word	0x554e203d
   86720:	00004c4c 	.word	0x00004c4c
   86724:	63617254 	.word	0x63617254
   86728:	65522065 	.word	0x65522065
   8672c:	64726f63 	.word	0x64726f63
   86730:	44207265 	.word	0x44207265
   86734:	006f6d65 	.word	0x006f6d65
   86738:	63617254 	.word	0x63617254
   8673c:	74732065 	.word	0x74732065
   86740:	20747261 	.word	0x20747261
   86744:	6b72616d 	.word	0x6b72616d
   86748:	20737265 	.word	0x20737265
   8674c:	65726c61 	.word	0x65726c61
   86750:	20796461 	.word	0x20796461
   86754:	74696e69 	.word	0x74696e69
   86758:	696c6169 	.word	0x696c6169
   8675c:	2164657a 	.word	0x2164657a
   86760:	00000000 	.word	0x00000000
   86764:	65747441 	.word	0x65747441
   86768:	2074706d 	.word	0x2074706d
   8676c:	69206f74 	.word	0x69206f74
   86770:	7865646e 	.word	0x7865646e
   86774:	74756f20 	.word	0x74756f20
   86778:	65646973 	.word	0x65646973
   8677c:	65766520 	.word	0x65766520
   86780:	6220746e 	.word	0x6220746e
   86784:	65666675 	.word	0x65666675
   86788:	00002172 	.word	0x00002172
   8678c:	43415254 	.word	0x43415254
   86790:	53415f45 	.word	0x53415f45
   86794:	54524553 	.word	0x54524553
   86798:	6975203a 	.word	0x6975203a
   8679c:	65646e49 	.word	0x65646e49
   867a0:	4f664f78 	.word	0x4f664f78
   867a4:	63656a62 	.word	0x63656a62
   867a8:	49203a74 	.word	0x49203a74
   867ac:	6c61766e 	.word	0x6c61766e
   867b0:	76206469 	.word	0x76206469
   867b4:	65756c61 	.word	0x65756c61
   867b8:	726f6620 	.word	0x726f6620
   867bc:	6a626f20 	.word	0x6a626f20
   867c0:	63746365 	.word	0x63746365
   867c4:	7373616c 	.word	0x7373616c
   867c8:	00000000 	.word	0x00000000
   867cc:	43415254 	.word	0x43415254
   867d0:	53415f45 	.word	0x53415f45
   867d4:	54524553 	.word	0x54524553
   867d8:	6975203a 	.word	0x6975203a
   867dc:	65646e49 	.word	0x65646e49
   867e0:	4f664f78 	.word	0x4f664f78
   867e4:	63656a62 	.word	0x63656a62
   867e8:	49203a74 	.word	0x49203a74
   867ec:	6c61766e 	.word	0x6c61766e
   867f0:	76206469 	.word	0x76206469
   867f4:	65756c61 	.word	0x65756c61
   867f8:	726f6620 	.word	0x726f6620
   867fc:	6a626f20 	.word	0x6a626f20
   86800:	68746365 	.word	0x68746365
   86804:	6c646e61 	.word	0x6c646e61
   86808:	00000065 	.word	0x00000065
   8680c:	43415254 	.word	0x43415254
   86810:	53415f45 	.word	0x53415f45
   86814:	54524553 	.word	0x54524553
   86818:	5478203a 	.word	0x5478203a
   8681c:	65636172 	.word	0x65636172
   86820:	4f746547 	.word	0x4f746547
   86824:	63656a62 	.word	0x63656a62
   86828:	6e614874 	.word	0x6e614874
   8682c:	3a656c64 	.word	0x3a656c64
   86830:	766e4920 	.word	0x766e4920
   86834:	64696c61 	.word	0x64696c61
   86838:	6c617620 	.word	0x6c617620
   8683c:	66206575 	.word	0x66206575
   86840:	6f20726f 	.word	0x6f20726f
   86844:	63656a62 	.word	0x63656a62
   86848:	616c6374 	.word	0x616c6374
   8684c:	00007373 	.word	0x00007373
   86850:	43415254 	.word	0x43415254
   86854:	53415f45 	.word	0x53415f45
   86858:	54524553 	.word	0x54524553
   8685c:	5476203a 	.word	0x5476203a
   86860:	65636172 	.word	0x65636172
   86864:	65657246 	.word	0x65657246
   86868:	656a624f 	.word	0x656a624f
   8686c:	61487463 	.word	0x61487463
   86870:	656c646e 	.word	0x656c646e
   86874:	6e49203a 	.word	0x6e49203a
   86878:	696c6176 	.word	0x696c6176
   8687c:	61762064 	.word	0x61762064
   86880:	2065756c 	.word	0x2065756c
   86884:	20726f66 	.word	0x20726f66
   86888:	656a626f 	.word	0x656a626f
   8688c:	6c637463 	.word	0x6c637463
   86890:	00737361 	.word	0x00737361
   86894:	43415254 	.word	0x43415254
   86898:	53415f45 	.word	0x53415f45
   8689c:	54524553 	.word	0x54524553
   868a0:	5476203a 	.word	0x5476203a
   868a4:	65636172 	.word	0x65636172
   868a8:	65657246 	.word	0x65657246
   868ac:	656a624f 	.word	0x656a624f
   868b0:	61487463 	.word	0x61487463
   868b4:	656c646e 	.word	0x656c646e
   868b8:	6e49203a 	.word	0x6e49203a
   868bc:	696c6176 	.word	0x696c6176
   868c0:	61762064 	.word	0x61762064
   868c4:	2065756c 	.word	0x2065756c
   868c8:	20726f66 	.word	0x20726f66
   868cc:	646e6168 	.word	0x646e6168
   868d0:	0000656c 	.word	0x0000656c
   868d4:	65747441 	.word	0x65747441
   868d8:	2074706d 	.word	0x2074706d
   868dc:	66206f74 	.word	0x66206f74
   868e0:	20656572 	.word	0x20656572
   868e4:	65726f6d 	.word	0x65726f6d
   868e8:	6e616820 	.word	0x6e616820
   868ec:	73656c64 	.word	0x73656c64
   868f0:	61687420 	.word	0x61687420
   868f4:	6c61206e 	.word	0x6c61206e
   868f8:	61636f6c 	.word	0x61636f6c
   868fc:	21646574 	.word	0x21646574
   86900:	00000000 	.word	0x00000000
   86904:	43415254 	.word	0x43415254
   86908:	53415f45 	.word	0x53415f45
   8690c:	54524553 	.word	0x54524553
   86910:	5476203a 	.word	0x5476203a
   86914:	65636172 	.word	0x65636172
   86918:	4f746553 	.word	0x4f746553
   8691c:	63656a62 	.word	0x63656a62
   86920:	6d614e74 	.word	0x6d614e74
   86924:	6e203a65 	.word	0x6e203a65
   86928:	20656d61 	.word	0x20656d61
   8692c:	4e203d3d 	.word	0x4e203d3d
   86930:	004c4c55 	.word	0x004c4c55
   86934:	656c6c49 	.word	0x656c6c49
   86938:	206c6167 	.word	0x206c6167
   8693c:	656a626f 	.word	0x656a626f
   86940:	63207463 	.word	0x63207463
   86944:	7373616c 	.word	0x7373616c
   86948:	206e6920 	.word	0x206e6920
   8694c:	61725476 	.word	0x61725476
   86950:	65536563 	.word	0x65536563
   86954:	6a624f74 	.word	0x6a624f74
   86958:	4e746365 	.word	0x4e746365
   8695c:	00656d61 	.word	0x00656d61
   86960:	656c6c49 	.word	0x656c6c49
   86964:	206c6167 	.word	0x206c6167
   86968:	646e6168 	.word	0x646e6168
   8696c:	2820656c 	.word	0x2820656c
   86970:	69202930 	.word	0x69202930
   86974:	5476206e 	.word	0x5476206e
   86978:	65636172 	.word	0x65636172
   8697c:	4f746553 	.word	0x4f746553
   86980:	63656a62 	.word	0x63656a62
   86984:	6d614e74 	.word	0x6d614e74
   86988:	00002e65 	.word	0x00002e65
   8698c:	43415254 	.word	0x43415254
   86990:	53415f45 	.word	0x53415f45
   86994:	54524553 	.word	0x54524553
   86998:	7270203a 	.word	0x7270203a
   8699c:	65684376 	.word	0x65684376
   869a0:	61446b63 	.word	0x61446b63
   869a4:	6f546174 	.word	0x6f546174
   869a8:	764f6542 	.word	0x764f6542
   869ac:	72777265 	.word	0x72777265
   869b0:	65747469 	.word	0x65747469
   869b4:	726f466e 	.word	0x726f466e
   869b8:	746c754d 	.word	0x746c754d
   869bc:	746e4569 	.word	0x746e4569
   869c0:	76457972 	.word	0x76457972
   869c4:	73746e65 	.word	0x73746e65
   869c8:	6f6e203a 	.word	0x6f6e203a
   869cc:	746e4566 	.word	0x746e4566
   869d0:	73656972 	.word	0x73656972
   869d4:	68436f54 	.word	0x68436f54
   869d8:	206b6365 	.word	0x206b6365
   869dc:	30203d3d 	.word	0x30203d3d
   869e0:	00000000 	.word	0x00000000
   869e4:	43415254 	.word	0x43415254
   869e8:	53415f45 	.word	0x53415f45
   869ec:	54524553 	.word	0x54524553
   869f0:	7270203a 	.word	0x7270203a
   869f4:	61725476 	.word	0x61725476
   869f8:	65476563 	.word	0x65476563
   869fc:	53544474 	.word	0x53544474
   86a00:	6e49203a 	.word	0x6e49203a
   86a04:	696c6176 	.word	0x696c6176
   86a08:	61762064 	.word	0x61762064
   86a0c:	2065756c 	.word	0x2065756c
   86a10:	20726f66 	.word	0x20726f66
   86a14:	61726170 	.word	0x61726170
   86a18:	616d5f6d 	.word	0x616d5f6d
   86a1c:	53544478 	.word	0x53544478
   86a20:	00000000 	.word	0x00000000
   86a24:	20646142 	.word	0x20646142
   86a28:	61726170 	.word	0x61726170
   86a2c:	616d5f6d 	.word	0x616d5f6d
   86a30:	53544478 	.word	0x53544478
   86a34:	206e6920 	.word	0x206e6920
   86a38:	54767270 	.word	0x54767270
   86a3c:	65636172 	.word	0x65636172
   86a40:	44746547 	.word	0x44746547
   86a44:	00005354 	.word	0x00005354
   86a48:	43415254 	.word	0x43415254
   86a4c:	53415f45 	.word	0x53415f45
   86a50:	54524553 	.word	0x54524553
   86a54:	7270203a 	.word	0x7270203a
   86a58:	61725476 	.word	0x61725476
   86a5c:	6f4c6563 	.word	0x6f4c6563
   86a60:	70756b6f 	.word	0x70756b6f
   86a64:	626d7953 	.word	0x626d7953
   86a68:	61546c6f 	.word	0x61546c6f
   86a6c:	45656c62 	.word	0x45656c62
   86a70:	7972746e 	.word	0x7972746e
   86a74:	616e203a 	.word	0x616e203a
   86a78:	3d20656d 	.word	0x3d20656d
   86a7c:	554e203d 	.word	0x554e203d
   86a80:	00004c4c 	.word	0x00004c4c
   86a84:	43415254 	.word	0x43415254
   86a88:	53415f45 	.word	0x53415f45
   86a8c:	54524553 	.word	0x54524553
   86a90:	7270203a 	.word	0x7270203a
   86a94:	61725476 	.word	0x61725476
   86a98:	6f4c6563 	.word	0x6f4c6563
   86a9c:	70756b6f 	.word	0x70756b6f
   86aa0:	626d7953 	.word	0x626d7953
   86aa4:	61546c6f 	.word	0x61546c6f
   86aa8:	45656c62 	.word	0x45656c62
   86aac:	7972746e 	.word	0x7972746e
   86ab0:	656c203a 	.word	0x656c203a
   86ab4:	3d3d206e 	.word	0x3d3d206e
   86ab8:	00003020 	.word	0x00003020
   86abc:	43415254 	.word	0x43415254
   86ac0:	53415f45 	.word	0x53415f45
   86ac4:	54524553 	.word	0x54524553
   86ac8:	7270203a 	.word	0x7270203a
   86acc:	61725476 	.word	0x61725476
   86ad0:	72436563 	.word	0x72436563
   86ad4:	65746165 	.word	0x65746165
   86ad8:	626d7953 	.word	0x626d7953
   86adc:	61546c6f 	.word	0x61546c6f
   86ae0:	45656c62 	.word	0x45656c62
   86ae4:	7972746e 	.word	0x7972746e
   86ae8:	616e203a 	.word	0x616e203a
   86aec:	3d20656d 	.word	0x3d20656d
   86af0:	554e203d 	.word	0x554e203d
   86af4:	00004c4c 	.word	0x00004c4c
   86af8:	43415254 	.word	0x43415254
   86afc:	53415f45 	.word	0x53415f45
   86b00:	54524553 	.word	0x54524553
   86b04:	7270203a 	.word	0x7270203a
   86b08:	61725476 	.word	0x61725476
   86b0c:	72436563 	.word	0x72436563
   86b10:	65746165 	.word	0x65746165
   86b14:	626d7953 	.word	0x626d7953
   86b18:	61546c6f 	.word	0x61546c6f
   86b1c:	45656c62 	.word	0x45656c62
   86b20:	7972746e 	.word	0x7972746e
   86b24:	656c203a 	.word	0x656c203a
   86b28:	3d3d206e 	.word	0x3d3d206e
   86b2c:	00003020 	.word	0x00003020
   86b30:	626d7953 	.word	0x626d7953
   86b34:	74206c6f 	.word	0x74206c6f
   86b38:	656c6261 	.word	0x656c6261
   86b3c:	6c756620 	.word	0x6c756620
   86b40:	49202e6c 	.word	0x49202e6c
   86b44:	6572636e 	.word	0x6572636e
   86b48:	20657361 	.word	0x20657361
   86b4c:	424d5953 	.word	0x424d5953
   86b50:	545f4c4f 	.word	0x545f4c4f
   86b54:	454c4241 	.word	0x454c4241
   86b58:	5a49535f 	.word	0x5a49535f
   86b5c:	6e692045 	.word	0x6e692045
   86b60:	63727420 	.word	0x63727420
   86b64:	666e6f43 	.word	0x666e6f43
   86b68:	682e6769 	.word	0x682e6769
   86b6c:	00000000 	.word	0x00000000
   86b70:	43415254 	.word	0x43415254
   86b74:	53415f45 	.word	0x53415f45
   86b78:	54524553 	.word	0x54524553
   86b7c:	7270203a 	.word	0x7270203a
   86b80:	61725476 	.word	0x61725476
   86b84:	65476563 	.word	0x65476563
   86b88:	65684374 	.word	0x65684374
   86b8c:	75736b63 	.word	0x75736b63
   86b90:	70203a6d 	.word	0x70203a6d
   86b94:	656d616e 	.word	0x656d616e
   86b98:	203d3d20 	.word	0x203d3d20
   86b9c:	4c4c554e 	.word	0x4c4c554e
   86ba0:	00000000 	.word	0x00000000
   86ba4:	43415254 	.word	0x43415254
   86ba8:	53415f45 	.word	0x53415f45
   86bac:	54524553 	.word	0x54524553
   86bb0:	7270203a 	.word	0x7270203a
   86bb4:	61725476 	.word	0x61725476
   86bb8:	65476563 	.word	0x65476563
   86bbc:	65684374 	.word	0x65684374
   86bc0:	75736b63 	.word	0x75736b63
   86bc4:	70203a6d 	.word	0x70203a6d
   86bc8:	20637263 	.word	0x20637263
   86bcc:	4e203d3d 	.word	0x4e203d3d
   86bd0:	004c4c55 	.word	0x004c4c55
   86bd4:	43415254 	.word	0x43415254
   86bd8:	53415f45 	.word	0x53415f45
   86bdc:	54524553 	.word	0x54524553
   86be0:	7270203a 	.word	0x7270203a
   86be4:	61725476 	.word	0x61725476
   86be8:	65476563 	.word	0x65476563
   86bec:	65684374 	.word	0x65684374
   86bf0:	75736b63 	.word	0x75736b63
   86bf4:	70203a6d 	.word	0x70203a6d
   86bf8:	676e656c 	.word	0x676e656c
   86bfc:	3d206874 	.word	0x3d206874
   86c00:	554e203d 	.word	0x554e203d
   86c04:	00004c4c 	.word	0x00004c4c
   86c08:	43415254 	.word	0x43415254
   86c0c:	53415f45 	.word	0x53415f45
   86c10:	54524553 	.word	0x54524553
   86c14:	7270203a 	.word	0x7270203a
   86c18:	61725476 	.word	0x61725476
   86c1c:	704f6563 	.word	0x704f6563
   86c20:	79536e65 	.word	0x79536e65
   86c24:	6c6f626d 	.word	0x6c6f626d
   86c28:	616e203a 	.word	0x616e203a
   86c2c:	3d20656d 	.word	0x3d20656d
   86c30:	554e203d 	.word	0x554e203d
   86c34:	00004c4c 	.word	0x00004c4c
   86c38:	20545744 	.word	0x20545744
   86c3c:	20746f6e 	.word	0x20746f6e
   86c40:	70707573 	.word	0x70707573
   86c44:	6574726f 	.word	0x6574726f
   86c48:	79622064 	.word	0x79622064
   86c4c:	69687420 	.word	0x69687420
   86c50:	68632073 	.word	0x68632073
   86c54:	00217069 	.word	0x00217069
   86c58:	5f545744 	.word	0x5f545744
   86c5c:	43435943 	.word	0x43435943
   86c60:	6e20544e 	.word	0x6e20544e
   86c64:	7320746f 	.word	0x7320746f
   86c68:	6f707075 	.word	0x6f707075
   86c6c:	64657472 	.word	0x64657472
   86c70:	20796220 	.word	0x20796220
   86c74:	73696874 	.word	0x73696874
   86c78:	69686320 	.word	0x69686320
   86c7c:	00002170 	.word	0x00002170
   86c80:	43415254 	.word	0x43415254
   86c84:	53415f45 	.word	0x53415f45
   86c88:	54524553 	.word	0x54524553
   86c8c:	7270203a 	.word	0x7270203a
   86c90:	61725476 	.word	0x61725476
   86c94:	65476563 	.word	0x65476563
   86c98:	72615074 	.word	0x72615074
   86c9c:	203a6d61 	.word	0x203a6d61
   86ca0:	61766e49 	.word	0x61766e49
   86ca4:	2064696c 	.word	0x2064696c
   86ca8:	756c6176 	.word	0x756c6176
   86cac:	6f662065 	.word	0x6f662065
   86cb0:	61702072 	.word	0x61702072
   86cb4:	5f6d6172 	.word	0x5f6d6172
   86cb8:	0078616d 	.word	0x0078616d
   86cbc:	43415254 	.word	0x43415254
   86cc0:	53415f45 	.word	0x53415f45
   86cc4:	54524553 	.word	0x54524553
   86cc8:	5476203a 	.word	0x5476203a
   86ccc:	65636172 	.word	0x65636172
   86cd0:	726f7453 	.word	0x726f7453
   86cd4:	73615465 	.word	0x73615465
   86cd8:	6165526b 	.word	0x6165526b
   86cdc:	203a7964 	.word	0x203a7964
   86ce0:	61766e49 	.word	0x61766e49
   86ce4:	2064696c 	.word	0x2064696c
   86ce8:	756c6176 	.word	0x756c6176
   86cec:	6f662065 	.word	0x6f662065
   86cf0:	61682072 	.word	0x61682072
   86cf4:	656c646e 	.word	0x656c646e
   86cf8:	00000000 	.word	0x00000000
   86cfc:	6f636552 	.word	0x6f636552
   86d00:	72656472 	.word	0x72656472
   86d04:	73756220 	.word	0x73756220
   86d08:	202d2079 	.word	0x202d2079
   86d0c:	68676968 	.word	0x68676968
   86d10:	69727020 	.word	0x69727020
   86d14:	7469726f 	.word	0x7469726f
   86d18:	53492079 	.word	0x53492079
   86d1c:	73752052 	.word	0x73752052
   86d20:	20676e69 	.word	0x20676e69
   86d24:	63737973 	.word	0x63737973
   86d28:	3f6c6c61 	.word	0x3f6c6c61
   86d2c:	29312820 	.word	0x29312820
   86d30:	00000000 	.word	0x00000000
   86d34:	43415254 	.word	0x43415254
   86d38:	53415f45 	.word	0x53415f45
   86d3c:	54524553 	.word	0x54524553
   86d40:	5476203a 	.word	0x5476203a
   86d44:	65636172 	.word	0x65636172
   86d48:	726f7453 	.word	0x726f7453
   86d4c:	776f4c65 	.word	0x776f4c65
   86d50:	65776f50 	.word	0x65776f50
   86d54:	49203a72 	.word	0x49203a72
   86d58:	6c61766e 	.word	0x6c61766e
   86d5c:	66206469 	.word	0x66206469
   86d60:	2067616c 	.word	0x2067616c
   86d64:	756c6176 	.word	0x756c6176
   86d68:	00000065 	.word	0x00000065
   86d6c:	43415254 	.word	0x43415254
   86d70:	53415f45 	.word	0x53415f45
   86d74:	54524553 	.word	0x54524553
   86d78:	5476203a 	.word	0x5476203a
   86d7c:	65636172 	.word	0x65636172
   86d80:	726f7453 	.word	0x726f7453
   86d84:	72654b65 	.word	0x72654b65
   86d88:	436c656e 	.word	0x436c656e
   86d8c:	3a6c6c61 	.word	0x3a6c6c61
   86d90:	6f636520 	.word	0x6f636520
   86d94:	3e206564 	.word	0x3e206564
   86d98:	7830203d 	.word	0x7830203d
   86d9c:	00004646 	.word	0x00004646
   86da0:	43415254 	.word	0x43415254
   86da4:	53415f45 	.word	0x53415f45
   86da8:	54524553 	.word	0x54524553
   86dac:	5476203a 	.word	0x5476203a
   86db0:	65636172 	.word	0x65636172
   86db4:	726f7453 	.word	0x726f7453
   86db8:	72654b65 	.word	0x72654b65
   86dbc:	436c656e 	.word	0x436c656e
   86dc0:	3a6c6c61 	.word	0x3a6c6c61
   86dc4:	6a626f20 	.word	0x6a626f20
   86dc8:	43746365 	.word	0x43746365
   86dcc:	7373616c 	.word	0x7373616c
   86dd0:	203d3e20 	.word	0x203d3e20
   86dd4:	43415254 	.word	0x43415254
   86dd8:	434e5f45 	.word	0x434e5f45
   86ddc:	5353414c 	.word	0x5353414c
   86de0:	00005345 	.word	0x00005345
   86de4:	43415254 	.word	0x43415254
   86de8:	53415f45 	.word	0x53415f45
   86dec:	54524553 	.word	0x54524553
   86df0:	5476203a 	.word	0x5476203a
   86df4:	65636172 	.word	0x65636172
   86df8:	726f7453 	.word	0x726f7453
   86dfc:	72654b65 	.word	0x72654b65
   86e00:	436c656e 	.word	0x436c656e
   86e04:	3a6c6c61 	.word	0x3a6c6c61
   86e08:	766e4920 	.word	0x766e4920
   86e0c:	64696c61 	.word	0x64696c61
   86e10:	6c617620 	.word	0x6c617620
   86e14:	66206575 	.word	0x66206575
   86e18:	6f20726f 	.word	0x6f20726f
   86e1c:	63656a62 	.word	0x63656a62
   86e20:	6d754e74 	.word	0x6d754e74
   86e24:	00726562 	.word	0x00726562
   86e28:	6f636552 	.word	0x6f636552
   86e2c:	72656472 	.word	0x72656472
   86e30:	73756220 	.word	0x73756220
   86e34:	202d2079 	.word	0x202d2079
   86e38:	68676968 	.word	0x68676968
   86e3c:	69727020 	.word	0x69727020
   86e40:	7469726f 	.word	0x7469726f
   86e44:	53492079 	.word	0x53492079
   86e48:	73752052 	.word	0x73752052
   86e4c:	20676e69 	.word	0x20676e69
   86e50:	63737973 	.word	0x63737973
   86e54:	3f6c6c61 	.word	0x3f6c6c61
   86e58:	29322820 	.word	0x29322820
   86e5c:	00000000 	.word	0x00000000
   86e60:	43415254 	.word	0x43415254
   86e64:	53415f45 	.word	0x53415f45
   86e68:	54524553 	.word	0x54524553
   86e6c:	5476203a 	.word	0x5476203a
   86e70:	65636172 	.word	0x65636172
   86e74:	726f7453 	.word	0x726f7453
   86e78:	72654b65 	.word	0x72654b65
   86e7c:	436c656e 	.word	0x436c656e
   86e80:	3a6c6c61 	.word	0x3a6c6c61
   86e84:	74766520 	.word	0x74766520
   86e88:	65646f63 	.word	0x65646f63
   86e8c:	203d3e20 	.word	0x203d3e20
   86e90:	46467830 	.word	0x46467830
   86e94:	00000000 	.word	0x00000000
   86e98:	43415254 	.word	0x43415254
   86e9c:	53415f45 	.word	0x53415f45
   86ea0:	54524553 	.word	0x54524553
   86ea4:	5476203a 	.word	0x5476203a
   86ea8:	65636172 	.word	0x65636172
   86eac:	726f7453 	.word	0x726f7453
   86eb0:	72654b65 	.word	0x72654b65
   86eb4:	436c656e 	.word	0x436c656e
   86eb8:	576c6c61 	.word	0x576c6c61
   86ebc:	50687469 	.word	0x50687469
   86ec0:	6d617261 	.word	0x6d617261
   86ec4:	626f203a 	.word	0x626f203a
   86ec8:	7463656a 	.word	0x7463656a
   86ecc:	73616c43 	.word	0x73616c43
   86ed0:	3d3e2073 	.word	0x3d3e2073
   86ed4:	41525420 	.word	0x41525420
   86ed8:	4e5f4543 	.word	0x4e5f4543
   86edc:	53414c43 	.word	0x53414c43
   86ee0:	00534553 	.word	0x00534553
   86ee4:	43415254 	.word	0x43415254
   86ee8:	53415f45 	.word	0x53415f45
   86eec:	54524553 	.word	0x54524553
   86ef0:	5476203a 	.word	0x5476203a
   86ef4:	65636172 	.word	0x65636172
   86ef8:	726f7453 	.word	0x726f7453
   86efc:	72654b65 	.word	0x72654b65
   86f00:	436c656e 	.word	0x436c656e
   86f04:	576c6c61 	.word	0x576c6c61
   86f08:	50687469 	.word	0x50687469
   86f0c:	6d617261 	.word	0x6d617261
   86f10:	6e49203a 	.word	0x6e49203a
   86f14:	696c6176 	.word	0x696c6176
   86f18:	61762064 	.word	0x61762064
   86f1c:	2065756c 	.word	0x2065756c
   86f20:	20726f66 	.word	0x20726f66
   86f24:	656a626f 	.word	0x656a626f
   86f28:	754e7463 	.word	0x754e7463
   86f2c:	7265626d 	.word	0x7265626d
   86f30:	00000000 	.word	0x00000000
   86f34:	6f636552 	.word	0x6f636552
   86f38:	72656472 	.word	0x72656472
   86f3c:	73756220 	.word	0x73756220
   86f40:	202d2079 	.word	0x202d2079
   86f44:	68676968 	.word	0x68676968
   86f48:	69727020 	.word	0x69727020
   86f4c:	7469726f 	.word	0x7469726f
   86f50:	53492079 	.word	0x53492079
   86f54:	73752052 	.word	0x73752052
   86f58:	20676e69 	.word	0x20676e69
   86f5c:	63737973 	.word	0x63737973
   86f60:	3f6c6c61 	.word	0x3f6c6c61
   86f64:	29332820 	.word	0x29332820
   86f68:	00000000 	.word	0x00000000
   86f6c:	43415254 	.word	0x43415254
   86f70:	53415f45 	.word	0x53415f45
   86f74:	54524553 	.word	0x54524553
   86f78:	5476203a 	.word	0x5476203a
   86f7c:	65636172 	.word	0x65636172
   86f80:	726f7453 	.word	0x726f7453
   86f84:	72654b65 	.word	0x72654b65
   86f88:	436c656e 	.word	0x436c656e
   86f8c:	576c6c61 	.word	0x576c6c61
   86f90:	4e687469 	.word	0x4e687469
   86f94:	72656d75 	.word	0x72656d75
   86f98:	61506369 	.word	0x61506369
   86f9c:	4f6d6172 	.word	0x4f6d6172
   86fa0:	3a796c6e 	.word	0x3a796c6e
   86fa4:	766e4920 	.word	0x766e4920
   86fa8:	64696c61 	.word	0x64696c61
   86fac:	6c617620 	.word	0x6c617620
   86fb0:	66206575 	.word	0x66206575
   86fb4:	6520726f 	.word	0x6520726f
   86fb8:	6f637476 	.word	0x6f637476
   86fbc:	00006564 	.word	0x00006564
   86fc0:	6f636552 	.word	0x6f636552
   86fc4:	72656472 	.word	0x72656472
   86fc8:	73756220 	.word	0x73756220
   86fcc:	202d2079 	.word	0x202d2079
   86fd0:	68676968 	.word	0x68676968
   86fd4:	69727020 	.word	0x69727020
   86fd8:	7469726f 	.word	0x7469726f
   86fdc:	53492079 	.word	0x53492079
   86fe0:	73752052 	.word	0x73752052
   86fe4:	20676e69 	.word	0x20676e69
   86fe8:	63737973 	.word	0x63737973
   86fec:	3f6c6c61 	.word	0x3f6c6c61
   86ff0:	29342820 	.word	0x29342820
   86ff4:	00000000 	.word	0x00000000
   86ff8:	43415254 	.word	0x43415254
   86ffc:	53415f45 	.word	0x53415f45
   87000:	54524553 	.word	0x54524553
   87004:	5476203a 	.word	0x5476203a
   87008:	65636172 	.word	0x65636172
   8700c:	726f7453 	.word	0x726f7453
   87010:	6a624f65 	.word	0x6a624f65
   87014:	4e746365 	.word	0x4e746365
   87018:	4f656d61 	.word	0x4f656d61
   8701c:	6f6c436e 	.word	0x6f6c436e
   87020:	76456573 	.word	0x76456573
   87024:	3a746e65 	.word	0x3a746e65
   87028:	6a626f20 	.word	0x6a626f20
   8702c:	63746365 	.word	0x63746365
   87030:	7373616c 	.word	0x7373616c
   87034:	203d3e20 	.word	0x203d3e20
   87038:	43415254 	.word	0x43415254
   8703c:	434e5f45 	.word	0x434e5f45
   87040:	5353414c 	.word	0x5353414c
   87044:	00005345 	.word	0x00005345
   87048:	43415254 	.word	0x43415254
   8704c:	53415f45 	.word	0x53415f45
   87050:	54524553 	.word	0x54524553
   87054:	5476203a 	.word	0x5476203a
   87058:	65636172 	.word	0x65636172
   8705c:	726f7453 	.word	0x726f7453
   87060:	6a624f65 	.word	0x6a624f65
   87064:	4e746365 	.word	0x4e746365
   87068:	4f656d61 	.word	0x4f656d61
   8706c:	6f6c436e 	.word	0x6f6c436e
   87070:	76456573 	.word	0x76456573
   87074:	3a746e65 	.word	0x3a746e65
   87078:	766e4920 	.word	0x766e4920
   8707c:	64696c61 	.word	0x64696c61
   87080:	6c617620 	.word	0x6c617620
   87084:	66206575 	.word	0x66206575
   87088:	6820726f 	.word	0x6820726f
   8708c:	6c646e61 	.word	0x6c646e61
   87090:	00000065 	.word	0x00000065
   87094:	43415254 	.word	0x43415254
   87098:	53415f45 	.word	0x53415f45
   8709c:	54524553 	.word	0x54524553
   870a0:	5476203a 	.word	0x5476203a
   870a4:	65636172 	.word	0x65636172
   870a8:	726f7453 	.word	0x726f7453
   870ac:	6a624f65 	.word	0x6a624f65
   870b0:	50746365 	.word	0x50746365
   870b4:	65706f72 	.word	0x65706f72
   870b8:	65697472 	.word	0x65697472
   870bc:	436e4f73 	.word	0x436e4f73
   870c0:	65736f6c 	.word	0x65736f6c
   870c4:	6e657645 	.word	0x6e657645
   870c8:	6f203a74 	.word	0x6f203a74
   870cc:	63656a62 	.word	0x63656a62
   870d0:	616c6374 	.word	0x616c6374
   870d4:	3e207373 	.word	0x3e207373
   870d8:	5254203d 	.word	0x5254203d
   870dc:	5f454341 	.word	0x5f454341
   870e0:	414c434e 	.word	0x414c434e
   870e4:	53455353 	.word	0x53455353
   870e8:	00000000 	.word	0x00000000
   870ec:	43415254 	.word	0x43415254
   870f0:	53415f45 	.word	0x53415f45
   870f4:	54524553 	.word	0x54524553
   870f8:	5476203a 	.word	0x5476203a
   870fc:	65636172 	.word	0x65636172
   87100:	726f7453 	.word	0x726f7453
   87104:	6a624f65 	.word	0x6a624f65
   87108:	50746365 	.word	0x50746365
   8710c:	65706f72 	.word	0x65706f72
   87110:	65697472 	.word	0x65697472
   87114:	436e4f73 	.word	0x436e4f73
   87118:	65736f6c 	.word	0x65736f6c
   8711c:	6e657645 	.word	0x6e657645
   87120:	49203a74 	.word	0x49203a74
   87124:	6c61766e 	.word	0x6c61766e
   87128:	76206469 	.word	0x76206469
   8712c:	65756c61 	.word	0x65756c61
   87130:	726f6620 	.word	0x726f6620
   87134:	6e616820 	.word	0x6e616820
   87138:	00656c64 	.word	0x00656c64
   8713c:	43415254 	.word	0x43415254
   87140:	53415f45 	.word	0x53415f45
   87144:	54524553 	.word	0x54524553
   87148:	5476203a 	.word	0x5476203a
   8714c:	65636172 	.word	0x65636172
   87150:	50746553 	.word	0x50746553
   87154:	726f6972 	.word	0x726f6972
   87158:	50797469 	.word	0x50797469
   8715c:	65706f72 	.word	0x65706f72
   87160:	3a797472 	.word	0x3a797472
   87164:	6a626f20 	.word	0x6a626f20
   87168:	63746365 	.word	0x63746365
   8716c:	7373616c 	.word	0x7373616c
   87170:	203d3e20 	.word	0x203d3e20
   87174:	43415254 	.word	0x43415254
   87178:	434e5f45 	.word	0x434e5f45
   8717c:	5353414c 	.word	0x5353414c
   87180:	00005345 	.word	0x00005345
   87184:	43415254 	.word	0x43415254
   87188:	53415f45 	.word	0x53415f45
   8718c:	54524553 	.word	0x54524553
   87190:	5476203a 	.word	0x5476203a
   87194:	65636172 	.word	0x65636172
   87198:	50746553 	.word	0x50746553
   8719c:	726f6972 	.word	0x726f6972
   871a0:	50797469 	.word	0x50797469
   871a4:	65706f72 	.word	0x65706f72
   871a8:	3a797472 	.word	0x3a797472
   871ac:	766e4920 	.word	0x766e4920
   871b0:	64696c61 	.word	0x64696c61
   871b4:	6c617620 	.word	0x6c617620
   871b8:	66206575 	.word	0x66206575
   871bc:	6920726f 	.word	0x6920726f
   871c0:	00000064 	.word	0x00000064
   871c4:	43415254 	.word	0x43415254
   871c8:	53415f45 	.word	0x53415f45
   871cc:	54524553 	.word	0x54524553
   871d0:	6975203a 	.word	0x6975203a
   871d4:	63617254 	.word	0x63617254
   871d8:	74654765 	.word	0x74654765
   871dc:	6f697250 	.word	0x6f697250
   871e0:	79746972 	.word	0x79746972
   871e4:	706f7250 	.word	0x706f7250
   871e8:	79747265 	.word	0x79747265
   871ec:	626f203a 	.word	0x626f203a
   871f0:	7463656a 	.word	0x7463656a
   871f4:	73616c63 	.word	0x73616c63
   871f8:	3d3e2073 	.word	0x3d3e2073
   871fc:	41525420 	.word	0x41525420
   87200:	4e5f4543 	.word	0x4e5f4543
   87204:	53414c43 	.word	0x53414c43
   87208:	00534553 	.word	0x00534553
   8720c:	43415254 	.word	0x43415254
   87210:	53415f45 	.word	0x53415f45
   87214:	54524553 	.word	0x54524553
   87218:	6975203a 	.word	0x6975203a
   8721c:	63617254 	.word	0x63617254
   87220:	74654765 	.word	0x74654765
   87224:	6f697250 	.word	0x6f697250
   87228:	79746972 	.word	0x79746972
   8722c:	706f7250 	.word	0x706f7250
   87230:	79747265 	.word	0x79747265
   87234:	6e49203a 	.word	0x6e49203a
   87238:	696c6176 	.word	0x696c6176
   8723c:	61762064 	.word	0x61762064
   87240:	2065756c 	.word	0x2065756c
   87244:	20726f66 	.word	0x20726f66
   87248:	00006469 	.word	0x00006469
   8724c:	43415254 	.word	0x43415254
   87250:	53415f45 	.word	0x53415f45
   87254:	54524553 	.word	0x54524553
   87258:	5476203a 	.word	0x5476203a
   8725c:	65636172 	.word	0x65636172
   87260:	4f746553 	.word	0x4f746553
   87264:	63656a62 	.word	0x63656a62
   87268:	61745374 	.word	0x61745374
   8726c:	203a6574 	.word	0x203a6574
   87270:	656a626f 	.word	0x656a626f
   87274:	6c637463 	.word	0x6c637463
   87278:	20737361 	.word	0x20737361
   8727c:	54203d3e 	.word	0x54203d3e
   87280:	45434152 	.word	0x45434152
   87284:	4c434e5f 	.word	0x4c434e5f
   87288:	45535341 	.word	0x45535341
   8728c:	00000053 	.word	0x00000053
   87290:	43415254 	.word	0x43415254
   87294:	53415f45 	.word	0x53415f45
   87298:	54524553 	.word	0x54524553
   8729c:	5476203a 	.word	0x5476203a
   872a0:	65636172 	.word	0x65636172
   872a4:	4f746553 	.word	0x4f746553
   872a8:	63656a62 	.word	0x63656a62
   872ac:	61745374 	.word	0x61745374
   872b0:	203a6574 	.word	0x203a6574
   872b4:	61766e49 	.word	0x61766e49
   872b8:	2064696c 	.word	0x2064696c
   872bc:	756c6176 	.word	0x756c6176
   872c0:	6f662065 	.word	0x6f662065
   872c4:	64692072 	.word	0x64692072
   872c8:	00000000 	.word	0x00000000
   872cc:	43415254 	.word	0x43415254
   872d0:	53415f45 	.word	0x53415f45
   872d4:	54524553 	.word	0x54524553
   872d8:	6975203a 	.word	0x6975203a
   872dc:	63617254 	.word	0x63617254
   872e0:	74654765 	.word	0x74654765
   872e4:	656a624f 	.word	0x656a624f
   872e8:	74537463 	.word	0x74537463
   872ec:	3a657461 	.word	0x3a657461
   872f0:	6a626f20 	.word	0x6a626f20
   872f4:	63746365 	.word	0x63746365
   872f8:	7373616c 	.word	0x7373616c
   872fc:	203d3e20 	.word	0x203d3e20
   87300:	43415254 	.word	0x43415254
   87304:	434e5f45 	.word	0x434e5f45
   87308:	5353414c 	.word	0x5353414c
   8730c:	00005345 	.word	0x00005345
   87310:	43415254 	.word	0x43415254
   87314:	53415f45 	.word	0x53415f45
   87318:	54524553 	.word	0x54524553
   8731c:	6975203a 	.word	0x6975203a
   87320:	63617254 	.word	0x63617254
   87324:	74654765 	.word	0x74654765
   87328:	656a624f 	.word	0x656a624f
   8732c:	74537463 	.word	0x74537463
   87330:	3a657461 	.word	0x3a657461
   87334:	766e4920 	.word	0x766e4920
   87338:	64696c61 	.word	0x64696c61
   8733c:	6c617620 	.word	0x6c617620
   87340:	66206575 	.word	0x66206575
   87344:	6920726f 	.word	0x6920726f
   87348:	00000064 	.word	0x00000064
   8734c:	43415254 	.word	0x43415254
   87350:	53415f45 	.word	0x53415f45
   87354:	54524553 	.word	0x54524553
   87358:	5476203a 	.word	0x5476203a
   8735c:	65636172 	.word	0x65636172
   87360:	726f7453 	.word	0x726f7453
   87364:	73615465 	.word	0x73615465
   87368:	6977736b 	.word	0x6977736b
   8736c:	3a686374 	.word	0x3a686374
   87370:	766e4920 	.word	0x766e4920
   87374:	64696c61 	.word	0x64696c61
   87378:	6c617620 	.word	0x6c617620
   8737c:	66206575 	.word	0x66206575
   87380:	7420726f 	.word	0x7420726f
   87384:	5f6b7361 	.word	0x5f6b7361
   87388:	646e6168 	.word	0x646e6168
   8738c:	0000656c 	.word	0x0000656c
   87390:	43415254 	.word	0x43415254
   87394:	53415f45 	.word	0x53415f45
   87398:	54524553 	.word	0x54524553
   8739c:	5476203a 	.word	0x5476203a
   873a0:	65636172 	.word	0x65636172
   873a4:	54746553 	.word	0x54746553
   873a8:	496b7361 	.word	0x496b7361
   873ac:	6174736e 	.word	0x6174736e
   873b0:	4665636e 	.word	0x4665636e
   873b4:	73696e69 	.word	0x73696e69
   873b8:	3a646568 	.word	0x3a646568
   873bc:	766e4920 	.word	0x766e4920
   873c0:	64696c61 	.word	0x64696c61
   873c4:	6c617620 	.word	0x6c617620
   873c8:	66206575 	.word	0x66206575
   873cc:	6820726f 	.word	0x6820726f
   873d0:	6c646e61 	.word	0x6c646e61
   873d4:	00000065 	.word	0x00000065
   873d8:	20746f4e 	.word	0x20746f4e
   873dc:	756f6e65 	.word	0x756f6e65
   873e0:	54206867 	.word	0x54206867
   873e4:	204b5341 	.word	0x204b5341
   873e8:	646e6168 	.word	0x646e6168
   873ec:	2073656c 	.word	0x2073656c
   873f0:	6e69202d 	.word	0x6e69202d
   873f4:	61657263 	.word	0x61657263
   873f8:	4e206573 	.word	0x4e206573
   873fc:	6b736154 	.word	0x6b736154
   87400:	206e6920 	.word	0x206e6920
   87404:	43637274 	.word	0x43637274
   87408:	69666e6f 	.word	0x69666e6f
   8740c:	00682e67 	.word	0x00682e67
   87410:	20746f4e 	.word	0x20746f4e
   87414:	756f6e65 	.word	0x756f6e65
   87418:	49206867 	.word	0x49206867
   8741c:	68205253 	.word	0x68205253
   87420:	6c646e61 	.word	0x6c646e61
   87424:	2d207365 	.word	0x2d207365
   87428:	636e6920 	.word	0x636e6920
   8742c:	73616572 	.word	0x73616572
   87430:	494e2065 	.word	0x494e2065
   87434:	69205253 	.word	0x69205253
   87438:	7274206e 	.word	0x7274206e
   8743c:	6e6f4363 	.word	0x6e6f4363
   87440:	2e676966 	.word	0x2e676966
   87444:	00000068 	.word	0x00000068
   87448:	20746f4e 	.word	0x20746f4e
   8744c:	756f6e65 	.word	0x756f6e65
   87450:	53206867 	.word	0x53206867
   87454:	50414d45 	.word	0x50414d45
   87458:	45524f48 	.word	0x45524f48
   8745c:	6e616820 	.word	0x6e616820
   87460:	73656c64 	.word	0x73656c64
   87464:	69202d20 	.word	0x69202d20
   87468:	6572636e 	.word	0x6572636e
   8746c:	20657361 	.word	0x20657361
   87470:	6d65534e 	.word	0x6d65534e
   87474:	6f687061 	.word	0x6f687061
   87478:	69206572 	.word	0x69206572
   8747c:	7274206e 	.word	0x7274206e
   87480:	6e6f4363 	.word	0x6e6f4363
   87484:	2e676966 	.word	0x2e676966
   87488:	00000068 	.word	0x00000068
   8748c:	20746f4e 	.word	0x20746f4e
   87490:	756f6e65 	.word	0x756f6e65
   87494:	4d206867 	.word	0x4d206867
   87498:	58455455 	.word	0x58455455
   8749c:	6e616820 	.word	0x6e616820
   874a0:	73656c64 	.word	0x73656c64
   874a4:	69202d20 	.word	0x69202d20
   874a8:	6572636e 	.word	0x6572636e
   874ac:	20657361 	.word	0x20657361
   874b0:	74754d4e 	.word	0x74754d4e
   874b4:	69207865 	.word	0x69207865
   874b8:	7274206e 	.word	0x7274206e
   874bc:	6e6f4363 	.word	0x6e6f4363
   874c0:	2e676966 	.word	0x2e676966
   874c4:	00000068 	.word	0x00000068
   874c8:	20746f4e 	.word	0x20746f4e
   874cc:	756f6e65 	.word	0x756f6e65
   874d0:	51206867 	.word	0x51206867
   874d4:	45554555 	.word	0x45554555
   874d8:	6e616820 	.word	0x6e616820
   874dc:	73656c64 	.word	0x73656c64
   874e0:	69202d20 	.word	0x69202d20
   874e4:	6572636e 	.word	0x6572636e
   874e8:	20657361 	.word	0x20657361
   874ec:	6575514e 	.word	0x6575514e
   874f0:	69206575 	.word	0x69206575
   874f4:	7274206e 	.word	0x7274206e
   874f8:	6e6f4363 	.word	0x6e6f4363
   874fc:	2e676966 	.word	0x2e676966
   87500:	00000068 	.word	0x00000068
   87504:	20746f4e 	.word	0x20746f4e
   87508:	756f6e65 	.word	0x756f6e65
   8750c:	54206867 	.word	0x54206867
   87510:	52454d49 	.word	0x52454d49
   87514:	6e616820 	.word	0x6e616820
   87518:	73656c64 	.word	0x73656c64
   8751c:	69202d20 	.word	0x69202d20
   87520:	6572636e 	.word	0x6572636e
   87524:	20657361 	.word	0x20657361
   87528:	6d69544e 	.word	0x6d69544e
   8752c:	69207265 	.word	0x69207265
   87530:	7274206e 	.word	0x7274206e
   87534:	6e6f4363 	.word	0x6e6f4363
   87538:	2e676966 	.word	0x2e676966
   8753c:	00000068 	.word	0x00000068
   87540:	20746f4e 	.word	0x20746f4e
   87544:	756f6e65 	.word	0x756f6e65
   87548:	45206867 	.word	0x45206867
   8754c:	544e4556 	.word	0x544e4556
   87550:	554f5247 	.word	0x554f5247
   87554:	61682050 	.word	0x61682050
   87558:	656c646e 	.word	0x656c646e
   8755c:	202d2073 	.word	0x202d2073
   87560:	72636e69 	.word	0x72636e69
   87564:	65736165 	.word	0x65736165
   87568:	76454e20 	.word	0x76454e20
   8756c:	47746e65 	.word	0x47746e65
   87570:	70756f72 	.word	0x70756f72
   87574:	206e6920 	.word	0x206e6920
   87578:	43637274 	.word	0x43637274
   8757c:	69666e6f 	.word	0x69666e6f
   87580:	00682e67 	.word	0x00682e67
   87584:	547a7370 	.word	0x547a7370
   87588:	65636172 	.word	0x65636172
   8758c:	45746547 	.word	0x45746547
   87590:	726f7272 	.word	0x726f7272
   87594:	646e6148 	.word	0x646e6148
   87598:	3a73656c 	.word	0x3a73656c
   8759c:	766e4920 	.word	0x766e4920
   875a0:	64696c61 	.word	0x64696c61
   875a4:	6a626f20 	.word	0x6a626f20
   875a8:	63746365 	.word	0x63746365
   875ac:	7373616c 	.word	0x7373616c
   875b0:	00000021 	.word	0x00000021
   875b4:	43415254 	.word	0x43415254
   875b8:	53415f45 	.word	0x53415f45
   875bc:	54524553 	.word	0x54524553
   875c0:	7270203a 	.word	0x7270203a
   875c4:	61725476 	.word	0x61725476
   875c8:	73496563 	.word	0x73496563
   875cc:	656a624f 	.word	0x656a624f
   875d0:	78457463 	.word	0x78457463
   875d4:	64756c63 	.word	0x64756c63
   875d8:	203a6465 	.word	0x203a6465
   875dc:	656a626f 	.word	0x656a626f
   875e0:	6c637463 	.word	0x6c637463
   875e4:	20737361 	.word	0x20737361
   875e8:	54203d3e 	.word	0x54203d3e
   875ec:	45434152 	.word	0x45434152
   875f0:	4c434e5f 	.word	0x4c434e5f
   875f4:	45535341 	.word	0x45535341
   875f8:	00000053 	.word	0x00000053
   875fc:	43415254 	.word	0x43415254
   87600:	53415f45 	.word	0x53415f45
   87604:	54524553 	.word	0x54524553
   87608:	6975203a 	.word	0x6975203a
   8760c:	63617254 	.word	0x63617254
   87610:	4f734965 	.word	0x4f734965
   87614:	63656a62 	.word	0x63656a62
   87618:	63784574 	.word	0x63784574
   8761c:	6564756c 	.word	0x6564756c
   87620:	49203a64 	.word	0x49203a64
   87624:	6c61766e 	.word	0x6c61766e
   87628:	76206469 	.word	0x76206469
   8762c:	65756c61 	.word	0x65756c61
   87630:	726f6620 	.word	0x726f6620
   87634:	6e616820 	.word	0x6e616820
   87638:	00656c64 	.word	0x00656c64
   8763c:	61766e49 	.word	0x61766e49
   87640:	2064696c 	.word	0x2064696c
   87644:	656a626f 	.word	0x656a626f
   87648:	63207463 	.word	0x63207463
   8764c:	7373616c 	.word	0x7373616c
   87650:	20444920 	.word	0x20444920
   87654:	75206e69 	.word	0x75206e69
   87658:	61725469 	.word	0x61725469
   8765c:	73496563 	.word	0x73496563
   87660:	656a624f 	.word	0x656a624f
   87664:	78457463 	.word	0x78457463
   87668:	64756c63 	.word	0x64756c63
   8766c:	00216465 	.word	0x00216465
   87670:	43415254 	.word	0x43415254
   87674:	53415f45 	.word	0x53415f45
   87678:	54524553 	.word	0x54524553
   8767c:	7277203a 	.word	0x7277203a
   87680:	49657469 	.word	0x49657469
   87684:	3233746e 	.word	0x3233746e
   87688:	7562203a 	.word	0x7562203a
   8768c:	72656666 	.word	0x72656666
   87690:	203d3d20 	.word	0x203d3d20
   87694:	4c4c554e 	.word	0x4c4c554e
   87698:	00000000 	.word	0x00000000
   8769c:	43415254 	.word	0x43415254
   876a0:	53415f45 	.word	0x53415f45
   876a4:	54524553 	.word	0x54524553
   876a8:	7277203a 	.word	0x7277203a
   876ac:	49657469 	.word	0x49657469
   876b0:	3631746e 	.word	0x3631746e
   876b4:	7562203a 	.word	0x7562203a
   876b8:	72656666 	.word	0x72656666
   876bc:	203d3d20 	.word	0x203d3d20
   876c0:	4c4c554e 	.word	0x4c4c554e
   876c4:	00000000 	.word	0x00000000
   876c8:	6f636552 	.word	0x6f636552
   876cc:	72656472 	.word	0x72656472
   876d0:	61746144 	.word	0x61746144
   876d4:	20727450 	.word	0x20727450
   876d8:	4e207369 	.word	0x4e207369
   876dc:	2e4c4c55 	.word	0x2e4c4c55
   876e0:	6c614320 	.word	0x6c614320
   876e4:	5476206c 	.word	0x5476206c
   876e8:	65636172 	.word	0x65636172
   876ec:	74696e49 	.word	0x74696e49
   876f0:	63617254 	.word	0x63617254
   876f4:	74614465 	.word	0x74614465
   876f8:	20292861 	.word	0x20292861
   876fc:	6f666562 	.word	0x6f666562
   87700:	73206572 	.word	0x73206572
   87704:	74726174 	.word	0x74726174
   87708:	20676e69 	.word	0x20676e69
   8770c:	63617274 	.word	0x63617274
   87710:	00002e65 	.word	0x00002e65
   87714:	61747328 	.word	0x61747328
   87718:	70757472 	.word	0x70757472
   8771c:	00000029 	.word	0x00000029
   87720:	43415254 	.word	0x43415254
   87724:	53415f45 	.word	0x53415f45
   87728:	54524553 	.word	0x54524553
   8772c:	5476203a 	.word	0x5476203a
   87730:	65636172 	.word	0x65636172
   87734:	49746553 	.word	0x49746553
   87738:	72505253 	.word	0x72505253
   8773c:	7265706f 	.word	0x7265706f
   87740:	73656974 	.word	0x73656974
   87744:	6e49203a 	.word	0x6e49203a
   87748:	696c6176 	.word	0x696c6176
   8774c:	61762064 	.word	0x61762064
   87750:	2065756c 	.word	0x2065756c
   87754:	20726f66 	.word	0x20726f66
   87758:	646e6168 	.word	0x646e6168
   8775c:	0000656c 	.word	0x0000656c
   87760:	43415254 	.word	0x43415254
   87764:	53415f45 	.word	0x53415f45
   87768:	54524553 	.word	0x54524553
   8776c:	5476203a 	.word	0x5476203a
   87770:	65636172 	.word	0x65636172
   87774:	49746553 	.word	0x49746553
   87778:	72505253 	.word	0x72505253
   8777c:	7265706f 	.word	0x7265706f
   87780:	73656974 	.word	0x73656974
   87784:	616e203a 	.word	0x616e203a
   87788:	3d20656d 	.word	0x3d20656d
   8778c:	554e203d 	.word	0x554e203d
   87790:	00004c4c 	.word	0x00004c4c
   87794:	656c6c49 	.word	0x656c6c49
   87798:	206c6167 	.word	0x206c6167
   8779c:	6c6c6163 	.word	0x6c6c6163
   877a0:	206f7420 	.word	0x206f7420
   877a4:	61725476 	.word	0x61725476
   877a8:	74536563 	.word	0x74536563
   877ac:	4965726f 	.word	0x4965726f
   877b0:	65425253 	.word	0x65425253
   877b4:	2c6e6967 	.word	0x2c6e6967
   877b8:	63657220 	.word	0x63657220
   877bc:	6564726f 	.word	0x6564726f
   877c0:	75622072 	.word	0x75622072
   877c4:	00217973 	.word	0x00217973
   877c8:	43415254 	.word	0x43415254
   877cc:	53415f45 	.word	0x53415f45
   877d0:	54524553 	.word	0x54524553
   877d4:	5476203a 	.word	0x5476203a
   877d8:	65636172 	.word	0x65636172
   877dc:	726f7453 	.word	0x726f7453
   877e0:	52534965 	.word	0x52534965
   877e4:	69676542 	.word	0x69676542
   877e8:	49203a6e 	.word	0x49203a6e
   877ec:	6c61766e 	.word	0x6c61766e
   877f0:	76206469 	.word	0x76206469
   877f4:	65756c61 	.word	0x65756c61
   877f8:	726f6620 	.word	0x726f6620
   877fc:	6e616820 	.word	0x6e616820
   87800:	00656c64 	.word	0x00656c64
   87804:	206f6f54 	.word	0x206f6f54
   87808:	796e616d 	.word	0x796e616d
   8780c:	73656e20 	.word	0x73656e20
   87810:	20646574 	.word	0x20646574
   87814:	65746e69 	.word	0x65746e69
   87818:	70757272 	.word	0x70757272
   8781c:	00217374 	.word	0x00217374
   87820:	656c6c49 	.word	0x656c6c49
   87824:	206c6167 	.word	0x206c6167
   87828:	6c6c6163 	.word	0x6c6c6163
   8782c:	206f7420 	.word	0x206f7420
   87830:	61725476 	.word	0x61725476
   87834:	74536563 	.word	0x74536563
   87838:	4965726f 	.word	0x4965726f
   8783c:	6e455253 	.word	0x6e455253
   87840:	72202c64 	.word	0x72202c64
   87844:	726f6365 	.word	0x726f6365
   87848:	20726564 	.word	0x20726564
   8784c:	79737562 	.word	0x79737562
   87850:	00000021 	.word	0x00000021
   87854:	616d6e55 	.word	0x616d6e55
   87858:	65686374 	.word	0x65686374
   8785c:	61632064 	.word	0x61632064
   87860:	74206c6c 	.word	0x74206c6c
   87864:	5476206f 	.word	0x5476206f
   87868:	65636172 	.word	0x65636172
   8786c:	726f7453 	.word	0x726f7453
   87870:	52534965 	.word	0x52534965
   87874:	20646e45 	.word	0x20646e45
   87878:	53496e28 	.word	0x53496e28
   8787c:	74636152 	.word	0x74636152
   87880:	20657669 	.word	0x20657669
   87884:	30203d3d 	.word	0x30203d3d
   87888:	7865202c 	.word	0x7865202c
   8788c:	74636570 	.word	0x74636570
   87890:	3e206465 	.word	0x3e206465
   87894:	00293020 	.word	0x00293020
   87898:	43415254 	.word	0x43415254
   8789c:	53415f45 	.word	0x53415f45
   878a0:	54524553 	.word	0x54524553
   878a4:	5476203a 	.word	0x5476203a
   878a8:	65636172 	.word	0x65636172
   878ac:	72657355 	.word	0x72657355
   878b0:	6e657645 	.word	0x6e657645
   878b4:	49203a74 	.word	0x49203a74
   878b8:	6c61766e 	.word	0x6c61766e
   878bc:	76206469 	.word	0x76206469
   878c0:	65756c61 	.word	0x65756c61
   878c4:	726f6620 	.word	0x726f6620
   878c8:	65766520 	.word	0x65766520
   878cc:	614c746e 	.word	0x614c746e
   878d0:	006c6562 	.word	0x006c6562
   878d4:	43415254 	.word	0x43415254
   878d8:	53415f45 	.word	0x53415f45
   878dc:	54524553 	.word	0x54524553
   878e0:	5478203a 	.word	0x5478203a
   878e4:	65636172 	.word	0x65636172
   878e8:	6e65704f 	.word	0x6e65704f
   878ec:	6562614c 	.word	0x6562614c
   878f0:	6c203a6c 	.word	0x6c203a6c
   878f4:	6c656261 	.word	0x6c656261
   878f8:	203d3d20 	.word	0x203d3d20
   878fc:	4c4c554e 	.word	0x4c4c554e
   87900:	00000000 	.word	0x00000000
   87904:	43415254 	.word	0x43415254
   87908:	53415f45 	.word	0x53415f45
   8790c:	54524553 	.word	0x54524553
   87910:	5476203a 	.word	0x5476203a
   87914:	65636172 	.word	0x65636172
   87918:	6e697250 	.word	0x6e697250
   8791c:	203a4674 	.word	0x203a4674
   87920:	6d726f66 	.word	0x6d726f66
   87924:	74537461 	.word	0x74537461
   87928:	3d3d2072 	.word	0x3d3d2072
   8792c:	4c554e20 	.word	0x4c554e20
   87930:	0000004c 	.word	0x0000004c
   87934:	61725476 	.word	0x61725476
   87938:	72506563 	.word	0x72506563
   8793c:	46746e69 	.word	0x46746e69
   87940:	54202d20 	.word	0x54202d20
   87944:	6d206f6f 	.word	0x6d206f6f
   87948:	20796e61 	.word	0x20796e61
   8794c:	75677261 	.word	0x75677261
   87950:	746e656d 	.word	0x746e656d
   87954:	6d202c73 	.word	0x6d202c73
   87958:	31207861 	.word	0x31207861
   8795c:	6c612035 	.word	0x6c612035
   87960:	65776f6c 	.word	0x65776f6c
   87964:	00002164 	.word	0x00002164
   87968:	61725476 	.word	0x61725476
   8796c:	72506563 	.word	0x72506563
   87970:	46746e69 	.word	0x46746e69
   87974:	54202d20 	.word	0x54202d20
   87978:	6c206f6f 	.word	0x6c206f6f
   8797c:	65677261 	.word	0x65677261
   87980:	67726120 	.word	0x67726120
   87984:	6e656d75 	.word	0x6e656d75
   87988:	202c7374 	.word	0x202c7374
   8798c:	2078616d 	.word	0x2078616d
   87990:	62203233 	.word	0x62203233
   87994:	20657479 	.word	0x20657479
   87998:	6f6c6c61 	.word	0x6f6c6c61
   8799c:	21646577 	.word	0x21646577
   879a0:	00000000 	.word	0x00000000
   879a4:	69726550 	.word	0x69726550
   879a8:	6369646f 	.word	0x6369646f
   879ac:	73617420 	.word	0x73617420
   879b0:	202d206b 	.word	0x202d206b
   879b4:	756f6241 	.word	0x756f6241
   879b8:	6f742074 	.word	0x6f742074
   879bc:	6e656720 	.word	0x6e656720
   879c0:	74617265 	.word	0x74617265
   879c4:	6e612065 	.word	0x6e612065
   879c8:	746e6920 	.word	0x746e6920
   879cc:	75727265 	.word	0x75727265
   879d0:	0a2e7470 	.word	0x0a2e7470
   879d4:	00000000 	.word	0x00000000
   879d8:	69726550 	.word	0x69726550
   879dc:	6369646f 	.word	0x6369646f
   879e0:	73617420 	.word	0x73617420
   879e4:	202d206b 	.word	0x202d206b
   879e8:	65746e49 	.word	0x65746e49
   879ec:	70757272 	.word	0x70757272
   879f0:	65672074 	.word	0x65672074
   879f4:	6172656e 	.word	0x6172656e
   879f8:	2e646574 	.word	0x2e646574
   879fc:	00000a0a 	.word	0x00000a0a
   87a00:	646e6148 	.word	0x646e6148
   87a04:	2072656c 	.word	0x2072656c
   87a08:	6b736174 	.word	0x6b736174
   87a0c:	50202d20 	.word	0x50202d20
   87a10:	65636f72 	.word	0x65636f72
   87a14:	6e697373 	.word	0x6e697373
   87a18:	76652067 	.word	0x76652067
   87a1c:	2e746e65 	.word	0x2e746e65
   87a20:	0000000a 	.word	0x0000000a
   87a24:	646e6148 	.word	0x646e6148
   87a28:	0072656c 	.word	0x0072656c
   87a2c:	69726550 	.word	0x69726550
   87a30:	6369646f 	.word	0x6369646f
   87a34:	00000000 	.word	0x00000000
   87a38:	00000043 	.word	0x00000043

00087a3c <_global_impure_ptr>:
   87a3c:	20070148                                H.. 

00087a40 <zeroes.6993>:
   87a40:	30303030 30303030 30303030 30303030     0000000000000000
   87a50:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   87a60:	00000000 33323130 37363534 62613938     ....0123456789ab
   87a70:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00087a80 <blanks.6992>:
   87a80:	20202020 20202020 20202020 20202020                     

00087a90 <_init>:
   87a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87a92:	bf00      	nop
   87a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87a96:	bc08      	pop	{r3}
   87a98:	469e      	mov	lr, r3
   87a9a:	4770      	bx	lr

00087a9c <__init_array_start>:
   87a9c:	00084ac1 	.word	0x00084ac1

00087aa0 <__frame_dummy_init_array_entry>:
   87aa0:	00080119                                ....

00087aa4 <_fini>:
   87aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87aa6:	bf00      	nop
   87aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87aaa:	bc08      	pop	{r3}
   87aac:	469e      	mov	lr, r3
   87aae:	4770      	bx	lr

00087ab0 <__fini_array_start>:
   87ab0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <readyEventsEnabled>:
2007013c:	00000001                                ....

20070140 <TraceObjectClassTable>:
20070140:	01010200 00000002                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	00087a38 00000000 00000000 00000000     8z..............
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <_impure_ptr>:
20070570:	20070148                                H.. 

20070574 <lc_ctype_charset>:
20070574:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070594 <__mb_cur_max>:
20070594:	00000001                                ....

20070598 <__malloc_av_>:
	...
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 

200709a0 <__malloc_trim_threshold>:
200709a0:	00020000                                ....

200709a4 <__malloc_sbrk_base>:
200709a4:	ffffffff                                ....

200709a8 <__wctomb>:
200709a8:	00086149                                Ia..
