
Example017.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053a8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000853a8  000853a8  000153a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000853b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a270  200709a8  00085d58  000209a4  2**3
                  ALLOC
  4 .stack        00002000  2007ac18  0008ffc8  000209a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c99c  00000000  00000000  00020a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000277a  00000000  00000000  0002d3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000071d7  00000000  00000000  0002fb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c58  00000000  00000000  00036d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  0003796b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018430  00000000  00000000  00038523  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000dde8  00000000  00000000  00050953  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068e5d  00000000  00000000  0005e73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002924  00000000  00000000  000c7598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cc18 	.word	0x2007cc18
   80004:	00081d25 	.word	0x00081d25
   80008:	00081d21 	.word	0x00081d21
   8000c:	00081d21 	.word	0x00081d21
   80010:	00081d21 	.word	0x00081d21
   80014:	00081d21 	.word	0x00081d21
   80018:	00081d21 	.word	0x00081d21
	...
   8002c:	00080289 	.word	0x00080289
   80030:	00081d21 	.word	0x00081d21
   80034:	00000000 	.word	0x00000000
   80038:	00080305 	.word	0x00080305
   8003c:	00080341 	.word	0x00080341
   80040:	00081d21 	.word	0x00081d21
   80044:	00081d21 	.word	0x00081d21
   80048:	00081d21 	.word	0x00081d21
   8004c:	00081d21 	.word	0x00081d21
   80050:	00081d21 	.word	0x00081d21
   80054:	00081d21 	.word	0x00081d21
   80058:	00081d21 	.word	0x00081d21
   8005c:	00081d21 	.word	0x00081d21
   80060:	00081d21 	.word	0x00081d21
   80064:	00081d21 	.word	0x00081d21
   80068:	00000000 	.word	0x00000000
   8006c:	00081b91 	.word	0x00081b91
   80070:	00081ba5 	.word	0x00081ba5
   80074:	00081bb9 	.word	0x00081bb9
   80078:	00081bcd 	.word	0x00081bcd
	...
   80084:	00081d21 	.word	0x00081d21
   80088:	00081d21 	.word	0x00081d21
   8008c:	00081d21 	.word	0x00081d21
   80090:	00081d21 	.word	0x00081d21
   80094:	00081d21 	.word	0x00081d21
   80098:	00081d21 	.word	0x00081d21
   8009c:	00081d21 	.word	0x00081d21
   800a0:	00081d21 	.word	0x00081d21
   800a4:	00000000 	.word	0x00000000
   800a8:	00081d21 	.word	0x00081d21
   800ac:	00081d21 	.word	0x00081d21
   800b0:	00081d21 	.word	0x00081d21
   800b4:	00081d21 	.word	0x00081d21
   800b8:	00081d21 	.word	0x00081d21
   800bc:	00081d21 	.word	0x00081d21
   800c0:	00081d21 	.word	0x00081d21
   800c4:	00081d21 	.word	0x00081d21
   800c8:	00081d21 	.word	0x00081d21
   800cc:	00081d21 	.word	0x00081d21
   800d0:	00081d21 	.word	0x00081d21
   800d4:	00081d21 	.word	0x00081d21
   800d8:	00081d21 	.word	0x00081d21
   800dc:	00081d21 	.word	0x00081d21
   800e0:	00081d21 	.word	0x00081d21
   800e4:	00081d21 	.word	0x00081d21
   800e8:	00081d21 	.word	0x00081d21
   800ec:	00081d21 	.word	0x00081d21
   800f0:	00081d21 	.word	0x00081d21

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	000853b0 	.word	0x000853b0

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709ac 	.word	0x200709ac
   80144:	000853b0 	.word	0x000853b0
   80148:	000853b0 	.word	0x000853b0
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b990      	cbnz	r0, 80178 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0f      	ble.n	8017e <_read+0x2e>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42a7      	cmp	r7, r4
   80170:	d1f8      	bne.n	80164 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80172:	4640      	mov	r0, r8
   80174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80178:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   8017c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8017e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   80180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80184:	2007ac0c 	.word	0x2007ac0c
   80188:	2007ac04 	.word	0x2007ac04

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   801b8:	f100 0308 	add.w	r3, r0, #8
   801bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   801be:	f04f 32ff 	mov.w	r2, #4294967295
   801c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   801c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   801c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   801c8:	2300      	movs	r3, #0
   801ca:	6003      	str	r3, [r0, #0]
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop

000801d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   801d0:	2300      	movs	r3, #0
   801d2:	6103      	str	r3, [r0, #16]
   801d4:	4770      	bx	lr
   801d6:	bf00      	nop

000801d8 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   801d8:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   801da:	685a      	ldr	r2, [r3, #4]
   801dc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   801de:	6842      	ldr	r2, [r0, #4]
   801e0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801e2:	685a      	ldr	r2, [r3, #4]
   801e4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   801e6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   801e8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801ec:	6803      	ldr	r3, [r0, #0]
   801ee:	3301      	adds	r3, #1
   801f0:	6003      	str	r3, [r0, #0]
   801f2:	4770      	bx	lr

000801f4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   801f4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   801f6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   801f8:	f1b4 3fff 	cmp.w	r4, #4294967295
   801fc:	d101      	bne.n	80202 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   801fe:	6903      	ldr	r3, [r0, #16]
   80200:	e00a      	b.n	80218 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80202:	f100 0308 	add.w	r3, r0, #8
   80206:	68c2      	ldr	r2, [r0, #12]
   80208:	6812      	ldr	r2, [r2, #0]
   8020a:	4294      	cmp	r4, r2
   8020c:	d304      	bcc.n	80218 <vListInsert+0x24>
   8020e:	685b      	ldr	r3, [r3, #4]
   80210:	685a      	ldr	r2, [r3, #4]
   80212:	6812      	ldr	r2, [r2, #0]
   80214:	4294      	cmp	r4, r2
   80216:	d2fa      	bcs.n	8020e <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80218:	685a      	ldr	r2, [r3, #4]
   8021a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8021c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8021e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80220:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80222:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80224:	6803      	ldr	r3, [r0, #0]
   80226:	3301      	adds	r3, #1
   80228:	6003      	str	r3, [r0, #0]
}
   8022a:	bc10      	pop	{r4}
   8022c:	4770      	bx	lr
   8022e:	bf00      	nop

00080230 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80230:	6843      	ldr	r3, [r0, #4]
   80232:	6882      	ldr	r2, [r0, #8]
   80234:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80236:	6883      	ldr	r3, [r0, #8]
   80238:	6842      	ldr	r2, [r0, #4]
   8023a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8023c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8023e:	685a      	ldr	r2, [r3, #4]
   80240:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80242:	bf04      	itt	eq
   80244:	6882      	ldreq	r2, [r0, #8]
   80246:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80248:	2200      	movs	r2, #0
   8024a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8024c:	681a      	ldr	r2, [r3, #0]
   8024e:	3a01      	subs	r2, #1
   80250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80252:	6818      	ldr	r0, [r3, #0]
}
   80254:	4770      	bx	lr
   80256:	bf00      	nop

00080258 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80258:	4803      	ldr	r0, [pc, #12]	; (80268 <prvPortStartFirstTask+0x10>)
   8025a:	6800      	ldr	r0, [r0, #0]
   8025c:	6800      	ldr	r0, [r0, #0]
   8025e:	f380 8808 	msr	MSP, r0
   80262:	b662      	cpsie	i
   80264:	df00      	svc	0
   80266:	bf00      	nop
   80268:	e000ed08 	.word	0xe000ed08

0008026c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8026c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80270:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80274:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80278:	2300      	movs	r3, #0
   8027a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8027e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80282:	3840      	subs	r0, #64	; 0x40
   80284:	4770      	bx	lr
   80286:	bf00      	nop

00080288 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80288:	4b06      	ldr	r3, [pc, #24]	; (802a4 <pxCurrentTCBConst2>)
   8028a:	6819      	ldr	r1, [r3, #0]
   8028c:	6808      	ldr	r0, [r1, #0]
   8028e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80292:	f380 8809 	msr	PSP, r0
   80296:	f04f 0000 	mov.w	r0, #0
   8029a:	f380 8811 	msr	BASEPRI, r0
   8029e:	f04e 0e0d 	orr.w	lr, lr, #13
   802a2:	4770      	bx	lr

000802a4 <pxCurrentTCBConst2>:
   802a4:	2007aa8c 	.word	0x2007aa8c

000802a8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802ac:	4b01      	ldr	r3, [pc, #4]	; (802b4 <vPortYieldFromISR+0xc>)
   802ae:	601a      	str	r2, [r3, #0]
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop
   802b4:	e000ed04 	.word	0xe000ed04

000802b8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802b8:	f3ef 8011 	mrs	r0, BASEPRI
   802bc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802c0:	f381 8811 	msr	BASEPRI, r1
   802c4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802c6:	2000      	movs	r0, #0

000802c8 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   802c8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   802ca:	4b03      	ldr	r3, [pc, #12]	; (802d8 <vPortEnterCritical+0x10>)
   802cc:	4798      	blx	r3
	uxCriticalNesting++;
   802ce:	4a03      	ldr	r2, [pc, #12]	; (802dc <vPortEnterCritical+0x14>)
   802d0:	6813      	ldr	r3, [r2, #0]
   802d2:	3301      	adds	r3, #1
   802d4:	6013      	str	r3, [r2, #0]
   802d6:	bd08      	pop	{r3, pc}
   802d8:	000802b9 	.word	0x000802b9
   802dc:	2007012c 	.word	0x2007012c

000802e0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802e0:	f380 8811 	msr	BASEPRI, r0
   802e4:	4770      	bx	lr
   802e6:	bf00      	nop

000802e8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   802e8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   802ea:	4a04      	ldr	r2, [pc, #16]	; (802fc <vPortExitCritical+0x14>)
   802ec:	6813      	ldr	r3, [r2, #0]
   802ee:	3b01      	subs	r3, #1
   802f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   802f2:	b913      	cbnz	r3, 802fa <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   802f4:	2000      	movs	r0, #0
   802f6:	4b02      	ldr	r3, [pc, #8]	; (80300 <vPortExitCritical+0x18>)
   802f8:	4798      	blx	r3
   802fa:	bd08      	pop	{r3, pc}
   802fc:	2007012c 	.word	0x2007012c
   80300:	000802e1 	.word	0x000802e1

00080304 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80304:	f3ef 8009 	mrs	r0, PSP
   80308:	4b0c      	ldr	r3, [pc, #48]	; (8033c <pxCurrentTCBConst>)
   8030a:	681a      	ldr	r2, [r3, #0]
   8030c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80310:	6010      	str	r0, [r2, #0]
   80312:	e92d 4008 	stmdb	sp!, {r3, lr}
   80316:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8031a:	f380 8811 	msr	BASEPRI, r0
   8031e:	f000 fec5 	bl	810ac <vTaskSwitchContext>
   80322:	f04f 0000 	mov.w	r0, #0
   80326:	f380 8811 	msr	BASEPRI, r0
   8032a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8032e:	6819      	ldr	r1, [r3, #0]
   80330:	6808      	ldr	r0, [r1, #0]
   80332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80336:	f380 8809 	msr	PSP, r0
   8033a:	4770      	bx	lr

0008033c <pxCurrentTCBConst>:
   8033c:	2007aa8c 	.word	0x2007aa8c

00080340 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80340:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80346:	4b05      	ldr	r3, [pc, #20]	; (8035c <SysTick_Handler+0x1c>)
   80348:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8034a:	4b05      	ldr	r3, [pc, #20]	; (80360 <SysTick_Handler+0x20>)
   8034c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8034e:	4b05      	ldr	r3, [pc, #20]	; (80364 <SysTick_Handler+0x24>)
   80350:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80352:	2000      	movs	r0, #0
   80354:	4b04      	ldr	r3, [pc, #16]	; (80368 <SysTick_Handler+0x28>)
   80356:	4798      	blx	r3
   80358:	bd08      	pop	{r3, pc}
   8035a:	bf00      	nop
   8035c:	e000ed04 	.word	0xe000ed04
   80360:	000802b9 	.word	0x000802b9
   80364:	00080dbd 	.word	0x00080dbd
   80368:	000802e1 	.word	0x000802e1

0008036c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   8036c:	4a03      	ldr	r2, [pc, #12]	; (8037c <vPortSetupTimerInterrupt+0x10>)
   8036e:	4b04      	ldr	r3, [pc, #16]	; (80380 <vPortSetupTimerInterrupt+0x14>)
   80370:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80372:	2207      	movs	r2, #7
   80374:	3b04      	subs	r3, #4
   80376:	601a      	str	r2, [r3, #0]
   80378:	4770      	bx	lr
   8037a:	bf00      	nop
   8037c:	0001481f 	.word	0x0001481f
   80380:	e000e014 	.word	0xe000e014

00080384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80384:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80386:	4b09      	ldr	r3, [pc, #36]	; (803ac <xPortStartScheduler+0x28>)
   80388:	681a      	ldr	r2, [r3, #0]
   8038a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8038e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80390:	681a      	ldr	r2, [r3, #0]
   80392:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80396:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80398:	4b05      	ldr	r3, [pc, #20]	; (803b0 <xPortStartScheduler+0x2c>)
   8039a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   8039c:	2400      	movs	r4, #0
   8039e:	4b05      	ldr	r3, [pc, #20]	; (803b4 <xPortStartScheduler+0x30>)
   803a0:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <xPortStartScheduler+0x34>)
   803a4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   803a6:	4620      	mov	r0, r4
   803a8:	bd10      	pop	{r4, pc}
   803aa:	bf00      	nop
   803ac:	e000ed20 	.word	0xe000ed20
   803b0:	0008036d 	.word	0x0008036d
   803b4:	2007012c 	.word	0x2007012c
   803b8:	00080259 	.word	0x00080259

000803bc <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   803bc:	4a12      	ldr	r2, [pc, #72]	; (80408 <prvInsertBlockIntoFreeList+0x4c>)
   803be:	e000      	b.n	803c2 <prvInsertBlockIntoFreeList+0x6>
   803c0:	461a      	mov	r2, r3
   803c2:	6813      	ldr	r3, [r2, #0]
   803c4:	4283      	cmp	r3, r0
   803c6:	d3fb      	bcc.n	803c0 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   803c8:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   803ca:	6851      	ldr	r1, [r2, #4]
   803cc:	1854      	adds	r4, r2, r1
   803ce:	42a0      	cmp	r0, r4
   803d0:	d103      	bne.n	803da <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   803d2:	6840      	ldr	r0, [r0, #4]
   803d4:	4401      	add	r1, r0
   803d6:	6051      	str	r1, [r2, #4]
   803d8:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   803da:	6841      	ldr	r1, [r0, #4]
   803dc:	1844      	adds	r4, r0, r1
   803de:	42a3      	cmp	r3, r4
   803e0:	d10c      	bne.n	803fc <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   803e2:	4b0a      	ldr	r3, [pc, #40]	; (8040c <prvInsertBlockIntoFreeList+0x50>)
   803e4:	681b      	ldr	r3, [r3, #0]
   803e6:	429c      	cmp	r4, r3
   803e8:	d006      	beq.n	803f8 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   803ea:	6863      	ldr	r3, [r4, #4]
   803ec:	4419      	add	r1, r3
   803ee:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   803f0:	6813      	ldr	r3, [r2, #0]
   803f2:	681b      	ldr	r3, [r3, #0]
   803f4:	6003      	str	r3, [r0, #0]
   803f6:	e002      	b.n	803fe <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   803f8:	6004      	str	r4, [r0, #0]
   803fa:	e000      	b.n	803fe <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   803fc:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   803fe:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80400:	bf18      	it	ne
   80402:	6010      	strne	r0, [r2, #0]
	}
}
   80404:	bc10      	pop	{r4}
   80406:	4770      	bx	lr
   80408:	2007a9cc 	.word	0x2007a9cc
   8040c:	2007a9c8 	.word	0x2007a9c8

00080410 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   80410:	b538      	push	{r3, r4, r5, lr}
   80412:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80414:	4b2b      	ldr	r3, [pc, #172]	; (804c4 <pvPortMalloc+0xb4>)
   80416:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80418:	4b2b      	ldr	r3, [pc, #172]	; (804c8 <pvPortMalloc+0xb8>)
   8041a:	681b      	ldr	r3, [r3, #0]
   8041c:	b99b      	cbnz	r3, 80446 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8041e:	4a2b      	ldr	r2, [pc, #172]	; (804cc <pvPortMalloc+0xbc>)
   80420:	4b2b      	ldr	r3, [pc, #172]	; (804d0 <pvPortMalloc+0xc0>)
   80422:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80424:	2100      	movs	r1, #0
   80426:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80428:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   8042c:	1898      	adds	r0, r3, r2
   8042e:	4d26      	ldr	r5, [pc, #152]	; (804c8 <pvPortMalloc+0xb8>)
   80430:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80432:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80436:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80438:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8043a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8043c:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8043e:	4a25      	ldr	r2, [pc, #148]	; (804d4 <pvPortMalloc+0xc4>)
   80440:	6813      	ldr	r3, [r2, #0]
   80442:	3b10      	subs	r3, #16
   80444:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80446:	2c00      	cmp	r4, #0
   80448:	d037      	beq.n	804ba <pvPortMalloc+0xaa>
		{
			xWantedSize += heapSTRUCT_SIZE;
   8044a:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8044e:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80452:	bf1c      	itt	ne
   80454:	f022 0207 	bicne.w	r2, r2, #7
   80458:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8045a:	1e51      	subs	r1, r2, #1
   8045c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80460:	4299      	cmp	r1, r3
   80462:	d827      	bhi.n	804b4 <pvPortMalloc+0xa4>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80464:	4919      	ldr	r1, [pc, #100]	; (804cc <pvPortMalloc+0xbc>)
   80466:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80468:	e001      	b.n	8046e <pvPortMalloc+0x5e>
   8046a:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   8046c:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8046e:	6863      	ldr	r3, [r4, #4]
   80470:	429a      	cmp	r2, r3
   80472:	d902      	bls.n	8047a <pvPortMalloc+0x6a>
   80474:	6823      	ldr	r3, [r4, #0]
   80476:	2b00      	cmp	r3, #0
   80478:	d1f7      	bne.n	8046a <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   8047a:	4b13      	ldr	r3, [pc, #76]	; (804c8 <pvPortMalloc+0xb8>)
   8047c:	681b      	ldr	r3, [r3, #0]
   8047e:	429c      	cmp	r4, r3
   80480:	d018      	beq.n	804b4 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80482:	680d      	ldr	r5, [r1, #0]
   80484:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80486:	6823      	ldr	r3, [r4, #0]
   80488:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8048a:	6863      	ldr	r3, [r4, #4]
   8048c:	1a9b      	subs	r3, r3, r2
   8048e:	2b20      	cmp	r3, #32
   80490:	d904      	bls.n	8049c <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80492:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80494:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80496:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80498:	4b0f      	ldr	r3, [pc, #60]	; (804d8 <pvPortMalloc+0xc8>)
   8049a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8049c:	4a0d      	ldr	r2, [pc, #52]	; (804d4 <pvPortMalloc+0xc4>)
   8049e:	6813      	ldr	r3, [r2, #0]
   804a0:	6861      	ldr	r1, [r4, #4]
   804a2:	1a5b      	subs	r3, r3, r1
   804a4:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
   804a6:	4b0d      	ldr	r3, [pc, #52]	; (804dc <pvPortMalloc+0xcc>)
   804a8:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   804aa:	b94d      	cbnz	r5, 804c0 <pvPortMalloc+0xb0>
		{
			vApplicationMallocFailedHook();
   804ac:	4b0c      	ldr	r3, [pc, #48]	; (804e0 <pvPortMalloc+0xd0>)
   804ae:	4798      	blx	r3
   804b0:	2500      	movs	r5, #0
		}
	}
	#endif

	return pvReturn;
   804b2:	e005      	b.n	804c0 <pvPortMalloc+0xb0>

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   804b4:	4b09      	ldr	r3, [pc, #36]	; (804dc <pvPortMalloc+0xcc>)
   804b6:	4798      	blx	r3
   804b8:	e7f8      	b.n	804ac <pvPortMalloc+0x9c>
   804ba:	4b08      	ldr	r3, [pc, #32]	; (804dc <pvPortMalloc+0xcc>)
   804bc:	4798      	blx	r3
   804be:	e7f5      	b.n	804ac <pvPortMalloc+0x9c>
		}
	}
	#endif

	return pvReturn;
}
   804c0:	4628      	mov	r0, r5
   804c2:	bd38      	pop	{r3, r4, r5, pc}
   804c4:	00080d8d 	.word	0x00080d8d
   804c8:	2007a9c8 	.word	0x2007a9c8
   804cc:	2007a9cc 	.word	0x2007a9cc
   804d0:	200709c8 	.word	0x200709c8
   804d4:	20070130 	.word	0x20070130
   804d8:	000803bd 	.word	0x000803bd
   804dc:	00080edd 	.word	0x00080edd
   804e0:	000821e1 	.word	0x000821e1

000804e4 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   804e4:	b180      	cbz	r0, 80508 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   804e6:	b510      	push	{r4, lr}
   804e8:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   804ea:	4b08      	ldr	r3, [pc, #32]	; (8050c <vPortFree+0x28>)
   804ec:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   804ee:	4a08      	ldr	r2, [pc, #32]	; (80510 <vPortFree+0x2c>)
   804f0:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   804f4:	6813      	ldr	r3, [r2, #0]
   804f6:	440b      	add	r3, r1
   804f8:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   804fa:	f1a4 0010 	sub.w	r0, r4, #16
   804fe:	4b05      	ldr	r3, [pc, #20]	; (80514 <vPortFree+0x30>)
   80500:	4798      	blx	r3
		}
		xTaskResumeAll();
   80502:	4b05      	ldr	r3, [pc, #20]	; (80518 <vPortFree+0x34>)
   80504:	4798      	blx	r3
   80506:	bd10      	pop	{r4, pc}
   80508:	4770      	bx	lr
   8050a:	bf00      	nop
   8050c:	00080d8d 	.word	0x00080d8d
   80510:	20070130 	.word	0x20070130
   80514:	000803bd 	.word	0x000803bd
   80518:	00080edd 	.word	0x00080edd

0008051c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8051c:	b510      	push	{r4, lr}
   8051e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80520:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80522:	b93b      	cbnz	r3, 80534 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80524:	6803      	ldr	r3, [r0, #0]
   80526:	bb1b      	cbnz	r3, 80570 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80528:	6840      	ldr	r0, [r0, #4]
   8052a:	4b13      	ldr	r3, [pc, #76]	; (80578 <prvCopyDataToQueue+0x5c>)
   8052c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8052e:	2300      	movs	r3, #0
   80530:	6063      	str	r3, [r4, #4]
   80532:	e01d      	b.n	80570 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80534:	b96a      	cbnz	r2, 80552 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80536:	461a      	mov	r2, r3
   80538:	6880      	ldr	r0, [r0, #8]
   8053a:	4b10      	ldr	r3, [pc, #64]	; (8057c <prvCopyDataToQueue+0x60>)
   8053c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8053e:	68a2      	ldr	r2, [r4, #8]
   80540:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80542:	4413      	add	r3, r2
   80544:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80546:	6862      	ldr	r2, [r4, #4]
   80548:	4293      	cmp	r3, r2
   8054a:	d311      	bcc.n	80570 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8054c:	6823      	ldr	r3, [r4, #0]
   8054e:	60a3      	str	r3, [r4, #8]
   80550:	e00e      	b.n	80570 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80552:	461a      	mov	r2, r3
   80554:	68c0      	ldr	r0, [r0, #12]
   80556:	4b09      	ldr	r3, [pc, #36]	; (8057c <prvCopyDataToQueue+0x60>)
   80558:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8055a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8055c:	425b      	negs	r3, r3
   8055e:	68e2      	ldr	r2, [r4, #12]
   80560:	441a      	add	r2, r3
   80562:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80564:	6821      	ldr	r1, [r4, #0]
   80566:	428a      	cmp	r2, r1
   80568:	d202      	bcs.n	80570 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8056a:	6862      	ldr	r2, [r4, #4]
   8056c:	4413      	add	r3, r2
   8056e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80572:	3301      	adds	r3, #1
   80574:	63a3      	str	r3, [r4, #56]	; 0x38
   80576:	bd10      	pop	{r4, pc}
   80578:	000813dd 	.word	0x000813dd
   8057c:	0008225d 	.word	0x0008225d

00080580 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80580:	b538      	push	{r3, r4, r5, lr}
   80582:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80584:	6800      	ldr	r0, [r0, #0]
   80586:	b158      	cbz	r0, 805a0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8058a:	68dc      	ldr	r4, [r3, #12]
   8058c:	4414      	add	r4, r2
   8058e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80590:	685d      	ldr	r5, [r3, #4]
   80592:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80594:	bf28      	it	cs
   80596:	60d8      	strcs	r0, [r3, #12]
   80598:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   8059a:	68d9      	ldr	r1, [r3, #12]
   8059c:	4b01      	ldr	r3, [pc, #4]	; (805a4 <prvCopyDataFromQueue+0x24>)
   8059e:	4798      	blx	r3
   805a0:	bd38      	pop	{r3, r4, r5, pc}
   805a2:	bf00      	nop
   805a4:	0008225d 	.word	0x0008225d

000805a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   805a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805aa:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   805ac:	4b1e      	ldr	r3, [pc, #120]	; (80628 <prvUnlockQueue+0x80>)
   805ae:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805b2:	2b00      	cmp	r3, #0
   805b4:	dd13      	ble.n	805de <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   805b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805b8:	b91b      	cbnz	r3, 805c2 <prvUnlockQueue+0x1a>
   805ba:	e010      	b.n	805de <prvUnlockQueue+0x36>
   805bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805be:	b923      	cbnz	r3, 805ca <prvUnlockQueue+0x22>
   805c0:	e00d      	b.n	805de <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805c2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   805c6:	4d19      	ldr	r5, [pc, #100]	; (8062c <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805c8:	4f19      	ldr	r7, [pc, #100]	; (80630 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805ca:	4630      	mov	r0, r6
   805cc:	47a8      	blx	r5
   805ce:	b100      	cbz	r0, 805d2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805d0:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   805d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805d4:	3b01      	subs	r3, #1
   805d6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805da:	2b00      	cmp	r3, #0
   805dc:	dcee      	bgt.n	805bc <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   805de:	f04f 33ff 	mov.w	r3, #4294967295
   805e2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   805e4:	4b13      	ldr	r3, [pc, #76]	; (80634 <prvUnlockQueue+0x8c>)
   805e6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   805e8:	4b0f      	ldr	r3, [pc, #60]	; (80628 <prvUnlockQueue+0x80>)
   805ea:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   805ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
   805ee:	2b00      	cmp	r3, #0
   805f0:	dd13      	ble.n	8061a <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   805f2:	6923      	ldr	r3, [r4, #16]
   805f4:	b91b      	cbnz	r3, 805fe <prvUnlockQueue+0x56>
   805f6:	e010      	b.n	8061a <prvUnlockQueue+0x72>
   805f8:	6923      	ldr	r3, [r4, #16]
   805fa:	b923      	cbnz	r3, 80606 <prvUnlockQueue+0x5e>
   805fc:	e00d      	b.n	8061a <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   805fe:	f104 0610 	add.w	r6, r4, #16
   80602:	4d0a      	ldr	r5, [pc, #40]	; (8062c <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80604:	4f0a      	ldr	r7, [pc, #40]	; (80630 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80606:	4630      	mov	r0, r6
   80608:	47a8      	blx	r5
   8060a:	b100      	cbz	r0, 8060e <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   8060c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   8060e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80610:	3b01      	subs	r3, #1
   80612:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80614:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80616:	2b00      	cmp	r3, #0
   80618:	dcee      	bgt.n	805f8 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8061a:	f04f 33ff 	mov.w	r3, #4294967295
   8061e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80620:	4b04      	ldr	r3, [pc, #16]	; (80634 <prvUnlockQueue+0x8c>)
   80622:	4798      	blx	r3
   80624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80626:	bf00      	nop
   80628:	000802c9 	.word	0x000802c9
   8062c:	000811f5 	.word	0x000811f5
   80630:	00081325 	.word	0x00081325
   80634:	000802e9 	.word	0x000802e9

00080638 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80638:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   8063a:	b918      	cbnz	r0, 80644 <xQueueGenericReset+0xc>
   8063c:	4b17      	ldr	r3, [pc, #92]	; (8069c <xQueueGenericReset+0x64>)
   8063e:	4798      	blx	r3
   80640:	bf00      	nop
   80642:	e7fd      	b.n	80640 <xQueueGenericReset+0x8>
   80644:	460d      	mov	r5, r1
   80646:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80648:	4b15      	ldr	r3, [pc, #84]	; (806a0 <xQueueGenericReset+0x68>)
   8064a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8064c:	6822      	ldr	r2, [r4, #0]
   8064e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80652:	fb03 f301 	mul.w	r3, r3, r1
   80656:	18d0      	adds	r0, r2, r3
   80658:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8065a:	2000      	movs	r0, #0
   8065c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8065e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80660:	1a5b      	subs	r3, r3, r1
   80662:	4413      	add	r3, r2
   80664:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80666:	f04f 33ff 	mov.w	r3, #4294967295
   8066a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8066c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8066e:	b955      	cbnz	r5, 80686 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80670:	6923      	ldr	r3, [r4, #16]
   80672:	b17b      	cbz	r3, 80694 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80674:	f104 0010 	add.w	r0, r4, #16
   80678:	4b0a      	ldr	r3, [pc, #40]	; (806a4 <xQueueGenericReset+0x6c>)
   8067a:	4798      	blx	r3
   8067c:	2801      	cmp	r0, #1
   8067e:	d109      	bne.n	80694 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80680:	4b09      	ldr	r3, [pc, #36]	; (806a8 <xQueueGenericReset+0x70>)
   80682:	4798      	blx	r3
   80684:	e006      	b.n	80694 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80686:	f104 0010 	add.w	r0, r4, #16
   8068a:	4d08      	ldr	r5, [pc, #32]	; (806ac <xQueueGenericReset+0x74>)
   8068c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8068e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80692:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80694:	4b06      	ldr	r3, [pc, #24]	; (806b0 <xQueueGenericReset+0x78>)
   80696:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80698:	2001      	movs	r0, #1
   8069a:	bd38      	pop	{r3, r4, r5, pc}
   8069c:	000802b9 	.word	0x000802b9
   806a0:	000802c9 	.word	0x000802c9
   806a4:	000811f5 	.word	0x000811f5
   806a8:	000802a9 	.word	0x000802a9
   806ac:	000801b9 	.word	0x000801b9
   806b0:	000802e9 	.word	0x000802e9

000806b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   806b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   806b6:	b1a0      	cbz	r0, 806e2 <xQueueGenericCreate+0x2e>
   806b8:	460d      	mov	r5, r1
   806ba:	4617      	mov	r7, r2
   806bc:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   806be:	2050      	movs	r0, #80	; 0x50
   806c0:	4b0e      	ldr	r3, [pc, #56]	; (806fc <xQueueGenericCreate+0x48>)
   806c2:	4798      	blx	r3
		if( pxNewQueue != NULL )
   806c4:	4604      	mov	r4, r0
   806c6:	b160      	cbz	r0, 806e2 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   806c8:	fb05 f006 	mul.w	r0, r5, r6
   806cc:	3001      	adds	r0, #1
   806ce:	4b0b      	ldr	r3, [pc, #44]	; (806fc <xQueueGenericCreate+0x48>)
   806d0:	4798      	blx	r3
   806d2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   806d4:	b940      	cbnz	r0, 806e8 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   806d6:	4620      	mov	r0, r4
   806d8:	4b09      	ldr	r3, [pc, #36]	; (80700 <xQueueGenericCreate+0x4c>)
   806da:	4798      	blx	r3
   806dc:	e001      	b.n	806e2 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   806de:	bf00      	nop
   806e0:	e7fd      	b.n	806de <xQueueGenericCreate+0x2a>
   806e2:	4b08      	ldr	r3, [pc, #32]	; (80704 <xQueueGenericCreate+0x50>)
   806e4:	4798      	blx	r3
   806e6:	e7fa      	b.n	806de <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   806e8:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   806ea:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   806ec:	2101      	movs	r1, #1
   806ee:	4620      	mov	r0, r4
   806f0:	4b05      	ldr	r3, [pc, #20]	; (80708 <xQueueGenericCreate+0x54>)
   806f2:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   806f4:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   806f8:	4620      	mov	r0, r4
   806fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806fc:	00080411 	.word	0x00080411
   80700:	000804e5 	.word	0x000804e5
   80704:	000802b9 	.word	0x000802b9
   80708:	00080639 	.word	0x00080639

0008070c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   8070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80710:	b085      	sub	sp, #20
   80712:	9201      	str	r2, [sp, #4]
   80714:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80716:	b918      	cbnz	r0, 80720 <xQueueGenericSend+0x14>
   80718:	4b38      	ldr	r3, [pc, #224]	; (807fc <xQueueGenericSend+0xf0>)
   8071a:	4798      	blx	r3
   8071c:	bf00      	nop
   8071e:	e7fd      	b.n	8071c <xQueueGenericSend+0x10>
   80720:	468a      	mov	sl, r1
   80722:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80724:	b929      	cbnz	r1, 80732 <xQueueGenericSend+0x26>
   80726:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80728:	b12b      	cbz	r3, 80736 <xQueueGenericSend+0x2a>
   8072a:	4b34      	ldr	r3, [pc, #208]	; (807fc <xQueueGenericSend+0xf0>)
   8072c:	4798      	blx	r3
   8072e:	bf00      	nop
   80730:	e7fd      	b.n	8072e <xQueueGenericSend+0x22>
   80732:	2700      	movs	r7, #0
   80734:	e000      	b.n	80738 <xQueueGenericSend+0x2c>
   80736:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80738:	4e31      	ldr	r6, [pc, #196]	; (80800 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8073a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80828 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8073e:	4d31      	ldr	r5, [pc, #196]	; (80804 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80740:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80742:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80744:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80746:	429a      	cmp	r2, r3
   80748:	d212      	bcs.n	80770 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8074a:	9a00      	ldr	r2, [sp, #0]
   8074c:	4651      	mov	r1, sl
   8074e:	4620      	mov	r0, r4
   80750:	4b2d      	ldr	r3, [pc, #180]	; (80808 <xQueueGenericSend+0xfc>)
   80752:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80754:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80756:	b13b      	cbz	r3, 80768 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80758:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8075c:	4b2b      	ldr	r3, [pc, #172]	; (8080c <xQueueGenericSend+0x100>)
   8075e:	4798      	blx	r3
   80760:	2801      	cmp	r0, #1
   80762:	d101      	bne.n	80768 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80764:	4b2a      	ldr	r3, [pc, #168]	; (80810 <xQueueGenericSend+0x104>)
   80766:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80768:	4b26      	ldr	r3, [pc, #152]	; (80804 <xQueueGenericSend+0xf8>)
   8076a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   8076c:	2001      	movs	r0, #1
   8076e:	e042      	b.n	807f6 <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80770:	9b01      	ldr	r3, [sp, #4]
   80772:	b91b      	cbnz	r3, 8077c <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80774:	4b23      	ldr	r3, [pc, #140]	; (80804 <xQueueGenericSend+0xf8>)
   80776:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80778:	2000      	movs	r0, #0
   8077a:	e03c      	b.n	807f6 <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
   8077c:	b917      	cbnz	r7, 80784 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8077e:	a802      	add	r0, sp, #8
   80780:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80782:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80784:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80786:	4b23      	ldr	r3, [pc, #140]	; (80814 <xQueueGenericSend+0x108>)
   80788:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8078a:	47b0      	blx	r6
   8078c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8078e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80792:	bf04      	itt	eq
   80794:	2300      	moveq	r3, #0
   80796:	6463      	streq	r3, [r4, #68]	; 0x44
   80798:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8079a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8079e:	bf04      	itt	eq
   807a0:	2300      	moveq	r3, #0
   807a2:	64a3      	streq	r3, [r4, #72]	; 0x48
   807a4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   807a6:	a901      	add	r1, sp, #4
   807a8:	a802      	add	r0, sp, #8
   807aa:	4b1b      	ldr	r3, [pc, #108]	; (80818 <xQueueGenericSend+0x10c>)
   807ac:	4798      	blx	r3
   807ae:	b9e0      	cbnz	r0, 807ea <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   807b0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   807b2:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   807b6:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   807ba:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   807bc:	45c1      	cmp	r9, r8
   807be:	d10e      	bne.n	807de <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   807c0:	9901      	ldr	r1, [sp, #4]
   807c2:	f104 0010 	add.w	r0, r4, #16
   807c6:	4b15      	ldr	r3, [pc, #84]	; (8081c <xQueueGenericSend+0x110>)
   807c8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   807ca:	4620      	mov	r0, r4
   807cc:	4b14      	ldr	r3, [pc, #80]	; (80820 <xQueueGenericSend+0x114>)
   807ce:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   807d0:	4b14      	ldr	r3, [pc, #80]	; (80824 <xQueueGenericSend+0x118>)
   807d2:	4798      	blx	r3
   807d4:	2800      	cmp	r0, #0
   807d6:	d1b3      	bne.n	80740 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
   807d8:	4b0d      	ldr	r3, [pc, #52]	; (80810 <xQueueGenericSend+0x104>)
   807da:	4798      	blx	r3
   807dc:	e7b0      	b.n	80740 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   807de:	4620      	mov	r0, r4
   807e0:	4b0f      	ldr	r3, [pc, #60]	; (80820 <xQueueGenericSend+0x114>)
   807e2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   807e4:	4b0f      	ldr	r3, [pc, #60]	; (80824 <xQueueGenericSend+0x118>)
   807e6:	4798      	blx	r3
   807e8:	e7aa      	b.n	80740 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   807ea:	4620      	mov	r0, r4
   807ec:	4b0c      	ldr	r3, [pc, #48]	; (80820 <xQueueGenericSend+0x114>)
   807ee:	4798      	blx	r3
			( void ) xTaskResumeAll();
   807f0:	4b0c      	ldr	r3, [pc, #48]	; (80824 <xQueueGenericSend+0x118>)
   807f2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   807f4:	2000      	movs	r0, #0
		}
	}
}
   807f6:	b005      	add	sp, #20
   807f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807fc:	000802b9 	.word	0x000802b9
   80800:	000802c9 	.word	0x000802c9
   80804:	000802e9 	.word	0x000802e9
   80808:	0008051d 	.word	0x0008051d
   8080c:	000811f5 	.word	0x000811f5
   80810:	000802a9 	.word	0x000802a9
   80814:	00080d8d 	.word	0x00080d8d
   80818:	000812a1 	.word	0x000812a1
   8081c:	00081151 	.word	0x00081151
   80820:	000805a9 	.word	0x000805a9
   80824:	00080edd 	.word	0x00080edd
   80828:	00081279 	.word	0x00081279

0008082c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
   8082c:	b570      	push	{r4, r5, r6, lr}
   8082e:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80830:	2050      	movs	r0, #80	; 0x50
   80832:	4b13      	ldr	r3, [pc, #76]	; (80880 <xQueueCreateMutex+0x54>)
   80834:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80836:	b118      	cbz	r0, 80840 <xQueueCreateMutex+0x14>
   80838:	4604      	mov	r4, r0
   8083a:	e004      	b.n	80846 <xQueueCreateMutex+0x1a>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
   8083c:	bf00      	nop
   8083e:	e7fd      	b.n	8083c <xQueueCreateMutex+0x10>
   80840:	4b10      	ldr	r3, [pc, #64]	; (80884 <xQueueCreateMutex+0x58>)
   80842:	4798      	blx	r3
   80844:	e7fa      	b.n	8083c <xQueueCreateMutex+0x10>
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   80846:	2500      	movs	r5, #0
   80848:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   8084a:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
   8084c:	6085      	str	r5, [r0, #8]
			pxNewQueue->pcReadFrom = NULL;
   8084e:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80850:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
   80852:	2301      	movs	r3, #1
   80854:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
   80856:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
   80858:	f04f 33ff 	mov.w	r3, #4294967295
   8085c:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
   8085e:	6483      	str	r3, [r0, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
   80860:	f880 604d 	strb.w	r6, [r0, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   80864:	3010      	adds	r0, #16
   80866:	4e08      	ldr	r6, [pc, #32]	; (80888 <xQueueCreateMutex+0x5c>)
   80868:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   8086a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8086e:	47b0      	blx	r6

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
   80870:	462b      	mov	r3, r5
   80872:	462a      	mov	r2, r5
   80874:	4629      	mov	r1, r5
   80876:	4620      	mov	r0, r4
   80878:	4d04      	ldr	r5, [pc, #16]	; (8088c <xQueueCreateMutex+0x60>)
   8087a:	47a8      	blx	r5
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
   8087c:	4620      	mov	r0, r4
   8087e:	bd70      	pop	{r4, r5, r6, pc}
   80880:	00080411 	.word	0x00080411
   80884:	000802b9 	.word	0x000802b9
   80888:	000801b9 	.word	0x000801b9
   8088c:	0008070d 	.word	0x0008070d

00080890 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80894:	b918      	cbnz	r0, 8089e <xQueueGenericSendFromISR+0xe>
   80896:	4b1e      	ldr	r3, [pc, #120]	; (80910 <xQueueGenericSendFromISR+0x80>)
   80898:	4798      	blx	r3
   8089a:	bf00      	nop
   8089c:	e7fd      	b.n	8089a <xQueueGenericSendFromISR+0xa>
   8089e:	460e      	mov	r6, r1
   808a0:	4615      	mov	r5, r2
   808a2:	4698      	mov	r8, r3
   808a4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   808a6:	b929      	cbnz	r1, 808b4 <xQueueGenericSendFromISR+0x24>
   808a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   808aa:	b11b      	cbz	r3, 808b4 <xQueueGenericSendFromISR+0x24>
   808ac:	4b18      	ldr	r3, [pc, #96]	; (80910 <xQueueGenericSendFromISR+0x80>)
   808ae:	4798      	blx	r3
   808b0:	bf00      	nop
   808b2:	e7fd      	b.n	808b0 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   808b4:	4b16      	ldr	r3, [pc, #88]	; (80910 <xQueueGenericSendFromISR+0x80>)
   808b6:	4798      	blx	r3
   808b8:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   808ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   808bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   808be:	429a      	cmp	r2, r3
   808c0:	d218      	bcs.n	808f4 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   808c2:	4642      	mov	r2, r8
   808c4:	4631      	mov	r1, r6
   808c6:	4620      	mov	r0, r4
   808c8:	4b12      	ldr	r3, [pc, #72]	; (80914 <xQueueGenericSendFromISR+0x84>)
   808ca:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   808cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808ce:	f1b3 3fff 	cmp.w	r3, #4294967295
   808d2:	d10a      	bne.n	808ea <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808d6:	b17b      	cbz	r3, 808f8 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   808dc:	4b0e      	ldr	r3, [pc, #56]	; (80918 <xQueueGenericSendFromISR+0x88>)
   808de:	4798      	blx	r3
   808e0:	b160      	cbz	r0, 808fc <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   808e2:	b16d      	cbz	r5, 80900 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   808e4:	2401      	movs	r4, #1
   808e6:	602c      	str	r4, [r5, #0]
   808e8:	e00b      	b.n	80902 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   808ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808ec:	3301      	adds	r3, #1
   808ee:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   808f0:	2401      	movs	r4, #1
   808f2:	e006      	b.n	80902 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   808f4:	2400      	movs	r4, #0
   808f6:	e004      	b.n	80902 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   808f8:	2401      	movs	r4, #1
   808fa:	e002      	b.n	80902 <xQueueGenericSendFromISR+0x72>
   808fc:	2401      	movs	r4, #1
   808fe:	e000      	b.n	80902 <xQueueGenericSendFromISR+0x72>
   80900:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80902:	4638      	mov	r0, r7
   80904:	4b05      	ldr	r3, [pc, #20]	; (8091c <xQueueGenericSendFromISR+0x8c>)
   80906:	4798      	blx	r3

	return xReturn;
}
   80908:	4620      	mov	r0, r4
   8090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8090e:	bf00      	nop
   80910:	000802b9 	.word	0x000802b9
   80914:	0008051d 	.word	0x0008051d
   80918:	000811f5 	.word	0x000811f5
   8091c:	000802e1 	.word	0x000802e1

00080920 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80924:	b085      	sub	sp, #20
   80926:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80928:	b918      	cbnz	r0, 80932 <xQueueGenericReceive+0x12>
   8092a:	4b46      	ldr	r3, [pc, #280]	; (80a44 <xQueueGenericReceive+0x124>)
   8092c:	4798      	blx	r3
   8092e:	bf00      	nop
   80930:	e7fd      	b.n	8092e <xQueueGenericReceive+0xe>
   80932:	4689      	mov	r9, r1
   80934:	469a      	mov	sl, r3
   80936:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80938:	b929      	cbnz	r1, 80946 <xQueueGenericReceive+0x26>
   8093a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8093c:	b12b      	cbz	r3, 8094a <xQueueGenericReceive+0x2a>
   8093e:	4b41      	ldr	r3, [pc, #260]	; (80a44 <xQueueGenericReceive+0x124>)
   80940:	4798      	blx	r3
   80942:	bf00      	nop
   80944:	e7fd      	b.n	80942 <xQueueGenericReceive+0x22>
   80946:	2700      	movs	r7, #0
   80948:	e000      	b.n	8094c <xQueueGenericReceive+0x2c>
   8094a:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8094c:	4e3e      	ldr	r6, [pc, #248]	; (80a48 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8094e:	f8df b128 	ldr.w	fp, [pc, #296]	; 80a78 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80952:	4d3e      	ldr	r5, [pc, #248]	; (80a4c <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80954:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80958:	b343      	cbz	r3, 809ac <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8095a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8095c:	4649      	mov	r1, r9
   8095e:	4620      	mov	r0, r4
   80960:	4b3b      	ldr	r3, [pc, #236]	; (80a50 <xQueueGenericReceive+0x130>)
   80962:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80964:	f1ba 0f00 	cmp.w	sl, #0
   80968:	d112      	bne.n	80990 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   8096a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8096c:	3b01      	subs	r3, #1
   8096e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80970:	6823      	ldr	r3, [r4, #0]
   80972:	b913      	cbnz	r3, 8097a <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80974:	4b37      	ldr	r3, [pc, #220]	; (80a54 <xQueueGenericReceive+0x134>)
   80976:	4798      	blx	r3
   80978:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8097a:	6923      	ldr	r3, [r4, #16]
   8097c:	b193      	cbz	r3, 809a4 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8097e:	f104 0010 	add.w	r0, r4, #16
   80982:	4b35      	ldr	r3, [pc, #212]	; (80a58 <xQueueGenericReceive+0x138>)
   80984:	4798      	blx	r3
   80986:	2801      	cmp	r0, #1
   80988:	d10c      	bne.n	809a4 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   8098a:	4b34      	ldr	r3, [pc, #208]	; (80a5c <xQueueGenericReceive+0x13c>)
   8098c:	4798      	blx	r3
   8098e:	e009      	b.n	809a4 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80990:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80992:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80994:	b133      	cbz	r3, 809a4 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80996:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8099a:	4b2f      	ldr	r3, [pc, #188]	; (80a58 <xQueueGenericReceive+0x138>)
   8099c:	4798      	blx	r3
   8099e:	b108      	cbz	r0, 809a4 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   809a0:	4b2e      	ldr	r3, [pc, #184]	; (80a5c <xQueueGenericReceive+0x13c>)
   809a2:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   809a4:	4b29      	ldr	r3, [pc, #164]	; (80a4c <xQueueGenericReceive+0x12c>)
   809a6:	4798      	blx	r3
				return pdPASS;
   809a8:	2001      	movs	r0, #1
   809aa:	e048      	b.n	80a3e <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   809ac:	9b01      	ldr	r3, [sp, #4]
   809ae:	b91b      	cbnz	r3, 809b8 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   809b0:	4b26      	ldr	r3, [pc, #152]	; (80a4c <xQueueGenericReceive+0x12c>)
   809b2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   809b4:	2000      	movs	r0, #0
   809b6:	e042      	b.n	80a3e <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   809b8:	b917      	cbnz	r7, 809c0 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   809ba:	a802      	add	r0, sp, #8
   809bc:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   809be:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   809c0:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   809c2:	4b27      	ldr	r3, [pc, #156]	; (80a60 <xQueueGenericReceive+0x140>)
   809c4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   809c6:	47b0      	blx	r6
   809c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   809ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   809ce:	bf04      	itt	eq
   809d0:	2300      	moveq	r3, #0
   809d2:	6463      	streq	r3, [r4, #68]	; 0x44
   809d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   809d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   809da:	bf04      	itt	eq
   809dc:	2300      	moveq	r3, #0
   809de:	64a3      	streq	r3, [r4, #72]	; 0x48
   809e0:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   809e2:	a901      	add	r1, sp, #4
   809e4:	a802      	add	r0, sp, #8
   809e6:	4b1f      	ldr	r3, [pc, #124]	; (80a64 <xQueueGenericReceive+0x144>)
   809e8:	4798      	blx	r3
   809ea:	bb10      	cbnz	r0, 80a32 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   809ec:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   809ee:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   809f2:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   809f4:	f1b8 0f00 	cmp.w	r8, #0
   809f8:	d115      	bne.n	80a26 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   809fa:	6823      	ldr	r3, [r4, #0]
   809fc:	b923      	cbnz	r3, 80a08 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   809fe:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80a00:	6860      	ldr	r0, [r4, #4]
   80a02:	4b19      	ldr	r3, [pc, #100]	; (80a68 <xQueueGenericReceive+0x148>)
   80a04:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80a06:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80a08:	9901      	ldr	r1, [sp, #4]
   80a0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a0e:	4b17      	ldr	r3, [pc, #92]	; (80a6c <xQueueGenericReceive+0x14c>)
   80a10:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80a12:	4620      	mov	r0, r4
   80a14:	4b16      	ldr	r3, [pc, #88]	; (80a70 <xQueueGenericReceive+0x150>)
   80a16:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80a18:	4b16      	ldr	r3, [pc, #88]	; (80a74 <xQueueGenericReceive+0x154>)
   80a1a:	4798      	blx	r3
   80a1c:	2800      	cmp	r0, #0
   80a1e:	d199      	bne.n	80954 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   80a20:	4b0e      	ldr	r3, [pc, #56]	; (80a5c <xQueueGenericReceive+0x13c>)
   80a22:	4798      	blx	r3
   80a24:	e796      	b.n	80954 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80a26:	4620      	mov	r0, r4
   80a28:	4b11      	ldr	r3, [pc, #68]	; (80a70 <xQueueGenericReceive+0x150>)
   80a2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80a2c:	4b11      	ldr	r3, [pc, #68]	; (80a74 <xQueueGenericReceive+0x154>)
   80a2e:	4798      	blx	r3
   80a30:	e790      	b.n	80954 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80a32:	4620      	mov	r0, r4
   80a34:	4b0e      	ldr	r3, [pc, #56]	; (80a70 <xQueueGenericReceive+0x150>)
   80a36:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80a38:	4b0e      	ldr	r3, [pc, #56]	; (80a74 <xQueueGenericReceive+0x154>)
   80a3a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80a3c:	2000      	movs	r0, #0
		}
	}
}
   80a3e:	b005      	add	sp, #20
   80a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80a44:	000802b9 	.word	0x000802b9
   80a48:	000802c9 	.word	0x000802c9
   80a4c:	000802e9 	.word	0x000802e9
   80a50:	00080581 	.word	0x00080581
   80a54:	00081331 	.word	0x00081331
   80a58:	000811f5 	.word	0x000811f5
   80a5c:	000802a9 	.word	0x000802a9
   80a60:	00080d8d 	.word	0x00080d8d
   80a64:	000812a1 	.word	0x000812a1
   80a68:	0008135d 	.word	0x0008135d
   80a6c:	00081151 	.word	0x00081151
   80a70:	000805a9 	.word	0x000805a9
   80a74:	00080edd 	.word	0x00080edd
   80a78:	00081279 	.word	0x00081279

00080a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80a7c:	b538      	push	{r3, r4, r5, lr}
   80a7e:	4604      	mov	r4, r0
   80a80:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80a82:	4b0d      	ldr	r3, [pc, #52]	; (80ab8 <vQueueWaitForMessageRestricted+0x3c>)
   80a84:	4798      	blx	r3
   80a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a88:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a8c:	bf04      	itt	eq
   80a8e:	2300      	moveq	r3, #0
   80a90:	6463      	streq	r3, [r4, #68]	; 0x44
   80a92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a94:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a98:	bf04      	itt	eq
   80a9a:	2300      	moveq	r3, #0
   80a9c:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a9e:	4b07      	ldr	r3, [pc, #28]	; (80abc <vQueueWaitForMessageRestricted+0x40>)
   80aa0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80aa4:	b923      	cbnz	r3, 80ab0 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80aa6:	4629      	mov	r1, r5
   80aa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80aac:	4b04      	ldr	r3, [pc, #16]	; (80ac0 <vQueueWaitForMessageRestricted+0x44>)
   80aae:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   80ab0:	4620      	mov	r0, r4
   80ab2:	4b04      	ldr	r3, [pc, #16]	; (80ac4 <vQueueWaitForMessageRestricted+0x48>)
   80ab4:	4798      	blx	r3
   80ab6:	bd38      	pop	{r3, r4, r5, pc}
   80ab8:	000802c9 	.word	0x000802c9
   80abc:	000802e9 	.word	0x000802e9
   80ac0:	000811b1 	.word	0x000811b1
   80ac4:	000805a9 	.word	0x000805a9

00080ac8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80ac8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80aca:	4b0f      	ldr	r3, [pc, #60]	; (80b08 <prvAddCurrentTaskToDelayedList+0x40>)
   80acc:	681b      	ldr	r3, [r3, #0]
   80ace:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80ad0:	4b0e      	ldr	r3, [pc, #56]	; (80b0c <prvAddCurrentTaskToDelayedList+0x44>)
   80ad2:	681b      	ldr	r3, [r3, #0]
   80ad4:	4298      	cmp	r0, r3
   80ad6:	d207      	bcs.n	80ae8 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80ad8:	4b0d      	ldr	r3, [pc, #52]	; (80b10 <prvAddCurrentTaskToDelayedList+0x48>)
   80ada:	6818      	ldr	r0, [r3, #0]
   80adc:	4b0a      	ldr	r3, [pc, #40]	; (80b08 <prvAddCurrentTaskToDelayedList+0x40>)
   80ade:	6819      	ldr	r1, [r3, #0]
   80ae0:	3104      	adds	r1, #4
   80ae2:	4b0c      	ldr	r3, [pc, #48]	; (80b14 <prvAddCurrentTaskToDelayedList+0x4c>)
   80ae4:	4798      	blx	r3
   80ae6:	bd10      	pop	{r4, pc}
   80ae8:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80aea:	4b0b      	ldr	r3, [pc, #44]	; (80b18 <prvAddCurrentTaskToDelayedList+0x50>)
   80aec:	6818      	ldr	r0, [r3, #0]
   80aee:	4b06      	ldr	r3, [pc, #24]	; (80b08 <prvAddCurrentTaskToDelayedList+0x40>)
   80af0:	6819      	ldr	r1, [r3, #0]
   80af2:	3104      	adds	r1, #4
   80af4:	4b07      	ldr	r3, [pc, #28]	; (80b14 <prvAddCurrentTaskToDelayedList+0x4c>)
   80af6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80af8:	4b08      	ldr	r3, [pc, #32]	; (80b1c <prvAddCurrentTaskToDelayedList+0x54>)
   80afa:	681b      	ldr	r3, [r3, #0]
   80afc:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80afe:	bf3c      	itt	cc
   80b00:	4b06      	ldrcc	r3, [pc, #24]	; (80b1c <prvAddCurrentTaskToDelayedList+0x54>)
   80b02:	601c      	strcc	r4, [r3, #0]
   80b04:	bd10      	pop	{r4, pc}
   80b06:	bf00      	nop
   80b08:	2007aa8c 	.word	0x2007aa8c
   80b0c:	2007aaa8 	.word	0x2007aaa8
   80b10:	2007aaac 	.word	0x2007aaac
   80b14:	000801f5 	.word	0x000801f5
   80b18:	2007a9e8 	.word	0x2007a9e8
   80b1c:	20070134 	.word	0x20070134

00080b20 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   80b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b24:	b083      	sub	sp, #12
   80b26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   80b28:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   80b2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   80b2e:	9001      	str	r0, [sp, #4]
   80b30:	b918      	cbnz	r0, 80b3a <xTaskGenericCreate+0x1a>
   80b32:	4b62      	ldr	r3, [pc, #392]	; (80cbc <xTaskGenericCreate+0x19c>)
   80b34:	4798      	blx	r3
   80b36:	bf00      	nop
   80b38:	e7fd      	b.n	80b36 <xTaskGenericCreate+0x16>
   80b3a:	4689      	mov	r9, r1
   80b3c:	4615      	mov	r5, r2
   80b3e:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80b40:	2f04      	cmp	r7, #4
   80b42:	d903      	bls.n	80b4c <xTaskGenericCreate+0x2c>
   80b44:	4b5d      	ldr	r3, [pc, #372]	; (80cbc <xTaskGenericCreate+0x19c>)
   80b46:	4798      	blx	r3
   80b48:	bf00      	nop
   80b4a:	e7fd      	b.n	80b48 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80b4c:	204c      	movs	r0, #76	; 0x4c
   80b4e:	4b5c      	ldr	r3, [pc, #368]	; (80cc0 <xTaskGenericCreate+0x1a0>)
   80b50:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80b52:	4604      	mov	r4, r0
   80b54:	2800      	cmp	r0, #0
   80b56:	f000 80ab 	beq.w	80cb0 <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80b5a:	2e00      	cmp	r6, #0
   80b5c:	f040 80a5 	bne.w	80caa <xTaskGenericCreate+0x18a>
   80b60:	00a8      	lsls	r0, r5, #2
   80b62:	4b57      	ldr	r3, [pc, #348]	; (80cc0 <xTaskGenericCreate+0x1a0>)
   80b64:	4798      	blx	r3
   80b66:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   80b68:	b918      	cbnz	r0, 80b72 <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   80b6a:	4620      	mov	r0, r4
   80b6c:	4b55      	ldr	r3, [pc, #340]	; (80cc4 <xTaskGenericCreate+0x1a4>)
   80b6e:	4798      	blx	r3
   80b70:	e09e      	b.n	80cb0 <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80b72:	00aa      	lsls	r2, r5, #2
   80b74:	21a5      	movs	r1, #165	; 0xa5
   80b76:	4b54      	ldr	r3, [pc, #336]	; (80cc8 <xTaskGenericCreate+0x1a8>)
   80b78:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80b7a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80b7e:	3d01      	subs	r5, #1
   80b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80b82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   80b86:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80b8a:	220a      	movs	r2, #10
   80b8c:	4649      	mov	r1, r9
   80b8e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80b92:	4b4e      	ldr	r3, [pc, #312]	; (80ccc <xTaskGenericCreate+0x1ac>)
   80b94:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80b96:	2300      	movs	r3, #0
   80b98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   80b9c:	463e      	mov	r6, r7
   80b9e:	2f04      	cmp	r7, #4
   80ba0:	bf28      	it	cs
   80ba2:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   80ba4:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   80ba6:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80ba8:	f104 0904 	add.w	r9, r4, #4
   80bac:	4648      	mov	r0, r9
   80bae:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80d1c <xTaskGenericCreate+0x1fc>
   80bb2:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80bb4:	f104 0018 	add.w	r0, r4, #24
   80bb8:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80bba:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80bbc:	f1c6 0605 	rsb	r6, r6, #5
   80bc0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80bc2:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80bc4:	465a      	mov	r2, fp
   80bc6:	9901      	ldr	r1, [sp, #4]
   80bc8:	4628      	mov	r0, r5
   80bca:	4b41      	ldr	r3, [pc, #260]	; (80cd0 <xTaskGenericCreate+0x1b0>)
   80bcc:	4798      	blx	r3
   80bce:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80bd0:	f010 0f07 	tst.w	r0, #7
   80bd4:	d003      	beq.n	80bde <xTaskGenericCreate+0xbe>
   80bd6:	4b39      	ldr	r3, [pc, #228]	; (80cbc <xTaskGenericCreate+0x19c>)
   80bd8:	4798      	blx	r3
   80bda:	bf00      	nop
   80bdc:	e7fd      	b.n	80bda <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   80bde:	f1b8 0f00 	cmp.w	r8, #0
   80be2:	d001      	beq.n	80be8 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80be4:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   80be8:	4b3a      	ldr	r3, [pc, #232]	; (80cd4 <xTaskGenericCreate+0x1b4>)
   80bea:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   80bec:	4a3a      	ldr	r2, [pc, #232]	; (80cd8 <xTaskGenericCreate+0x1b8>)
   80bee:	6813      	ldr	r3, [r2, #0]
   80bf0:	3301      	adds	r3, #1
   80bf2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80bf4:	4b39      	ldr	r3, [pc, #228]	; (80cdc <xTaskGenericCreate+0x1bc>)
   80bf6:	681b      	ldr	r3, [r3, #0]
   80bf8:	bb0b      	cbnz	r3, 80c3e <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   80bfa:	4b38      	ldr	r3, [pc, #224]	; (80cdc <xTaskGenericCreate+0x1bc>)
   80bfc:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80bfe:	6813      	ldr	r3, [r2, #0]
   80c00:	2b01      	cmp	r3, #1
   80c02:	d126      	bne.n	80c52 <xTaskGenericCreate+0x132>
   80c04:	4d36      	ldr	r5, [pc, #216]	; (80ce0 <xTaskGenericCreate+0x1c0>)
   80c06:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80c0a:	4e36      	ldr	r6, [pc, #216]	; (80ce4 <xTaskGenericCreate+0x1c4>)
   80c0c:	4628      	mov	r0, r5
   80c0e:	47b0      	blx	r6
   80c10:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   80c12:	4545      	cmp	r5, r8
   80c14:	d1fa      	bne.n	80c0c <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80c16:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80d20 <xTaskGenericCreate+0x200>
   80c1a:	4640      	mov	r0, r8
   80c1c:	4d31      	ldr	r5, [pc, #196]	; (80ce4 <xTaskGenericCreate+0x1c4>)
   80c1e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80c20:	4e31      	ldr	r6, [pc, #196]	; (80ce8 <xTaskGenericCreate+0x1c8>)
   80c22:	4630      	mov	r0, r6
   80c24:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80c26:	4831      	ldr	r0, [pc, #196]	; (80cec <xTaskGenericCreate+0x1cc>)
   80c28:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80c2a:	4831      	ldr	r0, [pc, #196]	; (80cf0 <xTaskGenericCreate+0x1d0>)
   80c2c:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80c2e:	4831      	ldr	r0, [pc, #196]	; (80cf4 <xTaskGenericCreate+0x1d4>)
   80c30:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   80c32:	4b31      	ldr	r3, [pc, #196]	; (80cf8 <xTaskGenericCreate+0x1d8>)
   80c34:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80c38:	4b30      	ldr	r3, [pc, #192]	; (80cfc <xTaskGenericCreate+0x1dc>)
   80c3a:	601e      	str	r6, [r3, #0]
   80c3c:	e009      	b.n	80c52 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   80c3e:	4b30      	ldr	r3, [pc, #192]	; (80d00 <xTaskGenericCreate+0x1e0>)
   80c40:	681b      	ldr	r3, [r3, #0]
   80c42:	b933      	cbnz	r3, 80c52 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80c44:	4b25      	ldr	r3, [pc, #148]	; (80cdc <xTaskGenericCreate+0x1bc>)
   80c46:	681b      	ldr	r3, [r3, #0]
   80c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80c4a:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   80c4c:	bf24      	itt	cs
   80c4e:	4b23      	ldrcs	r3, [pc, #140]	; (80cdc <xTaskGenericCreate+0x1bc>)
   80c50:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80c52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80c54:	4b2b      	ldr	r3, [pc, #172]	; (80d04 <xTaskGenericCreate+0x1e4>)
   80c56:	681b      	ldr	r3, [r3, #0]
   80c58:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80c5a:	bf84      	itt	hi
   80c5c:	4b29      	ldrhi	r3, [pc, #164]	; (80d04 <xTaskGenericCreate+0x1e4>)
   80c5e:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80c60:	4a29      	ldr	r2, [pc, #164]	; (80d08 <xTaskGenericCreate+0x1e8>)
   80c62:	6813      	ldr	r3, [r2, #0]
   80c64:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   80c66:	3301      	adds	r3, #1
   80c68:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   80c6a:	4b28      	ldr	r3, [pc, #160]	; (80d0c <xTaskGenericCreate+0x1ec>)
   80c6c:	681b      	ldr	r3, [r3, #0]
   80c6e:	4298      	cmp	r0, r3
   80c70:	bf84      	itt	hi
   80c72:	4b26      	ldrhi	r3, [pc, #152]	; (80d0c <xTaskGenericCreate+0x1ec>)
   80c74:	6018      	strhi	r0, [r3, #0]
   80c76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80c7a:	4649      	mov	r1, r9
   80c7c:	4b18      	ldr	r3, [pc, #96]	; (80ce0 <xTaskGenericCreate+0x1c0>)
   80c7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80c82:	4b23      	ldr	r3, [pc, #140]	; (80d10 <xTaskGenericCreate+0x1f0>)
   80c84:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   80c86:	4b23      	ldr	r3, [pc, #140]	; (80d14 <xTaskGenericCreate+0x1f4>)
   80c88:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   80c8a:	4b1d      	ldr	r3, [pc, #116]	; (80d00 <xTaskGenericCreate+0x1e0>)
   80c8c:	681b      	ldr	r3, [r3, #0]
   80c8e:	b143      	cbz	r3, 80ca2 <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   80c90:	4b12      	ldr	r3, [pc, #72]	; (80cdc <xTaskGenericCreate+0x1bc>)
   80c92:	681b      	ldr	r3, [r3, #0]
   80c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80c96:	429f      	cmp	r7, r3
   80c98:	d905      	bls.n	80ca6 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   80c9a:	4b1f      	ldr	r3, [pc, #124]	; (80d18 <xTaskGenericCreate+0x1f8>)
   80c9c:	4798      	blx	r3
   80c9e:	2001      	movs	r0, #1
   80ca0:	e008      	b.n	80cb4 <xTaskGenericCreate+0x194>
   80ca2:	2001      	movs	r0, #1
   80ca4:	e006      	b.n	80cb4 <xTaskGenericCreate+0x194>
   80ca6:	2001      	movs	r0, #1
   80ca8:	e004      	b.n	80cb4 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80caa:	6306      	str	r6, [r0, #48]	; 0x30
   80cac:	4630      	mov	r0, r6
   80cae:	e760      	b.n	80b72 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80cb0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   80cb4:	b003      	add	sp, #12
   80cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cba:	bf00      	nop
   80cbc:	000802b9 	.word	0x000802b9
   80cc0:	00080411 	.word	0x00080411
   80cc4:	000804e5 	.word	0x000804e5
   80cc8:	00082349 	.word	0x00082349
   80ccc:	000826b1 	.word	0x000826b1
   80cd0:	0008026d 	.word	0x0008026d
   80cd4:	000802c9 	.word	0x000802c9
   80cd8:	2007aacc 	.word	0x2007aacc
   80cdc:	2007aa8c 	.word	0x2007aa8c
   80ce0:	2007aa24 	.word	0x2007aa24
   80ce4:	000801b9 	.word	0x000801b9
   80ce8:	2007aa0c 	.word	0x2007aa0c
   80cec:	2007aa90 	.word	0x2007aa90
   80cf0:	2007a9f8 	.word	0x2007a9f8
   80cf4:	2007a9d4 	.word	0x2007a9d4
   80cf8:	2007a9e8 	.word	0x2007a9e8
   80cfc:	2007aaac 	.word	0x2007aaac
   80d00:	2007a9f0 	.word	0x2007a9f0
   80d04:	2007aad0 	.word	0x2007aad0
   80d08:	2007aab0 	.word	0x2007aab0
   80d0c:	2007aa20 	.word	0x2007aa20
   80d10:	000801d9 	.word	0x000801d9
   80d14:	000802e9 	.word	0x000802e9
   80d18:	000802a9 	.word	0x000802a9
   80d1c:	000801d1 	.word	0x000801d1
   80d20:	2007aab4 	.word	0x2007aab4

00080d24 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   80d24:	b510      	push	{r4, lr}
   80d26:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80d28:	2300      	movs	r3, #0
   80d2a:	9303      	str	r3, [sp, #12]
   80d2c:	9302      	str	r3, [sp, #8]
   80d2e:	9301      	str	r3, [sp, #4]
   80d30:	9300      	str	r3, [sp, #0]
   80d32:	2282      	movs	r2, #130	; 0x82
   80d34:	490d      	ldr	r1, [pc, #52]	; (80d6c <vTaskStartScheduler+0x48>)
   80d36:	480e      	ldr	r0, [pc, #56]	; (80d70 <vTaskStartScheduler+0x4c>)
   80d38:	4c0e      	ldr	r4, [pc, #56]	; (80d74 <vTaskStartScheduler+0x50>)
   80d3a:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   80d3c:	2801      	cmp	r0, #1
   80d3e:	d10e      	bne.n	80d5e <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   80d40:	4b0d      	ldr	r3, [pc, #52]	; (80d78 <vTaskStartScheduler+0x54>)
   80d42:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   80d44:	2801      	cmp	r0, #1
   80d46:	d10a      	bne.n	80d5e <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   80d48:	4b0c      	ldr	r3, [pc, #48]	; (80d7c <vTaskStartScheduler+0x58>)
   80d4a:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   80d4c:	2201      	movs	r2, #1
   80d4e:	4b0c      	ldr	r3, [pc, #48]	; (80d80 <vTaskStartScheduler+0x5c>)
   80d50:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80d52:	2200      	movs	r2, #0
   80d54:	4b0b      	ldr	r3, [pc, #44]	; (80d84 <vTaskStartScheduler+0x60>)
   80d56:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   80d58:	4b0b      	ldr	r3, [pc, #44]	; (80d88 <vTaskStartScheduler+0x64>)
   80d5a:	4798      	blx	r3
   80d5c:	e004      	b.n	80d68 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   80d5e:	b918      	cbnz	r0, 80d68 <vTaskStartScheduler+0x44>
   80d60:	4b06      	ldr	r3, [pc, #24]	; (80d7c <vTaskStartScheduler+0x58>)
   80d62:	4798      	blx	r3
   80d64:	bf00      	nop
   80d66:	e7fd      	b.n	80d64 <vTaskStartScheduler+0x40>
}
   80d68:	b004      	add	sp, #16
   80d6a:	bd10      	pop	{r4, pc}
   80d6c:	000852a0 	.word	0x000852a0
   80d70:	00081029 	.word	0x00081029
   80d74:	00080b21 	.word	0x00080b21
   80d78:	000814d5 	.word	0x000814d5
   80d7c:	000802b9 	.word	0x000802b9
   80d80:	2007a9f0 	.word	0x2007a9f0
   80d84:	2007aaa8 	.word	0x2007aaa8
   80d88:	00080385 	.word	0x00080385

00080d8c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   80d8c:	4a02      	ldr	r2, [pc, #8]	; (80d98 <vTaskSuspendAll+0xc>)
   80d8e:	6813      	ldr	r3, [r2, #0]
   80d90:	3301      	adds	r3, #1
   80d92:	6013      	str	r3, [r2, #0]
   80d94:	4770      	bx	lr
   80d96:	bf00      	nop
   80d98:	2007aa88 	.word	0x2007aa88

00080d9c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   80d9c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   80d9e:	4b04      	ldr	r3, [pc, #16]	; (80db0 <xTaskGetTickCount+0x14>)
   80da0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   80da2:	4b04      	ldr	r3, [pc, #16]	; (80db4 <xTaskGetTickCount+0x18>)
   80da4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   80da6:	4b04      	ldr	r3, [pc, #16]	; (80db8 <xTaskGetTickCount+0x1c>)
   80da8:	4798      	blx	r3

	return xTicks;
}
   80daa:	4620      	mov	r0, r4
   80dac:	bd10      	pop	{r4, pc}
   80dae:	bf00      	nop
   80db0:	000802c9 	.word	0x000802c9
   80db4:	2007aaa8 	.word	0x2007aaa8
   80db8:	000802e9 	.word	0x000802e9

00080dbc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80dc0:	4b3a      	ldr	r3, [pc, #232]	; (80eac <vTaskIncrementTick+0xf0>)
   80dc2:	681b      	ldr	r3, [r3, #0]
   80dc4:	2b00      	cmp	r3, #0
   80dc6:	d16b      	bne.n	80ea0 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   80dc8:	4b39      	ldr	r3, [pc, #228]	; (80eb0 <vTaskIncrementTick+0xf4>)
   80dca:	681a      	ldr	r2, [r3, #0]
   80dcc:	3201      	adds	r2, #1
   80dce:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80dd0:	681b      	ldr	r3, [r3, #0]
   80dd2:	bb03      	cbnz	r3, 80e16 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80dd4:	4b37      	ldr	r3, [pc, #220]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80dd6:	681b      	ldr	r3, [r3, #0]
   80dd8:	681b      	ldr	r3, [r3, #0]
   80dda:	b11b      	cbz	r3, 80de4 <vTaskIncrementTick+0x28>
   80ddc:	4b36      	ldr	r3, [pc, #216]	; (80eb8 <vTaskIncrementTick+0xfc>)
   80dde:	4798      	blx	r3
   80de0:	bf00      	nop
   80de2:	e7fd      	b.n	80de0 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   80de4:	4b33      	ldr	r3, [pc, #204]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80de6:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80de8:	4a34      	ldr	r2, [pc, #208]	; (80ebc <vTaskIncrementTick+0x100>)
   80dea:	6810      	ldr	r0, [r2, #0]
   80dec:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80dee:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80df0:	4933      	ldr	r1, [pc, #204]	; (80ec0 <vTaskIncrementTick+0x104>)
   80df2:	680a      	ldr	r2, [r1, #0]
   80df4:	3201      	adds	r2, #1
   80df6:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80df8:	681b      	ldr	r3, [r3, #0]
   80dfa:	681b      	ldr	r3, [r3, #0]
   80dfc:	b923      	cbnz	r3, 80e08 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80dfe:	f04f 32ff 	mov.w	r2, #4294967295
   80e02:	4b30      	ldr	r3, [pc, #192]	; (80ec4 <vTaskIncrementTick+0x108>)
   80e04:	601a      	str	r2, [r3, #0]
   80e06:	e006      	b.n	80e16 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80e08:	4b2a      	ldr	r3, [pc, #168]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80e0a:	681b      	ldr	r3, [r3, #0]
   80e0c:	68db      	ldr	r3, [r3, #12]
   80e0e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80e10:	685a      	ldr	r2, [r3, #4]
   80e12:	4b2c      	ldr	r3, [pc, #176]	; (80ec4 <vTaskIncrementTick+0x108>)
   80e14:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80e16:	4b26      	ldr	r3, [pc, #152]	; (80eb0 <vTaskIncrementTick+0xf4>)
   80e18:	681a      	ldr	r2, [r3, #0]
   80e1a:	4b2a      	ldr	r3, [pc, #168]	; (80ec4 <vTaskIncrementTick+0x108>)
   80e1c:	681b      	ldr	r3, [r3, #0]
   80e1e:	429a      	cmp	r2, r3
   80e20:	d342      	bcc.n	80ea8 <vTaskIncrementTick+0xec>
   80e22:	4b24      	ldr	r3, [pc, #144]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80e24:	681b      	ldr	r3, [r3, #0]
   80e26:	681b      	ldr	r3, [r3, #0]
   80e28:	b16b      	cbz	r3, 80e46 <vTaskIncrementTick+0x8a>
   80e2a:	4b22      	ldr	r3, [pc, #136]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80e2c:	681b      	ldr	r3, [r3, #0]
   80e2e:	68db      	ldr	r3, [r3, #12]
   80e30:	68dc      	ldr	r4, [r3, #12]
   80e32:	6863      	ldr	r3, [r4, #4]
   80e34:	4a1e      	ldr	r2, [pc, #120]	; (80eb0 <vTaskIncrementTick+0xf4>)
   80e36:	6812      	ldr	r2, [r2, #0]
   80e38:	4293      	cmp	r3, r2
   80e3a:	d813      	bhi.n	80e64 <vTaskIncrementTick+0xa8>
   80e3c:	4e22      	ldr	r6, [pc, #136]	; (80ec8 <vTaskIncrementTick+0x10c>)
   80e3e:	4f23      	ldr	r7, [pc, #140]	; (80ecc <vTaskIncrementTick+0x110>)
   80e40:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80ed8 <vTaskIncrementTick+0x11c>
   80e44:	e012      	b.n	80e6c <vTaskIncrementTick+0xb0>
   80e46:	f04f 32ff 	mov.w	r2, #4294967295
   80e4a:	4b1e      	ldr	r3, [pc, #120]	; (80ec4 <vTaskIncrementTick+0x108>)
   80e4c:	601a      	str	r2, [r3, #0]
   80e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e52:	4b18      	ldr	r3, [pc, #96]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80e54:	681b      	ldr	r3, [r3, #0]
   80e56:	68db      	ldr	r3, [r3, #12]
   80e58:	68dc      	ldr	r4, [r3, #12]
   80e5a:	6863      	ldr	r3, [r4, #4]
   80e5c:	4a14      	ldr	r2, [pc, #80]	; (80eb0 <vTaskIncrementTick+0xf4>)
   80e5e:	6812      	ldr	r2, [r2, #0]
   80e60:	4293      	cmp	r3, r2
   80e62:	d903      	bls.n	80e6c <vTaskIncrementTick+0xb0>
   80e64:	4a17      	ldr	r2, [pc, #92]	; (80ec4 <vTaskIncrementTick+0x108>)
   80e66:	6013      	str	r3, [r2, #0]
   80e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e6c:	1d25      	adds	r5, r4, #4
   80e6e:	4628      	mov	r0, r5
   80e70:	47b0      	blx	r6
   80e72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80e74:	b113      	cbz	r3, 80e7c <vTaskIncrementTick+0xc0>
   80e76:	f104 0018 	add.w	r0, r4, #24
   80e7a:	47b0      	blx	r6
   80e7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80e7e:	683b      	ldr	r3, [r7, #0]
   80e80:	4298      	cmp	r0, r3
   80e82:	bf88      	it	hi
   80e84:	6038      	strhi	r0, [r7, #0]
   80e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80e8a:	4629      	mov	r1, r5
   80e8c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80e90:	4b0f      	ldr	r3, [pc, #60]	; (80ed0 <vTaskIncrementTick+0x114>)
   80e92:	4798      	blx	r3
   80e94:	4b07      	ldr	r3, [pc, #28]	; (80eb4 <vTaskIncrementTick+0xf8>)
   80e96:	681b      	ldr	r3, [r3, #0]
   80e98:	681b      	ldr	r3, [r3, #0]
   80e9a:	2b00      	cmp	r3, #0
   80e9c:	d1d9      	bne.n	80e52 <vTaskIncrementTick+0x96>
   80e9e:	e7d2      	b.n	80e46 <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
   80ea0:	4a0c      	ldr	r2, [pc, #48]	; (80ed4 <vTaskIncrementTick+0x118>)
   80ea2:	6813      	ldr	r3, [r2, #0]
   80ea4:	3301      	adds	r3, #1
   80ea6:	6013      	str	r3, [r2, #0]
   80ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80eac:	2007aa88 	.word	0x2007aa88
   80eb0:	2007aaa8 	.word	0x2007aaa8
   80eb4:	2007a9e8 	.word	0x2007a9e8
   80eb8:	000802b9 	.word	0x000802b9
   80ebc:	2007aaac 	.word	0x2007aaac
   80ec0:	2007aaa4 	.word	0x2007aaa4
   80ec4:	20070134 	.word	0x20070134
   80ec8:	00080231 	.word	0x00080231
   80ecc:	2007aa20 	.word	0x2007aa20
   80ed0:	000801d9 	.word	0x000801d9
   80ed4:	2007a9ec 	.word	0x2007a9ec
   80ed8:	2007aa24 	.word	0x2007aa24

00080edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   80edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   80ee0:	4b30      	ldr	r3, [pc, #192]	; (80fa4 <xTaskResumeAll+0xc8>)
   80ee2:	681b      	ldr	r3, [r3, #0]
   80ee4:	b91b      	cbnz	r3, 80eee <xTaskResumeAll+0x12>
   80ee6:	4b30      	ldr	r3, [pc, #192]	; (80fa8 <xTaskResumeAll+0xcc>)
   80ee8:	4798      	blx	r3
   80eea:	bf00      	nop
   80eec:	e7fd      	b.n	80eea <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   80eee:	4b2f      	ldr	r3, [pc, #188]	; (80fac <xTaskResumeAll+0xd0>)
   80ef0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   80ef2:	4b2c      	ldr	r3, [pc, #176]	; (80fa4 <xTaskResumeAll+0xc8>)
   80ef4:	681a      	ldr	r2, [r3, #0]
   80ef6:	3a01      	subs	r2, #1
   80ef8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80efa:	681b      	ldr	r3, [r3, #0]
   80efc:	2b00      	cmp	r3, #0
   80efe:	d149      	bne.n	80f94 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   80f00:	4b2b      	ldr	r3, [pc, #172]	; (80fb0 <xTaskResumeAll+0xd4>)
   80f02:	681b      	ldr	r3, [r3, #0]
   80f04:	bb03      	cbnz	r3, 80f48 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80f06:	2400      	movs	r4, #0
   80f08:	e047      	b.n	80f9a <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   80f0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   80f0e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   80f10:	f104 0018 	add.w	r0, r4, #24
   80f14:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80f16:	f104 0904 	add.w	r9, r4, #4
   80f1a:	4648      	mov	r0, r9
   80f1c:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   80f1e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80f20:	6833      	ldr	r3, [r6, #0]
   80f22:	4298      	cmp	r0, r3
   80f24:	bf88      	it	hi
   80f26:	6030      	strhi	r0, [r6, #0]
   80f28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f2c:	4649      	mov	r1, r9
   80f2e:	4b21      	ldr	r3, [pc, #132]	; (80fb4 <xTaskResumeAll+0xd8>)
   80f30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f34:	4b20      	ldr	r3, [pc, #128]	; (80fb8 <xTaskResumeAll+0xdc>)
   80f36:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   80f38:	4b20      	ldr	r3, [pc, #128]	; (80fbc <xTaskResumeAll+0xe0>)
   80f3a:	681b      	ldr	r3, [r3, #0]
   80f3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   80f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   80f40:	429a      	cmp	r2, r3
   80f42:	bf28      	it	cs
   80f44:	2501      	movcs	r5, #1
   80f46:	e004      	b.n	80f52 <xTaskResumeAll+0x76>
   80f48:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80f4a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80fdc <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   80f4e:	4f1c      	ldr	r7, [pc, #112]	; (80fc0 <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   80f50:	4e1c      	ldr	r6, [pc, #112]	; (80fc4 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80f52:	f8d8 3000 	ldr.w	r3, [r8]
   80f56:	2b00      	cmp	r3, #0
   80f58:	d1d7      	bne.n	80f0a <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f5a:	4b1b      	ldr	r3, [pc, #108]	; (80fc8 <xTaskResumeAll+0xec>)
   80f5c:	681b      	ldr	r3, [r3, #0]
   80f5e:	b163      	cbz	r3, 80f7a <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f60:	4b19      	ldr	r3, [pc, #100]	; (80fc8 <xTaskResumeAll+0xec>)
   80f62:	681b      	ldr	r3, [r3, #0]
   80f64:	b17b      	cbz	r3, 80f86 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   80f66:	4d19      	ldr	r5, [pc, #100]	; (80fcc <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   80f68:	4c17      	ldr	r4, [pc, #92]	; (80fc8 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   80f6a:	47a8      	blx	r5
						--uxMissedTicks;
   80f6c:	6823      	ldr	r3, [r4, #0]
   80f6e:	3b01      	subs	r3, #1
   80f70:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f72:	6823      	ldr	r3, [r4, #0]
   80f74:	2b00      	cmp	r3, #0
   80f76:	d1f8      	bne.n	80f6a <xTaskResumeAll+0x8e>
   80f78:	e005      	b.n	80f86 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   80f7a:	2d01      	cmp	r5, #1
   80f7c:	d003      	beq.n	80f86 <xTaskResumeAll+0xaa>
   80f7e:	4b14      	ldr	r3, [pc, #80]	; (80fd0 <xTaskResumeAll+0xf4>)
   80f80:	681b      	ldr	r3, [r3, #0]
   80f82:	2b01      	cmp	r3, #1
   80f84:	d108      	bne.n	80f98 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   80f86:	2200      	movs	r2, #0
   80f88:	4b11      	ldr	r3, [pc, #68]	; (80fd0 <xTaskResumeAll+0xf4>)
   80f8a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   80f8c:	4b11      	ldr	r3, [pc, #68]	; (80fd4 <xTaskResumeAll+0xf8>)
   80f8e:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   80f90:	2401      	movs	r4, #1
   80f92:	e002      	b.n	80f9a <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80f94:	2400      	movs	r4, #0
   80f96:	e000      	b.n	80f9a <xTaskResumeAll+0xbe>
   80f98:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   80f9a:	4b0f      	ldr	r3, [pc, #60]	; (80fd8 <xTaskResumeAll+0xfc>)
   80f9c:	4798      	blx	r3

	return xAlreadyYielded;
}
   80f9e:	4620      	mov	r0, r4
   80fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80fa4:	2007aa88 	.word	0x2007aa88
   80fa8:	000802b9 	.word	0x000802b9
   80fac:	000802c9 	.word	0x000802c9
   80fb0:	2007aacc 	.word	0x2007aacc
   80fb4:	2007aa24 	.word	0x2007aa24
   80fb8:	000801d9 	.word	0x000801d9
   80fbc:	2007aa8c 	.word	0x2007aa8c
   80fc0:	00080231 	.word	0x00080231
   80fc4:	2007aa20 	.word	0x2007aa20
   80fc8:	2007a9ec 	.word	0x2007a9ec
   80fcc:	00080dbd 	.word	0x00080dbd
   80fd0:	2007aac8 	.word	0x2007aac8
   80fd4:	000802a9 	.word	0x000802a9
   80fd8:	000802e9 	.word	0x000802e9
   80fdc:	2007aa90 	.word	0x2007aa90

00080fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   80fe0:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   80fe2:	b180      	cbz	r0, 81006 <vTaskDelay+0x26>
   80fe4:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
   80fe6:	4b09      	ldr	r3, [pc, #36]	; (8100c <vTaskDelay+0x2c>)
   80fe8:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   80fea:	4b09      	ldr	r3, [pc, #36]	; (81010 <vTaskDelay+0x30>)
   80fec:	681b      	ldr	r3, [r3, #0]
   80fee:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   80ff0:	4b08      	ldr	r3, [pc, #32]	; (81014 <vTaskDelay+0x34>)
   80ff2:	6818      	ldr	r0, [r3, #0]
   80ff4:	3004      	adds	r0, #4
   80ff6:	4b08      	ldr	r3, [pc, #32]	; (81018 <vTaskDelay+0x38>)
   80ff8:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   80ffa:	4620      	mov	r0, r4
   80ffc:	4b07      	ldr	r3, [pc, #28]	; (8101c <vTaskDelay+0x3c>)
   80ffe:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81000:	4b07      	ldr	r3, [pc, #28]	; (81020 <vTaskDelay+0x40>)
   81002:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81004:	b908      	cbnz	r0, 8100a <vTaskDelay+0x2a>
		{
			portYIELD_WITHIN_API();
   81006:	4b07      	ldr	r3, [pc, #28]	; (81024 <vTaskDelay+0x44>)
   81008:	4798      	blx	r3
   8100a:	bd10      	pop	{r4, pc}
   8100c:	00080d8d 	.word	0x00080d8d
   81010:	2007aaa8 	.word	0x2007aaa8
   81014:	2007aa8c 	.word	0x2007aa8c
   81018:	00080231 	.word	0x00080231
   8101c:	00080ac9 	.word	0x00080ac9
   81020:	00080edd 	.word	0x00080edd
   81024:	000802a9 	.word	0x000802a9

00081028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81028:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8102a:	4d15      	ldr	r5, [pc, #84]	; (81080 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8102c:	4f15      	ldr	r7, [pc, #84]	; (81084 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   8102e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 810a4 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   81032:	4e15      	ldr	r6, [pc, #84]	; (81088 <prvIdleTask+0x60>)
   81034:	e019      	b.n	8106a <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81036:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81038:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
   8103a:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
   8103c:	b1ac      	cbz	r4, 8106a <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   8103e:	4b13      	ldr	r3, [pc, #76]	; (8108c <prvIdleTask+0x64>)
   81040:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81042:	68fb      	ldr	r3, [r7, #12]
   81044:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81046:	1d20      	adds	r0, r4, #4
   81048:	4b11      	ldr	r3, [pc, #68]	; (81090 <prvIdleTask+0x68>)
   8104a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8104c:	4a11      	ldr	r2, [pc, #68]	; (81094 <prvIdleTask+0x6c>)
   8104e:	6813      	ldr	r3, [r2, #0]
   81050:	3b01      	subs	r3, #1
   81052:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81054:	682b      	ldr	r3, [r5, #0]
   81056:	3b01      	subs	r3, #1
   81058:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   8105a:	4b0f      	ldr	r3, [pc, #60]	; (81098 <prvIdleTask+0x70>)
   8105c:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   8105e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81060:	f8df 9044 	ldr.w	r9, [pc, #68]	; 810a8 <prvIdleTask+0x80>
   81064:	47c8      	blx	r9
		vPortFree( pxTCB );
   81066:	4620      	mov	r0, r4
   81068:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8106a:	682b      	ldr	r3, [r5, #0]
   8106c:	2b00      	cmp	r3, #0
   8106e:	d1e2      	bne.n	81036 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81070:	4b0a      	ldr	r3, [pc, #40]	; (8109c <prvIdleTask+0x74>)
   81072:	681b      	ldr	r3, [r3, #0]
   81074:	2b01      	cmp	r3, #1
   81076:	d9dc      	bls.n	81032 <prvIdleTask+0xa>
			{
				taskYIELD();
   81078:	4b09      	ldr	r3, [pc, #36]	; (810a0 <prvIdleTask+0x78>)
   8107a:	4798      	blx	r3
   8107c:	e7d7      	b.n	8102e <prvIdleTask+0x6>
   8107e:	bf00      	nop
   81080:	2007a9f4 	.word	0x2007a9f4
   81084:	2007a9f8 	.word	0x2007a9f8
   81088:	00080edd 	.word	0x00080edd
   8108c:	000802c9 	.word	0x000802c9
   81090:	00080231 	.word	0x00080231
   81094:	2007aacc 	.word	0x2007aacc
   81098:	000802e9 	.word	0x000802e9
   8109c:	2007aa24 	.word	0x2007aa24
   810a0:	000802a9 	.word	0x000802a9
   810a4:	00080d8d 	.word	0x00080d8d
   810a8:	000804e5 	.word	0x000804e5

000810ac <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   810ac:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   810ae:	4b22      	ldr	r3, [pc, #136]	; (81138 <vTaskSwitchContext+0x8c>)
   810b0:	681b      	ldr	r3, [r3, #0]
   810b2:	b96b      	cbnz	r3, 810d0 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   810b4:	4b21      	ldr	r3, [pc, #132]	; (8113c <vTaskSwitchContext+0x90>)
   810b6:	681b      	ldr	r3, [r3, #0]
   810b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   810bc:	009b      	lsls	r3, r3, #2
   810be:	4a20      	ldr	r2, [pc, #128]	; (81140 <vTaskSwitchContext+0x94>)
   810c0:	58d3      	ldr	r3, [r2, r3]
   810c2:	b9cb      	cbnz	r3, 810f8 <vTaskSwitchContext+0x4c>
   810c4:	4b1d      	ldr	r3, [pc, #116]	; (8113c <vTaskSwitchContext+0x90>)
   810c6:	681b      	ldr	r3, [r3, #0]
   810c8:	b143      	cbz	r3, 810dc <vTaskSwitchContext+0x30>
   810ca:	4a1c      	ldr	r2, [pc, #112]	; (8113c <vTaskSwitchContext+0x90>)
   810cc:	491c      	ldr	r1, [pc, #112]	; (81140 <vTaskSwitchContext+0x94>)
   810ce:	e009      	b.n	810e4 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   810d0:	2201      	movs	r2, #1
   810d2:	4b1c      	ldr	r3, [pc, #112]	; (81144 <vTaskSwitchContext+0x98>)
   810d4:	601a      	str	r2, [r3, #0]
   810d6:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   810d8:	6813      	ldr	r3, [r2, #0]
   810da:	b91b      	cbnz	r3, 810e4 <vTaskSwitchContext+0x38>
   810dc:	4b1a      	ldr	r3, [pc, #104]	; (81148 <vTaskSwitchContext+0x9c>)
   810de:	4798      	blx	r3
   810e0:	bf00      	nop
   810e2:	e7fd      	b.n	810e0 <vTaskSwitchContext+0x34>
   810e4:	6813      	ldr	r3, [r2, #0]
   810e6:	3b01      	subs	r3, #1
   810e8:	6013      	str	r3, [r2, #0]
   810ea:	6813      	ldr	r3, [r2, #0]
   810ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   810f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   810f4:	2b00      	cmp	r3, #0
   810f6:	d0ef      	beq.n	810d8 <vTaskSwitchContext+0x2c>
   810f8:	4b10      	ldr	r3, [pc, #64]	; (8113c <vTaskSwitchContext+0x90>)
   810fa:	681b      	ldr	r3, [r3, #0]
   810fc:	4a10      	ldr	r2, [pc, #64]	; (81140 <vTaskSwitchContext+0x94>)
   810fe:	0099      	lsls	r1, r3, #2
   81100:	18c8      	adds	r0, r1, r3
   81102:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81106:	6844      	ldr	r4, [r0, #4]
   81108:	6864      	ldr	r4, [r4, #4]
   8110a:	6044      	str	r4, [r0, #4]
   8110c:	4602      	mov	r2, r0
   8110e:	3208      	adds	r2, #8
   81110:	4294      	cmp	r4, r2
   81112:	d106      	bne.n	81122 <vTaskSwitchContext+0x76>
   81114:	6860      	ldr	r0, [r4, #4]
   81116:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   8111a:	4a09      	ldr	r2, [pc, #36]	; (81140 <vTaskSwitchContext+0x94>)
   8111c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81120:	6050      	str	r0, [r2, #4]
   81122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81126:	4a06      	ldr	r2, [pc, #24]	; (81140 <vTaskSwitchContext+0x94>)
   81128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8112c:	685b      	ldr	r3, [r3, #4]
   8112e:	68da      	ldr	r2, [r3, #12]
   81130:	4b06      	ldr	r3, [pc, #24]	; (8114c <vTaskSwitchContext+0xa0>)
   81132:	601a      	str	r2, [r3, #0]
   81134:	bd10      	pop	{r4, pc}
   81136:	bf00      	nop
   81138:	2007aa88 	.word	0x2007aa88
   8113c:	2007aa20 	.word	0x2007aa20
   81140:	2007aa24 	.word	0x2007aa24
   81144:	2007aac8 	.word	0x2007aac8
   81148:	000802b9 	.word	0x000802b9
   8114c:	2007aa8c 	.word	0x2007aa8c

00081150 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81150:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81152:	b918      	cbnz	r0, 8115c <vTaskPlaceOnEventList+0xc>
   81154:	4b0e      	ldr	r3, [pc, #56]	; (81190 <vTaskPlaceOnEventList+0x40>)
   81156:	4798      	blx	r3
   81158:	bf00      	nop
   8115a:	e7fd      	b.n	81158 <vTaskPlaceOnEventList+0x8>
   8115c:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8115e:	4d0d      	ldr	r5, [pc, #52]	; (81194 <vTaskPlaceOnEventList+0x44>)
   81160:	6829      	ldr	r1, [r5, #0]
   81162:	3118      	adds	r1, #24
   81164:	4b0c      	ldr	r3, [pc, #48]	; (81198 <vTaskPlaceOnEventList+0x48>)
   81166:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81168:	6828      	ldr	r0, [r5, #0]
   8116a:	3004      	adds	r0, #4
   8116c:	4b0b      	ldr	r3, [pc, #44]	; (8119c <vTaskPlaceOnEventList+0x4c>)
   8116e:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81170:	f1b4 3fff 	cmp.w	r4, #4294967295
   81174:	d105      	bne.n	81182 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81176:	6829      	ldr	r1, [r5, #0]
   81178:	3104      	adds	r1, #4
   8117a:	4809      	ldr	r0, [pc, #36]	; (811a0 <vTaskPlaceOnEventList+0x50>)
   8117c:	4b09      	ldr	r3, [pc, #36]	; (811a4 <vTaskPlaceOnEventList+0x54>)
   8117e:	4798      	blx	r3
   81180:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81182:	4b09      	ldr	r3, [pc, #36]	; (811a8 <vTaskPlaceOnEventList+0x58>)
   81184:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81186:	4420      	add	r0, r4
   81188:	4b08      	ldr	r3, [pc, #32]	; (811ac <vTaskPlaceOnEventList+0x5c>)
   8118a:	4798      	blx	r3
   8118c:	bd38      	pop	{r3, r4, r5, pc}
   8118e:	bf00      	nop
   81190:	000802b9 	.word	0x000802b9
   81194:	2007aa8c 	.word	0x2007aa8c
   81198:	000801f5 	.word	0x000801f5
   8119c:	00080231 	.word	0x00080231
   811a0:	2007a9d4 	.word	0x2007a9d4
   811a4:	000801d9 	.word	0x000801d9
   811a8:	2007aaa8 	.word	0x2007aaa8
   811ac:	00080ac9 	.word	0x00080ac9

000811b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   811b0:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   811b2:	b918      	cbnz	r0, 811bc <vTaskPlaceOnEventListRestricted+0xc>
   811b4:	4b09      	ldr	r3, [pc, #36]	; (811dc <vTaskPlaceOnEventListRestricted+0x2c>)
   811b6:	4798      	blx	r3
   811b8:	bf00      	nop
   811ba:	e7fd      	b.n	811b8 <vTaskPlaceOnEventListRestricted+0x8>
   811bc:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   811be:	4c08      	ldr	r4, [pc, #32]	; (811e0 <vTaskPlaceOnEventListRestricted+0x30>)
   811c0:	6821      	ldr	r1, [r4, #0]
   811c2:	3118      	adds	r1, #24
   811c4:	4b07      	ldr	r3, [pc, #28]	; (811e4 <vTaskPlaceOnEventListRestricted+0x34>)
   811c6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   811c8:	6820      	ldr	r0, [r4, #0]
   811ca:	3004      	adds	r0, #4
   811cc:	4b06      	ldr	r3, [pc, #24]	; (811e8 <vTaskPlaceOnEventListRestricted+0x38>)
   811ce:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   811d0:	4b06      	ldr	r3, [pc, #24]	; (811ec <vTaskPlaceOnEventListRestricted+0x3c>)
   811d2:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   811d4:	4428      	add	r0, r5
   811d6:	4b06      	ldr	r3, [pc, #24]	; (811f0 <vTaskPlaceOnEventListRestricted+0x40>)
   811d8:	4798      	blx	r3
   811da:	bd38      	pop	{r3, r4, r5, pc}
   811dc:	000802b9 	.word	0x000802b9
   811e0:	2007aa8c 	.word	0x2007aa8c
   811e4:	000801d9 	.word	0x000801d9
   811e8:	00080231 	.word	0x00080231
   811ec:	2007aaa8 	.word	0x2007aaa8
   811f0:	00080ac9 	.word	0x00080ac9

000811f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   811f4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   811f6:	68c3      	ldr	r3, [r0, #12]
   811f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   811fa:	b91c      	cbnz	r4, 81204 <xTaskRemoveFromEventList+0x10>
   811fc:	4b16      	ldr	r3, [pc, #88]	; (81258 <xTaskRemoveFromEventList+0x64>)
   811fe:	4798      	blx	r3
   81200:	bf00      	nop
   81202:	e7fd      	b.n	81200 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81204:	f104 0518 	add.w	r5, r4, #24
   81208:	4628      	mov	r0, r5
   8120a:	4b14      	ldr	r3, [pc, #80]	; (8125c <xTaskRemoveFromEventList+0x68>)
   8120c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8120e:	4b14      	ldr	r3, [pc, #80]	; (81260 <xTaskRemoveFromEventList+0x6c>)
   81210:	681b      	ldr	r3, [r3, #0]
   81212:	b99b      	cbnz	r3, 8123c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81214:	1d25      	adds	r5, r4, #4
   81216:	4628      	mov	r0, r5
   81218:	4b10      	ldr	r3, [pc, #64]	; (8125c <xTaskRemoveFromEventList+0x68>)
   8121a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8121c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8121e:	4b11      	ldr	r3, [pc, #68]	; (81264 <xTaskRemoveFromEventList+0x70>)
   81220:	681b      	ldr	r3, [r3, #0]
   81222:	4298      	cmp	r0, r3
   81224:	bf84      	itt	hi
   81226:	4b0f      	ldrhi	r3, [pc, #60]	; (81264 <xTaskRemoveFromEventList+0x70>)
   81228:	6018      	strhi	r0, [r3, #0]
   8122a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8122e:	4629      	mov	r1, r5
   81230:	4b0d      	ldr	r3, [pc, #52]	; (81268 <xTaskRemoveFromEventList+0x74>)
   81232:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81236:	4b0d      	ldr	r3, [pc, #52]	; (8126c <xTaskRemoveFromEventList+0x78>)
   81238:	4798      	blx	r3
   8123a:	e003      	b.n	81244 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8123c:	4629      	mov	r1, r5
   8123e:	480c      	ldr	r0, [pc, #48]	; (81270 <xTaskRemoveFromEventList+0x7c>)
   81240:	4b0a      	ldr	r3, [pc, #40]	; (8126c <xTaskRemoveFromEventList+0x78>)
   81242:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81244:	4b0b      	ldr	r3, [pc, #44]	; (81274 <xTaskRemoveFromEventList+0x80>)
   81246:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
   81248:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8124c:	4298      	cmp	r0, r3
   8124e:	bf34      	ite	cc
   81250:	2000      	movcc	r0, #0
   81252:	2001      	movcs	r0, #1
   81254:	bd38      	pop	{r3, r4, r5, pc}
   81256:	bf00      	nop
   81258:	000802b9 	.word	0x000802b9
   8125c:	00080231 	.word	0x00080231
   81260:	2007aa88 	.word	0x2007aa88
   81264:	2007aa20 	.word	0x2007aa20
   81268:	2007aa24 	.word	0x2007aa24
   8126c:	000801d9 	.word	0x000801d9
   81270:	2007aa90 	.word	0x2007aa90
   81274:	2007aa8c 	.word	0x2007aa8c

00081278 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81278:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8127a:	b918      	cbnz	r0, 81284 <vTaskSetTimeOutState+0xc>
   8127c:	4b05      	ldr	r3, [pc, #20]	; (81294 <vTaskSetTimeOutState+0x1c>)
   8127e:	4798      	blx	r3
   81280:	bf00      	nop
   81282:	e7fd      	b.n	81280 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81284:	4a04      	ldr	r2, [pc, #16]	; (81298 <vTaskSetTimeOutState+0x20>)
   81286:	6812      	ldr	r2, [r2, #0]
   81288:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8128a:	4a04      	ldr	r2, [pc, #16]	; (8129c <vTaskSetTimeOutState+0x24>)
   8128c:	6812      	ldr	r2, [r2, #0]
   8128e:	6042      	str	r2, [r0, #4]
   81290:	bd08      	pop	{r3, pc}
   81292:	bf00      	nop
   81294:	000802b9 	.word	0x000802b9
   81298:	2007aaa4 	.word	0x2007aaa4
   8129c:	2007aaa8 	.word	0x2007aaa8

000812a0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   812a0:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   812a2:	b918      	cbnz	r0, 812ac <xTaskCheckForTimeOut+0xc>
   812a4:	4b19      	ldr	r3, [pc, #100]	; (8130c <xTaskCheckForTimeOut+0x6c>)
   812a6:	4798      	blx	r3
   812a8:	bf00      	nop
   812aa:	e7fd      	b.n	812a8 <xTaskCheckForTimeOut+0x8>
   812ac:	460d      	mov	r5, r1
   812ae:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   812b0:	b919      	cbnz	r1, 812ba <xTaskCheckForTimeOut+0x1a>
   812b2:	4b16      	ldr	r3, [pc, #88]	; (8130c <xTaskCheckForTimeOut+0x6c>)
   812b4:	4798      	blx	r3
   812b6:	bf00      	nop
   812b8:	e7fd      	b.n	812b6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   812ba:	4b15      	ldr	r3, [pc, #84]	; (81310 <xTaskCheckForTimeOut+0x70>)
   812bc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   812be:	682b      	ldr	r3, [r5, #0]
   812c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   812c4:	d018      	beq.n	812f8 <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   812c6:	4a13      	ldr	r2, [pc, #76]	; (81314 <xTaskCheckForTimeOut+0x74>)
   812c8:	6812      	ldr	r2, [r2, #0]
   812ca:	6821      	ldr	r1, [r4, #0]
   812cc:	4291      	cmp	r1, r2
   812ce:	d004      	beq.n	812da <xTaskCheckForTimeOut+0x3a>
   812d0:	4a11      	ldr	r2, [pc, #68]	; (81318 <xTaskCheckForTimeOut+0x78>)
   812d2:	6812      	ldr	r2, [r2, #0]
   812d4:	6861      	ldr	r1, [r4, #4]
   812d6:	4291      	cmp	r1, r2
   812d8:	d910      	bls.n	812fc <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   812da:	4a0f      	ldr	r2, [pc, #60]	; (81318 <xTaskCheckForTimeOut+0x78>)
   812dc:	6811      	ldr	r1, [r2, #0]
   812de:	6860      	ldr	r0, [r4, #4]
   812e0:	1a09      	subs	r1, r1, r0
   812e2:	428b      	cmp	r3, r1
   812e4:	d90c      	bls.n	81300 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   812e6:	6812      	ldr	r2, [r2, #0]
   812e8:	1a12      	subs	r2, r2, r0
   812ea:	1a9b      	subs	r3, r3, r2
   812ec:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   812ee:	4620      	mov	r0, r4
   812f0:	4b0a      	ldr	r3, [pc, #40]	; (8131c <xTaskCheckForTimeOut+0x7c>)
   812f2:	4798      	blx	r3
			xReturn = pdFALSE;
   812f4:	2400      	movs	r4, #0
   812f6:	e004      	b.n	81302 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   812f8:	2400      	movs	r4, #0
   812fa:	e002      	b.n	81302 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   812fc:	2401      	movs	r4, #1
   812fe:	e000      	b.n	81302 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81300:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81302:	4b07      	ldr	r3, [pc, #28]	; (81320 <xTaskCheckForTimeOut+0x80>)
   81304:	4798      	blx	r3

	return xReturn;
}
   81306:	4620      	mov	r0, r4
   81308:	bd38      	pop	{r3, r4, r5, pc}
   8130a:	bf00      	nop
   8130c:	000802b9 	.word	0x000802b9
   81310:	000802c9 	.word	0x000802c9
   81314:	2007aaa4 	.word	0x2007aaa4
   81318:	2007aaa8 	.word	0x2007aaa8
   8131c:	00081279 	.word	0x00081279
   81320:	000802e9 	.word	0x000802e9

00081324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81324:	2201      	movs	r2, #1
   81326:	4b01      	ldr	r3, [pc, #4]	; (8132c <vTaskMissedYield+0x8>)
   81328:	601a      	str	r2, [r3, #0]
   8132a:	4770      	bx	lr
   8132c:	2007aac8 	.word	0x2007aac8

00081330 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81330:	4b01      	ldr	r3, [pc, #4]	; (81338 <xTaskGetCurrentTaskHandle+0x8>)
   81332:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81334:	4770      	bx	lr
   81336:	bf00      	nop
   81338:	2007aa8c 	.word	0x2007aa8c

0008133c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   8133c:	4b05      	ldr	r3, [pc, #20]	; (81354 <xTaskGetSchedulerState+0x18>)
   8133e:	681b      	ldr	r3, [r3, #0]
   81340:	b133      	cbz	r3, 81350 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81342:	4b05      	ldr	r3, [pc, #20]	; (81358 <xTaskGetSchedulerState+0x1c>)
   81344:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81346:	2b00      	cmp	r3, #0
   81348:	bf0c      	ite	eq
   8134a:	2001      	moveq	r0, #1
   8134c:	2002      	movne	r0, #2
   8134e:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81350:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81352:	4770      	bx	lr
   81354:	2007a9f0 	.word	0x2007a9f0
   81358:	2007aa88 	.word	0x2007aa88

0008135c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8135c:	2800      	cmp	r0, #0
   8135e:	d031      	beq.n	813c4 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81360:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81362:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81364:	4918      	ldr	r1, [pc, #96]	; (813c8 <vTaskPriorityInherit+0x6c>)
   81366:	6809      	ldr	r1, [r1, #0]
   81368:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8136a:	428b      	cmp	r3, r1
   8136c:	d229      	bcs.n	813c2 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   8136e:	4916      	ldr	r1, [pc, #88]	; (813c8 <vTaskPriorityInherit+0x6c>)
   81370:	6809      	ldr	r1, [r1, #0]
   81372:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81374:	f1c1 0105 	rsb	r1, r1, #5
   81378:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8137a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8137e:	4913      	ldr	r1, [pc, #76]	; (813cc <vTaskPriorityInherit+0x70>)
   81380:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81384:	6941      	ldr	r1, [r0, #20]
   81386:	4299      	cmp	r1, r3
   81388:	d117      	bne.n	813ba <vTaskPriorityInherit+0x5e>
   8138a:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8138c:	1d04      	adds	r4, r0, #4
   8138e:	4620      	mov	r0, r4
   81390:	4b0f      	ldr	r3, [pc, #60]	; (813d0 <vTaskPriorityInherit+0x74>)
   81392:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81394:	4b0c      	ldr	r3, [pc, #48]	; (813c8 <vTaskPriorityInherit+0x6c>)
   81396:	681b      	ldr	r3, [r3, #0]
   81398:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   8139a:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   8139c:	4b0d      	ldr	r3, [pc, #52]	; (813d4 <vTaskPriorityInherit+0x78>)
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	4298      	cmp	r0, r3
   813a2:	bf84      	itt	hi
   813a4:	4b0b      	ldrhi	r3, [pc, #44]	; (813d4 <vTaskPriorityInherit+0x78>)
   813a6:	6018      	strhi	r0, [r3, #0]
   813a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   813ac:	4621      	mov	r1, r4
   813ae:	4b07      	ldr	r3, [pc, #28]	; (813cc <vTaskPriorityInherit+0x70>)
   813b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   813b4:	4b08      	ldr	r3, [pc, #32]	; (813d8 <vTaskPriorityInherit+0x7c>)
   813b6:	4798      	blx	r3
   813b8:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   813ba:	4b03      	ldr	r3, [pc, #12]	; (813c8 <vTaskPriorityInherit+0x6c>)
   813bc:	681b      	ldr	r3, [r3, #0]
   813be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   813c0:	62c3      	str	r3, [r0, #44]	; 0x2c
   813c2:	bd38      	pop	{r3, r4, r5, pc}
   813c4:	4770      	bx	lr
   813c6:	bf00      	nop
   813c8:	2007aa8c 	.word	0x2007aa8c
   813cc:	2007aa24 	.word	0x2007aa24
   813d0:	00080231 	.word	0x00080231
   813d4:	2007aa20 	.word	0x2007aa20
   813d8:	000801d9 	.word	0x000801d9

000813dc <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   813dc:	b1e8      	cbz	r0, 8141a <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   813de:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   813e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   813e2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   813e4:	4291      	cmp	r1, r2
   813e6:	d017      	beq.n	81418 <vTaskPriorityDisinherit+0x3c>
   813e8:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   813ea:	1d05      	adds	r5, r0, #4
   813ec:	4628      	mov	r0, r5
   813ee:	4b0b      	ldr	r3, [pc, #44]	; (8141c <vTaskPriorityDisinherit+0x40>)
   813f0:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   813f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   813f4:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   813f6:	f1c0 0305 	rsb	r3, r0, #5
   813fa:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   813fc:	4b08      	ldr	r3, [pc, #32]	; (81420 <vTaskPriorityDisinherit+0x44>)
   813fe:	681b      	ldr	r3, [r3, #0]
   81400:	4298      	cmp	r0, r3
   81402:	bf84      	itt	hi
   81404:	4b06      	ldrhi	r3, [pc, #24]	; (81420 <vTaskPriorityDisinherit+0x44>)
   81406:	6018      	strhi	r0, [r3, #0]
   81408:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8140c:	4629      	mov	r1, r5
   8140e:	4b05      	ldr	r3, [pc, #20]	; (81424 <vTaskPriorityDisinherit+0x48>)
   81410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81414:	4b04      	ldr	r3, [pc, #16]	; (81428 <vTaskPriorityDisinherit+0x4c>)
   81416:	4798      	blx	r3
   81418:	bd38      	pop	{r3, r4, r5, pc}
   8141a:	4770      	bx	lr
   8141c:	00080231 	.word	0x00080231
   81420:	2007aa20 	.word	0x2007aa20
   81424:	2007aa24 	.word	0x2007aa24
   81428:	000801d9 	.word	0x000801d9

0008142c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   8142c:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8142e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81430:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81432:	4291      	cmp	r1, r2
   81434:	d80a      	bhi.n	8144c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81436:	1ad2      	subs	r2, r2, r3
   81438:	6983      	ldr	r3, [r0, #24]
   8143a:	429a      	cmp	r2, r3
   8143c:	d211      	bcs.n	81462 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8143e:	1d01      	adds	r1, r0, #4
   81440:	4b0a      	ldr	r3, [pc, #40]	; (8146c <prvInsertTimerInActiveList+0x40>)
   81442:	6818      	ldr	r0, [r3, #0]
   81444:	4b0a      	ldr	r3, [pc, #40]	; (81470 <prvInsertTimerInActiveList+0x44>)
   81446:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81448:	2000      	movs	r0, #0
   8144a:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8144c:	429a      	cmp	r2, r3
   8144e:	d201      	bcs.n	81454 <prvInsertTimerInActiveList+0x28>
   81450:	4299      	cmp	r1, r3
   81452:	d208      	bcs.n	81466 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81454:	1d01      	adds	r1, r0, #4
   81456:	4b07      	ldr	r3, [pc, #28]	; (81474 <prvInsertTimerInActiveList+0x48>)
   81458:	6818      	ldr	r0, [r3, #0]
   8145a:	4b05      	ldr	r3, [pc, #20]	; (81470 <prvInsertTimerInActiveList+0x44>)
   8145c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8145e:	2000      	movs	r0, #0
   81460:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81462:	2001      	movs	r0, #1
   81464:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81466:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81468:	bd08      	pop	{r3, pc}
   8146a:	bf00      	nop
   8146c:	2007ab08 	.word	0x2007ab08
   81470:	000801f5 	.word	0x000801f5
   81474:	2007aad4 	.word	0x2007aad4

00081478 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81478:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8147a:	4b0d      	ldr	r3, [pc, #52]	; (814b0 <prvCheckForValidListAndQueue+0x38>)
   8147c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8147e:	4b0d      	ldr	r3, [pc, #52]	; (814b4 <prvCheckForValidListAndQueue+0x3c>)
   81480:	681b      	ldr	r3, [r3, #0]
   81482:	b98b      	cbnz	r3, 814a8 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81484:	4d0c      	ldr	r5, [pc, #48]	; (814b8 <prvCheckForValidListAndQueue+0x40>)
   81486:	4628      	mov	r0, r5
   81488:	4e0c      	ldr	r6, [pc, #48]	; (814bc <prvCheckForValidListAndQueue+0x44>)
   8148a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   8148c:	4c0c      	ldr	r4, [pc, #48]	; (814c0 <prvCheckForValidListAndQueue+0x48>)
   8148e:	4620      	mov	r0, r4
   81490:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81492:	4b0c      	ldr	r3, [pc, #48]	; (814c4 <prvCheckForValidListAndQueue+0x4c>)
   81494:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81496:	4b0c      	ldr	r3, [pc, #48]	; (814c8 <prvCheckForValidListAndQueue+0x50>)
   81498:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   8149a:	2200      	movs	r2, #0
   8149c:	210c      	movs	r1, #12
   8149e:	2005      	movs	r0, #5
   814a0:	4b0a      	ldr	r3, [pc, #40]	; (814cc <prvCheckForValidListAndQueue+0x54>)
   814a2:	4798      	blx	r3
   814a4:	4b03      	ldr	r3, [pc, #12]	; (814b4 <prvCheckForValidListAndQueue+0x3c>)
   814a6:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   814a8:	4b09      	ldr	r3, [pc, #36]	; (814d0 <prvCheckForValidListAndQueue+0x58>)
   814aa:	4798      	blx	r3
   814ac:	bd70      	pop	{r4, r5, r6, pc}
   814ae:	bf00      	nop
   814b0:	000802c9 	.word	0x000802c9
   814b4:	2007ab04 	.word	0x2007ab04
   814b8:	2007aad8 	.word	0x2007aad8
   814bc:	000801b9 	.word	0x000801b9
   814c0:	2007aaec 	.word	0x2007aaec
   814c4:	2007aad4 	.word	0x2007aad4
   814c8:	2007ab08 	.word	0x2007ab08
   814cc:	000806b5 	.word	0x000806b5
   814d0:	000802e9 	.word	0x000802e9

000814d4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   814d4:	b510      	push	{r4, lr}
   814d6:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   814d8:	4b0b      	ldr	r3, [pc, #44]	; (81508 <xTimerCreateTimerTask+0x34>)
   814da:	4798      	blx	r3

	if( xTimerQueue != NULL )
   814dc:	4b0b      	ldr	r3, [pc, #44]	; (8150c <xTimerCreateTimerTask+0x38>)
   814de:	681b      	ldr	r3, [r3, #0]
   814e0:	b163      	cbz	r3, 814fc <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   814e2:	2300      	movs	r3, #0
   814e4:	9303      	str	r3, [sp, #12]
   814e6:	9302      	str	r3, [sp, #8]
   814e8:	9301      	str	r3, [sp, #4]
   814ea:	2204      	movs	r2, #4
   814ec:	9200      	str	r2, [sp, #0]
   814ee:	f44f 7282 	mov.w	r2, #260	; 0x104
   814f2:	4907      	ldr	r1, [pc, #28]	; (81510 <xTimerCreateTimerTask+0x3c>)
   814f4:	4807      	ldr	r0, [pc, #28]	; (81514 <xTimerCreateTimerTask+0x40>)
   814f6:	4c08      	ldr	r4, [pc, #32]	; (81518 <xTimerCreateTimerTask+0x44>)
   814f8:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   814fa:	b918      	cbnz	r0, 81504 <xTimerCreateTimerTask+0x30>
   814fc:	4b07      	ldr	r3, [pc, #28]	; (8151c <xTimerCreateTimerTask+0x48>)
   814fe:	4798      	blx	r3
   81500:	bf00      	nop
   81502:	e7fd      	b.n	81500 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81504:	b004      	add	sp, #16
   81506:	bd10      	pop	{r4, pc}
   81508:	00081479 	.word	0x00081479
   8150c:	2007ab04 	.word	0x2007ab04
   81510:	000852ac 	.word	0x000852ac
   81514:	00081629 	.word	0x00081629
   81518:	00080b21 	.word	0x00080b21
   8151c:	000802b9 	.word	0x000802b9

00081520 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81520:	b530      	push	{r4, r5, lr}
   81522:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81524:	4c0f      	ldr	r4, [pc, #60]	; (81564 <xTimerGenericCommand+0x44>)
   81526:	6825      	ldr	r5, [r4, #0]
   81528:	b1cd      	cbz	r5, 8155e <xTimerGenericCommand+0x3e>
   8152a:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8152c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8152e:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81530:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81532:	b96c      	cbnz	r4, 81550 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81534:	4b0c      	ldr	r3, [pc, #48]	; (81568 <xTimerGenericCommand+0x48>)
   81536:	4798      	blx	r3
   81538:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8153a:	f04f 0300 	mov.w	r3, #0
   8153e:	bf0c      	ite	eq
   81540:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81542:	461a      	movne	r2, r3
   81544:	a901      	add	r1, sp, #4
   81546:	4807      	ldr	r0, [pc, #28]	; (81564 <xTimerGenericCommand+0x44>)
   81548:	6800      	ldr	r0, [r0, #0]
   8154a:	4c08      	ldr	r4, [pc, #32]	; (8156c <xTimerGenericCommand+0x4c>)
   8154c:	47a0      	blx	r4
   8154e:	e007      	b.n	81560 <xTimerGenericCommand+0x40>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81550:	2300      	movs	r3, #0
   81552:	4622      	mov	r2, r4
   81554:	a901      	add	r1, sp, #4
   81556:	4628      	mov	r0, r5
   81558:	4c05      	ldr	r4, [pc, #20]	; (81570 <xTimerGenericCommand+0x50>)
   8155a:	47a0      	blx	r4
   8155c:	e000      	b.n	81560 <xTimerGenericCommand+0x40>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   8155e:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81560:	b005      	add	sp, #20
   81562:	bd30      	pop	{r4, r5, pc}
   81564:	2007ab04 	.word	0x2007ab04
   81568:	0008133d 	.word	0x0008133d
   8156c:	0008070d 	.word	0x0008070d
   81570:	00080891 	.word	0x00080891

00081574 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81578:	b082      	sub	sp, #8
   8157a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   8157c:	4b22      	ldr	r3, [pc, #136]	; (81608 <prvSampleTimeNow+0x94>)
   8157e:	4798      	blx	r3
   81580:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81582:	4b22      	ldr	r3, [pc, #136]	; (8160c <prvSampleTimeNow+0x98>)
   81584:	681b      	ldr	r3, [r3, #0]
   81586:	4298      	cmp	r0, r3
   81588:	d234      	bcs.n	815f4 <prvSampleTimeNow+0x80>
   8158a:	e024      	b.n	815d6 <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8158c:	68da      	ldr	r2, [r3, #12]
   8158e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81592:	68db      	ldr	r3, [r3, #12]
   81594:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81596:	1d25      	adds	r5, r4, #4
   81598:	4628      	mov	r0, r5
   8159a:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8159c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8159e:	4620      	mov	r0, r4
   815a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   815a2:	69e3      	ldr	r3, [r4, #28]
   815a4:	2b01      	cmp	r3, #1
   815a6:	d118      	bne.n	815da <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   815a8:	69a3      	ldr	r3, [r4, #24]
   815aa:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   815ac:	459a      	cmp	sl, r3
   815ae:	d206      	bcs.n	815be <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   815b0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   815b2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   815b4:	4629      	mov	r1, r5
   815b6:	6830      	ldr	r0, [r6, #0]
   815b8:	4b15      	ldr	r3, [pc, #84]	; (81610 <prvSampleTimeNow+0x9c>)
   815ba:	4798      	blx	r3
   815bc:	e00d      	b.n	815da <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   815be:	2100      	movs	r1, #0
   815c0:	9100      	str	r1, [sp, #0]
   815c2:	460b      	mov	r3, r1
   815c4:	4652      	mov	r2, sl
   815c6:	4620      	mov	r0, r4
   815c8:	4c12      	ldr	r4, [pc, #72]	; (81614 <prvSampleTimeNow+0xa0>)
   815ca:	47a0      	blx	r4
				configASSERT( xResult );
   815cc:	b928      	cbnz	r0, 815da <prvSampleTimeNow+0x66>
   815ce:	4b12      	ldr	r3, [pc, #72]	; (81618 <prvSampleTimeNow+0xa4>)
   815d0:	4798      	blx	r3
   815d2:	bf00      	nop
   815d4:	e7fd      	b.n	815d2 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   815d6:	4e11      	ldr	r6, [pc, #68]	; (8161c <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   815d8:	4f11      	ldr	r7, [pc, #68]	; (81620 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   815da:	6833      	ldr	r3, [r6, #0]
   815dc:	681a      	ldr	r2, [r3, #0]
   815de:	2a00      	cmp	r2, #0
   815e0:	d1d4      	bne.n	8158c <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   815e2:	4a10      	ldr	r2, [pc, #64]	; (81624 <prvSampleTimeNow+0xb0>)
   815e4:	6810      	ldr	r0, [r2, #0]
   815e6:	490d      	ldr	r1, [pc, #52]	; (8161c <prvSampleTimeNow+0xa8>)
   815e8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   815ea:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   815ec:	2301      	movs	r3, #1
   815ee:	f8c9 3000 	str.w	r3, [r9]
   815f2:	e002      	b.n	815fa <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   815f4:	2300      	movs	r3, #0
   815f6:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   815fa:	4b04      	ldr	r3, [pc, #16]	; (8160c <prvSampleTimeNow+0x98>)
   815fc:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81600:	4640      	mov	r0, r8
   81602:	b002      	add	sp, #8
   81604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81608:	00080d9d 	.word	0x00080d9d
   8160c:	2007ab00 	.word	0x2007ab00
   81610:	000801f5 	.word	0x000801f5
   81614:	00081521 	.word	0x00081521
   81618:	000802b9 	.word	0x000802b9
   8161c:	2007aad4 	.word	0x2007aad4
   81620:	00080231 	.word	0x00080231
   81624:	2007ab08 	.word	0x2007ab08

00081628 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8162c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8162e:	4d4d      	ldr	r5, [pc, #308]	; (81764 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81630:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81794 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81634:	4b4c      	ldr	r3, [pc, #304]	; (81768 <prvTimerTask+0x140>)
   81636:	681b      	ldr	r3, [r3, #0]
   81638:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8163a:	2a00      	cmp	r2, #0
   8163c:	f000 8088 	beq.w	81750 <prvTimerTask+0x128>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81640:	68db      	ldr	r3, [r3, #12]
   81642:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81644:	4b49      	ldr	r3, [pc, #292]	; (8176c <prvTimerTask+0x144>)
   81646:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81648:	a803      	add	r0, sp, #12
   8164a:	4b49      	ldr	r3, [pc, #292]	; (81770 <prvTimerTask+0x148>)
   8164c:	4798      	blx	r3
   8164e:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81650:	9b03      	ldr	r3, [sp, #12]
   81652:	2b00      	cmp	r3, #0
   81654:	d130      	bne.n	816b8 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81656:	4286      	cmp	r6, r0
   81658:	d824      	bhi.n	816a4 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   8165a:	4b46      	ldr	r3, [pc, #280]	; (81774 <prvTimerTask+0x14c>)
   8165c:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8165e:	4b42      	ldr	r3, [pc, #264]	; (81768 <prvTimerTask+0x140>)
   81660:	681b      	ldr	r3, [r3, #0]
   81662:	68db      	ldr	r3, [r3, #12]
   81664:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81666:	1d20      	adds	r0, r4, #4
   81668:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8166a:	69e3      	ldr	r3, [r4, #28]
   8166c:	2b01      	cmp	r3, #1
   8166e:	d114      	bne.n	8169a <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81670:	69a1      	ldr	r1, [r4, #24]
   81672:	4633      	mov	r3, r6
   81674:	463a      	mov	r2, r7
   81676:	4431      	add	r1, r6
   81678:	4620      	mov	r0, r4
   8167a:	4f3f      	ldr	r7, [pc, #252]	; (81778 <prvTimerTask+0x150>)
   8167c:	47b8      	blx	r7
   8167e:	2801      	cmp	r0, #1
   81680:	d10b      	bne.n	8169a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81682:	2100      	movs	r1, #0
   81684:	9100      	str	r1, [sp, #0]
   81686:	460b      	mov	r3, r1
   81688:	4632      	mov	r2, r6
   8168a:	4620      	mov	r0, r4
   8168c:	4e3b      	ldr	r6, [pc, #236]	; (8177c <prvTimerTask+0x154>)
   8168e:	47b0      	blx	r6
			configASSERT( xResult );
   81690:	b918      	cbnz	r0, 8169a <prvTimerTask+0x72>
   81692:	4b3b      	ldr	r3, [pc, #236]	; (81780 <prvTimerTask+0x158>)
   81694:	4798      	blx	r3
   81696:	bf00      	nop
   81698:	e7fd      	b.n	81696 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8169a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8169c:	4620      	mov	r0, r4
   8169e:	4798      	blx	r3
   816a0:	e00c      	b.n	816bc <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   816a2:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   816a4:	1bf1      	subs	r1, r6, r7
   816a6:	6828      	ldr	r0, [r5, #0]
   816a8:	4b36      	ldr	r3, [pc, #216]	; (81784 <prvTimerTask+0x15c>)
   816aa:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   816ac:	4b31      	ldr	r3, [pc, #196]	; (81774 <prvTimerTask+0x14c>)
   816ae:	4798      	blx	r3
   816b0:	b920      	cbnz	r0, 816bc <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   816b2:	4b35      	ldr	r3, [pc, #212]	; (81788 <prvTimerTask+0x160>)
   816b4:	4798      	blx	r3
   816b6:	e001      	b.n	816bc <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   816b8:	4b2e      	ldr	r3, [pc, #184]	; (81774 <prvTimerTask+0x14c>)
   816ba:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   816bc:	a802      	add	r0, sp, #8
   816be:	4b2c      	ldr	r3, [pc, #176]	; (81770 <prvTimerTask+0x148>)
   816c0:	4798      	blx	r3
   816c2:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   816c4:	4e31      	ldr	r6, [pc, #196]	; (8178c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   816c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81778 <prvTimerTask+0x150>
   816ca:	e039      	b.n	81740 <prvTimerTask+0x118>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   816cc:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   816ce:	b11c      	cbz	r4, 816d8 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   816d0:	6963      	ldr	r3, [r4, #20]
   816d2:	b10b      	cbz	r3, 816d8 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   816d4:	1d20      	adds	r0, r4, #4
   816d6:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   816d8:	9b03      	ldr	r3, [sp, #12]
   816da:	2b02      	cmp	r3, #2
   816dc:	d020      	beq.n	81720 <prvTimerTask+0xf8>
   816de:	2b03      	cmp	r3, #3
   816e0:	d02b      	beq.n	8173a <prvTimerTask+0x112>
   816e2:	2b00      	cmp	r3, #0
   816e4:	d12c      	bne.n	81740 <prvTimerTask+0x118>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   816e6:	9904      	ldr	r1, [sp, #16]
   816e8:	69a0      	ldr	r0, [r4, #24]
   816ea:	460b      	mov	r3, r1
   816ec:	463a      	mov	r2, r7
   816ee:	4401      	add	r1, r0
   816f0:	4620      	mov	r0, r4
   816f2:	47c8      	blx	r9
   816f4:	2801      	cmp	r0, #1
   816f6:	d123      	bne.n	81740 <prvTimerTask+0x118>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   816f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   816fa:	4620      	mov	r0, r4
   816fc:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   816fe:	69e3      	ldr	r3, [r4, #28]
   81700:	2b01      	cmp	r3, #1
   81702:	d11d      	bne.n	81740 <prvTimerTask+0x118>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81704:	69a2      	ldr	r2, [r4, #24]
   81706:	2100      	movs	r1, #0
   81708:	9100      	str	r1, [sp, #0]
   8170a:	460b      	mov	r3, r1
   8170c:	9804      	ldr	r0, [sp, #16]
   8170e:	4402      	add	r2, r0
   81710:	4620      	mov	r0, r4
   81712:	4c1a      	ldr	r4, [pc, #104]	; (8177c <prvTimerTask+0x154>)
   81714:	47a0      	blx	r4
						configASSERT( xResult );
   81716:	b998      	cbnz	r0, 81740 <prvTimerTask+0x118>
   81718:	4b19      	ldr	r3, [pc, #100]	; (81780 <prvTimerTask+0x158>)
   8171a:	4798      	blx	r3
   8171c:	bf00      	nop
   8171e:	e7fd      	b.n	8171c <prvTimerTask+0xf4>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81720:	9904      	ldr	r1, [sp, #16]
   81722:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81724:	b919      	cbnz	r1, 8172e <prvTimerTask+0x106>
   81726:	4b16      	ldr	r3, [pc, #88]	; (81780 <prvTimerTask+0x158>)
   81728:	4798      	blx	r3
   8172a:	bf00      	nop
   8172c:	e7fd      	b.n	8172a <prvTimerTask+0x102>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8172e:	463b      	mov	r3, r7
   81730:	463a      	mov	r2, r7
   81732:	4439      	add	r1, r7
   81734:	4620      	mov	r0, r4
   81736:	47c8      	blx	r9
   81738:	e002      	b.n	81740 <prvTimerTask+0x118>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8173a:	4620      	mov	r0, r4
   8173c:	4b14      	ldr	r3, [pc, #80]	; (81790 <prvTimerTask+0x168>)
   8173e:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81740:	2300      	movs	r3, #0
   81742:	461a      	mov	r2, r3
   81744:	a903      	add	r1, sp, #12
   81746:	6828      	ldr	r0, [r5, #0]
   81748:	47b0      	blx	r6
   8174a:	2800      	cmp	r0, #0
   8174c:	d1be      	bne.n	816cc <prvTimerTask+0xa4>
   8174e:	e771      	b.n	81634 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81750:	4b06      	ldr	r3, [pc, #24]	; (8176c <prvTimerTask+0x144>)
   81752:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81754:	a803      	add	r0, sp, #12
   81756:	4b06      	ldr	r3, [pc, #24]	; (81770 <prvTimerTask+0x148>)
   81758:	4798      	blx	r3
   8175a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8175c:	9b03      	ldr	r3, [sp, #12]
   8175e:	2b00      	cmp	r3, #0
   81760:	d09f      	beq.n	816a2 <prvTimerTask+0x7a>
   81762:	e7a9      	b.n	816b8 <prvTimerTask+0x90>
   81764:	2007ab04 	.word	0x2007ab04
   81768:	2007aad4 	.word	0x2007aad4
   8176c:	00080d8d 	.word	0x00080d8d
   81770:	00081575 	.word	0x00081575
   81774:	00080edd 	.word	0x00080edd
   81778:	0008142d 	.word	0x0008142d
   8177c:	00081521 	.word	0x00081521
   81780:	000802b9 	.word	0x000802b9
   81784:	00080a7d 	.word	0x00080a7d
   81788:	000802a9 	.word	0x000802a9
   8178c:	00080921 	.word	0x00080921
   81790:	000804e5 	.word	0x000804e5
   81794:	00080231 	.word	0x00080231

00081798 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81798:	3801      	subs	r0, #1
   8179a:	2802      	cmp	r0, #2
   8179c:	d815      	bhi.n	817ca <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8179e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817a2:	460e      	mov	r6, r1
   817a4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   817a6:	b19a      	cbz	r2, 817d0 <_write+0x38>
   817a8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   817aa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 817e4 <_write+0x4c>
   817ae:	4f0c      	ldr	r7, [pc, #48]	; (817e0 <_write+0x48>)
   817b0:	f8d8 0000 	ldr.w	r0, [r8]
   817b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   817b8:	683b      	ldr	r3, [r7, #0]
   817ba:	4798      	blx	r3
   817bc:	2800      	cmp	r0, #0
   817be:	db0a      	blt.n	817d6 <_write+0x3e>
   817c0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   817c2:	3c01      	subs	r4, #1
   817c4:	d1f4      	bne.n	817b0 <_write+0x18>
   817c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   817ca:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   817ce:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   817d0:	2000      	movs	r0, #0
   817d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   817d6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   817da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   817de:	bf00      	nop
   817e0:	2007ac08 	.word	0x2007ac08
   817e4:	2007ac0c 	.word	0x2007ac0c

000817e8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   817e8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   817ea:	23ac      	movs	r3, #172	; 0xac
   817ec:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   817ee:	680b      	ldr	r3, [r1, #0]
   817f0:	684a      	ldr	r2, [r1, #4]
   817f2:	fbb3 f3f2 	udiv	r3, r3, r2
   817f6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   817f8:	1e5c      	subs	r4, r3, #1
   817fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   817fe:	4294      	cmp	r4, r2
   81800:	d80a      	bhi.n	81818 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   81802:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81804:	688b      	ldr	r3, [r1, #8]
   81806:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81808:	f240 2302 	movw	r3, #514	; 0x202
   8180c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81810:	2350      	movs	r3, #80	; 0x50
   81812:	6003      	str	r3, [r0, #0]

	return 0;
   81814:	2000      	movs	r0, #0
   81816:	e000      	b.n	8181a <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   81818:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   8181a:	bc10      	pop	{r4}
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop

00081820 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81820:	6943      	ldr	r3, [r0, #20]
   81822:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81826:	bf1a      	itte	ne
   81828:	61c1      	strne	r1, [r0, #28]
	return 0;
   8182a:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   8182c:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   8182e:	4770      	bx	lr

00081830 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81830:	6943      	ldr	r3, [r0, #20]
   81832:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81836:	bf1d      	ittte	ne
   81838:	6983      	ldrne	r3, [r0, #24]
   8183a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8183c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8183e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   81840:	4770      	bx	lr
   81842:	bf00      	nop

00081844 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81844:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81846:	480e      	ldr	r0, [pc, #56]	; (81880 <sysclk_init+0x3c>)
   81848:	4b0e      	ldr	r3, [pc, #56]	; (81884 <sysclk_init+0x40>)
   8184a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8184c:	213e      	movs	r1, #62	; 0x3e
   8184e:	2000      	movs	r0, #0
   81850:	4b0d      	ldr	r3, [pc, #52]	; (81888 <sysclk_init+0x44>)
   81852:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81854:	4c0d      	ldr	r4, [pc, #52]	; (8188c <sysclk_init+0x48>)
   81856:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81858:	2800      	cmp	r0, #0
   8185a:	d0fc      	beq.n	81856 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8185c:	4b0c      	ldr	r3, [pc, #48]	; (81890 <sysclk_init+0x4c>)
   8185e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81860:	4a0c      	ldr	r2, [pc, #48]	; (81894 <sysclk_init+0x50>)
   81862:	4b0d      	ldr	r3, [pc, #52]	; (81898 <sysclk_init+0x54>)
   81864:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81866:	4c0d      	ldr	r4, [pc, #52]	; (8189c <sysclk_init+0x58>)
   81868:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8186a:	2800      	cmp	r0, #0
   8186c:	d0fc      	beq.n	81868 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8186e:	2010      	movs	r0, #16
   81870:	4b0b      	ldr	r3, [pc, #44]	; (818a0 <sysclk_init+0x5c>)
   81872:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81874:	4b0b      	ldr	r3, [pc, #44]	; (818a4 <sysclk_init+0x60>)
   81876:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81878:	4801      	ldr	r0, [pc, #4]	; (81880 <sysclk_init+0x3c>)
   8187a:	4b02      	ldr	r3, [pc, #8]	; (81884 <sysclk_init+0x40>)
   8187c:	4798      	blx	r3
   8187e:	bd10      	pop	{r4, pc}
   81880:	0501bd00 	.word	0x0501bd00
   81884:	200700a5 	.word	0x200700a5
   81888:	00081c49 	.word	0x00081c49
   8188c:	00081c9d 	.word	0x00081c9d
   81890:	00081cad 	.word	0x00081cad
   81894:	200d3f01 	.word	0x200d3f01
   81898:	400e0600 	.word	0x400e0600
   8189c:	00081cbd 	.word	0x00081cbd
   818a0:	00081be1 	.word	0x00081be1
   818a4:	00081dd1 	.word	0x00081dd1

000818a8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   818a8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   818aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   818ae:	4b16      	ldr	r3, [pc, #88]	; (81908 <board_init+0x60>)
   818b0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   818b2:	200b      	movs	r0, #11
   818b4:	4c15      	ldr	r4, [pc, #84]	; (8190c <board_init+0x64>)
   818b6:	47a0      	blx	r4
   818b8:	200c      	movs	r0, #12
   818ba:	47a0      	blx	r4
   818bc:	200d      	movs	r0, #13
   818be:	47a0      	blx	r4
   818c0:	200e      	movs	r0, #14
   818c2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   818c4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818c8:	203b      	movs	r0, #59	; 0x3b
   818ca:	4c11      	ldr	r4, [pc, #68]	; (81910 <board_init+0x68>)
   818cc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   818ce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818d2:	2055      	movs	r0, #85	; 0x55
   818d4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   818d6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818da:	2056      	movs	r0, #86	; 0x56
   818dc:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   818de:	490d      	ldr	r1, [pc, #52]	; (81914 <board_init+0x6c>)
   818e0:	2068      	movs	r0, #104	; 0x68
   818e2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   818e4:	490c      	ldr	r1, [pc, #48]	; (81918 <board_init+0x70>)
   818e6:	205c      	movs	r0, #92	; 0x5c
   818e8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   818ea:	4a0c      	ldr	r2, [pc, #48]	; (8191c <board_init+0x74>)
   818ec:	f44f 7140 	mov.w	r1, #768	; 0x300
   818f0:	480b      	ldr	r0, [pc, #44]	; (81920 <board_init+0x78>)
   818f2:	4b0c      	ldr	r3, [pc, #48]	; (81924 <board_init+0x7c>)
   818f4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   818f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818fa:	202b      	movs	r0, #43	; 0x2b
   818fc:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   818fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81902:	202a      	movs	r0, #42	; 0x2a
   81904:	47a0      	blx	r4
   81906:	bd10      	pop	{r4, pc}
   81908:	400e1a50 	.word	0x400e1a50
   8190c:	00081ccd 	.word	0x00081ccd
   81910:	000819cd 	.word	0x000819cd
   81914:	28000079 	.word	0x28000079
   81918:	28000001 	.word	0x28000001
   8191c:	08000001 	.word	0x08000001
   81920:	400e0e00 	.word	0x400e0e00
   81924:	00081aa1 	.word	0x00081aa1

00081928 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81928:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8192a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8192e:	d016      	beq.n	8195e <pio_set_peripheral+0x36>
   81930:	d804      	bhi.n	8193c <pio_set_peripheral+0x14>
   81932:	b1c1      	cbz	r1, 81966 <pio_set_peripheral+0x3e>
   81934:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81938:	d00a      	beq.n	81950 <pio_set_peripheral+0x28>
   8193a:	e013      	b.n	81964 <pio_set_peripheral+0x3c>
   8193c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81940:	d011      	beq.n	81966 <pio_set_peripheral+0x3e>
   81942:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81946:	d00e      	beq.n	81966 <pio_set_peripheral+0x3e>
   81948:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8194c:	d10a      	bne.n	81964 <pio_set_peripheral+0x3c>
   8194e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81950:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81952:	6f03      	ldr	r3, [r0, #112]	; 0x70
   81954:	400b      	ands	r3, r1
   81956:	ea23 0302 	bic.w	r3, r3, r2
   8195a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8195c:	e002      	b.n	81964 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8195e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81960:	4313      	orrs	r3, r2
   81962:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81964:	6042      	str	r2, [r0, #4]
   81966:	4770      	bx	lr

00081968 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81968:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8196a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8196e:	bf14      	ite	ne
   81970:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81972:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81974:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81978:	bf14      	ite	ne
   8197a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8197c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8197e:	f012 0f02 	tst.w	r2, #2
   81982:	d002      	beq.n	8198a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81984:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81988:	e004      	b.n	81994 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8198a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8198e:	bf18      	it	ne
   81990:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81994:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81996:	6001      	str	r1, [r0, #0]
   81998:	4770      	bx	lr
   8199a:	bf00      	nop

0008199c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8199c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8199e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   819a0:	9c01      	ldr	r4, [sp, #4]
   819a2:	b10c      	cbz	r4, 819a8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   819a4:	6641      	str	r1, [r0, #100]	; 0x64
   819a6:	e000      	b.n	819aa <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   819a8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   819aa:	b10b      	cbz	r3, 819b0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   819ac:	6501      	str	r1, [r0, #80]	; 0x50
   819ae:	e000      	b.n	819b2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   819b0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   819b2:	b10a      	cbz	r2, 819b8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   819b4:	6301      	str	r1, [r0, #48]	; 0x30
   819b6:	e000      	b.n	819ba <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   819b8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   819ba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   819bc:	6001      	str	r1, [r0, #0]
}
   819be:	bc10      	pop	{r4}
   819c0:	4770      	bx	lr
   819c2:	bf00      	nop

000819c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   819c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   819c6:	4770      	bx	lr

000819c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   819c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   819ca:	4770      	bx	lr

000819cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   819cc:	b570      	push	{r4, r5, r6, lr}
   819ce:	b082      	sub	sp, #8
   819d0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   819d2:	0943      	lsrs	r3, r0, #5
   819d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   819d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   819dc:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   819de:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   819e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   819e6:	d030      	beq.n	81a4a <pio_configure_pin+0x7e>
   819e8:	d806      	bhi.n	819f8 <pio_configure_pin+0x2c>
   819ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   819ee:	d00a      	beq.n	81a06 <pio_configure_pin+0x3a>
   819f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   819f4:	d018      	beq.n	81a28 <pio_configure_pin+0x5c>
   819f6:	e049      	b.n	81a8c <pio_configure_pin+0xc0>
   819f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   819fc:	d030      	beq.n	81a60 <pio_configure_pin+0x94>
   819fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81a02:	d02d      	beq.n	81a60 <pio_configure_pin+0x94>
   81a04:	e042      	b.n	81a8c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81a06:	f000 001f 	and.w	r0, r0, #31
   81a0a:	2601      	movs	r6, #1
   81a0c:	4086      	lsls	r6, r0
   81a0e:	4632      	mov	r2, r6
   81a10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a14:	4620      	mov	r0, r4
   81a16:	4b1f      	ldr	r3, [pc, #124]	; (81a94 <pio_configure_pin+0xc8>)
   81a18:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a1a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a1e:	bf14      	ite	ne
   81a20:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a22:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a24:	2001      	movs	r0, #1
   81a26:	e032      	b.n	81a8e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81a28:	f000 001f 	and.w	r0, r0, #31
   81a2c:	2601      	movs	r6, #1
   81a2e:	4086      	lsls	r6, r0
   81a30:	4632      	mov	r2, r6
   81a32:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81a36:	4620      	mov	r0, r4
   81a38:	4b16      	ldr	r3, [pc, #88]	; (81a94 <pio_configure_pin+0xc8>)
   81a3a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81a3c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a40:	bf14      	ite	ne
   81a42:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81a44:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81a46:	2001      	movs	r0, #1
   81a48:	e021      	b.n	81a8e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81a4a:	f000 011f 	and.w	r1, r0, #31
   81a4e:	2601      	movs	r6, #1
   81a50:	462a      	mov	r2, r5
   81a52:	fa06 f101 	lsl.w	r1, r6, r1
   81a56:	4620      	mov	r0, r4
   81a58:	4b0f      	ldr	r3, [pc, #60]	; (81a98 <pio_configure_pin+0xcc>)
   81a5a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81a5c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81a5e:	e016      	b.n	81a8e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81a60:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   81a64:	f000 011f 	and.w	r1, r0, #31
   81a68:	2601      	movs	r6, #1
   81a6a:	ea05 0306 	and.w	r3, r5, r6
   81a6e:	9300      	str	r3, [sp, #0]
   81a70:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81a74:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81a78:	bf14      	ite	ne
   81a7a:	2200      	movne	r2, #0
   81a7c:	2201      	moveq	r2, #1
   81a7e:	fa06 f101 	lsl.w	r1, r6, r1
   81a82:	4620      	mov	r0, r4
   81a84:	4c05      	ldr	r4, [pc, #20]	; (81a9c <pio_configure_pin+0xd0>)
   81a86:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81a88:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81a8a:	e000      	b.n	81a8e <pio_configure_pin+0xc2>

	default:
		return 0;
   81a8c:	2000      	movs	r0, #0
	}

	return 1;
}
   81a8e:	b002      	add	sp, #8
   81a90:	bd70      	pop	{r4, r5, r6, pc}
   81a92:	bf00      	nop
   81a94:	00081929 	.word	0x00081929
   81a98:	00081969 	.word	0x00081969
   81a9c:	0008199d 	.word	0x0008199d

00081aa0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81aa0:	b570      	push	{r4, r5, r6, lr}
   81aa2:	b082      	sub	sp, #8
   81aa4:	4605      	mov	r5, r0
   81aa6:	460e      	mov	r6, r1
   81aa8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81aaa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81aae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ab2:	d026      	beq.n	81b02 <pio_configure_pin_group+0x62>
   81ab4:	d806      	bhi.n	81ac4 <pio_configure_pin_group+0x24>
   81ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81aba:	d00a      	beq.n	81ad2 <pio_configure_pin_group+0x32>
   81abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ac0:	d013      	beq.n	81aea <pio_configure_pin_group+0x4a>
   81ac2:	e034      	b.n	81b2e <pio_configure_pin_group+0x8e>
   81ac4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81ac8:	d01f      	beq.n	81b0a <pio_configure_pin_group+0x6a>
   81aca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81ace:	d01c      	beq.n	81b0a <pio_configure_pin_group+0x6a>
   81ad0:	e02d      	b.n	81b2e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81ad2:	460a      	mov	r2, r1
   81ad4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ad8:	4b16      	ldr	r3, [pc, #88]	; (81b34 <pio_configure_pin_group+0x94>)
   81ada:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81adc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81ae0:	bf14      	ite	ne
   81ae2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81ae4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81ae6:	2001      	movs	r0, #1
   81ae8:	e022      	b.n	81b30 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81aea:	460a      	mov	r2, r1
   81aec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81af0:	4b10      	ldr	r3, [pc, #64]	; (81b34 <pio_configure_pin_group+0x94>)
   81af2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81af4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81af8:	bf14      	ite	ne
   81afa:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81afc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81afe:	2001      	movs	r0, #1
   81b00:	e016      	b.n	81b30 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81b02:	4b0d      	ldr	r3, [pc, #52]	; (81b38 <pio_configure_pin_group+0x98>)
   81b04:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81b06:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81b08:	e012      	b.n	81b30 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81b0a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   81b0e:	f004 0301 	and.w	r3, r4, #1
   81b12:	9300      	str	r3, [sp, #0]
   81b14:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81b18:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81b1c:	bf14      	ite	ne
   81b1e:	2200      	movne	r2, #0
   81b20:	2201      	moveq	r2, #1
   81b22:	4631      	mov	r1, r6
   81b24:	4628      	mov	r0, r5
   81b26:	4c05      	ldr	r4, [pc, #20]	; (81b3c <pio_configure_pin_group+0x9c>)
   81b28:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   81b2a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81b2c:	e000      	b.n	81b30 <pio_configure_pin_group+0x90>

	default:
		return 0;
   81b2e:	2000      	movs	r0, #0
	}

	return 1;
}
   81b30:	b002      	add	sp, #8
   81b32:	bd70      	pop	{r4, r5, r6, pc}
   81b34:	00081929 	.word	0x00081929
   81b38:	00081969 	.word	0x00081969
   81b3c:	0008199d 	.word	0x0008199d

00081b40 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b44:	4604      	mov	r4, r0
   81b46:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81b48:	4b0e      	ldr	r3, [pc, #56]	; (81b84 <pio_handler_process+0x44>)
   81b4a:	4798      	blx	r3
   81b4c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81b4e:	4620      	mov	r0, r4
   81b50:	4b0d      	ldr	r3, [pc, #52]	; (81b88 <pio_handler_process+0x48>)
   81b52:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81b54:	4005      	ands	r5, r0
   81b56:	d013      	beq.n	81b80 <pio_handler_process+0x40>
   81b58:	4c0c      	ldr	r4, [pc, #48]	; (81b8c <pio_handler_process+0x4c>)
   81b5a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81b5e:	6823      	ldr	r3, [r4, #0]
   81b60:	4543      	cmp	r3, r8
   81b62:	d108      	bne.n	81b76 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81b64:	6861      	ldr	r1, [r4, #4]
   81b66:	4229      	tst	r1, r5
   81b68:	d005      	beq.n	81b76 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81b6a:	68e3      	ldr	r3, [r4, #12]
   81b6c:	4640      	mov	r0, r8
   81b6e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81b70:	6863      	ldr	r3, [r4, #4]
   81b72:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81b76:	42b4      	cmp	r4, r6
   81b78:	d002      	beq.n	81b80 <pio_handler_process+0x40>
   81b7a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81b7c:	2d00      	cmp	r5, #0
   81b7e:	d1ee      	bne.n	81b5e <pio_handler_process+0x1e>
   81b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81b84:	000819c5 	.word	0x000819c5
   81b88:	000819c9 	.word	0x000819c9
   81b8c:	2007ab0c 	.word	0x2007ab0c

00081b90 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81b90:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81b92:	210b      	movs	r1, #11
   81b94:	4801      	ldr	r0, [pc, #4]	; (81b9c <PIOA_Handler+0xc>)
   81b96:	4b02      	ldr	r3, [pc, #8]	; (81ba0 <PIOA_Handler+0x10>)
   81b98:	4798      	blx	r3
   81b9a:	bd08      	pop	{r3, pc}
   81b9c:	400e0e00 	.word	0x400e0e00
   81ba0:	00081b41 	.word	0x00081b41

00081ba4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81ba4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81ba6:	210c      	movs	r1, #12
   81ba8:	4801      	ldr	r0, [pc, #4]	; (81bb0 <PIOB_Handler+0xc>)
   81baa:	4b02      	ldr	r3, [pc, #8]	; (81bb4 <PIOB_Handler+0x10>)
   81bac:	4798      	blx	r3
   81bae:	bd08      	pop	{r3, pc}
   81bb0:	400e1000 	.word	0x400e1000
   81bb4:	00081b41 	.word	0x00081b41

00081bb8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81bb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81bba:	210d      	movs	r1, #13
   81bbc:	4801      	ldr	r0, [pc, #4]	; (81bc4 <PIOC_Handler+0xc>)
   81bbe:	4b02      	ldr	r3, [pc, #8]	; (81bc8 <PIOC_Handler+0x10>)
   81bc0:	4798      	blx	r3
   81bc2:	bd08      	pop	{r3, pc}
   81bc4:	400e1200 	.word	0x400e1200
   81bc8:	00081b41 	.word	0x00081b41

00081bcc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81bcc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81bce:	210e      	movs	r1, #14
   81bd0:	4801      	ldr	r0, [pc, #4]	; (81bd8 <PIOD_Handler+0xc>)
   81bd2:	4b02      	ldr	r3, [pc, #8]	; (81bdc <PIOD_Handler+0x10>)
   81bd4:	4798      	blx	r3
   81bd6:	bd08      	pop	{r3, pc}
   81bd8:	400e1400 	.word	0x400e1400
   81bdc:	00081b41 	.word	0x00081b41

00081be0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81be0:	4a18      	ldr	r2, [pc, #96]	; (81c44 <pmc_switch_mck_to_pllack+0x64>)
   81be2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81be8:	4318      	orrs	r0, r3
   81bea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81bec:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81bee:	f013 0f08 	tst.w	r3, #8
   81bf2:	d003      	beq.n	81bfc <pmc_switch_mck_to_pllack+0x1c>
   81bf4:	e009      	b.n	81c0a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81bf6:	3b01      	subs	r3, #1
   81bf8:	d103      	bne.n	81c02 <pmc_switch_mck_to_pllack+0x22>
   81bfa:	e01e      	b.n	81c3a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81c00:	4910      	ldr	r1, [pc, #64]	; (81c44 <pmc_switch_mck_to_pllack+0x64>)
   81c02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81c04:	f012 0f08 	tst.w	r2, #8
   81c08:	d0f5      	beq.n	81bf6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81c0a:	4a0e      	ldr	r2, [pc, #56]	; (81c44 <pmc_switch_mck_to_pllack+0x64>)
   81c0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81c0e:	f023 0303 	bic.w	r3, r3, #3
   81c12:	f043 0302 	orr.w	r3, r3, #2
   81c16:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81c18:	6e90      	ldr	r0, [r2, #104]	; 0x68
   81c1a:	f010 0008 	ands.w	r0, r0, #8
   81c1e:	d004      	beq.n	81c2a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81c20:	2000      	movs	r0, #0
   81c22:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   81c24:	3b01      	subs	r3, #1
   81c26:	d103      	bne.n	81c30 <pmc_switch_mck_to_pllack+0x50>
   81c28:	e009      	b.n	81c3e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81c2e:	4905      	ldr	r1, [pc, #20]	; (81c44 <pmc_switch_mck_to_pllack+0x64>)
   81c30:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81c32:	f012 0f08 	tst.w	r2, #8
   81c36:	d0f5      	beq.n	81c24 <pmc_switch_mck_to_pllack+0x44>
   81c38:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81c3a:	2001      	movs	r0, #1
   81c3c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81c3e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81c40:	4770      	bx	lr
   81c42:	bf00      	nop
   81c44:	400e0600 	.word	0x400e0600

00081c48 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81c48:	b138      	cbz	r0, 81c5a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c4a:	4911      	ldr	r1, [pc, #68]	; (81c90 <pmc_switch_mainck_to_xtal+0x48>)
   81c4c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81c4e:	4a11      	ldr	r2, [pc, #68]	; (81c94 <pmc_switch_mainck_to_xtal+0x4c>)
   81c50:	401a      	ands	r2, r3
   81c52:	4b11      	ldr	r3, [pc, #68]	; (81c98 <pmc_switch_mainck_to_xtal+0x50>)
   81c54:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c56:	620b      	str	r3, [r1, #32]
   81c58:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c5a:	480d      	ldr	r0, [pc, #52]	; (81c90 <pmc_switch_mainck_to_xtal+0x48>)
   81c5c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81c5e:	0209      	lsls	r1, r1, #8
   81c60:	b289      	uxth	r1, r1
   81c62:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   81c66:	f023 0303 	bic.w	r3, r3, #3
   81c6a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81c6e:	f043 0301 	orr.w	r3, r3, #1
   81c72:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c74:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81c76:	4602      	mov	r2, r0
   81c78:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81c7a:	f013 0f01 	tst.w	r3, #1
   81c7e:	d0fb      	beq.n	81c78 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81c80:	4a03      	ldr	r2, [pc, #12]	; (81c90 <pmc_switch_mainck_to_xtal+0x48>)
   81c82:	6a13      	ldr	r3, [r2, #32]
   81c84:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81c8c:	6213      	str	r3, [r2, #32]
   81c8e:	4770      	bx	lr
   81c90:	400e0600 	.word	0x400e0600
   81c94:	fec8fffc 	.word	0xfec8fffc
   81c98:	01370002 	.word	0x01370002

00081c9c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81c9c:	4b02      	ldr	r3, [pc, #8]	; (81ca8 <pmc_osc_is_ready_mainck+0xc>)
   81c9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81ca0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81ca4:	4770      	bx	lr
   81ca6:	bf00      	nop
   81ca8:	400e0600 	.word	0x400e0600

00081cac <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81cac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81cb0:	4b01      	ldr	r3, [pc, #4]	; (81cb8 <pmc_disable_pllack+0xc>)
   81cb2:	629a      	str	r2, [r3, #40]	; 0x28
   81cb4:	4770      	bx	lr
   81cb6:	bf00      	nop
   81cb8:	400e0600 	.word	0x400e0600

00081cbc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81cbc:	4b02      	ldr	r3, [pc, #8]	; (81cc8 <pmc_is_locked_pllack+0xc>)
   81cbe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81cc0:	f000 0002 	and.w	r0, r0, #2
   81cc4:	4770      	bx	lr
   81cc6:	bf00      	nop
   81cc8:	400e0600 	.word	0x400e0600

00081ccc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81ccc:	282c      	cmp	r0, #44	; 0x2c
   81cce:	d81e      	bhi.n	81d0e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81cd0:	281f      	cmp	r0, #31
   81cd2:	d80c      	bhi.n	81cee <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81cd4:	4b11      	ldr	r3, [pc, #68]	; (81d1c <pmc_enable_periph_clk+0x50>)
   81cd6:	699a      	ldr	r2, [r3, #24]
   81cd8:	2301      	movs	r3, #1
   81cda:	4083      	lsls	r3, r0
   81cdc:	4393      	bics	r3, r2
   81cde:	d018      	beq.n	81d12 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81ce0:	2301      	movs	r3, #1
   81ce2:	fa03 f000 	lsl.w	r0, r3, r0
   81ce6:	4b0d      	ldr	r3, [pc, #52]	; (81d1c <pmc_enable_periph_clk+0x50>)
   81ce8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81cea:	2000      	movs	r0, #0
   81cec:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   81cee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81cf0:	4b0a      	ldr	r3, [pc, #40]	; (81d1c <pmc_enable_periph_clk+0x50>)
   81cf2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81cf6:	2301      	movs	r3, #1
   81cf8:	4083      	lsls	r3, r0
   81cfa:	4393      	bics	r3, r2
   81cfc:	d00b      	beq.n	81d16 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81cfe:	2301      	movs	r3, #1
   81d00:	fa03 f000 	lsl.w	r0, r3, r0
   81d04:	4b05      	ldr	r3, [pc, #20]	; (81d1c <pmc_enable_periph_clk+0x50>)
   81d06:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81d0a:	2000      	movs	r0, #0
   81d0c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   81d0e:	2001      	movs	r0, #1
   81d10:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81d12:	2000      	movs	r0, #0
   81d14:	4770      	bx	lr
   81d16:	2000      	movs	r0, #0
}
   81d18:	4770      	bx	lr
   81d1a:	bf00      	nop
   81d1c:	400e0600 	.word	0x400e0600

00081d20 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81d20:	e7fe      	b.n	81d20 <Dummy_Handler>
   81d22:	bf00      	nop

00081d24 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81d24:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81d26:	4b1e      	ldr	r3, [pc, #120]	; (81da0 <Reset_Handler+0x7c>)
   81d28:	4a1e      	ldr	r2, [pc, #120]	; (81da4 <Reset_Handler+0x80>)
   81d2a:	429a      	cmp	r2, r3
   81d2c:	d003      	beq.n	81d36 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   81d2e:	4b1e      	ldr	r3, [pc, #120]	; (81da8 <Reset_Handler+0x84>)
   81d30:	4a1b      	ldr	r2, [pc, #108]	; (81da0 <Reset_Handler+0x7c>)
   81d32:	429a      	cmp	r2, r3
   81d34:	d304      	bcc.n	81d40 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81d36:	4b1d      	ldr	r3, [pc, #116]	; (81dac <Reset_Handler+0x88>)
   81d38:	4a1d      	ldr	r2, [pc, #116]	; (81db0 <Reset_Handler+0x8c>)
   81d3a:	429a      	cmp	r2, r3
   81d3c:	d30f      	bcc.n	81d5e <Reset_Handler+0x3a>
   81d3e:	e01a      	b.n	81d76 <Reset_Handler+0x52>
   81d40:	4917      	ldr	r1, [pc, #92]	; (81da0 <Reset_Handler+0x7c>)
   81d42:	4b1c      	ldr	r3, [pc, #112]	; (81db4 <Reset_Handler+0x90>)
   81d44:	1a5b      	subs	r3, r3, r1
   81d46:	f023 0303 	bic.w	r3, r3, #3
   81d4a:	3304      	adds	r3, #4
   81d4c:	4a15      	ldr	r2, [pc, #84]	; (81da4 <Reset_Handler+0x80>)
   81d4e:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81d50:	f852 0b04 	ldr.w	r0, [r2], #4
   81d54:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81d58:	429a      	cmp	r2, r3
   81d5a:	d1f9      	bne.n	81d50 <Reset_Handler+0x2c>
   81d5c:	e7eb      	b.n	81d36 <Reset_Handler+0x12>
   81d5e:	4b16      	ldr	r3, [pc, #88]	; (81db8 <Reset_Handler+0x94>)
   81d60:	4a16      	ldr	r2, [pc, #88]	; (81dbc <Reset_Handler+0x98>)
   81d62:	1ad2      	subs	r2, r2, r3
   81d64:	f022 0203 	bic.w	r2, r2, #3
   81d68:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81d6a:	3b04      	subs	r3, #4
		*pDest++ = 0;
   81d6c:	2100      	movs	r1, #0
   81d6e:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81d72:	4293      	cmp	r3, r2
   81d74:	d1fb      	bne.n	81d6e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81d76:	4b12      	ldr	r3, [pc, #72]	; (81dc0 <Reset_Handler+0x9c>)
   81d78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81d7c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81d80:	4910      	ldr	r1, [pc, #64]	; (81dc4 <Reset_Handler+0xa0>)
   81d82:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81d84:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81d8c:	d203      	bcs.n	81d96 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81d8e:	688b      	ldr	r3, [r1, #8]
   81d90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81d94:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81d96:	4b0c      	ldr	r3, [pc, #48]	; (81dc8 <Reset_Handler+0xa4>)
   81d98:	4798      	blx	r3

	/* Branch to main function */
	main();
   81d9a:	4b0c      	ldr	r3, [pc, #48]	; (81dcc <Reset_Handler+0xa8>)
   81d9c:	4798      	blx	r3
   81d9e:	e7fe      	b.n	81d9e <Reset_Handler+0x7a>
   81da0:	20070000 	.word	0x20070000
   81da4:	000853b0 	.word	0x000853b0
   81da8:	200709a4 	.word	0x200709a4
   81dac:	2007ac18 	.word	0x2007ac18
   81db0:	200709a8 	.word	0x200709a8
   81db4:	200709a3 	.word	0x200709a3
   81db8:	200709ac 	.word	0x200709ac
   81dbc:	2007ac1b 	.word	0x2007ac1b
   81dc0:	00080000 	.word	0x00080000
   81dc4:	e000ed00 	.word	0xe000ed00
   81dc8:	000821e5 	.word	0x000821e5
   81dcc:	000820e5 	.word	0x000820e5

00081dd0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81dd0:	4b3e      	ldr	r3, [pc, #248]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81dd4:	f003 0303 	and.w	r3, r3, #3
   81dd8:	2b03      	cmp	r3, #3
   81dda:	d85f      	bhi.n	81e9c <SystemCoreClockUpdate+0xcc>
   81ddc:	e8df f003 	tbb	[pc, r3]
   81de0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81de4:	4b3a      	ldr	r3, [pc, #232]	; (81ed0 <SystemCoreClockUpdate+0x100>)
   81de6:	695b      	ldr	r3, [r3, #20]
   81de8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81dec:	bf14      	ite	ne
   81dee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81df2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81df6:	4b37      	ldr	r3, [pc, #220]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81df8:	601a      	str	r2, [r3, #0]
   81dfa:	e04f      	b.n	81e9c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81dfc:	4b33      	ldr	r3, [pc, #204]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81dfe:	6a1b      	ldr	r3, [r3, #32]
   81e00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81e04:	d003      	beq.n	81e0e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81e06:	4a34      	ldr	r2, [pc, #208]	; (81ed8 <SystemCoreClockUpdate+0x108>)
   81e08:	4b32      	ldr	r3, [pc, #200]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e0a:	601a      	str	r2, [r3, #0]
   81e0c:	e046      	b.n	81e9c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81e0e:	4a33      	ldr	r2, [pc, #204]	; (81edc <SystemCoreClockUpdate+0x10c>)
   81e10:	4b30      	ldr	r3, [pc, #192]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e12:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81e14:	4b2d      	ldr	r3, [pc, #180]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81e16:	6a1b      	ldr	r3, [r3, #32]
   81e18:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81e1c:	2b10      	cmp	r3, #16
   81e1e:	d002      	beq.n	81e26 <SystemCoreClockUpdate+0x56>
   81e20:	2b20      	cmp	r3, #32
   81e22:	d004      	beq.n	81e2e <SystemCoreClockUpdate+0x5e>
   81e24:	e03a      	b.n	81e9c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81e26:	4a2e      	ldr	r2, [pc, #184]	; (81ee0 <SystemCoreClockUpdate+0x110>)
   81e28:	4b2a      	ldr	r3, [pc, #168]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e2a:	601a      	str	r2, [r3, #0]
				break;
   81e2c:	e036      	b.n	81e9c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81e2e:	4a2a      	ldr	r2, [pc, #168]	; (81ed8 <SystemCoreClockUpdate+0x108>)
   81e30:	4b28      	ldr	r3, [pc, #160]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e32:	601a      	str	r2, [r3, #0]
				break;
   81e34:	e032      	b.n	81e9c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81e36:	4b25      	ldr	r3, [pc, #148]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81e38:	6a1b      	ldr	r3, [r3, #32]
   81e3a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81e3e:	d003      	beq.n	81e48 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81e40:	4a25      	ldr	r2, [pc, #148]	; (81ed8 <SystemCoreClockUpdate+0x108>)
   81e42:	4b24      	ldr	r3, [pc, #144]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e44:	601a      	str	r2, [r3, #0]
   81e46:	e012      	b.n	81e6e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81e48:	4a24      	ldr	r2, [pc, #144]	; (81edc <SystemCoreClockUpdate+0x10c>)
   81e4a:	4b22      	ldr	r3, [pc, #136]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e4c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81e4e:	4b1f      	ldr	r3, [pc, #124]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81e50:	6a1b      	ldr	r3, [r3, #32]
   81e52:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81e56:	2b10      	cmp	r3, #16
   81e58:	d002      	beq.n	81e60 <SystemCoreClockUpdate+0x90>
   81e5a:	2b20      	cmp	r3, #32
   81e5c:	d004      	beq.n	81e68 <SystemCoreClockUpdate+0x98>
   81e5e:	e006      	b.n	81e6e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81e60:	4a1f      	ldr	r2, [pc, #124]	; (81ee0 <SystemCoreClockUpdate+0x110>)
   81e62:	4b1c      	ldr	r3, [pc, #112]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e64:	601a      	str	r2, [r3, #0]
				break;
   81e66:	e002      	b.n	81e6e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81e68:	4a1b      	ldr	r2, [pc, #108]	; (81ed8 <SystemCoreClockUpdate+0x108>)
   81e6a:	4b1a      	ldr	r3, [pc, #104]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e6c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81e6e:	4b17      	ldr	r3, [pc, #92]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e72:	f003 0303 	and.w	r3, r3, #3
   81e76:	2b02      	cmp	r3, #2
   81e78:	d10d      	bne.n	81e96 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81e7a:	4a14      	ldr	r2, [pc, #80]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81e7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81e7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81e80:	4814      	ldr	r0, [pc, #80]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e82:	f3c3 410a 	ubfx	r1, r3, #16, #11
   81e86:	6803      	ldr	r3, [r0, #0]
   81e88:	fb01 3303 	mla	r3, r1, r3, r3
   81e8c:	b2d2      	uxtb	r2, r2
   81e8e:	fbb3 f3f2 	udiv	r3, r3, r2
   81e92:	6003      	str	r3, [r0, #0]
   81e94:	e002      	b.n	81e9c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81e96:	4a13      	ldr	r2, [pc, #76]	; (81ee4 <SystemCoreClockUpdate+0x114>)
   81e98:	4b0e      	ldr	r3, [pc, #56]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81e9a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81e9c:	4b0b      	ldr	r3, [pc, #44]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81ea4:	2b70      	cmp	r3, #112	; 0x70
   81ea6:	d107      	bne.n	81eb8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81ea8:	4a0a      	ldr	r2, [pc, #40]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81eaa:	6813      	ldr	r3, [r2, #0]
   81eac:	490e      	ldr	r1, [pc, #56]	; (81ee8 <SystemCoreClockUpdate+0x118>)
   81eae:	fba1 1303 	umull	r1, r3, r1, r3
   81eb2:	085b      	lsrs	r3, r3, #1
   81eb4:	6013      	str	r3, [r2, #0]
   81eb6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81eb8:	4b04      	ldr	r3, [pc, #16]	; (81ecc <SystemCoreClockUpdate+0xfc>)
   81eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ebc:	4905      	ldr	r1, [pc, #20]	; (81ed4 <SystemCoreClockUpdate+0x104>)
   81ebe:	f3c3 1202 	ubfx	r2, r3, #4, #3
   81ec2:	680b      	ldr	r3, [r1, #0]
   81ec4:	40d3      	lsrs	r3, r2
   81ec6:	600b      	str	r3, [r1, #0]
   81ec8:	4770      	bx	lr
   81eca:	bf00      	nop
   81ecc:	400e0600 	.word	0x400e0600
   81ed0:	400e1a10 	.word	0x400e1a10
   81ed4:	20070138 	.word	0x20070138
   81ed8:	00b71b00 	.word	0x00b71b00
   81edc:	003d0900 	.word	0x003d0900
   81ee0:	007a1200 	.word	0x007a1200
   81ee4:	0e4e1c00 	.word	0x0e4e1c00
   81ee8:	aaaaaaab 	.word	0xaaaaaaab

00081eec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81eec:	4b09      	ldr	r3, [pc, #36]	; (81f14 <_sbrk+0x28>)
   81eee:	681b      	ldr	r3, [r3, #0]
   81ef0:	b913      	cbnz	r3, 81ef8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81ef2:	4a09      	ldr	r2, [pc, #36]	; (81f18 <_sbrk+0x2c>)
   81ef4:	4b07      	ldr	r3, [pc, #28]	; (81f14 <_sbrk+0x28>)
   81ef6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81ef8:	4b06      	ldr	r3, [pc, #24]	; (81f14 <_sbrk+0x28>)
   81efa:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81efc:	181a      	adds	r2, r3, r0
   81efe:	4907      	ldr	r1, [pc, #28]	; (81f1c <_sbrk+0x30>)
   81f00:	4291      	cmp	r1, r2
   81f02:	db04      	blt.n	81f0e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81f04:	4610      	mov	r0, r2
   81f06:	4a03      	ldr	r2, [pc, #12]	; (81f14 <_sbrk+0x28>)
   81f08:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81f0a:	4618      	mov	r0, r3
   81f0c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81f0e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81f12:	4770      	bx	lr
   81f14:	2007ab7c 	.word	0x2007ab7c
   81f18:	2007cc18 	.word	0x2007cc18
   81f1c:	20087ffc 	.word	0x20087ffc

00081f20 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81f20:	f04f 30ff 	mov.w	r0, #4294967295
   81f24:	4770      	bx	lr
   81f26:	bf00      	nop

00081f28 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81f2c:	604b      	str	r3, [r1, #4]

	return 0;
}
   81f2e:	2000      	movs	r0, #0
   81f30:	4770      	bx	lr
   81f32:	bf00      	nop

00081f34 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81f34:	2001      	movs	r0, #1
   81f36:	4770      	bx	lr

00081f38 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81f38:	2000      	movs	r0, #0
   81f3a:	4770      	bx	lr

00081f3c <prvPrintTask>:
	xSemaphoreGive( xMutex );
}
/*-----------------------------------------------------------*/

static void prvPrintTask( void *pvParameters )
{
   81f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f40:	4680      	mov	r8, r0
	available immediately.  The call to xSemaphoreTake() will only return when
	the semaphore has been successfully obtained so there is no need to check the
	return value.  If any other delay period was used then the code must check
	that xSemaphoreTake() returns pdTRUE before accessing the resource (in this
	case standard out. */
	xSemaphoreTake( xMutex, portMAX_DELAY );
   81f42:	4e0f      	ldr	r6, [pc, #60]	; (81f80 <prvPrintTask+0x44>)
   81f44:	2500      	movs	r5, #0
   81f46:	4f0f      	ldr	r7, [pc, #60]	; (81f84 <prvPrintTask+0x48>)
   81f48:	462b      	mov	r3, r5
   81f4a:	f04f 32ff 	mov.w	r2, #4294967295
   81f4e:	4629      	mov	r1, r5
   81f50:	6830      	ldr	r0, [r6, #0]
   81f52:	47b8      	blx	r7
	{
		/* The following line will only execute once the semaphore has been
		successfully obtained - so standard out can be accessed freely. */
		sprintf( cBuffer, "%s", pcString );
   81f54:	4c0c      	ldr	r4, [pc, #48]	; (81f88 <prvPrintTask+0x4c>)
   81f56:	4641      	mov	r1, r8
   81f58:	4620      	mov	r0, r4
   81f5a:	4b0c      	ldr	r3, [pc, #48]	; (81f8c <prvPrintTask+0x50>)
   81f5c:	4798      	blx	r3
		printf( cBuffer );
   81f5e:	4620      	mov	r0, r4
   81f60:	4b0b      	ldr	r3, [pc, #44]	; (81f90 <prvPrintTask+0x54>)
   81f62:	4798      	blx	r3
	}
	xSemaphoreGive( xMutex );
   81f64:	462b      	mov	r3, r5
   81f66:	462a      	mov	r2, r5
   81f68:	4629      	mov	r1, r5
   81f6a:	6830      	ldr	r0, [r6, #0]
   81f6c:	4c09      	ldr	r4, [pc, #36]	; (81f94 <prvPrintTask+0x58>)
   81f6e:	47a0      	blx	r4
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( ( rand() & 0x1FF ) );
   81f70:	4b09      	ldr	r3, [pc, #36]	; (81f98 <prvPrintTask+0x5c>)
   81f72:	4798      	blx	r3
   81f74:	f3c0 0008 	ubfx	r0, r0, #0, #9
   81f78:	4b08      	ldr	r3, [pc, #32]	; (81f9c <prvPrintTask+0x60>)
   81f7a:	4798      	blx	r3
   81f7c:	e7e4      	b.n	81f48 <prvPrintTask+0xc>
   81f7e:	bf00      	nop
   81f80:	2007ac10 	.word	0x2007ac10
   81f84:	00080921 	.word	0x00080921
   81f88:	2007ab80 	.word	0x2007ab80
   81f8c:	00082599 	.word	0x00082599
   81f90:	00082235 	.word	0x00082235
   81f94:	0008070d 	.word	0x0008070d
   81f98:	000823f9 	.word	0x000823f9
   81f9c:	00080fe1 	.word	0x00080fe1

00081fa0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   81fa2:	b083      	sub	sp, #12
   81fa4:	4604      	mov	r4, r0
   81fa6:	460d      	mov	r5, r1
	uint32_t val = 0;
   81fa8:	2300      	movs	r3, #0
   81faa:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81fac:	4b1f      	ldr	r3, [pc, #124]	; (8202c <usart_serial_getchar+0x8c>)
   81fae:	4298      	cmp	r0, r3
   81fb0:	d107      	bne.n	81fc2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81fb2:	461f      	mov	r7, r3
   81fb4:	4e1e      	ldr	r6, [pc, #120]	; (82030 <usart_serial_getchar+0x90>)
   81fb6:	4629      	mov	r1, r5
   81fb8:	4638      	mov	r0, r7
   81fba:	47b0      	blx	r6
   81fbc:	2800      	cmp	r0, #0
   81fbe:	d1fa      	bne.n	81fb6 <usart_serial_getchar+0x16>
   81fc0:	e019      	b.n	81ff6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81fc2:	4b1c      	ldr	r3, [pc, #112]	; (82034 <usart_serial_getchar+0x94>)
   81fc4:	4298      	cmp	r0, r3
   81fc6:	d109      	bne.n	81fdc <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81fc8:	461f      	mov	r7, r3
   81fca:	4e1b      	ldr	r6, [pc, #108]	; (82038 <usart_serial_getchar+0x98>)
   81fcc:	a901      	add	r1, sp, #4
   81fce:	4638      	mov	r0, r7
   81fd0:	47b0      	blx	r6
   81fd2:	2800      	cmp	r0, #0
   81fd4:	d1fa      	bne.n	81fcc <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81fd6:	9b01      	ldr	r3, [sp, #4]
   81fd8:	702b      	strb	r3, [r5, #0]
   81fda:	e019      	b.n	82010 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81fdc:	4b17      	ldr	r3, [pc, #92]	; (8203c <usart_serial_getchar+0x9c>)
   81fde:	4298      	cmp	r0, r3
   81fe0:	d109      	bne.n	81ff6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81fe2:	461e      	mov	r6, r3
   81fe4:	4c14      	ldr	r4, [pc, #80]	; (82038 <usart_serial_getchar+0x98>)
   81fe6:	a901      	add	r1, sp, #4
   81fe8:	4630      	mov	r0, r6
   81fea:	47a0      	blx	r4
   81fec:	2800      	cmp	r0, #0
   81fee:	d1fa      	bne.n	81fe6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81ff0:	9b01      	ldr	r3, [sp, #4]
   81ff2:	702b      	strb	r3, [r5, #0]
   81ff4:	e018      	b.n	82028 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81ff6:	4b12      	ldr	r3, [pc, #72]	; (82040 <usart_serial_getchar+0xa0>)
   81ff8:	429c      	cmp	r4, r3
   81ffa:	d109      	bne.n	82010 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81ffc:	461e      	mov	r6, r3
   81ffe:	4c0e      	ldr	r4, [pc, #56]	; (82038 <usart_serial_getchar+0x98>)
   82000:	a901      	add	r1, sp, #4
   82002:	4630      	mov	r0, r6
   82004:	47a0      	blx	r4
   82006:	2800      	cmp	r0, #0
   82008:	d1fa      	bne.n	82000 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8200a:	9b01      	ldr	r3, [sp, #4]
   8200c:	702b      	strb	r3, [r5, #0]
   8200e:	e00b      	b.n	82028 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82010:	4b0c      	ldr	r3, [pc, #48]	; (82044 <usart_serial_getchar+0xa4>)
   82012:	429c      	cmp	r4, r3
   82014:	d108      	bne.n	82028 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   82016:	461e      	mov	r6, r3
   82018:	4c07      	ldr	r4, [pc, #28]	; (82038 <usart_serial_getchar+0x98>)
   8201a:	a901      	add	r1, sp, #4
   8201c:	4630      	mov	r0, r6
   8201e:	47a0      	blx	r4
   82020:	2800      	cmp	r0, #0
   82022:	d1fa      	bne.n	8201a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   82024:	9b01      	ldr	r3, [sp, #4]
   82026:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82028:	b003      	add	sp, #12
   8202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8202c:	400e0800 	.word	0x400e0800
   82030:	00081831 	.word	0x00081831
   82034:	40098000 	.word	0x40098000
   82038:	000801a1 	.word	0x000801a1
   8203c:	4009c000 	.word	0x4009c000
   82040:	400a0000 	.word	0x400a0000
   82044:	400a4000 	.word	0x400a4000

00082048 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   82048:	b570      	push	{r4, r5, r6, lr}
   8204a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8204c:	4b1e      	ldr	r3, [pc, #120]	; (820c8 <usart_serial_putchar+0x80>)
   8204e:	4298      	cmp	r0, r3
   82050:	d108      	bne.n	82064 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   82052:	461e      	mov	r6, r3
   82054:	4d1d      	ldr	r5, [pc, #116]	; (820cc <usart_serial_putchar+0x84>)
   82056:	4621      	mov	r1, r4
   82058:	4630      	mov	r0, r6
   8205a:	47a8      	blx	r5
   8205c:	2800      	cmp	r0, #0
   8205e:	d1fa      	bne.n	82056 <usart_serial_putchar+0xe>
		return 1;
   82060:	2001      	movs	r0, #1
   82062:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82064:	4b1a      	ldr	r3, [pc, #104]	; (820d0 <usart_serial_putchar+0x88>)
   82066:	4298      	cmp	r0, r3
   82068:	d108      	bne.n	8207c <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   8206a:	461e      	mov	r6, r3
   8206c:	4d19      	ldr	r5, [pc, #100]	; (820d4 <usart_serial_putchar+0x8c>)
   8206e:	4621      	mov	r1, r4
   82070:	4630      	mov	r0, r6
   82072:	47a8      	blx	r5
   82074:	2800      	cmp	r0, #0
   82076:	d1fa      	bne.n	8206e <usart_serial_putchar+0x26>
		return 1;
   82078:	2001      	movs	r0, #1
   8207a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8207c:	4b16      	ldr	r3, [pc, #88]	; (820d8 <usart_serial_putchar+0x90>)
   8207e:	4298      	cmp	r0, r3
   82080:	d108      	bne.n	82094 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   82082:	461e      	mov	r6, r3
   82084:	4d13      	ldr	r5, [pc, #76]	; (820d4 <usart_serial_putchar+0x8c>)
   82086:	4621      	mov	r1, r4
   82088:	4630      	mov	r0, r6
   8208a:	47a8      	blx	r5
   8208c:	2800      	cmp	r0, #0
   8208e:	d1fa      	bne.n	82086 <usart_serial_putchar+0x3e>
		return 1;
   82090:	2001      	movs	r0, #1
   82092:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82094:	4b11      	ldr	r3, [pc, #68]	; (820dc <usart_serial_putchar+0x94>)
   82096:	4298      	cmp	r0, r3
   82098:	d108      	bne.n	820ac <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   8209a:	461e      	mov	r6, r3
   8209c:	4d0d      	ldr	r5, [pc, #52]	; (820d4 <usart_serial_putchar+0x8c>)
   8209e:	4621      	mov	r1, r4
   820a0:	4630      	mov	r0, r6
   820a2:	47a8      	blx	r5
   820a4:	2800      	cmp	r0, #0
   820a6:	d1fa      	bne.n	8209e <usart_serial_putchar+0x56>
		return 1;
   820a8:	2001      	movs	r0, #1
   820aa:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   820ac:	4b0c      	ldr	r3, [pc, #48]	; (820e0 <usart_serial_putchar+0x98>)
   820ae:	4298      	cmp	r0, r3
   820b0:	d108      	bne.n	820c4 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   820b2:	461e      	mov	r6, r3
   820b4:	4d07      	ldr	r5, [pc, #28]	; (820d4 <usart_serial_putchar+0x8c>)
   820b6:	4621      	mov	r1, r4
   820b8:	4630      	mov	r0, r6
   820ba:	47a8      	blx	r5
   820bc:	2800      	cmp	r0, #0
   820be:	d1fa      	bne.n	820b6 <usart_serial_putchar+0x6e>
		return 1;
   820c0:	2001      	movs	r0, #1
   820c2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   820c4:	2000      	movs	r0, #0
}
   820c6:	bd70      	pop	{r4, r5, r6, pc}
   820c8:	400e0800 	.word	0x400e0800
   820cc:	00081821 	.word	0x00081821
   820d0:	40098000 	.word	0x40098000
   820d4:	0008018d 	.word	0x0008018d
   820d8:	4009c000 	.word	0x4009c000
   820dc:	400a0000 	.word	0x400a0000
   820e0:	400a4000 	.word	0x400a4000

000820e4 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &printf);
}

int main( void )
{
   820e4:	b500      	push	{lr}
   820e6:	b089      	sub	sp, #36	; 0x24
		/* This function initializes the MCU clock  */
		sysclk_init();
   820e8:	4b26      	ldr	r3, [pc, #152]	; (82184 <main+0xa0>)
   820ea:	4798      	blx	r3
		
		/* Board initialization */
		board_init();
   820ec:	4b26      	ldr	r3, [pc, #152]	; (82188 <main+0xa4>)
   820ee:	4798      	blx	r3
   820f0:	2008      	movs	r0, #8
   820f2:	4d26      	ldr	r5, [pc, #152]	; (8218c <main+0xa8>)
   820f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   820f6:	4c26      	ldr	r4, [pc, #152]	; (82190 <main+0xac>)
   820f8:	4b26      	ldr	r3, [pc, #152]	; (82194 <main+0xb0>)
   820fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   820fc:	4a26      	ldr	r2, [pc, #152]	; (82198 <main+0xb4>)
   820fe:	4b27      	ldr	r3, [pc, #156]	; (8219c <main+0xb8>)
   82100:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82102:	4a27      	ldr	r2, [pc, #156]	; (821a0 <main+0xbc>)
   82104:	4b27      	ldr	r3, [pc, #156]	; (821a4 <main+0xc0>)
   82106:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82108:	4b27      	ldr	r3, [pc, #156]	; (821a8 <main+0xc4>)
   8210a:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   8210c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82110:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   82112:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82116:	9307      	str	r3, [sp, #28]
   82118:	2008      	movs	r0, #8
   8211a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8211c:	a905      	add	r1, sp, #20
   8211e:	4620      	mov	r0, r4
   82120:	4b22      	ldr	r3, [pc, #136]	; (821ac <main+0xc8>)
   82122:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82124:	4d22      	ldr	r5, [pc, #136]	; (821b0 <main+0xcc>)
   82126:	682b      	ldr	r3, [r5, #0]
   82128:	2100      	movs	r1, #0
   8212a:	6898      	ldr	r0, [r3, #8]
   8212c:	4c21      	ldr	r4, [pc, #132]	; (821b4 <main+0xd0>)
   8212e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82130:	682b      	ldr	r3, [r5, #0]
   82132:	2100      	movs	r1, #0
   82134:	6858      	ldr	r0, [r3, #4]
   82136:	47a0      	blx	r4
		/* Initialize the serial I/O(console ) */
		configure_console();

    /* Before a semaphore is used it must be explicitly created.  In this example
	a mutex type semaphore is created. */
    xMutex = xSemaphoreCreateMutex();
   82138:	2001      	movs	r0, #1
   8213a:	4b1f      	ldr	r3, [pc, #124]	; (821b8 <main+0xd4>)
   8213c:	4798      	blx	r3
   8213e:	4c1f      	ldr	r4, [pc, #124]	; (821bc <main+0xd8>)
   82140:	6020      	str	r0, [r4, #0]

	/* The tasks are going to use a pseudo random delay, seed the random number
	generator. */
	srand( 567 );
   82142:	f240 2037 	movw	r0, #567	; 0x237
   82146:	4b1e      	ldr	r3, [pc, #120]	; (821c0 <main+0xdc>)
   82148:	4798      	blx	r3

	/* Only create the tasks if the semaphore was created successfully. */
	if( xMutex != NULL )
   8214a:	6823      	ldr	r3, [r4, #0]
   8214c:	b1c3      	cbz	r3, 82180 <main+0x9c>
	{
		/* Create two instances of the tasks that attempt to write stdout.  The
		string they attempt to write is passed in as the task parameter.  The tasks
		are created at different priorities so some pre-emption will occur. */
		xTaskCreate( prvPrintTask, "Print1", 240, "Task 1 ******************************************\n", 1, NULL );
   8214e:	4e1d      	ldr	r6, [pc, #116]	; (821c4 <main+0xe0>)
   82150:	2400      	movs	r4, #0
   82152:	9403      	str	r4, [sp, #12]
   82154:	9402      	str	r4, [sp, #8]
   82156:	9401      	str	r4, [sp, #4]
   82158:	2301      	movs	r3, #1
   8215a:	9300      	str	r3, [sp, #0]
   8215c:	4b1a      	ldr	r3, [pc, #104]	; (821c8 <main+0xe4>)
   8215e:	22f0      	movs	r2, #240	; 0xf0
   82160:	491a      	ldr	r1, [pc, #104]	; (821cc <main+0xe8>)
   82162:	4630      	mov	r0, r6
   82164:	4d1a      	ldr	r5, [pc, #104]	; (821d0 <main+0xec>)
   82166:	47a8      	blx	r5
		xTaskCreate( prvPrintTask, "Print2", 240, "Task 2 ------------------------------------------\n", 2, NULL );
   82168:	9403      	str	r4, [sp, #12]
   8216a:	9402      	str	r4, [sp, #8]
   8216c:	9401      	str	r4, [sp, #4]
   8216e:	2302      	movs	r3, #2
   82170:	9300      	str	r3, [sp, #0]
   82172:	4b18      	ldr	r3, [pc, #96]	; (821d4 <main+0xf0>)
   82174:	22f0      	movs	r2, #240	; 0xf0
   82176:	4918      	ldr	r1, [pc, #96]	; (821d8 <main+0xf4>)
   82178:	4630      	mov	r0, r6
   8217a:	47a8      	blx	r5

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
   8217c:	4b17      	ldr	r3, [pc, #92]	; (821dc <main+0xf8>)
   8217e:	4798      	blx	r3
   82180:	e7fe      	b.n	82180 <main+0x9c>
   82182:	bf00      	nop
   82184:	00081845 	.word	0x00081845
   82188:	000818a9 	.word	0x000818a9
   8218c:	00081ccd 	.word	0x00081ccd
   82190:	400e0800 	.word	0x400e0800
   82194:	2007ac0c 	.word	0x2007ac0c
   82198:	00082049 	.word	0x00082049
   8219c:	2007ac08 	.word	0x2007ac08
   821a0:	00081fa1 	.word	0x00081fa1
   821a4:	2007ac04 	.word	0x2007ac04
   821a8:	0501bd00 	.word	0x0501bd00
   821ac:	000817e9 	.word	0x000817e9
   821b0:	20070568 	.word	0x20070568
   821b4:	00082439 	.word	0x00082439
   821b8:	0008082d 	.word	0x0008082d
   821bc:	2007ac10 	.word	0x2007ac10
   821c0:	000823e5 	.word	0x000823e5
   821c4:	00081f3d 	.word	0x00081f3d
   821c8:	000852b4 	.word	0x000852b4
   821cc:	000852e8 	.word	0x000852e8
   821d0:	00080b21 	.word	0x00080b21
   821d4:	000852f0 	.word	0x000852f0
   821d8:	00085324 	.word	0x00085324
   821dc:	00080d25 	.word	0x00080d25

000821e0 <vApplicationMallocFailedHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   821e0:	e7fe      	b.n	821e0 <vApplicationMallocFailedHook>
   821e2:	bf00      	nop

000821e4 <__libc_init_array>:
   821e4:	b570      	push	{r4, r5, r6, lr}
   821e6:	4e0f      	ldr	r6, [pc, #60]	; (82224 <__libc_init_array+0x40>)
   821e8:	4d0f      	ldr	r5, [pc, #60]	; (82228 <__libc_init_array+0x44>)
   821ea:	1b76      	subs	r6, r6, r5
   821ec:	10b6      	asrs	r6, r6, #2
   821ee:	bf18      	it	ne
   821f0:	2400      	movne	r4, #0
   821f2:	d005      	beq.n	82200 <__libc_init_array+0x1c>
   821f4:	3401      	adds	r4, #1
   821f6:	f855 3b04 	ldr.w	r3, [r5], #4
   821fa:	4798      	blx	r3
   821fc:	42a6      	cmp	r6, r4
   821fe:	d1f9      	bne.n	821f4 <__libc_init_array+0x10>
   82200:	4e0a      	ldr	r6, [pc, #40]	; (8222c <__libc_init_array+0x48>)
   82202:	4d0b      	ldr	r5, [pc, #44]	; (82230 <__libc_init_array+0x4c>)
   82204:	f003 f8be 	bl	85384 <_init>
   82208:	1b76      	subs	r6, r6, r5
   8220a:	10b6      	asrs	r6, r6, #2
   8220c:	bf18      	it	ne
   8220e:	2400      	movne	r4, #0
   82210:	d006      	beq.n	82220 <__libc_init_array+0x3c>
   82212:	3401      	adds	r4, #1
   82214:	f855 3b04 	ldr.w	r3, [r5], #4
   82218:	4798      	blx	r3
   8221a:	42a6      	cmp	r6, r4
   8221c:	d1f9      	bne.n	82212 <__libc_init_array+0x2e>
   8221e:	bd70      	pop	{r4, r5, r6, pc}
   82220:	bd70      	pop	{r4, r5, r6, pc}
   82222:	bf00      	nop
   82224:	00085390 	.word	0x00085390
   82228:	00085390 	.word	0x00085390
   8222c:	00085398 	.word	0x00085398
   82230:	00085390 	.word	0x00085390

00082234 <iprintf>:
   82234:	b40f      	push	{r0, r1, r2, r3}
   82236:	b510      	push	{r4, lr}
   82238:	4b07      	ldr	r3, [pc, #28]	; (82258 <iprintf+0x24>)
   8223a:	b082      	sub	sp, #8
   8223c:	ac04      	add	r4, sp, #16
   8223e:	f854 2b04 	ldr.w	r2, [r4], #4
   82242:	6818      	ldr	r0, [r3, #0]
   82244:	4623      	mov	r3, r4
   82246:	6881      	ldr	r1, [r0, #8]
   82248:	9401      	str	r4, [sp, #4]
   8224a:	f000 faa1 	bl	82790 <_vfiprintf_r>
   8224e:	b002      	add	sp, #8
   82250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82254:	b004      	add	sp, #16
   82256:	4770      	bx	lr
   82258:	20070568 	.word	0x20070568

0008225c <memcpy>:
   8225c:	4684      	mov	ip, r0
   8225e:	ea41 0300 	orr.w	r3, r1, r0
   82262:	f013 0303 	ands.w	r3, r3, #3
   82266:	d149      	bne.n	822fc <memcpy+0xa0>
   82268:	3a40      	subs	r2, #64	; 0x40
   8226a:	d323      	bcc.n	822b4 <memcpy+0x58>
   8226c:	680b      	ldr	r3, [r1, #0]
   8226e:	6003      	str	r3, [r0, #0]
   82270:	684b      	ldr	r3, [r1, #4]
   82272:	6043      	str	r3, [r0, #4]
   82274:	688b      	ldr	r3, [r1, #8]
   82276:	6083      	str	r3, [r0, #8]
   82278:	68cb      	ldr	r3, [r1, #12]
   8227a:	60c3      	str	r3, [r0, #12]
   8227c:	690b      	ldr	r3, [r1, #16]
   8227e:	6103      	str	r3, [r0, #16]
   82280:	694b      	ldr	r3, [r1, #20]
   82282:	6143      	str	r3, [r0, #20]
   82284:	698b      	ldr	r3, [r1, #24]
   82286:	6183      	str	r3, [r0, #24]
   82288:	69cb      	ldr	r3, [r1, #28]
   8228a:	61c3      	str	r3, [r0, #28]
   8228c:	6a0b      	ldr	r3, [r1, #32]
   8228e:	6203      	str	r3, [r0, #32]
   82290:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82292:	6243      	str	r3, [r0, #36]	; 0x24
   82294:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82296:	6283      	str	r3, [r0, #40]	; 0x28
   82298:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8229a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8229c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8229e:	6303      	str	r3, [r0, #48]	; 0x30
   822a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   822a2:	6343      	str	r3, [r0, #52]	; 0x34
   822a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   822a6:	6383      	str	r3, [r0, #56]	; 0x38
   822a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   822aa:	63c3      	str	r3, [r0, #60]	; 0x3c
   822ac:	3040      	adds	r0, #64	; 0x40
   822ae:	3140      	adds	r1, #64	; 0x40
   822b0:	3a40      	subs	r2, #64	; 0x40
   822b2:	d2db      	bcs.n	8226c <memcpy+0x10>
   822b4:	3230      	adds	r2, #48	; 0x30
   822b6:	d30b      	bcc.n	822d0 <memcpy+0x74>
   822b8:	680b      	ldr	r3, [r1, #0]
   822ba:	6003      	str	r3, [r0, #0]
   822bc:	684b      	ldr	r3, [r1, #4]
   822be:	6043      	str	r3, [r0, #4]
   822c0:	688b      	ldr	r3, [r1, #8]
   822c2:	6083      	str	r3, [r0, #8]
   822c4:	68cb      	ldr	r3, [r1, #12]
   822c6:	60c3      	str	r3, [r0, #12]
   822c8:	3010      	adds	r0, #16
   822ca:	3110      	adds	r1, #16
   822cc:	3a10      	subs	r2, #16
   822ce:	d2f3      	bcs.n	822b8 <memcpy+0x5c>
   822d0:	320c      	adds	r2, #12
   822d2:	d305      	bcc.n	822e0 <memcpy+0x84>
   822d4:	f851 3b04 	ldr.w	r3, [r1], #4
   822d8:	f840 3b04 	str.w	r3, [r0], #4
   822dc:	3a04      	subs	r2, #4
   822de:	d2f9      	bcs.n	822d4 <memcpy+0x78>
   822e0:	3204      	adds	r2, #4
   822e2:	d008      	beq.n	822f6 <memcpy+0x9a>
   822e4:	07d2      	lsls	r2, r2, #31
   822e6:	bf1c      	itt	ne
   822e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   822ec:	f800 3b01 	strbne.w	r3, [r0], #1
   822f0:	d301      	bcc.n	822f6 <memcpy+0x9a>
   822f2:	880b      	ldrh	r3, [r1, #0]
   822f4:	8003      	strh	r3, [r0, #0]
   822f6:	4660      	mov	r0, ip
   822f8:	4770      	bx	lr
   822fa:	bf00      	nop
   822fc:	2a08      	cmp	r2, #8
   822fe:	d313      	bcc.n	82328 <memcpy+0xcc>
   82300:	078b      	lsls	r3, r1, #30
   82302:	d0b1      	beq.n	82268 <memcpy+0xc>
   82304:	f010 0303 	ands.w	r3, r0, #3
   82308:	d0ae      	beq.n	82268 <memcpy+0xc>
   8230a:	f1c3 0304 	rsb	r3, r3, #4
   8230e:	1ad2      	subs	r2, r2, r3
   82310:	07db      	lsls	r3, r3, #31
   82312:	bf1c      	itt	ne
   82314:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82318:	f800 3b01 	strbne.w	r3, [r0], #1
   8231c:	d3a4      	bcc.n	82268 <memcpy+0xc>
   8231e:	f831 3b02 	ldrh.w	r3, [r1], #2
   82322:	f820 3b02 	strh.w	r3, [r0], #2
   82326:	e79f      	b.n	82268 <memcpy+0xc>
   82328:	3a04      	subs	r2, #4
   8232a:	d3d9      	bcc.n	822e0 <memcpy+0x84>
   8232c:	3a01      	subs	r2, #1
   8232e:	f811 3b01 	ldrb.w	r3, [r1], #1
   82332:	f800 3b01 	strb.w	r3, [r0], #1
   82336:	d2f9      	bcs.n	8232c <memcpy+0xd0>
   82338:	780b      	ldrb	r3, [r1, #0]
   8233a:	7003      	strb	r3, [r0, #0]
   8233c:	784b      	ldrb	r3, [r1, #1]
   8233e:	7043      	strb	r3, [r0, #1]
   82340:	788b      	ldrb	r3, [r1, #2]
   82342:	7083      	strb	r3, [r0, #2]
   82344:	4660      	mov	r0, ip
   82346:	4770      	bx	lr

00082348 <memset>:
   82348:	b470      	push	{r4, r5, r6}
   8234a:	0784      	lsls	r4, r0, #30
   8234c:	d046      	beq.n	823dc <memset+0x94>
   8234e:	1e54      	subs	r4, r2, #1
   82350:	2a00      	cmp	r2, #0
   82352:	d041      	beq.n	823d8 <memset+0x90>
   82354:	b2cd      	uxtb	r5, r1
   82356:	4603      	mov	r3, r0
   82358:	e002      	b.n	82360 <memset+0x18>
   8235a:	1e62      	subs	r2, r4, #1
   8235c:	b3e4      	cbz	r4, 823d8 <memset+0x90>
   8235e:	4614      	mov	r4, r2
   82360:	f803 5b01 	strb.w	r5, [r3], #1
   82364:	079a      	lsls	r2, r3, #30
   82366:	d1f8      	bne.n	8235a <memset+0x12>
   82368:	2c03      	cmp	r4, #3
   8236a:	d92e      	bls.n	823ca <memset+0x82>
   8236c:	b2cd      	uxtb	r5, r1
   8236e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82372:	2c0f      	cmp	r4, #15
   82374:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82378:	d919      	bls.n	823ae <memset+0x66>
   8237a:	4626      	mov	r6, r4
   8237c:	f103 0210 	add.w	r2, r3, #16
   82380:	3e10      	subs	r6, #16
   82382:	2e0f      	cmp	r6, #15
   82384:	f842 5c10 	str.w	r5, [r2, #-16]
   82388:	f842 5c0c 	str.w	r5, [r2, #-12]
   8238c:	f842 5c08 	str.w	r5, [r2, #-8]
   82390:	f842 5c04 	str.w	r5, [r2, #-4]
   82394:	f102 0210 	add.w	r2, r2, #16
   82398:	d8f2      	bhi.n	82380 <memset+0x38>
   8239a:	f1a4 0210 	sub.w	r2, r4, #16
   8239e:	f022 020f 	bic.w	r2, r2, #15
   823a2:	f004 040f 	and.w	r4, r4, #15
   823a6:	3210      	adds	r2, #16
   823a8:	2c03      	cmp	r4, #3
   823aa:	4413      	add	r3, r2
   823ac:	d90d      	bls.n	823ca <memset+0x82>
   823ae:	461e      	mov	r6, r3
   823b0:	4622      	mov	r2, r4
   823b2:	3a04      	subs	r2, #4
   823b4:	2a03      	cmp	r2, #3
   823b6:	f846 5b04 	str.w	r5, [r6], #4
   823ba:	d8fa      	bhi.n	823b2 <memset+0x6a>
   823bc:	1f22      	subs	r2, r4, #4
   823be:	f022 0203 	bic.w	r2, r2, #3
   823c2:	3204      	adds	r2, #4
   823c4:	4413      	add	r3, r2
   823c6:	f004 0403 	and.w	r4, r4, #3
   823ca:	b12c      	cbz	r4, 823d8 <memset+0x90>
   823cc:	b2c9      	uxtb	r1, r1
   823ce:	441c      	add	r4, r3
   823d0:	f803 1b01 	strb.w	r1, [r3], #1
   823d4:	42a3      	cmp	r3, r4
   823d6:	d1fb      	bne.n	823d0 <memset+0x88>
   823d8:	bc70      	pop	{r4, r5, r6}
   823da:	4770      	bx	lr
   823dc:	4614      	mov	r4, r2
   823de:	4603      	mov	r3, r0
   823e0:	e7c2      	b.n	82368 <memset+0x20>
   823e2:	bf00      	nop

000823e4 <srand>:
   823e4:	4b03      	ldr	r3, [pc, #12]	; (823f4 <srand+0x10>)
   823e6:	2200      	movs	r2, #0
   823e8:	681b      	ldr	r3, [r3, #0]
   823ea:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
   823ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
   823f2:	4770      	bx	lr
   823f4:	20070568 	.word	0x20070568

000823f8 <rand>:
   823f8:	b430      	push	{r4, r5}
   823fa:	4b0c      	ldr	r3, [pc, #48]	; (8242c <rand+0x34>)
   823fc:	4c0c      	ldr	r4, [pc, #48]	; (82430 <rand+0x38>)
   823fe:	6819      	ldr	r1, [r3, #0]
   82400:	4d0c      	ldr	r5, [pc, #48]	; (82434 <rand+0x3c>)
   82402:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   82406:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
   8240a:	fb04 f402 	mul.w	r4, r4, r2
   8240e:	fba2 2305 	umull	r2, r3, r2, r5
   82412:	fb05 4000 	mla	r0, r5, r0, r4
   82416:	3201      	adds	r2, #1
   82418:	4403      	add	r3, r0
   8241a:	f143 0300 	adc.w	r3, r3, #0
   8241e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   82422:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   82426:	bc30      	pop	{r4, r5}
   82428:	4770      	bx	lr
   8242a:	bf00      	nop
   8242c:	20070568 	.word	0x20070568
   82430:	5851f42d 	.word	0x5851f42d
   82434:	4c957f2d 	.word	0x4c957f2d

00082438 <setbuf>:
   82438:	2900      	cmp	r1, #0
   8243a:	bf0c      	ite	eq
   8243c:	2202      	moveq	r2, #2
   8243e:	2200      	movne	r2, #0
   82440:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82444:	f000 b800 	b.w	82448 <setvbuf>

00082448 <setvbuf>:
   82448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8244c:	4d51      	ldr	r5, [pc, #324]	; (82594 <setvbuf+0x14c>)
   8244e:	b083      	sub	sp, #12
   82450:	682d      	ldr	r5, [r5, #0]
   82452:	4604      	mov	r4, r0
   82454:	460f      	mov	r7, r1
   82456:	4690      	mov	r8, r2
   82458:	461e      	mov	r6, r3
   8245a:	b115      	cbz	r5, 82462 <setvbuf+0x1a>
   8245c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8245e:	2b00      	cmp	r3, #0
   82460:	d079      	beq.n	82556 <setvbuf+0x10e>
   82462:	f1b8 0f02 	cmp.w	r8, #2
   82466:	d004      	beq.n	82472 <setvbuf+0x2a>
   82468:	f1b8 0f01 	cmp.w	r8, #1
   8246c:	d87f      	bhi.n	8256e <setvbuf+0x126>
   8246e:	2e00      	cmp	r6, #0
   82470:	db7d      	blt.n	8256e <setvbuf+0x126>
   82472:	4621      	mov	r1, r4
   82474:	4628      	mov	r0, r5
   82476:	f001 f9cd 	bl	83814 <_fflush_r>
   8247a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8247c:	b141      	cbz	r1, 82490 <setvbuf+0x48>
   8247e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82482:	4299      	cmp	r1, r3
   82484:	d002      	beq.n	8248c <setvbuf+0x44>
   82486:	4628      	mov	r0, r5
   82488:	f001 fb20 	bl	83acc <_free_r>
   8248c:	2300      	movs	r3, #0
   8248e:	6323      	str	r3, [r4, #48]	; 0x30
   82490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82494:	2200      	movs	r2, #0
   82496:	61a2      	str	r2, [r4, #24]
   82498:	6062      	str	r2, [r4, #4]
   8249a:	061a      	lsls	r2, r3, #24
   8249c:	d454      	bmi.n	82548 <setvbuf+0x100>
   8249e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   824a2:	f023 0303 	bic.w	r3, r3, #3
   824a6:	f1b8 0f02 	cmp.w	r8, #2
   824aa:	81a3      	strh	r3, [r4, #12]
   824ac:	d039      	beq.n	82522 <setvbuf+0xda>
   824ae:	ab01      	add	r3, sp, #4
   824b0:	466a      	mov	r2, sp
   824b2:	4621      	mov	r1, r4
   824b4:	4628      	mov	r0, r5
   824b6:	f001 fda7 	bl	84008 <__swhatbuf_r>
   824ba:	89a3      	ldrh	r3, [r4, #12]
   824bc:	4318      	orrs	r0, r3
   824be:	81a0      	strh	r0, [r4, #12]
   824c0:	b326      	cbz	r6, 8250c <setvbuf+0xc4>
   824c2:	b327      	cbz	r7, 8250e <setvbuf+0xc6>
   824c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   824c6:	2b00      	cmp	r3, #0
   824c8:	d04d      	beq.n	82566 <setvbuf+0x11e>
   824ca:	9b00      	ldr	r3, [sp, #0]
   824cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   824d0:	429e      	cmp	r6, r3
   824d2:	bf1c      	itt	ne
   824d4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   824d8:	81a0      	strhne	r0, [r4, #12]
   824da:	f1b8 0f01 	cmp.w	r8, #1
   824de:	bf08      	it	eq
   824e0:	f040 0001 	orreq.w	r0, r0, #1
   824e4:	b283      	uxth	r3, r0
   824e6:	bf08      	it	eq
   824e8:	81a0      	strheq	r0, [r4, #12]
   824ea:	f003 0008 	and.w	r0, r3, #8
   824ee:	b280      	uxth	r0, r0
   824f0:	6027      	str	r7, [r4, #0]
   824f2:	6127      	str	r7, [r4, #16]
   824f4:	6166      	str	r6, [r4, #20]
   824f6:	b318      	cbz	r0, 82540 <setvbuf+0xf8>
   824f8:	f013 0001 	ands.w	r0, r3, #1
   824fc:	d02f      	beq.n	8255e <setvbuf+0x116>
   824fe:	2000      	movs	r0, #0
   82500:	4276      	negs	r6, r6
   82502:	61a6      	str	r6, [r4, #24]
   82504:	60a0      	str	r0, [r4, #8]
   82506:	b003      	add	sp, #12
   82508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8250c:	9e00      	ldr	r6, [sp, #0]
   8250e:	4630      	mov	r0, r6
   82510:	f001 fdee 	bl	840f0 <malloc>
   82514:	4607      	mov	r7, r0
   82516:	b368      	cbz	r0, 82574 <setvbuf+0x12c>
   82518:	89a3      	ldrh	r3, [r4, #12]
   8251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8251e:	81a3      	strh	r3, [r4, #12]
   82520:	e7d0      	b.n	824c4 <setvbuf+0x7c>
   82522:	2000      	movs	r0, #0
   82524:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82528:	f043 0302 	orr.w	r3, r3, #2
   8252c:	2500      	movs	r5, #0
   8252e:	2101      	movs	r1, #1
   82530:	81a3      	strh	r3, [r4, #12]
   82532:	60a5      	str	r5, [r4, #8]
   82534:	6022      	str	r2, [r4, #0]
   82536:	6122      	str	r2, [r4, #16]
   82538:	6161      	str	r1, [r4, #20]
   8253a:	b003      	add	sp, #12
   8253c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82540:	60a0      	str	r0, [r4, #8]
   82542:	b003      	add	sp, #12
   82544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82548:	6921      	ldr	r1, [r4, #16]
   8254a:	4628      	mov	r0, r5
   8254c:	f001 fabe 	bl	83acc <_free_r>
   82550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82554:	e7a3      	b.n	8249e <setvbuf+0x56>
   82556:	4628      	mov	r0, r5
   82558:	f001 f9f0 	bl	8393c <__sinit>
   8255c:	e781      	b.n	82462 <setvbuf+0x1a>
   8255e:	60a6      	str	r6, [r4, #8]
   82560:	b003      	add	sp, #12
   82562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82566:	4628      	mov	r0, r5
   82568:	f001 f9e8 	bl	8393c <__sinit>
   8256c:	e7ad      	b.n	824ca <setvbuf+0x82>
   8256e:	f04f 30ff 	mov.w	r0, #4294967295
   82572:	e7e2      	b.n	8253a <setvbuf+0xf2>
   82574:	f8dd 9000 	ldr.w	r9, [sp]
   82578:	45b1      	cmp	r9, r6
   8257a:	d006      	beq.n	8258a <setvbuf+0x142>
   8257c:	4648      	mov	r0, r9
   8257e:	f001 fdb7 	bl	840f0 <malloc>
   82582:	4607      	mov	r7, r0
   82584:	b108      	cbz	r0, 8258a <setvbuf+0x142>
   82586:	464e      	mov	r6, r9
   82588:	e7c6      	b.n	82518 <setvbuf+0xd0>
   8258a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8258e:	f04f 30ff 	mov.w	r0, #4294967295
   82592:	e7c7      	b.n	82524 <setvbuf+0xdc>
   82594:	20070568 	.word	0x20070568

00082598 <strcpy>:
   82598:	ea80 0201 	eor.w	r2, r0, r1
   8259c:	4684      	mov	ip, r0
   8259e:	f012 0f03 	tst.w	r2, #3
   825a2:	d14f      	bne.n	82644 <strcpy+0xac>
   825a4:	f011 0f03 	tst.w	r1, #3
   825a8:	d132      	bne.n	82610 <strcpy+0x78>
   825aa:	f84d 4d04 	str.w	r4, [sp, #-4]!
   825ae:	f011 0f04 	tst.w	r1, #4
   825b2:	f851 3b04 	ldr.w	r3, [r1], #4
   825b6:	d00b      	beq.n	825d0 <strcpy+0x38>
   825b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   825bc:	439a      	bics	r2, r3
   825be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   825c2:	bf04      	itt	eq
   825c4:	f84c 3b04 	streq.w	r3, [ip], #4
   825c8:	f851 3b04 	ldreq.w	r3, [r1], #4
   825cc:	d116      	bne.n	825fc <strcpy+0x64>
   825ce:	bf00      	nop
   825d0:	f851 4b04 	ldr.w	r4, [r1], #4
   825d4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   825d8:	439a      	bics	r2, r3
   825da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   825de:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   825e2:	d10b      	bne.n	825fc <strcpy+0x64>
   825e4:	f84c 3b04 	str.w	r3, [ip], #4
   825e8:	43a2      	bics	r2, r4
   825ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   825ee:	bf04      	itt	eq
   825f0:	f851 3b04 	ldreq.w	r3, [r1], #4
   825f4:	f84c 4b04 	streq.w	r4, [ip], #4
   825f8:	d0ea      	beq.n	825d0 <strcpy+0x38>
   825fa:	4623      	mov	r3, r4
   825fc:	f80c 3b01 	strb.w	r3, [ip], #1
   82600:	f013 0fff 	tst.w	r3, #255	; 0xff
   82604:	ea4f 2333 	mov.w	r3, r3, ror #8
   82608:	d1f8      	bne.n	825fc <strcpy+0x64>
   8260a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8260e:	4770      	bx	lr
   82610:	f011 0f01 	tst.w	r1, #1
   82614:	d006      	beq.n	82624 <strcpy+0x8c>
   82616:	f811 2b01 	ldrb.w	r2, [r1], #1
   8261a:	f80c 2b01 	strb.w	r2, [ip], #1
   8261e:	2a00      	cmp	r2, #0
   82620:	bf08      	it	eq
   82622:	4770      	bxeq	lr
   82624:	f011 0f02 	tst.w	r1, #2
   82628:	d0bf      	beq.n	825aa <strcpy+0x12>
   8262a:	f831 2b02 	ldrh.w	r2, [r1], #2
   8262e:	f012 0fff 	tst.w	r2, #255	; 0xff
   82632:	bf16      	itet	ne
   82634:	f82c 2b02 	strhne.w	r2, [ip], #2
   82638:	f88c 2000 	strbeq.w	r2, [ip]
   8263c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   82640:	d1b3      	bne.n	825aa <strcpy+0x12>
   82642:	4770      	bx	lr
   82644:	f811 2b01 	ldrb.w	r2, [r1], #1
   82648:	f80c 2b01 	strb.w	r2, [ip], #1
   8264c:	2a00      	cmp	r2, #0
   8264e:	d1f9      	bne.n	82644 <strcpy+0xac>
   82650:	4770      	bx	lr
   82652:	bf00      	nop

00082654 <strlen>:
   82654:	f020 0103 	bic.w	r1, r0, #3
   82658:	f010 0003 	ands.w	r0, r0, #3
   8265c:	f1c0 0000 	rsb	r0, r0, #0
   82660:	f851 3b04 	ldr.w	r3, [r1], #4
   82664:	f100 0c04 	add.w	ip, r0, #4
   82668:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8266c:	f06f 0200 	mvn.w	r2, #0
   82670:	bf1c      	itt	ne
   82672:	fa22 f20c 	lsrne.w	r2, r2, ip
   82676:	4313      	orrne	r3, r2
   82678:	f04f 0c01 	mov.w	ip, #1
   8267c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82680:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82684:	eba3 020c 	sub.w	r2, r3, ip
   82688:	ea22 0203 	bic.w	r2, r2, r3
   8268c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82690:	bf04      	itt	eq
   82692:	f851 3b04 	ldreq.w	r3, [r1], #4
   82696:	3004      	addeq	r0, #4
   82698:	d0f4      	beq.n	82684 <strlen+0x30>
   8269a:	f1c2 0100 	rsb	r1, r2, #0
   8269e:	ea02 0201 	and.w	r2, r2, r1
   826a2:	fab2 f282 	clz	r2, r2
   826a6:	f1c2 021f 	rsb	r2, r2, #31
   826aa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   826ae:	4770      	bx	lr

000826b0 <strncpy>:
   826b0:	ea40 0301 	orr.w	r3, r0, r1
   826b4:	079b      	lsls	r3, r3, #30
   826b6:	b470      	push	{r4, r5, r6}
   826b8:	d12b      	bne.n	82712 <strncpy+0x62>
   826ba:	2a03      	cmp	r2, #3
   826bc:	d929      	bls.n	82712 <strncpy+0x62>
   826be:	460c      	mov	r4, r1
   826c0:	4603      	mov	r3, r0
   826c2:	4621      	mov	r1, r4
   826c4:	f854 6b04 	ldr.w	r6, [r4], #4
   826c8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   826cc:	ea25 0506 	bic.w	r5, r5, r6
   826d0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   826d4:	d106      	bne.n	826e4 <strncpy+0x34>
   826d6:	3a04      	subs	r2, #4
   826d8:	2a03      	cmp	r2, #3
   826da:	f843 6b04 	str.w	r6, [r3], #4
   826de:	4621      	mov	r1, r4
   826e0:	d8ef      	bhi.n	826c2 <strncpy+0x12>
   826e2:	b1a2      	cbz	r2, 8270e <strncpy+0x5e>
   826e4:	780c      	ldrb	r4, [r1, #0]
   826e6:	3a01      	subs	r2, #1
   826e8:	701c      	strb	r4, [r3, #0]
   826ea:	3101      	adds	r1, #1
   826ec:	3301      	adds	r3, #1
   826ee:	b13c      	cbz	r4, 82700 <strncpy+0x50>
   826f0:	b16a      	cbz	r2, 8270e <strncpy+0x5e>
   826f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   826f6:	3a01      	subs	r2, #1
   826f8:	f803 4b01 	strb.w	r4, [r3], #1
   826fc:	2c00      	cmp	r4, #0
   826fe:	d1f7      	bne.n	826f0 <strncpy+0x40>
   82700:	b12a      	cbz	r2, 8270e <strncpy+0x5e>
   82702:	441a      	add	r2, r3
   82704:	2100      	movs	r1, #0
   82706:	f803 1b01 	strb.w	r1, [r3], #1
   8270a:	429a      	cmp	r2, r3
   8270c:	d1fb      	bne.n	82706 <strncpy+0x56>
   8270e:	bc70      	pop	{r4, r5, r6}
   82710:	4770      	bx	lr
   82712:	4603      	mov	r3, r0
   82714:	e7e5      	b.n	826e2 <strncpy+0x32>
   82716:	bf00      	nop

00082718 <__sprint_r.part.0>:
   82718:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8271a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8271e:	049c      	lsls	r4, r3, #18
   82720:	4692      	mov	sl, r2
   82722:	d52c      	bpl.n	8277e <__sprint_r.part.0+0x66>
   82724:	6893      	ldr	r3, [r2, #8]
   82726:	6812      	ldr	r2, [r2, #0]
   82728:	b33b      	cbz	r3, 8277a <__sprint_r.part.0+0x62>
   8272a:	460f      	mov	r7, r1
   8272c:	4680      	mov	r8, r0
   8272e:	f102 0908 	add.w	r9, r2, #8
   82732:	e919 0060 	ldmdb	r9, {r5, r6}
   82736:	08b6      	lsrs	r6, r6, #2
   82738:	d017      	beq.n	8276a <__sprint_r.part.0+0x52>
   8273a:	3d04      	subs	r5, #4
   8273c:	2400      	movs	r4, #0
   8273e:	e001      	b.n	82744 <__sprint_r.part.0+0x2c>
   82740:	42a6      	cmp	r6, r4
   82742:	d010      	beq.n	82766 <__sprint_r.part.0+0x4e>
   82744:	463a      	mov	r2, r7
   82746:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8274a:	4640      	mov	r0, r8
   8274c:	f001 f95e 	bl	83a0c <_fputwc_r>
   82750:	1c43      	adds	r3, r0, #1
   82752:	f104 0401 	add.w	r4, r4, #1
   82756:	d1f3      	bne.n	82740 <__sprint_r.part.0+0x28>
   82758:	2300      	movs	r3, #0
   8275a:	f8ca 3008 	str.w	r3, [sl, #8]
   8275e:	f8ca 3004 	str.w	r3, [sl, #4]
   82762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82766:	f8da 3008 	ldr.w	r3, [sl, #8]
   8276a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   8276e:	f8ca 3008 	str.w	r3, [sl, #8]
   82772:	f109 0908 	add.w	r9, r9, #8
   82776:	2b00      	cmp	r3, #0
   82778:	d1db      	bne.n	82732 <__sprint_r.part.0+0x1a>
   8277a:	2000      	movs	r0, #0
   8277c:	e7ec      	b.n	82758 <__sprint_r.part.0+0x40>
   8277e:	f001 fa8d 	bl	83c9c <__sfvwrite_r>
   82782:	2300      	movs	r3, #0
   82784:	f8ca 3008 	str.w	r3, [sl, #8]
   82788:	f8ca 3004 	str.w	r3, [sl, #4]
   8278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082790 <_vfiprintf_r>:
   82790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82794:	b0ab      	sub	sp, #172	; 0xac
   82796:	461c      	mov	r4, r3
   82798:	9100      	str	r1, [sp, #0]
   8279a:	4690      	mov	r8, r2
   8279c:	9304      	str	r3, [sp, #16]
   8279e:	9005      	str	r0, [sp, #20]
   827a0:	b118      	cbz	r0, 827aa <_vfiprintf_r+0x1a>
   827a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   827a4:	2b00      	cmp	r3, #0
   827a6:	f000 80de 	beq.w	82966 <_vfiprintf_r+0x1d6>
   827aa:	9800      	ldr	r0, [sp, #0]
   827ac:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   827b0:	b28a      	uxth	r2, r1
   827b2:	0495      	lsls	r5, r2, #18
   827b4:	d407      	bmi.n	827c6 <_vfiprintf_r+0x36>
   827b6:	6e43      	ldr	r3, [r0, #100]	; 0x64
   827b8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   827bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   827c0:	8182      	strh	r2, [r0, #12]
   827c2:	6643      	str	r3, [r0, #100]	; 0x64
   827c4:	b292      	uxth	r2, r2
   827c6:	0711      	lsls	r1, r2, #28
   827c8:	f140 80b1 	bpl.w	8292e <_vfiprintf_r+0x19e>
   827cc:	9b00      	ldr	r3, [sp, #0]
   827ce:	691b      	ldr	r3, [r3, #16]
   827d0:	2b00      	cmp	r3, #0
   827d2:	f000 80ac 	beq.w	8292e <_vfiprintf_r+0x19e>
   827d6:	f002 021a 	and.w	r2, r2, #26
   827da:	2a0a      	cmp	r2, #10
   827dc:	f000 80b5 	beq.w	8294a <_vfiprintf_r+0x1ba>
   827e0:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   827e4:	46d3      	mov	fp, sl
   827e6:	2300      	movs	r3, #0
   827e8:	9302      	str	r3, [sp, #8]
   827ea:	930f      	str	r3, [sp, #60]	; 0x3c
   827ec:	930e      	str	r3, [sp, #56]	; 0x38
   827ee:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   827f2:	f898 3000 	ldrb.w	r3, [r8]
   827f6:	4644      	mov	r4, r8
   827f8:	b1fb      	cbz	r3, 8283a <_vfiprintf_r+0xaa>
   827fa:	2b25      	cmp	r3, #37	; 0x25
   827fc:	d102      	bne.n	82804 <_vfiprintf_r+0x74>
   827fe:	e01c      	b.n	8283a <_vfiprintf_r+0xaa>
   82800:	2b25      	cmp	r3, #37	; 0x25
   82802:	d003      	beq.n	8280c <_vfiprintf_r+0x7c>
   82804:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82808:	2b00      	cmp	r3, #0
   8280a:	d1f9      	bne.n	82800 <_vfiprintf_r+0x70>
   8280c:	ebc8 0504 	rsb	r5, r8, r4
   82810:	b19d      	cbz	r5, 8283a <_vfiprintf_r+0xaa>
   82812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82816:	3301      	adds	r3, #1
   82818:	442a      	add	r2, r5
   8281a:	2b07      	cmp	r3, #7
   8281c:	f8cb 8000 	str.w	r8, [fp]
   82820:	f8cb 5004 	str.w	r5, [fp, #4]
   82824:	920f      	str	r2, [sp, #60]	; 0x3c
   82826:	930e      	str	r3, [sp, #56]	; 0x38
   82828:	dd7b      	ble.n	82922 <_vfiprintf_r+0x192>
   8282a:	2a00      	cmp	r2, #0
   8282c:	f040 851f 	bne.w	8326e <_vfiprintf_r+0xade>
   82830:	46d3      	mov	fp, sl
   82832:	9b02      	ldr	r3, [sp, #8]
   82834:	920e      	str	r2, [sp, #56]	; 0x38
   82836:	442b      	add	r3, r5
   82838:	9302      	str	r3, [sp, #8]
   8283a:	7823      	ldrb	r3, [r4, #0]
   8283c:	2b00      	cmp	r3, #0
   8283e:	f000 843b 	beq.w	830b8 <_vfiprintf_r+0x928>
   82842:	f04f 0300 	mov.w	r3, #0
   82846:	2100      	movs	r1, #0
   82848:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8284c:	f104 0801 	add.w	r8, r4, #1
   82850:	7863      	ldrb	r3, [r4, #1]
   82852:	4608      	mov	r0, r1
   82854:	460e      	mov	r6, r1
   82856:	460c      	mov	r4, r1
   82858:	f04f 32ff 	mov.w	r2, #4294967295
   8285c:	9201      	str	r2, [sp, #4]
   8285e:	f108 0801 	add.w	r8, r8, #1
   82862:	f1a3 0220 	sub.w	r2, r3, #32
   82866:	2a58      	cmp	r2, #88	; 0x58
   82868:	f200 838b 	bhi.w	82f82 <_vfiprintf_r+0x7f2>
   8286c:	e8df f012 	tbh	[pc, r2, lsl #1]
   82870:	0389033d 	.word	0x0389033d
   82874:	03450389 	.word	0x03450389
   82878:	03890389 	.word	0x03890389
   8287c:	03890389 	.word	0x03890389
   82880:	03890389 	.word	0x03890389
   82884:	026b007e 	.word	0x026b007e
   82888:	00860389 	.word	0x00860389
   8288c:	03890270 	.word	0x03890270
   82890:	025d01cc 	.word	0x025d01cc
   82894:	025d025d 	.word	0x025d025d
   82898:	025d025d 	.word	0x025d025d
   8289c:	025d025d 	.word	0x025d025d
   828a0:	025d025d 	.word	0x025d025d
   828a4:	03890389 	.word	0x03890389
   828a8:	03890389 	.word	0x03890389
   828ac:	03890389 	.word	0x03890389
   828b0:	03890389 	.word	0x03890389
   828b4:	03890389 	.word	0x03890389
   828b8:	038901d1 	.word	0x038901d1
   828bc:	03890389 	.word	0x03890389
   828c0:	03890389 	.word	0x03890389
   828c4:	03890389 	.word	0x03890389
   828c8:	03890389 	.word	0x03890389
   828cc:	021a0389 	.word	0x021a0389
   828d0:	03890389 	.word	0x03890389
   828d4:	03890389 	.word	0x03890389
   828d8:	02e50389 	.word	0x02e50389
   828dc:	03890389 	.word	0x03890389
   828e0:	03890308 	.word	0x03890308
   828e4:	03890389 	.word	0x03890389
   828e8:	03890389 	.word	0x03890389
   828ec:	03890389 	.word	0x03890389
   828f0:	03890389 	.word	0x03890389
   828f4:	032b0389 	.word	0x032b0389
   828f8:	03890382 	.word	0x03890382
   828fc:	03890389 	.word	0x03890389
   82900:	0382035e 	.word	0x0382035e
   82904:	03890389 	.word	0x03890389
   82908:	03890363 	.word	0x03890363
   8290c:	028d0370 	.word	0x028d0370
   82910:	02e0008b 	.word	0x02e0008b
   82914:	02930389 	.word	0x02930389
   82918:	02b20389 	.word	0x02b20389
   8291c:	03890389 	.word	0x03890389
   82920:	034a      	.short	0x034a
   82922:	f10b 0b08 	add.w	fp, fp, #8
   82926:	9b02      	ldr	r3, [sp, #8]
   82928:	442b      	add	r3, r5
   8292a:	9302      	str	r3, [sp, #8]
   8292c:	e785      	b.n	8283a <_vfiprintf_r+0xaa>
   8292e:	9900      	ldr	r1, [sp, #0]
   82930:	9805      	ldr	r0, [sp, #20]
   82932:	f000 fe57 	bl	835e4 <__swsetup_r>
   82936:	2800      	cmp	r0, #0
   82938:	f040 8545 	bne.w	833c6 <_vfiprintf_r+0xc36>
   8293c:	9b00      	ldr	r3, [sp, #0]
   8293e:	899a      	ldrh	r2, [r3, #12]
   82940:	f002 021a 	and.w	r2, r2, #26
   82944:	2a0a      	cmp	r2, #10
   82946:	f47f af4b 	bne.w	827e0 <_vfiprintf_r+0x50>
   8294a:	9900      	ldr	r1, [sp, #0]
   8294c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   82950:	2b00      	cmp	r3, #0
   82952:	f6ff af45 	blt.w	827e0 <_vfiprintf_r+0x50>
   82956:	4623      	mov	r3, r4
   82958:	4642      	mov	r2, r8
   8295a:	9805      	ldr	r0, [sp, #20]
   8295c:	f000 fe0c 	bl	83578 <__sbprintf>
   82960:	b02b      	add	sp, #172	; 0xac
   82962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82966:	f000 ffe9 	bl	8393c <__sinit>
   8296a:	e71e      	b.n	827aa <_vfiprintf_r+0x1a>
   8296c:	9a04      	ldr	r2, [sp, #16]
   8296e:	4613      	mov	r3, r2
   82970:	6814      	ldr	r4, [r2, #0]
   82972:	3304      	adds	r3, #4
   82974:	2c00      	cmp	r4, #0
   82976:	9304      	str	r3, [sp, #16]
   82978:	da02      	bge.n	82980 <_vfiprintf_r+0x1f0>
   8297a:	4264      	negs	r4, r4
   8297c:	f046 0604 	orr.w	r6, r6, #4
   82980:	f898 3000 	ldrb.w	r3, [r8]
   82984:	e76b      	b.n	8285e <_vfiprintf_r+0xce>
   82986:	f04f 0300 	mov.w	r3, #0
   8298a:	9804      	ldr	r0, [sp, #16]
   8298c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82990:	4603      	mov	r3, r0
   82992:	2130      	movs	r1, #48	; 0x30
   82994:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   82998:	9901      	ldr	r1, [sp, #4]
   8299a:	2278      	movs	r2, #120	; 0x78
   8299c:	2900      	cmp	r1, #0
   8299e:	9406      	str	r4, [sp, #24]
   829a0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   829a4:	6804      	ldr	r4, [r0, #0]
   829a6:	f103 0304 	add.w	r3, r3, #4
   829aa:	f04f 0500 	mov.w	r5, #0
   829ae:	f046 0202 	orr.w	r2, r6, #2
   829b2:	f2c0 850c 	blt.w	833ce <_vfiprintf_r+0xc3e>
   829b6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   829ba:	ea54 0205 	orrs.w	r2, r4, r5
   829be:	f046 0602 	orr.w	r6, r6, #2
   829c2:	9304      	str	r3, [sp, #16]
   829c4:	f040 84b5 	bne.w	83332 <_vfiprintf_r+0xba2>
   829c8:	48b3      	ldr	r0, [pc, #716]	; (82c98 <_vfiprintf_r+0x508>)
   829ca:	9b01      	ldr	r3, [sp, #4]
   829cc:	2b00      	cmp	r3, #0
   829ce:	f040 8462 	bne.w	83296 <_vfiprintf_r+0xb06>
   829d2:	4699      	mov	r9, r3
   829d4:	4657      	mov	r7, sl
   829d6:	2300      	movs	r3, #0
   829d8:	9301      	str	r3, [sp, #4]
   829da:	9303      	str	r3, [sp, #12]
   829dc:	9b01      	ldr	r3, [sp, #4]
   829de:	9a03      	ldr	r2, [sp, #12]
   829e0:	4293      	cmp	r3, r2
   829e2:	bfb8      	it	lt
   829e4:	4613      	movlt	r3, r2
   829e6:	461d      	mov	r5, r3
   829e8:	f1b9 0f00 	cmp.w	r9, #0
   829ec:	d000      	beq.n	829f0 <_vfiprintf_r+0x260>
   829ee:	3501      	adds	r5, #1
   829f0:	f016 0302 	ands.w	r3, r6, #2
   829f4:	9307      	str	r3, [sp, #28]
   829f6:	bf18      	it	ne
   829f8:	3502      	addne	r5, #2
   829fa:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   829fe:	9308      	str	r3, [sp, #32]
   82a00:	f040 82e8 	bne.w	82fd4 <_vfiprintf_r+0x844>
   82a04:	9b06      	ldr	r3, [sp, #24]
   82a06:	1b5c      	subs	r4, r3, r5
   82a08:	2c00      	cmp	r4, #0
   82a0a:	f340 82e3 	ble.w	82fd4 <_vfiprintf_r+0x844>
   82a0e:	2c10      	cmp	r4, #16
   82a10:	f340 853c 	ble.w	8348c <_vfiprintf_r+0xcfc>
   82a14:	f8df 9284 	ldr.w	r9, [pc, #644]	; 82c9c <_vfiprintf_r+0x50c>
   82a18:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   82a1c:	46dc      	mov	ip, fp
   82a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a20:	46c3      	mov	fp, r8
   82a22:	2310      	movs	r3, #16
   82a24:	46a8      	mov	r8, r5
   82a26:	4670      	mov	r0, lr
   82a28:	464d      	mov	r5, r9
   82a2a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82a2e:	e007      	b.n	82a40 <_vfiprintf_r+0x2b0>
   82a30:	f100 0e02 	add.w	lr, r0, #2
   82a34:	4608      	mov	r0, r1
   82a36:	f10c 0c08 	add.w	ip, ip, #8
   82a3a:	3c10      	subs	r4, #16
   82a3c:	2c10      	cmp	r4, #16
   82a3e:	dd13      	ble.n	82a68 <_vfiprintf_r+0x2d8>
   82a40:	1c41      	adds	r1, r0, #1
   82a42:	3210      	adds	r2, #16
   82a44:	2907      	cmp	r1, #7
   82a46:	920f      	str	r2, [sp, #60]	; 0x3c
   82a48:	f8cc 5000 	str.w	r5, [ip]
   82a4c:	f8cc 3004 	str.w	r3, [ip, #4]
   82a50:	910e      	str	r1, [sp, #56]	; 0x38
   82a52:	dded      	ble.n	82a30 <_vfiprintf_r+0x2a0>
   82a54:	2a00      	cmp	r2, #0
   82a56:	f040 82a5 	bne.w	82fa4 <_vfiprintf_r+0x814>
   82a5a:	3c10      	subs	r4, #16
   82a5c:	2c10      	cmp	r4, #16
   82a5e:	4610      	mov	r0, r2
   82a60:	f04f 0e01 	mov.w	lr, #1
   82a64:	46d4      	mov	ip, sl
   82a66:	dceb      	bgt.n	82a40 <_vfiprintf_r+0x2b0>
   82a68:	46a9      	mov	r9, r5
   82a6a:	4670      	mov	r0, lr
   82a6c:	4645      	mov	r5, r8
   82a6e:	46d8      	mov	r8, fp
   82a70:	46e3      	mov	fp, ip
   82a72:	4422      	add	r2, r4
   82a74:	2807      	cmp	r0, #7
   82a76:	920f      	str	r2, [sp, #60]	; 0x3c
   82a78:	f8cb 9000 	str.w	r9, [fp]
   82a7c:	f8cb 4004 	str.w	r4, [fp, #4]
   82a80:	900e      	str	r0, [sp, #56]	; 0x38
   82a82:	f300 836d 	bgt.w	83160 <_vfiprintf_r+0x9d0>
   82a86:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   82a8a:	f10b 0b08 	add.w	fp, fp, #8
   82a8e:	f100 0e01 	add.w	lr, r0, #1
   82a92:	2b00      	cmp	r3, #0
   82a94:	f040 82a7 	bne.w	82fe6 <_vfiprintf_r+0x856>
   82a98:	9b07      	ldr	r3, [sp, #28]
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	f000 82ba 	beq.w	83014 <_vfiprintf_r+0x884>
   82aa0:	3202      	adds	r2, #2
   82aa2:	a90c      	add	r1, sp, #48	; 0x30
   82aa4:	2302      	movs	r3, #2
   82aa6:	f1be 0f07 	cmp.w	lr, #7
   82aaa:	920f      	str	r2, [sp, #60]	; 0x3c
   82aac:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82ab0:	e88b 000a 	stmia.w	fp, {r1, r3}
   82ab4:	f340 8370 	ble.w	83198 <_vfiprintf_r+0xa08>
   82ab8:	2a00      	cmp	r2, #0
   82aba:	f040 8400 	bne.w	832be <_vfiprintf_r+0xb2e>
   82abe:	9b08      	ldr	r3, [sp, #32]
   82ac0:	f04f 0e01 	mov.w	lr, #1
   82ac4:	2b80      	cmp	r3, #128	; 0x80
   82ac6:	4610      	mov	r0, r2
   82ac8:	46d3      	mov	fp, sl
   82aca:	f040 82a7 	bne.w	8301c <_vfiprintf_r+0x88c>
   82ace:	9b06      	ldr	r3, [sp, #24]
   82ad0:	1b5c      	subs	r4, r3, r5
   82ad2:	2c00      	cmp	r4, #0
   82ad4:	f340 82a2 	ble.w	8301c <_vfiprintf_r+0x88c>
   82ad8:	2c10      	cmp	r4, #16
   82ada:	f340 84f8 	ble.w	834ce <_vfiprintf_r+0xd3e>
   82ade:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 82ca0 <_vfiprintf_r+0x510>
   82ae2:	46de      	mov	lr, fp
   82ae4:	2310      	movs	r3, #16
   82ae6:	46c3      	mov	fp, r8
   82ae8:	46a8      	mov	r8, r5
   82aea:	464d      	mov	r5, r9
   82aec:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82af0:	e007      	b.n	82b02 <_vfiprintf_r+0x372>
   82af2:	f100 0c02 	add.w	ip, r0, #2
   82af6:	4608      	mov	r0, r1
   82af8:	f10e 0e08 	add.w	lr, lr, #8
   82afc:	3c10      	subs	r4, #16
   82afe:	2c10      	cmp	r4, #16
   82b00:	dd13      	ble.n	82b2a <_vfiprintf_r+0x39a>
   82b02:	1c41      	adds	r1, r0, #1
   82b04:	3210      	adds	r2, #16
   82b06:	2907      	cmp	r1, #7
   82b08:	920f      	str	r2, [sp, #60]	; 0x3c
   82b0a:	f8ce 5000 	str.w	r5, [lr]
   82b0e:	f8ce 3004 	str.w	r3, [lr, #4]
   82b12:	910e      	str	r1, [sp, #56]	; 0x38
   82b14:	dded      	ble.n	82af2 <_vfiprintf_r+0x362>
   82b16:	2a00      	cmp	r2, #0
   82b18:	f040 830c 	bne.w	83134 <_vfiprintf_r+0x9a4>
   82b1c:	3c10      	subs	r4, #16
   82b1e:	2c10      	cmp	r4, #16
   82b20:	f04f 0c01 	mov.w	ip, #1
   82b24:	4610      	mov	r0, r2
   82b26:	46d6      	mov	lr, sl
   82b28:	dceb      	bgt.n	82b02 <_vfiprintf_r+0x372>
   82b2a:	46a9      	mov	r9, r5
   82b2c:	4645      	mov	r5, r8
   82b2e:	46d8      	mov	r8, fp
   82b30:	46f3      	mov	fp, lr
   82b32:	4422      	add	r2, r4
   82b34:	f1bc 0f07 	cmp.w	ip, #7
   82b38:	920f      	str	r2, [sp, #60]	; 0x3c
   82b3a:	f8cb 9000 	str.w	r9, [fp]
   82b3e:	f8cb 4004 	str.w	r4, [fp, #4]
   82b42:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   82b46:	f300 83c8 	bgt.w	832da <_vfiprintf_r+0xb4a>
   82b4a:	9b01      	ldr	r3, [sp, #4]
   82b4c:	9903      	ldr	r1, [sp, #12]
   82b4e:	f10b 0b08 	add.w	fp, fp, #8
   82b52:	1a5c      	subs	r4, r3, r1
   82b54:	2c00      	cmp	r4, #0
   82b56:	f10c 0e01 	add.w	lr, ip, #1
   82b5a:	4660      	mov	r0, ip
   82b5c:	f300 8264 	bgt.w	83028 <_vfiprintf_r+0x898>
   82b60:	9903      	ldr	r1, [sp, #12]
   82b62:	f1be 0f07 	cmp.w	lr, #7
   82b66:	440a      	add	r2, r1
   82b68:	920f      	str	r2, [sp, #60]	; 0x3c
   82b6a:	f8cb 7000 	str.w	r7, [fp]
   82b6e:	f8cb 1004 	str.w	r1, [fp, #4]
   82b72:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82b76:	f340 82c5 	ble.w	83104 <_vfiprintf_r+0x974>
   82b7a:	2a00      	cmp	r2, #0
   82b7c:	f040 8332 	bne.w	831e4 <_vfiprintf_r+0xa54>
   82b80:	0770      	lsls	r0, r6, #29
   82b82:	920e      	str	r2, [sp, #56]	; 0x38
   82b84:	d538      	bpl.n	82bf8 <_vfiprintf_r+0x468>
   82b86:	9b06      	ldr	r3, [sp, #24]
   82b88:	1b5c      	subs	r4, r3, r5
   82b8a:	2c00      	cmp	r4, #0
   82b8c:	dd34      	ble.n	82bf8 <_vfiprintf_r+0x468>
   82b8e:	46d3      	mov	fp, sl
   82b90:	2c10      	cmp	r4, #16
   82b92:	f340 8496 	ble.w	834c2 <_vfiprintf_r+0xd32>
   82b96:	f8df 9104 	ldr.w	r9, [pc, #260]	; 82c9c <_vfiprintf_r+0x50c>
   82b9a:	990e      	ldr	r1, [sp, #56]	; 0x38
   82b9c:	464f      	mov	r7, r9
   82b9e:	2610      	movs	r6, #16
   82ba0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   82ba4:	e006      	b.n	82bb4 <_vfiprintf_r+0x424>
   82ba6:	1c88      	adds	r0, r1, #2
   82ba8:	4619      	mov	r1, r3
   82baa:	f10b 0b08 	add.w	fp, fp, #8
   82bae:	3c10      	subs	r4, #16
   82bb0:	2c10      	cmp	r4, #16
   82bb2:	dd13      	ble.n	82bdc <_vfiprintf_r+0x44c>
   82bb4:	1c4b      	adds	r3, r1, #1
   82bb6:	3210      	adds	r2, #16
   82bb8:	2b07      	cmp	r3, #7
   82bba:	920f      	str	r2, [sp, #60]	; 0x3c
   82bbc:	f8cb 7000 	str.w	r7, [fp]
   82bc0:	f8cb 6004 	str.w	r6, [fp, #4]
   82bc4:	930e      	str	r3, [sp, #56]	; 0x38
   82bc6:	ddee      	ble.n	82ba6 <_vfiprintf_r+0x416>
   82bc8:	2a00      	cmp	r2, #0
   82bca:	f040 8285 	bne.w	830d8 <_vfiprintf_r+0x948>
   82bce:	3c10      	subs	r4, #16
   82bd0:	2c10      	cmp	r4, #16
   82bd2:	f04f 0001 	mov.w	r0, #1
   82bd6:	4611      	mov	r1, r2
   82bd8:	46d3      	mov	fp, sl
   82bda:	dceb      	bgt.n	82bb4 <_vfiprintf_r+0x424>
   82bdc:	46b9      	mov	r9, r7
   82bde:	4422      	add	r2, r4
   82be0:	2807      	cmp	r0, #7
   82be2:	920f      	str	r2, [sp, #60]	; 0x3c
   82be4:	f8cb 9000 	str.w	r9, [fp]
   82be8:	f8cb 4004 	str.w	r4, [fp, #4]
   82bec:	900e      	str	r0, [sp, #56]	; 0x38
   82bee:	f340 8292 	ble.w	83116 <_vfiprintf_r+0x986>
   82bf2:	2a00      	cmp	r2, #0
   82bf4:	f040 840c 	bne.w	83410 <_vfiprintf_r+0xc80>
   82bf8:	9b02      	ldr	r3, [sp, #8]
   82bfa:	9a06      	ldr	r2, [sp, #24]
   82bfc:	42aa      	cmp	r2, r5
   82bfe:	bfac      	ite	ge
   82c00:	189b      	addge	r3, r3, r2
   82c02:	195b      	addlt	r3, r3, r5
   82c04:	9302      	str	r3, [sp, #8]
   82c06:	e290      	b.n	8312a <_vfiprintf_r+0x99a>
   82c08:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   82c0c:	f898 3000 	ldrb.w	r3, [r8]
   82c10:	e625      	b.n	8285e <_vfiprintf_r+0xce>
   82c12:	9406      	str	r4, [sp, #24]
   82c14:	2900      	cmp	r1, #0
   82c16:	f040 8485 	bne.w	83524 <_vfiprintf_r+0xd94>
   82c1a:	f046 0610 	orr.w	r6, r6, #16
   82c1e:	06b3      	lsls	r3, r6, #26
   82c20:	f140 8304 	bpl.w	8322c <_vfiprintf_r+0xa9c>
   82c24:	9904      	ldr	r1, [sp, #16]
   82c26:	3107      	adds	r1, #7
   82c28:	f021 0107 	bic.w	r1, r1, #7
   82c2c:	e9d1 2300 	ldrd	r2, r3, [r1]
   82c30:	4614      	mov	r4, r2
   82c32:	461d      	mov	r5, r3
   82c34:	3108      	adds	r1, #8
   82c36:	9104      	str	r1, [sp, #16]
   82c38:	2a00      	cmp	r2, #0
   82c3a:	f173 0300 	sbcs.w	r3, r3, #0
   82c3e:	f2c0 837c 	blt.w	8333a <_vfiprintf_r+0xbaa>
   82c42:	9b01      	ldr	r3, [sp, #4]
   82c44:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   82c48:	2b00      	cmp	r3, #0
   82c4a:	f2c0 830b 	blt.w	83264 <_vfiprintf_r+0xad4>
   82c4e:	ea54 0305 	orrs.w	r3, r4, r5
   82c52:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82c56:	f000 80de 	beq.w	82e16 <_vfiprintf_r+0x686>
   82c5a:	2d00      	cmp	r5, #0
   82c5c:	bf08      	it	eq
   82c5e:	2c0a      	cmpeq	r4, #10
   82c60:	f0c0 80de 	bcc.w	82e20 <_vfiprintf_r+0x690>
   82c64:	4657      	mov	r7, sl
   82c66:	4620      	mov	r0, r4
   82c68:	4629      	mov	r1, r5
   82c6a:	220a      	movs	r2, #10
   82c6c:	2300      	movs	r3, #0
   82c6e:	f002 f97d 	bl	84f6c <__aeabi_uldivmod>
   82c72:	3230      	adds	r2, #48	; 0x30
   82c74:	f807 2d01 	strb.w	r2, [r7, #-1]!
   82c78:	4620      	mov	r0, r4
   82c7a:	4629      	mov	r1, r5
   82c7c:	2300      	movs	r3, #0
   82c7e:	220a      	movs	r2, #10
   82c80:	f002 f974 	bl	84f6c <__aeabi_uldivmod>
   82c84:	4604      	mov	r4, r0
   82c86:	460d      	mov	r5, r1
   82c88:	ea54 0305 	orrs.w	r3, r4, r5
   82c8c:	d1eb      	bne.n	82c66 <_vfiprintf_r+0x4d6>
   82c8e:	ebc7 030a 	rsb	r3, r7, sl
   82c92:	9303      	str	r3, [sp, #12]
   82c94:	e6a2      	b.n	829dc <_vfiprintf_r+0x24c>
   82c96:	bf00      	nop
   82c98:	00085358 	.word	0x00085358
   82c9c:	00085374 	.word	0x00085374
   82ca0:	00085334 	.word	0x00085334
   82ca4:	9406      	str	r4, [sp, #24]
   82ca6:	2900      	cmp	r1, #0
   82ca8:	f040 8438 	bne.w	8351c <_vfiprintf_r+0xd8c>
   82cac:	f046 0610 	orr.w	r6, r6, #16
   82cb0:	f016 0320 	ands.w	r3, r6, #32
   82cb4:	f000 82a1 	beq.w	831fa <_vfiprintf_r+0xa6a>
   82cb8:	f04f 0200 	mov.w	r2, #0
   82cbc:	9b04      	ldr	r3, [sp, #16]
   82cbe:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   82cc2:	3307      	adds	r3, #7
   82cc4:	f023 0307 	bic.w	r3, r3, #7
   82cc8:	f103 0208 	add.w	r2, r3, #8
   82ccc:	e9d3 4500 	ldrd	r4, r5, [r3]
   82cd0:	9b01      	ldr	r3, [sp, #4]
   82cd2:	9204      	str	r2, [sp, #16]
   82cd4:	2b00      	cmp	r3, #0
   82cd6:	db0a      	blt.n	82cee <_vfiprintf_r+0x55e>
   82cd8:	ea54 0305 	orrs.w	r3, r4, r5
   82cdc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82ce0:	d105      	bne.n	82cee <_vfiprintf_r+0x55e>
   82ce2:	9b01      	ldr	r3, [sp, #4]
   82ce4:	2b00      	cmp	r3, #0
   82ce6:	f000 8427 	beq.w	83538 <_vfiprintf_r+0xda8>
   82cea:	2400      	movs	r4, #0
   82cec:	2500      	movs	r5, #0
   82cee:	f04f 0900 	mov.w	r9, #0
   82cf2:	4657      	mov	r7, sl
   82cf4:	08e2      	lsrs	r2, r4, #3
   82cf6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82cfa:	08e9      	lsrs	r1, r5, #3
   82cfc:	f004 0307 	and.w	r3, r4, #7
   82d00:	460d      	mov	r5, r1
   82d02:	4614      	mov	r4, r2
   82d04:	3330      	adds	r3, #48	; 0x30
   82d06:	ea54 0205 	orrs.w	r2, r4, r5
   82d0a:	f807 3d01 	strb.w	r3, [r7, #-1]!
   82d0e:	d1f1      	bne.n	82cf4 <_vfiprintf_r+0x564>
   82d10:	07f4      	lsls	r4, r6, #31
   82d12:	d5bc      	bpl.n	82c8e <_vfiprintf_r+0x4fe>
   82d14:	2b30      	cmp	r3, #48	; 0x30
   82d16:	d0ba      	beq.n	82c8e <_vfiprintf_r+0x4fe>
   82d18:	2230      	movs	r2, #48	; 0x30
   82d1a:	1e7b      	subs	r3, r7, #1
   82d1c:	f807 2c01 	strb.w	r2, [r7, #-1]
   82d20:	ebc3 020a 	rsb	r2, r3, sl
   82d24:	9203      	str	r2, [sp, #12]
   82d26:	461f      	mov	r7, r3
   82d28:	e658      	b.n	829dc <_vfiprintf_r+0x24c>
   82d2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82d2e:	2400      	movs	r4, #0
   82d30:	f818 3b01 	ldrb.w	r3, [r8], #1
   82d34:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82d38:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   82d3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82d40:	2a09      	cmp	r2, #9
   82d42:	d9f5      	bls.n	82d30 <_vfiprintf_r+0x5a0>
   82d44:	e58d      	b.n	82862 <_vfiprintf_r+0xd2>
   82d46:	f898 3000 	ldrb.w	r3, [r8]
   82d4a:	2101      	movs	r1, #1
   82d4c:	202b      	movs	r0, #43	; 0x2b
   82d4e:	e586      	b.n	8285e <_vfiprintf_r+0xce>
   82d50:	f898 3000 	ldrb.w	r3, [r8]
   82d54:	f108 0501 	add.w	r5, r8, #1
   82d58:	2b2a      	cmp	r3, #42	; 0x2a
   82d5a:	f000 83cc 	beq.w	834f6 <_vfiprintf_r+0xd66>
   82d5e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82d62:	2a09      	cmp	r2, #9
   82d64:	46a8      	mov	r8, r5
   82d66:	bf98      	it	ls
   82d68:	2500      	movls	r5, #0
   82d6a:	f200 83b5 	bhi.w	834d8 <_vfiprintf_r+0xd48>
   82d6e:	f818 3b01 	ldrb.w	r3, [r8], #1
   82d72:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82d76:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82d7a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82d7e:	2a09      	cmp	r2, #9
   82d80:	d9f5      	bls.n	82d6e <_vfiprintf_r+0x5de>
   82d82:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   82d86:	9201      	str	r2, [sp, #4]
   82d88:	e56b      	b.n	82862 <_vfiprintf_r+0xd2>
   82d8a:	9406      	str	r4, [sp, #24]
   82d8c:	2900      	cmp	r1, #0
   82d8e:	d08f      	beq.n	82cb0 <_vfiprintf_r+0x520>
   82d90:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   82d94:	e78c      	b.n	82cb0 <_vfiprintf_r+0x520>
   82d96:	f04f 0300 	mov.w	r3, #0
   82d9a:	9a04      	ldr	r2, [sp, #16]
   82d9c:	9406      	str	r4, [sp, #24]
   82d9e:	6817      	ldr	r7, [r2, #0]
   82da0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82da4:	1d14      	adds	r4, r2, #4
   82da6:	9b01      	ldr	r3, [sp, #4]
   82da8:	2f00      	cmp	r7, #0
   82daa:	f000 837f 	beq.w	834ac <_vfiprintf_r+0xd1c>
   82dae:	2b00      	cmp	r3, #0
   82db0:	f2c0 8353 	blt.w	8345a <_vfiprintf_r+0xcca>
   82db4:	461a      	mov	r2, r3
   82db6:	2100      	movs	r1, #0
   82db8:	4638      	mov	r0, r7
   82dba:	f001 fc4d 	bl	84658 <memchr>
   82dbe:	2800      	cmp	r0, #0
   82dc0:	f000 838e 	beq.w	834e0 <_vfiprintf_r+0xd50>
   82dc4:	1bc3      	subs	r3, r0, r7
   82dc6:	9303      	str	r3, [sp, #12]
   82dc8:	2300      	movs	r3, #0
   82dca:	9404      	str	r4, [sp, #16]
   82dcc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   82dd0:	9301      	str	r3, [sp, #4]
   82dd2:	e603      	b.n	829dc <_vfiprintf_r+0x24c>
   82dd4:	9406      	str	r4, [sp, #24]
   82dd6:	2900      	cmp	r1, #0
   82dd8:	f040 839d 	bne.w	83516 <_vfiprintf_r+0xd86>
   82ddc:	f016 0920 	ands.w	r9, r6, #32
   82de0:	d134      	bne.n	82e4c <_vfiprintf_r+0x6bc>
   82de2:	f016 0310 	ands.w	r3, r6, #16
   82de6:	d103      	bne.n	82df0 <_vfiprintf_r+0x660>
   82de8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   82dec:	f040 831f 	bne.w	8342e <_vfiprintf_r+0xc9e>
   82df0:	9a04      	ldr	r2, [sp, #16]
   82df2:	2500      	movs	r5, #0
   82df4:	4613      	mov	r3, r2
   82df6:	6814      	ldr	r4, [r2, #0]
   82df8:	9a01      	ldr	r2, [sp, #4]
   82dfa:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   82dfe:	2a00      	cmp	r2, #0
   82e00:	f103 0304 	add.w	r3, r3, #4
   82e04:	f2c0 8327 	blt.w	83456 <_vfiprintf_r+0xcc6>
   82e08:	ea54 0205 	orrs.w	r2, r4, r5
   82e0c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82e10:	9304      	str	r3, [sp, #16]
   82e12:	f47f af22 	bne.w	82c5a <_vfiprintf_r+0x4ca>
   82e16:	9b01      	ldr	r3, [sp, #4]
   82e18:	2b00      	cmp	r3, #0
   82e1a:	f43f addb 	beq.w	829d4 <_vfiprintf_r+0x244>
   82e1e:	2400      	movs	r4, #0
   82e20:	af2a      	add	r7, sp, #168	; 0xa8
   82e22:	3430      	adds	r4, #48	; 0x30
   82e24:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82e28:	ebc7 030a 	rsb	r3, r7, sl
   82e2c:	9303      	str	r3, [sp, #12]
   82e2e:	e5d5      	b.n	829dc <_vfiprintf_r+0x24c>
   82e30:	f046 0620 	orr.w	r6, r6, #32
   82e34:	f898 3000 	ldrb.w	r3, [r8]
   82e38:	e511      	b.n	8285e <_vfiprintf_r+0xce>
   82e3a:	9406      	str	r4, [sp, #24]
   82e3c:	2900      	cmp	r1, #0
   82e3e:	f040 8375 	bne.w	8352c <_vfiprintf_r+0xd9c>
   82e42:	f046 0610 	orr.w	r6, r6, #16
   82e46:	f016 0920 	ands.w	r9, r6, #32
   82e4a:	d0ca      	beq.n	82de2 <_vfiprintf_r+0x652>
   82e4c:	f04f 0200 	mov.w	r2, #0
   82e50:	9b04      	ldr	r3, [sp, #16]
   82e52:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   82e56:	3307      	adds	r3, #7
   82e58:	f023 0307 	bic.w	r3, r3, #7
   82e5c:	f103 0208 	add.w	r2, r3, #8
   82e60:	e9d3 4500 	ldrd	r4, r5, [r3]
   82e64:	9b01      	ldr	r3, [sp, #4]
   82e66:	9204      	str	r2, [sp, #16]
   82e68:	2b00      	cmp	r3, #0
   82e6a:	f2c0 81f9 	blt.w	83260 <_vfiprintf_r+0xad0>
   82e6e:	ea54 0305 	orrs.w	r3, r4, r5
   82e72:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82e76:	f04f 0900 	mov.w	r9, #0
   82e7a:	f47f aeee 	bne.w	82c5a <_vfiprintf_r+0x4ca>
   82e7e:	e7ca      	b.n	82e16 <_vfiprintf_r+0x686>
   82e80:	9406      	str	r4, [sp, #24]
   82e82:	2900      	cmp	r1, #0
   82e84:	f040 8355 	bne.w	83532 <_vfiprintf_r+0xda2>
   82e88:	06b2      	lsls	r2, r6, #26
   82e8a:	48b2      	ldr	r0, [pc, #712]	; (83154 <_vfiprintf_r+0x9c4>)
   82e8c:	d541      	bpl.n	82f12 <_vfiprintf_r+0x782>
   82e8e:	9a04      	ldr	r2, [sp, #16]
   82e90:	3207      	adds	r2, #7
   82e92:	f022 0207 	bic.w	r2, r2, #7
   82e96:	f102 0108 	add.w	r1, r2, #8
   82e9a:	9104      	str	r1, [sp, #16]
   82e9c:	e9d2 4500 	ldrd	r4, r5, [r2]
   82ea0:	f016 0901 	ands.w	r9, r6, #1
   82ea4:	f000 817e 	beq.w	831a4 <_vfiprintf_r+0xa14>
   82ea8:	ea54 0205 	orrs.w	r2, r4, r5
   82eac:	f040 822b 	bne.w	83306 <_vfiprintf_r+0xb76>
   82eb0:	f04f 0300 	mov.w	r3, #0
   82eb4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82eb8:	9b01      	ldr	r3, [sp, #4]
   82eba:	2b00      	cmp	r3, #0
   82ebc:	f2c0 82f3 	blt.w	834a6 <_vfiprintf_r+0xd16>
   82ec0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   82ec4:	e581      	b.n	829ca <_vfiprintf_r+0x23a>
   82ec6:	9a04      	ldr	r2, [sp, #16]
   82ec8:	f04f 0100 	mov.w	r1, #0
   82ecc:	6813      	ldr	r3, [r2, #0]
   82ece:	2501      	movs	r5, #1
   82ed0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   82ed4:	4613      	mov	r3, r2
   82ed6:	3304      	adds	r3, #4
   82ed8:	9406      	str	r4, [sp, #24]
   82eda:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   82ede:	9304      	str	r3, [sp, #16]
   82ee0:	9503      	str	r5, [sp, #12]
   82ee2:	af10      	add	r7, sp, #64	; 0x40
   82ee4:	2300      	movs	r3, #0
   82ee6:	9301      	str	r3, [sp, #4]
   82ee8:	e582      	b.n	829f0 <_vfiprintf_r+0x260>
   82eea:	f898 3000 	ldrb.w	r3, [r8]
   82eee:	2800      	cmp	r0, #0
   82ef0:	f47f acb5 	bne.w	8285e <_vfiprintf_r+0xce>
   82ef4:	2101      	movs	r1, #1
   82ef6:	2020      	movs	r0, #32
   82ef8:	e4b1      	b.n	8285e <_vfiprintf_r+0xce>
   82efa:	f046 0601 	orr.w	r6, r6, #1
   82efe:	f898 3000 	ldrb.w	r3, [r8]
   82f02:	e4ac      	b.n	8285e <_vfiprintf_r+0xce>
   82f04:	9406      	str	r4, [sp, #24]
   82f06:	2900      	cmp	r1, #0
   82f08:	f040 832a 	bne.w	83560 <_vfiprintf_r+0xdd0>
   82f0c:	06b2      	lsls	r2, r6, #26
   82f0e:	4892      	ldr	r0, [pc, #584]	; (83158 <_vfiprintf_r+0x9c8>)
   82f10:	d4bd      	bmi.n	82e8e <_vfiprintf_r+0x6fe>
   82f12:	9904      	ldr	r1, [sp, #16]
   82f14:	06f7      	lsls	r7, r6, #27
   82f16:	460a      	mov	r2, r1
   82f18:	f100 819d 	bmi.w	83256 <_vfiprintf_r+0xac6>
   82f1c:	0675      	lsls	r5, r6, #25
   82f1e:	f140 819a 	bpl.w	83256 <_vfiprintf_r+0xac6>
   82f22:	3204      	adds	r2, #4
   82f24:	880c      	ldrh	r4, [r1, #0]
   82f26:	9204      	str	r2, [sp, #16]
   82f28:	2500      	movs	r5, #0
   82f2a:	e7b9      	b.n	82ea0 <_vfiprintf_r+0x710>
   82f2c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   82f30:	f898 3000 	ldrb.w	r3, [r8]
   82f34:	e493      	b.n	8285e <_vfiprintf_r+0xce>
   82f36:	f898 3000 	ldrb.w	r3, [r8]
   82f3a:	2b6c      	cmp	r3, #108	; 0x6c
   82f3c:	bf03      	ittte	eq
   82f3e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   82f42:	f046 0620 	orreq.w	r6, r6, #32
   82f46:	f108 0801 	addeq.w	r8, r8, #1
   82f4a:	f046 0610 	orrne.w	r6, r6, #16
   82f4e:	e486      	b.n	8285e <_vfiprintf_r+0xce>
   82f50:	2900      	cmp	r1, #0
   82f52:	f040 8302 	bne.w	8355a <_vfiprintf_r+0xdca>
   82f56:	06b4      	lsls	r4, r6, #26
   82f58:	f140 8220 	bpl.w	8339c <_vfiprintf_r+0xc0c>
   82f5c:	9a04      	ldr	r2, [sp, #16]
   82f5e:	4613      	mov	r3, r2
   82f60:	3304      	adds	r3, #4
   82f62:	9304      	str	r3, [sp, #16]
   82f64:	9b02      	ldr	r3, [sp, #8]
   82f66:	6811      	ldr	r1, [r2, #0]
   82f68:	17dd      	asrs	r5, r3, #31
   82f6a:	461a      	mov	r2, r3
   82f6c:	462b      	mov	r3, r5
   82f6e:	e9c1 2300 	strd	r2, r3, [r1]
   82f72:	e43e      	b.n	827f2 <_vfiprintf_r+0x62>
   82f74:	9406      	str	r4, [sp, #24]
   82f76:	2900      	cmp	r1, #0
   82f78:	f43f ae51 	beq.w	82c1e <_vfiprintf_r+0x48e>
   82f7c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   82f80:	e64d      	b.n	82c1e <_vfiprintf_r+0x48e>
   82f82:	9406      	str	r4, [sp, #24]
   82f84:	2900      	cmp	r1, #0
   82f86:	f040 82e5 	bne.w	83554 <_vfiprintf_r+0xdc4>
   82f8a:	2b00      	cmp	r3, #0
   82f8c:	f000 8094 	beq.w	830b8 <_vfiprintf_r+0x928>
   82f90:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   82f94:	f04f 0300 	mov.w	r3, #0
   82f98:	2501      	movs	r5, #1
   82f9a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   82f9e:	9503      	str	r5, [sp, #12]
   82fa0:	af10      	add	r7, sp, #64	; 0x40
   82fa2:	e79f      	b.n	82ee4 <_vfiprintf_r+0x754>
   82fa4:	aa0d      	add	r2, sp, #52	; 0x34
   82fa6:	9900      	ldr	r1, [sp, #0]
   82fa8:	4648      	mov	r0, r9
   82faa:	9309      	str	r3, [sp, #36]	; 0x24
   82fac:	f7ff fbb4 	bl	82718 <__sprint_r.part.0>
   82fb0:	2800      	cmp	r0, #0
   82fb2:	f040 8088 	bne.w	830c6 <_vfiprintf_r+0x936>
   82fb6:	980e      	ldr	r0, [sp, #56]	; 0x38
   82fb8:	46d4      	mov	ip, sl
   82fba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82fbc:	f100 0e01 	add.w	lr, r0, #1
   82fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82fc2:	e53a      	b.n	82a3a <_vfiprintf_r+0x2aa>
   82fc4:	aa0d      	add	r2, sp, #52	; 0x34
   82fc6:	9900      	ldr	r1, [sp, #0]
   82fc8:	9805      	ldr	r0, [sp, #20]
   82fca:	f7ff fba5 	bl	82718 <__sprint_r.part.0>
   82fce:	2800      	cmp	r0, #0
   82fd0:	d179      	bne.n	830c6 <_vfiprintf_r+0x936>
   82fd2:	46d3      	mov	fp, sl
   82fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
   82fd6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   82fda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82fdc:	f100 0e01 	add.w	lr, r0, #1
   82fe0:	2b00      	cmp	r3, #0
   82fe2:	f43f ad59 	beq.w	82a98 <_vfiprintf_r+0x308>
   82fe6:	3201      	adds	r2, #1
   82fe8:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   82fec:	2301      	movs	r3, #1
   82fee:	f1be 0f07 	cmp.w	lr, #7
   82ff2:	920f      	str	r2, [sp, #60]	; 0x3c
   82ff4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   82ff8:	e88b 000a 	stmia.w	fp, {r1, r3}
   82ffc:	f340 80c0 	ble.w	83180 <_vfiprintf_r+0x9f0>
   83000:	2a00      	cmp	r2, #0
   83002:	f040 814d 	bne.w	832a0 <_vfiprintf_r+0xb10>
   83006:	9907      	ldr	r1, [sp, #28]
   83008:	2900      	cmp	r1, #0
   8300a:	f040 80bf 	bne.w	8318c <_vfiprintf_r+0x9fc>
   8300e:	469e      	mov	lr, r3
   83010:	4610      	mov	r0, r2
   83012:	46d3      	mov	fp, sl
   83014:	9b08      	ldr	r3, [sp, #32]
   83016:	2b80      	cmp	r3, #128	; 0x80
   83018:	f43f ad59 	beq.w	82ace <_vfiprintf_r+0x33e>
   8301c:	9b01      	ldr	r3, [sp, #4]
   8301e:	9903      	ldr	r1, [sp, #12]
   83020:	1a5c      	subs	r4, r3, r1
   83022:	2c00      	cmp	r4, #0
   83024:	f77f ad9c 	ble.w	82b60 <_vfiprintf_r+0x3d0>
   83028:	2c10      	cmp	r4, #16
   8302a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8315c <_vfiprintf_r+0x9cc>
   8302e:	dd25      	ble.n	8307c <_vfiprintf_r+0x8ec>
   83030:	46dc      	mov	ip, fp
   83032:	2310      	movs	r3, #16
   83034:	46c3      	mov	fp, r8
   83036:	46a8      	mov	r8, r5
   83038:	464d      	mov	r5, r9
   8303a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8303e:	e007      	b.n	83050 <_vfiprintf_r+0x8c0>
   83040:	f100 0e02 	add.w	lr, r0, #2
   83044:	4608      	mov	r0, r1
   83046:	f10c 0c08 	add.w	ip, ip, #8
   8304a:	3c10      	subs	r4, #16
   8304c:	2c10      	cmp	r4, #16
   8304e:	dd11      	ble.n	83074 <_vfiprintf_r+0x8e4>
   83050:	1c41      	adds	r1, r0, #1
   83052:	3210      	adds	r2, #16
   83054:	2907      	cmp	r1, #7
   83056:	920f      	str	r2, [sp, #60]	; 0x3c
   83058:	f8cc 5000 	str.w	r5, [ip]
   8305c:	f8cc 3004 	str.w	r3, [ip, #4]
   83060:	910e      	str	r1, [sp, #56]	; 0x38
   83062:	dded      	ble.n	83040 <_vfiprintf_r+0x8b0>
   83064:	b9d2      	cbnz	r2, 8309c <_vfiprintf_r+0x90c>
   83066:	3c10      	subs	r4, #16
   83068:	2c10      	cmp	r4, #16
   8306a:	f04f 0e01 	mov.w	lr, #1
   8306e:	4610      	mov	r0, r2
   83070:	46d4      	mov	ip, sl
   83072:	dced      	bgt.n	83050 <_vfiprintf_r+0x8c0>
   83074:	46a9      	mov	r9, r5
   83076:	4645      	mov	r5, r8
   83078:	46d8      	mov	r8, fp
   8307a:	46e3      	mov	fp, ip
   8307c:	4422      	add	r2, r4
   8307e:	f1be 0f07 	cmp.w	lr, #7
   83082:	920f      	str	r2, [sp, #60]	; 0x3c
   83084:	f8cb 9000 	str.w	r9, [fp]
   83088:	f8cb 4004 	str.w	r4, [fp, #4]
   8308c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83090:	dc2e      	bgt.n	830f0 <_vfiprintf_r+0x960>
   83092:	f10b 0b08 	add.w	fp, fp, #8
   83096:	f10e 0e01 	add.w	lr, lr, #1
   8309a:	e561      	b.n	82b60 <_vfiprintf_r+0x3d0>
   8309c:	aa0d      	add	r2, sp, #52	; 0x34
   8309e:	9900      	ldr	r1, [sp, #0]
   830a0:	4648      	mov	r0, r9
   830a2:	9301      	str	r3, [sp, #4]
   830a4:	f7ff fb38 	bl	82718 <__sprint_r.part.0>
   830a8:	b968      	cbnz	r0, 830c6 <_vfiprintf_r+0x936>
   830aa:	980e      	ldr	r0, [sp, #56]	; 0x38
   830ac:	46d4      	mov	ip, sl
   830ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   830b0:	f100 0e01 	add.w	lr, r0, #1
   830b4:	9b01      	ldr	r3, [sp, #4]
   830b6:	e7c8      	b.n	8304a <_vfiprintf_r+0x8ba>
   830b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   830ba:	b123      	cbz	r3, 830c6 <_vfiprintf_r+0x936>
   830bc:	9805      	ldr	r0, [sp, #20]
   830be:	aa0d      	add	r2, sp, #52	; 0x34
   830c0:	9900      	ldr	r1, [sp, #0]
   830c2:	f7ff fb29 	bl	82718 <__sprint_r.part.0>
   830c6:	9b00      	ldr	r3, [sp, #0]
   830c8:	899b      	ldrh	r3, [r3, #12]
   830ca:	065a      	lsls	r2, r3, #25
   830cc:	f100 817b 	bmi.w	833c6 <_vfiprintf_r+0xc36>
   830d0:	9802      	ldr	r0, [sp, #8]
   830d2:	b02b      	add	sp, #172	; 0xac
   830d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830d8:	aa0d      	add	r2, sp, #52	; 0x34
   830da:	9900      	ldr	r1, [sp, #0]
   830dc:	4648      	mov	r0, r9
   830de:	f7ff fb1b 	bl	82718 <__sprint_r.part.0>
   830e2:	2800      	cmp	r0, #0
   830e4:	d1ef      	bne.n	830c6 <_vfiprintf_r+0x936>
   830e6:	990e      	ldr	r1, [sp, #56]	; 0x38
   830e8:	46d3      	mov	fp, sl
   830ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   830ec:	1c48      	adds	r0, r1, #1
   830ee:	e55e      	b.n	82bae <_vfiprintf_r+0x41e>
   830f0:	2a00      	cmp	r2, #0
   830f2:	f040 80fa 	bne.w	832ea <_vfiprintf_r+0xb5a>
   830f6:	46d3      	mov	fp, sl
   830f8:	9a03      	ldr	r2, [sp, #12]
   830fa:	2301      	movs	r3, #1
   830fc:	921b      	str	r2, [sp, #108]	; 0x6c
   830fe:	920f      	str	r2, [sp, #60]	; 0x3c
   83100:	971a      	str	r7, [sp, #104]	; 0x68
   83102:	930e      	str	r3, [sp, #56]	; 0x38
   83104:	f10b 0b08 	add.w	fp, fp, #8
   83108:	0771      	lsls	r1, r6, #29
   8310a:	d504      	bpl.n	83116 <_vfiprintf_r+0x986>
   8310c:	9b06      	ldr	r3, [sp, #24]
   8310e:	1b5c      	subs	r4, r3, r5
   83110:	2c00      	cmp	r4, #0
   83112:	f73f ad3d 	bgt.w	82b90 <_vfiprintf_r+0x400>
   83116:	9b02      	ldr	r3, [sp, #8]
   83118:	9906      	ldr	r1, [sp, #24]
   8311a:	42a9      	cmp	r1, r5
   8311c:	bfac      	ite	ge
   8311e:	185b      	addge	r3, r3, r1
   83120:	195b      	addlt	r3, r3, r5
   83122:	9302      	str	r3, [sp, #8]
   83124:	2a00      	cmp	r2, #0
   83126:	f040 80ad 	bne.w	83284 <_vfiprintf_r+0xaf4>
   8312a:	2300      	movs	r3, #0
   8312c:	930e      	str	r3, [sp, #56]	; 0x38
   8312e:	46d3      	mov	fp, sl
   83130:	f7ff bb5f 	b.w	827f2 <_vfiprintf_r+0x62>
   83134:	aa0d      	add	r2, sp, #52	; 0x34
   83136:	9900      	ldr	r1, [sp, #0]
   83138:	4648      	mov	r0, r9
   8313a:	9307      	str	r3, [sp, #28]
   8313c:	f7ff faec 	bl	82718 <__sprint_r.part.0>
   83140:	2800      	cmp	r0, #0
   83142:	d1c0      	bne.n	830c6 <_vfiprintf_r+0x936>
   83144:	980e      	ldr	r0, [sp, #56]	; 0x38
   83146:	46d6      	mov	lr, sl
   83148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8314a:	f100 0c01 	add.w	ip, r0, #1
   8314e:	9b07      	ldr	r3, [sp, #28]
   83150:	e4d4      	b.n	82afc <_vfiprintf_r+0x36c>
   83152:	bf00      	nop
   83154:	00085344 	.word	0x00085344
   83158:	00085358 	.word	0x00085358
   8315c:	00085334 	.word	0x00085334
   83160:	2a00      	cmp	r2, #0
   83162:	f47f af2f 	bne.w	82fc4 <_vfiprintf_r+0x834>
   83166:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8316a:	2b00      	cmp	r3, #0
   8316c:	f000 80f3 	beq.w	83356 <_vfiprintf_r+0xbc6>
   83170:	2301      	movs	r3, #1
   83172:	461a      	mov	r2, r3
   83174:	469e      	mov	lr, r3
   83176:	46d3      	mov	fp, sl
   83178:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   8317c:	931b      	str	r3, [sp, #108]	; 0x6c
   8317e:	911a      	str	r1, [sp, #104]	; 0x68
   83180:	4670      	mov	r0, lr
   83182:	f10b 0b08 	add.w	fp, fp, #8
   83186:	f10e 0e01 	add.w	lr, lr, #1
   8318a:	e485      	b.n	82a98 <_vfiprintf_r+0x308>
   8318c:	469e      	mov	lr, r3
   8318e:	46d3      	mov	fp, sl
   83190:	a90c      	add	r1, sp, #48	; 0x30
   83192:	2202      	movs	r2, #2
   83194:	911a      	str	r1, [sp, #104]	; 0x68
   83196:	921b      	str	r2, [sp, #108]	; 0x6c
   83198:	4670      	mov	r0, lr
   8319a:	f10b 0b08 	add.w	fp, fp, #8
   8319e:	f10e 0e01 	add.w	lr, lr, #1
   831a2:	e737      	b.n	83014 <_vfiprintf_r+0x884>
   831a4:	9b01      	ldr	r3, [sp, #4]
   831a6:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   831aa:	2b00      	cmp	r3, #0
   831ac:	f2c0 811b 	blt.w	833e6 <_vfiprintf_r+0xc56>
   831b0:	ea54 0305 	orrs.w	r3, r4, r5
   831b4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   831b8:	f43f ac07 	beq.w	829ca <_vfiprintf_r+0x23a>
   831bc:	4657      	mov	r7, sl
   831be:	0923      	lsrs	r3, r4, #4
   831c0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   831c4:	0929      	lsrs	r1, r5, #4
   831c6:	f004 020f 	and.w	r2, r4, #15
   831ca:	460d      	mov	r5, r1
   831cc:	461c      	mov	r4, r3
   831ce:	5c83      	ldrb	r3, [r0, r2]
   831d0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   831d4:	ea54 0305 	orrs.w	r3, r4, r5
   831d8:	d1f1      	bne.n	831be <_vfiprintf_r+0xa2e>
   831da:	ebc7 030a 	rsb	r3, r7, sl
   831de:	9303      	str	r3, [sp, #12]
   831e0:	f7ff bbfc 	b.w	829dc <_vfiprintf_r+0x24c>
   831e4:	aa0d      	add	r2, sp, #52	; 0x34
   831e6:	9900      	ldr	r1, [sp, #0]
   831e8:	9805      	ldr	r0, [sp, #20]
   831ea:	f7ff fa95 	bl	82718 <__sprint_r.part.0>
   831ee:	2800      	cmp	r0, #0
   831f0:	f47f af69 	bne.w	830c6 <_vfiprintf_r+0x936>
   831f4:	46d3      	mov	fp, sl
   831f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   831f8:	e786      	b.n	83108 <_vfiprintf_r+0x978>
   831fa:	f016 0210 	ands.w	r2, r6, #16
   831fe:	f000 80b5 	beq.w	8336c <_vfiprintf_r+0xbdc>
   83202:	9904      	ldr	r1, [sp, #16]
   83204:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83208:	460a      	mov	r2, r1
   8320a:	680c      	ldr	r4, [r1, #0]
   8320c:	9901      	ldr	r1, [sp, #4]
   8320e:	3204      	adds	r2, #4
   83210:	2900      	cmp	r1, #0
   83212:	f04f 0500 	mov.w	r5, #0
   83216:	f2c0 8152 	blt.w	834be <_vfiprintf_r+0xd2e>
   8321a:	ea54 0105 	orrs.w	r1, r4, r5
   8321e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83222:	9204      	str	r2, [sp, #16]
   83224:	f43f ad5d 	beq.w	82ce2 <_vfiprintf_r+0x552>
   83228:	4699      	mov	r9, r3
   8322a:	e562      	b.n	82cf2 <_vfiprintf_r+0x562>
   8322c:	9a04      	ldr	r2, [sp, #16]
   8322e:	06f7      	lsls	r7, r6, #27
   83230:	4613      	mov	r3, r2
   83232:	d409      	bmi.n	83248 <_vfiprintf_r+0xab8>
   83234:	0675      	lsls	r5, r6, #25
   83236:	d507      	bpl.n	83248 <_vfiprintf_r+0xab8>
   83238:	f9b2 4000 	ldrsh.w	r4, [r2]
   8323c:	3304      	adds	r3, #4
   8323e:	17e5      	asrs	r5, r4, #31
   83240:	9304      	str	r3, [sp, #16]
   83242:	4622      	mov	r2, r4
   83244:	462b      	mov	r3, r5
   83246:	e4f7      	b.n	82c38 <_vfiprintf_r+0x4a8>
   83248:	681c      	ldr	r4, [r3, #0]
   8324a:	3304      	adds	r3, #4
   8324c:	17e5      	asrs	r5, r4, #31
   8324e:	9304      	str	r3, [sp, #16]
   83250:	4622      	mov	r2, r4
   83252:	462b      	mov	r3, r5
   83254:	e4f0      	b.n	82c38 <_vfiprintf_r+0x4a8>
   83256:	6814      	ldr	r4, [r2, #0]
   83258:	3204      	adds	r2, #4
   8325a:	9204      	str	r2, [sp, #16]
   8325c:	2500      	movs	r5, #0
   8325e:	e61f      	b.n	82ea0 <_vfiprintf_r+0x710>
   83260:	f04f 0900 	mov.w	r9, #0
   83264:	ea54 0305 	orrs.w	r3, r4, r5
   83268:	f47f acf7 	bne.w	82c5a <_vfiprintf_r+0x4ca>
   8326c:	e5d8      	b.n	82e20 <_vfiprintf_r+0x690>
   8326e:	aa0d      	add	r2, sp, #52	; 0x34
   83270:	9900      	ldr	r1, [sp, #0]
   83272:	9805      	ldr	r0, [sp, #20]
   83274:	f7ff fa50 	bl	82718 <__sprint_r.part.0>
   83278:	2800      	cmp	r0, #0
   8327a:	f47f af24 	bne.w	830c6 <_vfiprintf_r+0x936>
   8327e:	46d3      	mov	fp, sl
   83280:	f7ff bb51 	b.w	82926 <_vfiprintf_r+0x196>
   83284:	aa0d      	add	r2, sp, #52	; 0x34
   83286:	9900      	ldr	r1, [sp, #0]
   83288:	9805      	ldr	r0, [sp, #20]
   8328a:	f7ff fa45 	bl	82718 <__sprint_r.part.0>
   8328e:	2800      	cmp	r0, #0
   83290:	f43f af4b 	beq.w	8312a <_vfiprintf_r+0x99a>
   83294:	e717      	b.n	830c6 <_vfiprintf_r+0x936>
   83296:	2400      	movs	r4, #0
   83298:	2500      	movs	r5, #0
   8329a:	f04f 0900 	mov.w	r9, #0
   8329e:	e78d      	b.n	831bc <_vfiprintf_r+0xa2c>
   832a0:	aa0d      	add	r2, sp, #52	; 0x34
   832a2:	9900      	ldr	r1, [sp, #0]
   832a4:	9805      	ldr	r0, [sp, #20]
   832a6:	f7ff fa37 	bl	82718 <__sprint_r.part.0>
   832aa:	2800      	cmp	r0, #0
   832ac:	f47f af0b 	bne.w	830c6 <_vfiprintf_r+0x936>
   832b0:	980e      	ldr	r0, [sp, #56]	; 0x38
   832b2:	46d3      	mov	fp, sl
   832b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   832b6:	f100 0e01 	add.w	lr, r0, #1
   832ba:	f7ff bbed 	b.w	82a98 <_vfiprintf_r+0x308>
   832be:	aa0d      	add	r2, sp, #52	; 0x34
   832c0:	9900      	ldr	r1, [sp, #0]
   832c2:	9805      	ldr	r0, [sp, #20]
   832c4:	f7ff fa28 	bl	82718 <__sprint_r.part.0>
   832c8:	2800      	cmp	r0, #0
   832ca:	f47f aefc 	bne.w	830c6 <_vfiprintf_r+0x936>
   832ce:	980e      	ldr	r0, [sp, #56]	; 0x38
   832d0:	46d3      	mov	fp, sl
   832d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   832d4:	f100 0e01 	add.w	lr, r0, #1
   832d8:	e69c      	b.n	83014 <_vfiprintf_r+0x884>
   832da:	2a00      	cmp	r2, #0
   832dc:	f040 80c8 	bne.w	83470 <_vfiprintf_r+0xce0>
   832e0:	f04f 0e01 	mov.w	lr, #1
   832e4:	4610      	mov	r0, r2
   832e6:	46d3      	mov	fp, sl
   832e8:	e698      	b.n	8301c <_vfiprintf_r+0x88c>
   832ea:	aa0d      	add	r2, sp, #52	; 0x34
   832ec:	9900      	ldr	r1, [sp, #0]
   832ee:	9805      	ldr	r0, [sp, #20]
   832f0:	f7ff fa12 	bl	82718 <__sprint_r.part.0>
   832f4:	2800      	cmp	r0, #0
   832f6:	f47f aee6 	bne.w	830c6 <_vfiprintf_r+0x936>
   832fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   832fc:	46d3      	mov	fp, sl
   832fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83300:	f103 0e01 	add.w	lr, r3, #1
   83304:	e42c      	b.n	82b60 <_vfiprintf_r+0x3d0>
   83306:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8330a:	f04f 0300 	mov.w	r3, #0
   8330e:	2230      	movs	r2, #48	; 0x30
   83310:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   83314:	9a01      	ldr	r2, [sp, #4]
   83316:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8331a:	2a00      	cmp	r2, #0
   8331c:	f046 0302 	orr.w	r3, r6, #2
   83320:	f2c0 80bb 	blt.w	8349a <_vfiprintf_r+0xd0a>
   83324:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83328:	f046 0602 	orr.w	r6, r6, #2
   8332c:	f04f 0900 	mov.w	r9, #0
   83330:	e744      	b.n	831bc <_vfiprintf_r+0xa2c>
   83332:	f04f 0900 	mov.w	r9, #0
   83336:	488c      	ldr	r0, [pc, #560]	; (83568 <_vfiprintf_r+0xdd8>)
   83338:	e740      	b.n	831bc <_vfiprintf_r+0xa2c>
   8333a:	9b01      	ldr	r3, [sp, #4]
   8333c:	4264      	negs	r4, r4
   8333e:	f04f 092d 	mov.w	r9, #45	; 0x2d
   83342:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83346:	2b00      	cmp	r3, #0
   83348:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8334c:	f6ff ac85 	blt.w	82c5a <_vfiprintf_r+0x4ca>
   83350:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83354:	e481      	b.n	82c5a <_vfiprintf_r+0x4ca>
   83356:	9b07      	ldr	r3, [sp, #28]
   83358:	2b00      	cmp	r3, #0
   8335a:	d063      	beq.n	83424 <_vfiprintf_r+0xc94>
   8335c:	ab0c      	add	r3, sp, #48	; 0x30
   8335e:	2202      	movs	r2, #2
   83360:	931a      	str	r3, [sp, #104]	; 0x68
   83362:	921b      	str	r2, [sp, #108]	; 0x6c
   83364:	f04f 0e01 	mov.w	lr, #1
   83368:	46d3      	mov	fp, sl
   8336a:	e715      	b.n	83198 <_vfiprintf_r+0xa08>
   8336c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   83370:	d03b      	beq.n	833ea <_vfiprintf_r+0xc5a>
   83372:	9904      	ldr	r1, [sp, #16]
   83374:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   83378:	460b      	mov	r3, r1
   8337a:	880c      	ldrh	r4, [r1, #0]
   8337c:	9901      	ldr	r1, [sp, #4]
   8337e:	3304      	adds	r3, #4
   83380:	2900      	cmp	r1, #0
   83382:	f04f 0500 	mov.w	r5, #0
   83386:	f2c0 808c 	blt.w	834a2 <_vfiprintf_r+0xd12>
   8338a:	ea54 0105 	orrs.w	r1, r4, r5
   8338e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83392:	9304      	str	r3, [sp, #16]
   83394:	f43f aca5 	beq.w	82ce2 <_vfiprintf_r+0x552>
   83398:	4691      	mov	r9, r2
   8339a:	e4aa      	b.n	82cf2 <_vfiprintf_r+0x562>
   8339c:	06f0      	lsls	r0, r6, #27
   8339e:	d40a      	bmi.n	833b6 <_vfiprintf_r+0xc26>
   833a0:	0671      	lsls	r1, r6, #25
   833a2:	d508      	bpl.n	833b6 <_vfiprintf_r+0xc26>
   833a4:	9a04      	ldr	r2, [sp, #16]
   833a6:	6813      	ldr	r3, [r2, #0]
   833a8:	3204      	adds	r2, #4
   833aa:	9204      	str	r2, [sp, #16]
   833ac:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   833b0:	801a      	strh	r2, [r3, #0]
   833b2:	f7ff ba1e 	b.w	827f2 <_vfiprintf_r+0x62>
   833b6:	9a04      	ldr	r2, [sp, #16]
   833b8:	6813      	ldr	r3, [r2, #0]
   833ba:	3204      	adds	r2, #4
   833bc:	9204      	str	r2, [sp, #16]
   833be:	9a02      	ldr	r2, [sp, #8]
   833c0:	601a      	str	r2, [r3, #0]
   833c2:	f7ff ba16 	b.w	827f2 <_vfiprintf_r+0x62>
   833c6:	f04f 30ff 	mov.w	r0, #4294967295
   833ca:	f7ff bac9 	b.w	82960 <_vfiprintf_r+0x1d0>
   833ce:	4616      	mov	r6, r2
   833d0:	4865      	ldr	r0, [pc, #404]	; (83568 <_vfiprintf_r+0xdd8>)
   833d2:	ea54 0205 	orrs.w	r2, r4, r5
   833d6:	9304      	str	r3, [sp, #16]
   833d8:	f04f 0900 	mov.w	r9, #0
   833dc:	f47f aeee 	bne.w	831bc <_vfiprintf_r+0xa2c>
   833e0:	2400      	movs	r4, #0
   833e2:	2500      	movs	r5, #0
   833e4:	e6ea      	b.n	831bc <_vfiprintf_r+0xa2c>
   833e6:	9b04      	ldr	r3, [sp, #16]
   833e8:	e7f3      	b.n	833d2 <_vfiprintf_r+0xc42>
   833ea:	9a04      	ldr	r2, [sp, #16]
   833ec:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   833f0:	4613      	mov	r3, r2
   833f2:	6814      	ldr	r4, [r2, #0]
   833f4:	9a01      	ldr	r2, [sp, #4]
   833f6:	3304      	adds	r3, #4
   833f8:	2a00      	cmp	r2, #0
   833fa:	f04f 0500 	mov.w	r5, #0
   833fe:	db50      	blt.n	834a2 <_vfiprintf_r+0xd12>
   83400:	ea54 0205 	orrs.w	r2, r4, r5
   83404:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83408:	9304      	str	r3, [sp, #16]
   8340a:	f47f ac72 	bne.w	82cf2 <_vfiprintf_r+0x562>
   8340e:	e468      	b.n	82ce2 <_vfiprintf_r+0x552>
   83410:	aa0d      	add	r2, sp, #52	; 0x34
   83412:	9900      	ldr	r1, [sp, #0]
   83414:	9805      	ldr	r0, [sp, #20]
   83416:	f7ff f97f 	bl	82718 <__sprint_r.part.0>
   8341a:	2800      	cmp	r0, #0
   8341c:	f47f ae53 	bne.w	830c6 <_vfiprintf_r+0x936>
   83420:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83422:	e678      	b.n	83116 <_vfiprintf_r+0x986>
   83424:	4610      	mov	r0, r2
   83426:	f04f 0e01 	mov.w	lr, #1
   8342a:	46d3      	mov	fp, sl
   8342c:	e5f6      	b.n	8301c <_vfiprintf_r+0x88c>
   8342e:	9904      	ldr	r1, [sp, #16]
   83430:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83434:	460a      	mov	r2, r1
   83436:	880c      	ldrh	r4, [r1, #0]
   83438:	9901      	ldr	r1, [sp, #4]
   8343a:	3204      	adds	r2, #4
   8343c:	2900      	cmp	r1, #0
   8343e:	f04f 0500 	mov.w	r5, #0
   83442:	db55      	blt.n	834f0 <_vfiprintf_r+0xd60>
   83444:	ea54 0105 	orrs.w	r1, r4, r5
   83448:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8344c:	9204      	str	r2, [sp, #16]
   8344e:	4699      	mov	r9, r3
   83450:	f47f ac03 	bne.w	82c5a <_vfiprintf_r+0x4ca>
   83454:	e4df      	b.n	82e16 <_vfiprintf_r+0x686>
   83456:	9304      	str	r3, [sp, #16]
   83458:	e704      	b.n	83264 <_vfiprintf_r+0xad4>
   8345a:	4638      	mov	r0, r7
   8345c:	9404      	str	r4, [sp, #16]
   8345e:	f7ff f8f9 	bl	82654 <strlen>
   83462:	2300      	movs	r3, #0
   83464:	9003      	str	r0, [sp, #12]
   83466:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8346a:	9301      	str	r3, [sp, #4]
   8346c:	f7ff bab6 	b.w	829dc <_vfiprintf_r+0x24c>
   83470:	aa0d      	add	r2, sp, #52	; 0x34
   83472:	9900      	ldr	r1, [sp, #0]
   83474:	9805      	ldr	r0, [sp, #20]
   83476:	f7ff f94f 	bl	82718 <__sprint_r.part.0>
   8347a:	2800      	cmp	r0, #0
   8347c:	f47f ae23 	bne.w	830c6 <_vfiprintf_r+0x936>
   83480:	980e      	ldr	r0, [sp, #56]	; 0x38
   83482:	46d3      	mov	fp, sl
   83484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83486:	f100 0e01 	add.w	lr, r0, #1
   8348a:	e5c7      	b.n	8301c <_vfiprintf_r+0x88c>
   8348c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8348e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83490:	3001      	adds	r0, #1
   83492:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 83570 <_vfiprintf_r+0xde0>
   83496:	f7ff baec 	b.w	82a72 <_vfiprintf_r+0x2e2>
   8349a:	461e      	mov	r6, r3
   8349c:	f04f 0900 	mov.w	r9, #0
   834a0:	e68c      	b.n	831bc <_vfiprintf_r+0xa2c>
   834a2:	9304      	str	r3, [sp, #16]
   834a4:	e423      	b.n	82cee <_vfiprintf_r+0x55e>
   834a6:	f04f 0900 	mov.w	r9, #0
   834aa:	e799      	b.n	833e0 <_vfiprintf_r+0xc50>
   834ac:	2b06      	cmp	r3, #6
   834ae:	bf28      	it	cs
   834b0:	2306      	movcs	r3, #6
   834b2:	9303      	str	r3, [sp, #12]
   834b4:	9404      	str	r4, [sp, #16]
   834b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   834ba:	4f2c      	ldr	r7, [pc, #176]	; (8356c <_vfiprintf_r+0xddc>)
   834bc:	e512      	b.n	82ee4 <_vfiprintf_r+0x754>
   834be:	9204      	str	r2, [sp, #16]
   834c0:	e415      	b.n	82cee <_vfiprintf_r+0x55e>
   834c2:	980e      	ldr	r0, [sp, #56]	; 0x38
   834c4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 83570 <_vfiprintf_r+0xde0>
   834c8:	3001      	adds	r0, #1
   834ca:	f7ff bb88 	b.w	82bde <_vfiprintf_r+0x44e>
   834ce:	46f4      	mov	ip, lr
   834d0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 83574 <_vfiprintf_r+0xde4>
   834d4:	f7ff bb2d 	b.w	82b32 <_vfiprintf_r+0x3a2>
   834d8:	2200      	movs	r2, #0
   834da:	9201      	str	r2, [sp, #4]
   834dc:	f7ff b9c1 	b.w	82862 <_vfiprintf_r+0xd2>
   834e0:	9b01      	ldr	r3, [sp, #4]
   834e2:	9404      	str	r4, [sp, #16]
   834e4:	9303      	str	r3, [sp, #12]
   834e6:	9001      	str	r0, [sp, #4]
   834e8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   834ec:	f7ff ba76 	b.w	829dc <_vfiprintf_r+0x24c>
   834f0:	9204      	str	r2, [sp, #16]
   834f2:	4699      	mov	r9, r3
   834f4:	e6b6      	b.n	83264 <_vfiprintf_r+0xad4>
   834f6:	9a04      	ldr	r2, [sp, #16]
   834f8:	6813      	ldr	r3, [r2, #0]
   834fa:	3204      	adds	r2, #4
   834fc:	2b00      	cmp	r3, #0
   834fe:	9301      	str	r3, [sp, #4]
   83500:	9204      	str	r2, [sp, #16]
   83502:	f898 3001 	ldrb.w	r3, [r8, #1]
   83506:	46a8      	mov	r8, r5
   83508:	f6bf a9a9 	bge.w	8285e <_vfiprintf_r+0xce>
   8350c:	f04f 32ff 	mov.w	r2, #4294967295
   83510:	9201      	str	r2, [sp, #4]
   83512:	f7ff b9a4 	b.w	8285e <_vfiprintf_r+0xce>
   83516:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8351a:	e45f      	b.n	82ddc <_vfiprintf_r+0x64c>
   8351c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83520:	f7ff bbc4 	b.w	82cac <_vfiprintf_r+0x51c>
   83524:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83528:	f7ff bb77 	b.w	82c1a <_vfiprintf_r+0x48a>
   8352c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83530:	e487      	b.n	82e42 <_vfiprintf_r+0x6b2>
   83532:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83536:	e4a7      	b.n	82e88 <_vfiprintf_r+0x6f8>
   83538:	4699      	mov	r9, r3
   8353a:	07f3      	lsls	r3, r6, #31
   8353c:	d505      	bpl.n	8354a <_vfiprintf_r+0xdba>
   8353e:	af2a      	add	r7, sp, #168	; 0xa8
   83540:	2330      	movs	r3, #48	; 0x30
   83542:	f807 3d41 	strb.w	r3, [r7, #-65]!
   83546:	f7ff bba2 	b.w	82c8e <_vfiprintf_r+0x4fe>
   8354a:	9b01      	ldr	r3, [sp, #4]
   8354c:	4657      	mov	r7, sl
   8354e:	9303      	str	r3, [sp, #12]
   83550:	f7ff ba44 	b.w	829dc <_vfiprintf_r+0x24c>
   83554:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83558:	e517      	b.n	82f8a <_vfiprintf_r+0x7fa>
   8355a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8355e:	e4fa      	b.n	82f56 <_vfiprintf_r+0x7c6>
   83560:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83564:	e4d2      	b.n	82f0c <_vfiprintf_r+0x77c>
   83566:	bf00      	nop
   83568:	00085358 	.word	0x00085358
   8356c:	0008536c 	.word	0x0008536c
   83570:	00085374 	.word	0x00085374
   83574:	00085334 	.word	0x00085334

00083578 <__sbprintf>:
   83578:	b5f0      	push	{r4, r5, r6, r7, lr}
   8357a:	460c      	mov	r4, r1
   8357c:	8989      	ldrh	r1, [r1, #12]
   8357e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   83582:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83584:	f021 0102 	bic.w	r1, r1, #2
   83588:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8358a:	f8ad 100c 	strh.w	r1, [sp, #12]
   8358e:	69e1      	ldr	r1, [r4, #28]
   83590:	89e7      	ldrh	r7, [r4, #14]
   83592:	9519      	str	r5, [sp, #100]	; 0x64
   83594:	2500      	movs	r5, #0
   83596:	9107      	str	r1, [sp, #28]
   83598:	9609      	str	r6, [sp, #36]	; 0x24
   8359a:	9506      	str	r5, [sp, #24]
   8359c:	ae1a      	add	r6, sp, #104	; 0x68
   8359e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   835a2:	4669      	mov	r1, sp
   835a4:	9600      	str	r6, [sp, #0]
   835a6:	9604      	str	r6, [sp, #16]
   835a8:	9502      	str	r5, [sp, #8]
   835aa:	9505      	str	r5, [sp, #20]
   835ac:	f8ad 700e 	strh.w	r7, [sp, #14]
   835b0:	4606      	mov	r6, r0
   835b2:	f7ff f8ed 	bl	82790 <_vfiprintf_r>
   835b6:	1e05      	subs	r5, r0, #0
   835b8:	db07      	blt.n	835ca <__sbprintf+0x52>
   835ba:	4630      	mov	r0, r6
   835bc:	4669      	mov	r1, sp
   835be:	f000 f929 	bl	83814 <_fflush_r>
   835c2:	2800      	cmp	r0, #0
   835c4:	bf18      	it	ne
   835c6:	f04f 35ff 	movne.w	r5, #4294967295
   835ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   835ce:	065b      	lsls	r3, r3, #25
   835d0:	d503      	bpl.n	835da <__sbprintf+0x62>
   835d2:	89a3      	ldrh	r3, [r4, #12]
   835d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   835d8:	81a3      	strh	r3, [r4, #12]
   835da:	4628      	mov	r0, r5
   835dc:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   835e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   835e2:	bf00      	nop

000835e4 <__swsetup_r>:
   835e4:	b538      	push	{r3, r4, r5, lr}
   835e6:	4b30      	ldr	r3, [pc, #192]	; (836a8 <__swsetup_r+0xc4>)
   835e8:	4605      	mov	r5, r0
   835ea:	6818      	ldr	r0, [r3, #0]
   835ec:	460c      	mov	r4, r1
   835ee:	b110      	cbz	r0, 835f6 <__swsetup_r+0x12>
   835f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835f2:	2b00      	cmp	r3, #0
   835f4:	d038      	beq.n	83668 <__swsetup_r+0x84>
   835f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   835fa:	b293      	uxth	r3, r2
   835fc:	0718      	lsls	r0, r3, #28
   835fe:	d50c      	bpl.n	8361a <__swsetup_r+0x36>
   83600:	6920      	ldr	r0, [r4, #16]
   83602:	b1a8      	cbz	r0, 83630 <__swsetup_r+0x4c>
   83604:	f013 0201 	ands.w	r2, r3, #1
   83608:	d01e      	beq.n	83648 <__swsetup_r+0x64>
   8360a:	6963      	ldr	r3, [r4, #20]
   8360c:	2200      	movs	r2, #0
   8360e:	425b      	negs	r3, r3
   83610:	61a3      	str	r3, [r4, #24]
   83612:	60a2      	str	r2, [r4, #8]
   83614:	b1f0      	cbz	r0, 83654 <__swsetup_r+0x70>
   83616:	2000      	movs	r0, #0
   83618:	bd38      	pop	{r3, r4, r5, pc}
   8361a:	06d9      	lsls	r1, r3, #27
   8361c:	d53b      	bpl.n	83696 <__swsetup_r+0xb2>
   8361e:	0758      	lsls	r0, r3, #29
   83620:	d425      	bmi.n	8366e <__swsetup_r+0x8a>
   83622:	6920      	ldr	r0, [r4, #16]
   83624:	f042 0308 	orr.w	r3, r2, #8
   83628:	81a3      	strh	r3, [r4, #12]
   8362a:	b29b      	uxth	r3, r3
   8362c:	2800      	cmp	r0, #0
   8362e:	d1e9      	bne.n	83604 <__swsetup_r+0x20>
   83630:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83634:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83638:	d0e4      	beq.n	83604 <__swsetup_r+0x20>
   8363a:	4628      	mov	r0, r5
   8363c:	4621      	mov	r1, r4
   8363e:	f000 fd13 	bl	84068 <__smakebuf_r>
   83642:	89a3      	ldrh	r3, [r4, #12]
   83644:	6920      	ldr	r0, [r4, #16]
   83646:	e7dd      	b.n	83604 <__swsetup_r+0x20>
   83648:	0799      	lsls	r1, r3, #30
   8364a:	bf58      	it	pl
   8364c:	6962      	ldrpl	r2, [r4, #20]
   8364e:	60a2      	str	r2, [r4, #8]
   83650:	2800      	cmp	r0, #0
   83652:	d1e0      	bne.n	83616 <__swsetup_r+0x32>
   83654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83658:	061a      	lsls	r2, r3, #24
   8365a:	d5dd      	bpl.n	83618 <__swsetup_r+0x34>
   8365c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83660:	81a3      	strh	r3, [r4, #12]
   83662:	f04f 30ff 	mov.w	r0, #4294967295
   83666:	bd38      	pop	{r3, r4, r5, pc}
   83668:	f000 f968 	bl	8393c <__sinit>
   8366c:	e7c3      	b.n	835f6 <__swsetup_r+0x12>
   8366e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83670:	b151      	cbz	r1, 83688 <__swsetup_r+0xa4>
   83672:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83676:	4299      	cmp	r1, r3
   83678:	d004      	beq.n	83684 <__swsetup_r+0xa0>
   8367a:	4628      	mov	r0, r5
   8367c:	f000 fa26 	bl	83acc <_free_r>
   83680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83684:	2300      	movs	r3, #0
   83686:	6323      	str	r3, [r4, #48]	; 0x30
   83688:	6920      	ldr	r0, [r4, #16]
   8368a:	2300      	movs	r3, #0
   8368c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83690:	e884 0009 	stmia.w	r4, {r0, r3}
   83694:	e7c6      	b.n	83624 <__swsetup_r+0x40>
   83696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8369a:	2309      	movs	r3, #9
   8369c:	602b      	str	r3, [r5, #0]
   8369e:	f04f 30ff 	mov.w	r0, #4294967295
   836a2:	81a2      	strh	r2, [r4, #12]
   836a4:	bd38      	pop	{r3, r4, r5, pc}
   836a6:	bf00      	nop
   836a8:	20070568 	.word	0x20070568

000836ac <register_fini>:
   836ac:	4b02      	ldr	r3, [pc, #8]	; (836b8 <register_fini+0xc>)
   836ae:	b113      	cbz	r3, 836b6 <register_fini+0xa>
   836b0:	4802      	ldr	r0, [pc, #8]	; (836bc <register_fini+0x10>)
   836b2:	f000 b805 	b.w	836c0 <atexit>
   836b6:	4770      	bx	lr
   836b8:	00000000 	.word	0x00000000
   836bc:	00083951 	.word	0x00083951

000836c0 <atexit>:
   836c0:	2300      	movs	r3, #0
   836c2:	4601      	mov	r1, r0
   836c4:	461a      	mov	r2, r3
   836c6:	4618      	mov	r0, r3
   836c8:	f001 bb58 	b.w	84d7c <__register_exitproc>

000836cc <__sflush_r>:
   836cc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   836d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836d4:	b29a      	uxth	r2, r3
   836d6:	460d      	mov	r5, r1
   836d8:	0711      	lsls	r1, r2, #28
   836da:	4680      	mov	r8, r0
   836dc:	d43c      	bmi.n	83758 <__sflush_r+0x8c>
   836de:	686a      	ldr	r2, [r5, #4]
   836e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836e4:	2a00      	cmp	r2, #0
   836e6:	81ab      	strh	r3, [r5, #12]
   836e8:	dd73      	ble.n	837d2 <__sflush_r+0x106>
   836ea:	6aac      	ldr	r4, [r5, #40]	; 0x28
   836ec:	2c00      	cmp	r4, #0
   836ee:	d04b      	beq.n	83788 <__sflush_r+0xbc>
   836f0:	b29b      	uxth	r3, r3
   836f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   836f6:	2100      	movs	r1, #0
   836f8:	b292      	uxth	r2, r2
   836fa:	f8d8 6000 	ldr.w	r6, [r8]
   836fe:	f8c8 1000 	str.w	r1, [r8]
   83702:	2a00      	cmp	r2, #0
   83704:	d069      	beq.n	837da <__sflush_r+0x10e>
   83706:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83708:	075f      	lsls	r7, r3, #29
   8370a:	d505      	bpl.n	83718 <__sflush_r+0x4c>
   8370c:	6869      	ldr	r1, [r5, #4]
   8370e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83710:	1a52      	subs	r2, r2, r1
   83712:	b10b      	cbz	r3, 83718 <__sflush_r+0x4c>
   83714:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83716:	1ad2      	subs	r2, r2, r3
   83718:	2300      	movs	r3, #0
   8371a:	69e9      	ldr	r1, [r5, #28]
   8371c:	4640      	mov	r0, r8
   8371e:	47a0      	blx	r4
   83720:	1c44      	adds	r4, r0, #1
   83722:	d03c      	beq.n	8379e <__sflush_r+0xd2>
   83724:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83728:	6929      	ldr	r1, [r5, #16]
   8372a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8372e:	2200      	movs	r2, #0
   83730:	81ab      	strh	r3, [r5, #12]
   83732:	04db      	lsls	r3, r3, #19
   83734:	e885 0006 	stmia.w	r5, {r1, r2}
   83738:	d449      	bmi.n	837ce <__sflush_r+0x102>
   8373a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8373c:	f8c8 6000 	str.w	r6, [r8]
   83740:	b311      	cbz	r1, 83788 <__sflush_r+0xbc>
   83742:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83746:	4299      	cmp	r1, r3
   83748:	d002      	beq.n	83750 <__sflush_r+0x84>
   8374a:	4640      	mov	r0, r8
   8374c:	f000 f9be 	bl	83acc <_free_r>
   83750:	2000      	movs	r0, #0
   83752:	6328      	str	r0, [r5, #48]	; 0x30
   83754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83758:	692e      	ldr	r6, [r5, #16]
   8375a:	b1ae      	cbz	r6, 83788 <__sflush_r+0xbc>
   8375c:	0790      	lsls	r0, r2, #30
   8375e:	682c      	ldr	r4, [r5, #0]
   83760:	bf0c      	ite	eq
   83762:	696b      	ldreq	r3, [r5, #20]
   83764:	2300      	movne	r3, #0
   83766:	602e      	str	r6, [r5, #0]
   83768:	1ba4      	subs	r4, r4, r6
   8376a:	60ab      	str	r3, [r5, #8]
   8376c:	e00a      	b.n	83784 <__sflush_r+0xb8>
   8376e:	4623      	mov	r3, r4
   83770:	4632      	mov	r2, r6
   83772:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83774:	69e9      	ldr	r1, [r5, #28]
   83776:	4640      	mov	r0, r8
   83778:	47b8      	blx	r7
   8377a:	2800      	cmp	r0, #0
   8377c:	eba4 0400 	sub.w	r4, r4, r0
   83780:	4406      	add	r6, r0
   83782:	dd04      	ble.n	8378e <__sflush_r+0xc2>
   83784:	2c00      	cmp	r4, #0
   83786:	dcf2      	bgt.n	8376e <__sflush_r+0xa2>
   83788:	2000      	movs	r0, #0
   8378a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8378e:	89ab      	ldrh	r3, [r5, #12]
   83790:	f04f 30ff 	mov.w	r0, #4294967295
   83794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83798:	81ab      	strh	r3, [r5, #12]
   8379a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8379e:	f8d8 2000 	ldr.w	r2, [r8]
   837a2:	2a1d      	cmp	r2, #29
   837a4:	d8f3      	bhi.n	8378e <__sflush_r+0xc2>
   837a6:	4b1a      	ldr	r3, [pc, #104]	; (83810 <__sflush_r+0x144>)
   837a8:	40d3      	lsrs	r3, r2
   837aa:	f003 0301 	and.w	r3, r3, #1
   837ae:	f083 0401 	eor.w	r4, r3, #1
   837b2:	2b00      	cmp	r3, #0
   837b4:	d0eb      	beq.n	8378e <__sflush_r+0xc2>
   837b6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   837ba:	6929      	ldr	r1, [r5, #16]
   837bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   837c0:	6029      	str	r1, [r5, #0]
   837c2:	04d9      	lsls	r1, r3, #19
   837c4:	606c      	str	r4, [r5, #4]
   837c6:	81ab      	strh	r3, [r5, #12]
   837c8:	d5b7      	bpl.n	8373a <__sflush_r+0x6e>
   837ca:	2a00      	cmp	r2, #0
   837cc:	d1b5      	bne.n	8373a <__sflush_r+0x6e>
   837ce:	6528      	str	r0, [r5, #80]	; 0x50
   837d0:	e7b3      	b.n	8373a <__sflush_r+0x6e>
   837d2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   837d4:	2a00      	cmp	r2, #0
   837d6:	dc88      	bgt.n	836ea <__sflush_r+0x1e>
   837d8:	e7d6      	b.n	83788 <__sflush_r+0xbc>
   837da:	2301      	movs	r3, #1
   837dc:	69e9      	ldr	r1, [r5, #28]
   837de:	4640      	mov	r0, r8
   837e0:	47a0      	blx	r4
   837e2:	1c43      	adds	r3, r0, #1
   837e4:	4602      	mov	r2, r0
   837e6:	d002      	beq.n	837ee <__sflush_r+0x122>
   837e8:	89ab      	ldrh	r3, [r5, #12]
   837ea:	6aac      	ldr	r4, [r5, #40]	; 0x28
   837ec:	e78c      	b.n	83708 <__sflush_r+0x3c>
   837ee:	f8d8 3000 	ldr.w	r3, [r8]
   837f2:	2b00      	cmp	r3, #0
   837f4:	d0f8      	beq.n	837e8 <__sflush_r+0x11c>
   837f6:	2b1d      	cmp	r3, #29
   837f8:	d001      	beq.n	837fe <__sflush_r+0x132>
   837fa:	2b16      	cmp	r3, #22
   837fc:	d102      	bne.n	83804 <__sflush_r+0x138>
   837fe:	f8c8 6000 	str.w	r6, [r8]
   83802:	e7c1      	b.n	83788 <__sflush_r+0xbc>
   83804:	89ab      	ldrh	r3, [r5, #12]
   83806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8380a:	81ab      	strh	r3, [r5, #12]
   8380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83810:	20400001 	.word	0x20400001

00083814 <_fflush_r>:
   83814:	b510      	push	{r4, lr}
   83816:	4604      	mov	r4, r0
   83818:	b082      	sub	sp, #8
   8381a:	b108      	cbz	r0, 83820 <_fflush_r+0xc>
   8381c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8381e:	b153      	cbz	r3, 83836 <_fflush_r+0x22>
   83820:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83824:	b908      	cbnz	r0, 8382a <_fflush_r+0x16>
   83826:	b002      	add	sp, #8
   83828:	bd10      	pop	{r4, pc}
   8382a:	4620      	mov	r0, r4
   8382c:	b002      	add	sp, #8
   8382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83832:	f7ff bf4b 	b.w	836cc <__sflush_r>
   83836:	9101      	str	r1, [sp, #4]
   83838:	f000 f880 	bl	8393c <__sinit>
   8383c:	9901      	ldr	r1, [sp, #4]
   8383e:	e7ef      	b.n	83820 <_fflush_r+0xc>

00083840 <_cleanup_r>:
   83840:	4901      	ldr	r1, [pc, #4]	; (83848 <_cleanup_r+0x8>)
   83842:	f000 bbaf 	b.w	83fa4 <_fwalk_reent>
   83846:	bf00      	nop
   83848:	00084e45 	.word	0x00084e45

0008384c <__sinit.part.1>:
   8384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83850:	4607      	mov	r7, r0
   83852:	4835      	ldr	r0, [pc, #212]	; (83928 <__sinit.part.1+0xdc>)
   83854:	687d      	ldr	r5, [r7, #4]
   83856:	2400      	movs	r4, #0
   83858:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8385c:	2304      	movs	r3, #4
   8385e:	2103      	movs	r1, #3
   83860:	63f8      	str	r0, [r7, #60]	; 0x3c
   83862:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83866:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8386a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8386e:	b083      	sub	sp, #12
   83870:	602c      	str	r4, [r5, #0]
   83872:	606c      	str	r4, [r5, #4]
   83874:	60ac      	str	r4, [r5, #8]
   83876:	666c      	str	r4, [r5, #100]	; 0x64
   83878:	81ec      	strh	r4, [r5, #14]
   8387a:	612c      	str	r4, [r5, #16]
   8387c:	616c      	str	r4, [r5, #20]
   8387e:	61ac      	str	r4, [r5, #24]
   83880:	81ab      	strh	r3, [r5, #12]
   83882:	4621      	mov	r1, r4
   83884:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83888:	2208      	movs	r2, #8
   8388a:	f7fe fd5d 	bl	82348 <memset>
   8388e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8392c <__sinit.part.1+0xe0>
   83892:	68be      	ldr	r6, [r7, #8]
   83894:	f8df a098 	ldr.w	sl, [pc, #152]	; 83930 <__sinit.part.1+0xe4>
   83898:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83934 <__sinit.part.1+0xe8>
   8389c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83938 <__sinit.part.1+0xec>
   838a0:	2301      	movs	r3, #1
   838a2:	2209      	movs	r2, #9
   838a4:	f8c5 b020 	str.w	fp, [r5, #32]
   838a8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   838ac:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   838b0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   838b4:	61ed      	str	r5, [r5, #28]
   838b6:	4621      	mov	r1, r4
   838b8:	81f3      	strh	r3, [r6, #14]
   838ba:	81b2      	strh	r2, [r6, #12]
   838bc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   838c0:	6034      	str	r4, [r6, #0]
   838c2:	6074      	str	r4, [r6, #4]
   838c4:	60b4      	str	r4, [r6, #8]
   838c6:	6674      	str	r4, [r6, #100]	; 0x64
   838c8:	6134      	str	r4, [r6, #16]
   838ca:	6174      	str	r4, [r6, #20]
   838cc:	61b4      	str	r4, [r6, #24]
   838ce:	2208      	movs	r2, #8
   838d0:	9301      	str	r3, [sp, #4]
   838d2:	f7fe fd39 	bl	82348 <memset>
   838d6:	68fd      	ldr	r5, [r7, #12]
   838d8:	2012      	movs	r0, #18
   838da:	2202      	movs	r2, #2
   838dc:	61f6      	str	r6, [r6, #28]
   838de:	f8c6 b020 	str.w	fp, [r6, #32]
   838e2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   838e6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   838ea:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   838ee:	4621      	mov	r1, r4
   838f0:	81a8      	strh	r0, [r5, #12]
   838f2:	81ea      	strh	r2, [r5, #14]
   838f4:	602c      	str	r4, [r5, #0]
   838f6:	606c      	str	r4, [r5, #4]
   838f8:	60ac      	str	r4, [r5, #8]
   838fa:	666c      	str	r4, [r5, #100]	; 0x64
   838fc:	612c      	str	r4, [r5, #16]
   838fe:	616c      	str	r4, [r5, #20]
   83900:	61ac      	str	r4, [r5, #24]
   83902:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83906:	2208      	movs	r2, #8
   83908:	f7fe fd1e 	bl	82348 <memset>
   8390c:	9b01      	ldr	r3, [sp, #4]
   8390e:	61ed      	str	r5, [r5, #28]
   83910:	f8c5 b020 	str.w	fp, [r5, #32]
   83914:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83918:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8391c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83920:	63bb      	str	r3, [r7, #56]	; 0x38
   83922:	b003      	add	sp, #12
   83924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83928:	00083841 	.word	0x00083841
   8392c:	00084bad 	.word	0x00084bad
   83930:	00084bd1 	.word	0x00084bd1
   83934:	00084c0d 	.word	0x00084c0d
   83938:	00084c2d 	.word	0x00084c2d

0008393c <__sinit>:
   8393c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8393e:	b103      	cbz	r3, 83942 <__sinit+0x6>
   83940:	4770      	bx	lr
   83942:	f7ff bf83 	b.w	8384c <__sinit.part.1>
   83946:	bf00      	nop

00083948 <__sfp_lock_acquire>:
   83948:	4770      	bx	lr
   8394a:	bf00      	nop

0008394c <__sfp_lock_release>:
   8394c:	4770      	bx	lr
   8394e:	bf00      	nop

00083950 <__libc_fini_array>:
   83950:	b538      	push	{r3, r4, r5, lr}
   83952:	4d07      	ldr	r5, [pc, #28]	; (83970 <__libc_fini_array+0x20>)
   83954:	4c07      	ldr	r4, [pc, #28]	; (83974 <__libc_fini_array+0x24>)
   83956:	1b2c      	subs	r4, r5, r4
   83958:	10a4      	asrs	r4, r4, #2
   8395a:	d005      	beq.n	83968 <__libc_fini_array+0x18>
   8395c:	3c01      	subs	r4, #1
   8395e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83962:	4798      	blx	r3
   83964:	2c00      	cmp	r4, #0
   83966:	d1f9      	bne.n	8395c <__libc_fini_array+0xc>
   83968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8396c:	f001 bd14 	b.w	85398 <_fini>
   83970:	000853a8 	.word	0x000853a8
   83974:	000853a4 	.word	0x000853a4

00083978 <__fputwc>:
   83978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8397c:	b082      	sub	sp, #8
   8397e:	4606      	mov	r6, r0
   83980:	460f      	mov	r7, r1
   83982:	4614      	mov	r4, r2
   83984:	f000 fb3a 	bl	83ffc <__locale_mb_cur_max>
   83988:	2801      	cmp	r0, #1
   8398a:	d032      	beq.n	839f2 <__fputwc+0x7a>
   8398c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83990:	463a      	mov	r2, r7
   83992:	a901      	add	r1, sp, #4
   83994:	4630      	mov	r0, r6
   83996:	f001 f9a3 	bl	84ce0 <_wcrtomb_r>
   8399a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8399e:	4680      	mov	r8, r0
   839a0:	d020      	beq.n	839e4 <__fputwc+0x6c>
   839a2:	b370      	cbz	r0, 83a02 <__fputwc+0x8a>
   839a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   839a8:	2500      	movs	r5, #0
   839aa:	e008      	b.n	839be <__fputwc+0x46>
   839ac:	6823      	ldr	r3, [r4, #0]
   839ae:	1c5a      	adds	r2, r3, #1
   839b0:	6022      	str	r2, [r4, #0]
   839b2:	7019      	strb	r1, [r3, #0]
   839b4:	3501      	adds	r5, #1
   839b6:	4545      	cmp	r5, r8
   839b8:	d223      	bcs.n	83a02 <__fputwc+0x8a>
   839ba:	ab01      	add	r3, sp, #4
   839bc:	5d59      	ldrb	r1, [r3, r5]
   839be:	68a3      	ldr	r3, [r4, #8]
   839c0:	3b01      	subs	r3, #1
   839c2:	2b00      	cmp	r3, #0
   839c4:	60a3      	str	r3, [r4, #8]
   839c6:	daf1      	bge.n	839ac <__fputwc+0x34>
   839c8:	69a2      	ldr	r2, [r4, #24]
   839ca:	4293      	cmp	r3, r2
   839cc:	db01      	blt.n	839d2 <__fputwc+0x5a>
   839ce:	290a      	cmp	r1, #10
   839d0:	d1ec      	bne.n	839ac <__fputwc+0x34>
   839d2:	4622      	mov	r2, r4
   839d4:	4630      	mov	r0, r6
   839d6:	f001 f92d 	bl	84c34 <__swbuf_r>
   839da:	1c43      	adds	r3, r0, #1
   839dc:	d1ea      	bne.n	839b4 <__fputwc+0x3c>
   839de:	b002      	add	sp, #8
   839e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839e4:	89a3      	ldrh	r3, [r4, #12]
   839e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839ea:	81a3      	strh	r3, [r4, #12]
   839ec:	b002      	add	sp, #8
   839ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839f2:	1e7b      	subs	r3, r7, #1
   839f4:	2bfe      	cmp	r3, #254	; 0xfe
   839f6:	d8c9      	bhi.n	8398c <__fputwc+0x14>
   839f8:	b2f9      	uxtb	r1, r7
   839fa:	4680      	mov	r8, r0
   839fc:	f88d 1004 	strb.w	r1, [sp, #4]
   83a00:	e7d2      	b.n	839a8 <__fputwc+0x30>
   83a02:	4638      	mov	r0, r7
   83a04:	b002      	add	sp, #8
   83a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a0a:	bf00      	nop

00083a0c <_fputwc_r>:
   83a0c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83a10:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   83a14:	d10a      	bne.n	83a2c <_fputwc_r+0x20>
   83a16:	b410      	push	{r4}
   83a18:	6e54      	ldr	r4, [r2, #100]	; 0x64
   83a1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83a1e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   83a22:	6654      	str	r4, [r2, #100]	; 0x64
   83a24:	8193      	strh	r3, [r2, #12]
   83a26:	bc10      	pop	{r4}
   83a28:	f7ff bfa6 	b.w	83978 <__fputwc>
   83a2c:	f7ff bfa4 	b.w	83978 <__fputwc>

00083a30 <_malloc_trim_r>:
   83a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a32:	460c      	mov	r4, r1
   83a34:	4f22      	ldr	r7, [pc, #136]	; (83ac0 <_malloc_trim_r+0x90>)
   83a36:	4606      	mov	r6, r0
   83a38:	f000 feb8 	bl	847ac <__malloc_lock>
   83a3c:	68bb      	ldr	r3, [r7, #8]
   83a3e:	685d      	ldr	r5, [r3, #4]
   83a40:	f025 0503 	bic.w	r5, r5, #3
   83a44:	1b29      	subs	r1, r5, r4
   83a46:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83a4a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83a4e:	f021 010f 	bic.w	r1, r1, #15
   83a52:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83a56:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83a5a:	db07      	blt.n	83a6c <_malloc_trim_r+0x3c>
   83a5c:	2100      	movs	r1, #0
   83a5e:	4630      	mov	r0, r6
   83a60:	f001 f892 	bl	84b88 <_sbrk_r>
   83a64:	68bb      	ldr	r3, [r7, #8]
   83a66:	442b      	add	r3, r5
   83a68:	4298      	cmp	r0, r3
   83a6a:	d004      	beq.n	83a76 <_malloc_trim_r+0x46>
   83a6c:	4630      	mov	r0, r6
   83a6e:	f000 fe9f 	bl	847b0 <__malloc_unlock>
   83a72:	2000      	movs	r0, #0
   83a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a76:	4261      	negs	r1, r4
   83a78:	4630      	mov	r0, r6
   83a7a:	f001 f885 	bl	84b88 <_sbrk_r>
   83a7e:	3001      	adds	r0, #1
   83a80:	d00d      	beq.n	83a9e <_malloc_trim_r+0x6e>
   83a82:	4b10      	ldr	r3, [pc, #64]	; (83ac4 <_malloc_trim_r+0x94>)
   83a84:	68ba      	ldr	r2, [r7, #8]
   83a86:	6819      	ldr	r1, [r3, #0]
   83a88:	1b2d      	subs	r5, r5, r4
   83a8a:	f045 0501 	orr.w	r5, r5, #1
   83a8e:	4630      	mov	r0, r6
   83a90:	1b09      	subs	r1, r1, r4
   83a92:	6055      	str	r5, [r2, #4]
   83a94:	6019      	str	r1, [r3, #0]
   83a96:	f000 fe8b 	bl	847b0 <__malloc_unlock>
   83a9a:	2001      	movs	r0, #1
   83a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a9e:	2100      	movs	r1, #0
   83aa0:	4630      	mov	r0, r6
   83aa2:	f001 f871 	bl	84b88 <_sbrk_r>
   83aa6:	68ba      	ldr	r2, [r7, #8]
   83aa8:	1a83      	subs	r3, r0, r2
   83aaa:	2b0f      	cmp	r3, #15
   83aac:	ddde      	ble.n	83a6c <_malloc_trim_r+0x3c>
   83aae:	4c06      	ldr	r4, [pc, #24]	; (83ac8 <_malloc_trim_r+0x98>)
   83ab0:	4904      	ldr	r1, [pc, #16]	; (83ac4 <_malloc_trim_r+0x94>)
   83ab2:	6824      	ldr	r4, [r4, #0]
   83ab4:	f043 0301 	orr.w	r3, r3, #1
   83ab8:	1b00      	subs	r0, r0, r4
   83aba:	6053      	str	r3, [r2, #4]
   83abc:	6008      	str	r0, [r1, #0]
   83abe:	e7d5      	b.n	83a6c <_malloc_trim_r+0x3c>
   83ac0:	20070590 	.word	0x20070590
   83ac4:	2007abdc 	.word	0x2007abdc
   83ac8:	2007099c 	.word	0x2007099c

00083acc <_free_r>:
   83acc:	2900      	cmp	r1, #0
   83ace:	d045      	beq.n	83b5c <_free_r+0x90>
   83ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ad4:	460d      	mov	r5, r1
   83ad6:	4680      	mov	r8, r0
   83ad8:	f000 fe68 	bl	847ac <__malloc_lock>
   83adc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83ae0:	496a      	ldr	r1, [pc, #424]	; (83c8c <_free_r+0x1c0>)
   83ae2:	f1a5 0408 	sub.w	r4, r5, #8
   83ae6:	f027 0301 	bic.w	r3, r7, #1
   83aea:	18e2      	adds	r2, r4, r3
   83aec:	688e      	ldr	r6, [r1, #8]
   83aee:	6850      	ldr	r0, [r2, #4]
   83af0:	42b2      	cmp	r2, r6
   83af2:	f020 0003 	bic.w	r0, r0, #3
   83af6:	d062      	beq.n	83bbe <_free_r+0xf2>
   83af8:	07fe      	lsls	r6, r7, #31
   83afa:	6050      	str	r0, [r2, #4]
   83afc:	d40b      	bmi.n	83b16 <_free_r+0x4a>
   83afe:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83b02:	f101 0e08 	add.w	lr, r1, #8
   83b06:	1be4      	subs	r4, r4, r7
   83b08:	68a5      	ldr	r5, [r4, #8]
   83b0a:	443b      	add	r3, r7
   83b0c:	4575      	cmp	r5, lr
   83b0e:	d06f      	beq.n	83bf0 <_free_r+0x124>
   83b10:	68e7      	ldr	r7, [r4, #12]
   83b12:	60ef      	str	r7, [r5, #12]
   83b14:	60bd      	str	r5, [r7, #8]
   83b16:	1815      	adds	r5, r2, r0
   83b18:	686d      	ldr	r5, [r5, #4]
   83b1a:	07ed      	lsls	r5, r5, #31
   83b1c:	d542      	bpl.n	83ba4 <_free_r+0xd8>
   83b1e:	f043 0201 	orr.w	r2, r3, #1
   83b22:	6062      	str	r2, [r4, #4]
   83b24:	50e3      	str	r3, [r4, r3]
   83b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83b2a:	d218      	bcs.n	83b5e <_free_r+0x92>
   83b2c:	08db      	lsrs	r3, r3, #3
   83b2e:	6848      	ldr	r0, [r1, #4]
   83b30:	109d      	asrs	r5, r3, #2
   83b32:	2201      	movs	r2, #1
   83b34:	3301      	adds	r3, #1
   83b36:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83b3a:	fa02 f505 	lsl.w	r5, r2, r5
   83b3e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   83b42:	4328      	orrs	r0, r5
   83b44:	3a08      	subs	r2, #8
   83b46:	60e2      	str	r2, [r4, #12]
   83b48:	60a7      	str	r7, [r4, #8]
   83b4a:	6048      	str	r0, [r1, #4]
   83b4c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83b50:	60fc      	str	r4, [r7, #12]
   83b52:	4640      	mov	r0, r8
   83b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b58:	f000 be2a 	b.w	847b0 <__malloc_unlock>
   83b5c:	4770      	bx	lr
   83b5e:	0a5a      	lsrs	r2, r3, #9
   83b60:	2a04      	cmp	r2, #4
   83b62:	d853      	bhi.n	83c0c <_free_r+0x140>
   83b64:	099a      	lsrs	r2, r3, #6
   83b66:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83b6a:	007f      	lsls	r7, r7, #1
   83b6c:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83b70:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   83b74:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   83b78:	3808      	subs	r0, #8
   83b7a:	4290      	cmp	r0, r2
   83b7c:	4943      	ldr	r1, [pc, #268]	; (83c8c <_free_r+0x1c0>)
   83b7e:	d04d      	beq.n	83c1c <_free_r+0x150>
   83b80:	6851      	ldr	r1, [r2, #4]
   83b82:	f021 0103 	bic.w	r1, r1, #3
   83b86:	428b      	cmp	r3, r1
   83b88:	d202      	bcs.n	83b90 <_free_r+0xc4>
   83b8a:	6892      	ldr	r2, [r2, #8]
   83b8c:	4290      	cmp	r0, r2
   83b8e:	d1f7      	bne.n	83b80 <_free_r+0xb4>
   83b90:	68d0      	ldr	r0, [r2, #12]
   83b92:	60e0      	str	r0, [r4, #12]
   83b94:	60a2      	str	r2, [r4, #8]
   83b96:	6084      	str	r4, [r0, #8]
   83b98:	60d4      	str	r4, [r2, #12]
   83b9a:	4640      	mov	r0, r8
   83b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ba0:	f000 be06 	b.w	847b0 <__malloc_unlock>
   83ba4:	6895      	ldr	r5, [r2, #8]
   83ba6:	4f3a      	ldr	r7, [pc, #232]	; (83c90 <_free_r+0x1c4>)
   83ba8:	4403      	add	r3, r0
   83baa:	42bd      	cmp	r5, r7
   83bac:	d03f      	beq.n	83c2e <_free_r+0x162>
   83bae:	68d0      	ldr	r0, [r2, #12]
   83bb0:	f043 0201 	orr.w	r2, r3, #1
   83bb4:	60e8      	str	r0, [r5, #12]
   83bb6:	6085      	str	r5, [r0, #8]
   83bb8:	6062      	str	r2, [r4, #4]
   83bba:	50e3      	str	r3, [r4, r3]
   83bbc:	e7b3      	b.n	83b26 <_free_r+0x5a>
   83bbe:	07ff      	lsls	r7, r7, #31
   83bc0:	4403      	add	r3, r0
   83bc2:	d407      	bmi.n	83bd4 <_free_r+0x108>
   83bc4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83bc8:	1b64      	subs	r4, r4, r5
   83bca:	68e2      	ldr	r2, [r4, #12]
   83bcc:	68a0      	ldr	r0, [r4, #8]
   83bce:	442b      	add	r3, r5
   83bd0:	60c2      	str	r2, [r0, #12]
   83bd2:	6090      	str	r0, [r2, #8]
   83bd4:	4a2f      	ldr	r2, [pc, #188]	; (83c94 <_free_r+0x1c8>)
   83bd6:	f043 0001 	orr.w	r0, r3, #1
   83bda:	6812      	ldr	r2, [r2, #0]
   83bdc:	6060      	str	r0, [r4, #4]
   83bde:	4293      	cmp	r3, r2
   83be0:	608c      	str	r4, [r1, #8]
   83be2:	d3b6      	bcc.n	83b52 <_free_r+0x86>
   83be4:	4b2c      	ldr	r3, [pc, #176]	; (83c98 <_free_r+0x1cc>)
   83be6:	4640      	mov	r0, r8
   83be8:	6819      	ldr	r1, [r3, #0]
   83bea:	f7ff ff21 	bl	83a30 <_malloc_trim_r>
   83bee:	e7b0      	b.n	83b52 <_free_r+0x86>
   83bf0:	1811      	adds	r1, r2, r0
   83bf2:	6849      	ldr	r1, [r1, #4]
   83bf4:	07c9      	lsls	r1, r1, #31
   83bf6:	d444      	bmi.n	83c82 <_free_r+0x1b6>
   83bf8:	6891      	ldr	r1, [r2, #8]
   83bfa:	4403      	add	r3, r0
   83bfc:	68d2      	ldr	r2, [r2, #12]
   83bfe:	f043 0001 	orr.w	r0, r3, #1
   83c02:	60ca      	str	r2, [r1, #12]
   83c04:	6091      	str	r1, [r2, #8]
   83c06:	6060      	str	r0, [r4, #4]
   83c08:	50e3      	str	r3, [r4, r3]
   83c0a:	e7a2      	b.n	83b52 <_free_r+0x86>
   83c0c:	2a14      	cmp	r2, #20
   83c0e:	d817      	bhi.n	83c40 <_free_r+0x174>
   83c10:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83c14:	007f      	lsls	r7, r7, #1
   83c16:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83c1a:	e7a9      	b.n	83b70 <_free_r+0xa4>
   83c1c:	10aa      	asrs	r2, r5, #2
   83c1e:	684b      	ldr	r3, [r1, #4]
   83c20:	2501      	movs	r5, #1
   83c22:	fa05 f202 	lsl.w	r2, r5, r2
   83c26:	4313      	orrs	r3, r2
   83c28:	604b      	str	r3, [r1, #4]
   83c2a:	4602      	mov	r2, r0
   83c2c:	e7b1      	b.n	83b92 <_free_r+0xc6>
   83c2e:	f043 0201 	orr.w	r2, r3, #1
   83c32:	614c      	str	r4, [r1, #20]
   83c34:	610c      	str	r4, [r1, #16]
   83c36:	60e5      	str	r5, [r4, #12]
   83c38:	60a5      	str	r5, [r4, #8]
   83c3a:	6062      	str	r2, [r4, #4]
   83c3c:	50e3      	str	r3, [r4, r3]
   83c3e:	e788      	b.n	83b52 <_free_r+0x86>
   83c40:	2a54      	cmp	r2, #84	; 0x54
   83c42:	d806      	bhi.n	83c52 <_free_r+0x186>
   83c44:	0b1a      	lsrs	r2, r3, #12
   83c46:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83c4a:	007f      	lsls	r7, r7, #1
   83c4c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83c50:	e78e      	b.n	83b70 <_free_r+0xa4>
   83c52:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83c56:	d806      	bhi.n	83c66 <_free_r+0x19a>
   83c58:	0bda      	lsrs	r2, r3, #15
   83c5a:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83c5e:	007f      	lsls	r7, r7, #1
   83c60:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83c64:	e784      	b.n	83b70 <_free_r+0xa4>
   83c66:	f240 5054 	movw	r0, #1364	; 0x554
   83c6a:	4282      	cmp	r2, r0
   83c6c:	d806      	bhi.n	83c7c <_free_r+0x1b0>
   83c6e:	0c9a      	lsrs	r2, r3, #18
   83c70:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83c74:	007f      	lsls	r7, r7, #1
   83c76:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83c7a:	e779      	b.n	83b70 <_free_r+0xa4>
   83c7c:	27fe      	movs	r7, #254	; 0xfe
   83c7e:	257e      	movs	r5, #126	; 0x7e
   83c80:	e776      	b.n	83b70 <_free_r+0xa4>
   83c82:	f043 0201 	orr.w	r2, r3, #1
   83c86:	6062      	str	r2, [r4, #4]
   83c88:	50e3      	str	r3, [r4, r3]
   83c8a:	e762      	b.n	83b52 <_free_r+0x86>
   83c8c:	20070590 	.word	0x20070590
   83c90:	20070598 	.word	0x20070598
   83c94:	20070998 	.word	0x20070998
   83c98:	2007abd8 	.word	0x2007abd8

00083c9c <__sfvwrite_r>:
   83c9c:	6893      	ldr	r3, [r2, #8]
   83c9e:	2b00      	cmp	r3, #0
   83ca0:	f000 80ab 	beq.w	83dfa <__sfvwrite_r+0x15e>
   83ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ca8:	898b      	ldrh	r3, [r1, #12]
   83caa:	b085      	sub	sp, #20
   83cac:	460c      	mov	r4, r1
   83cae:	0719      	lsls	r1, r3, #28
   83cb0:	9002      	str	r0, [sp, #8]
   83cb2:	4616      	mov	r6, r2
   83cb4:	d528      	bpl.n	83d08 <__sfvwrite_r+0x6c>
   83cb6:	6922      	ldr	r2, [r4, #16]
   83cb8:	b332      	cbz	r2, 83d08 <__sfvwrite_r+0x6c>
   83cba:	f003 0802 	and.w	r8, r3, #2
   83cbe:	fa1f f088 	uxth.w	r0, r8
   83cc2:	6835      	ldr	r5, [r6, #0]
   83cc4:	b378      	cbz	r0, 83d26 <__sfvwrite_r+0x8a>
   83cc6:	f04f 0900 	mov.w	r9, #0
   83cca:	46c8      	mov	r8, r9
   83ccc:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 83fa0 <__sfvwrite_r+0x304>
   83cd0:	f1b8 0f00 	cmp.w	r8, #0
   83cd4:	f000 808b 	beq.w	83dee <__sfvwrite_r+0x152>
   83cd8:	45d0      	cmp	r8, sl
   83cda:	4643      	mov	r3, r8
   83cdc:	464a      	mov	r2, r9
   83cde:	bf28      	it	cs
   83ce0:	4653      	movcs	r3, sl
   83ce2:	69e1      	ldr	r1, [r4, #28]
   83ce4:	9802      	ldr	r0, [sp, #8]
   83ce6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83ce8:	47b8      	blx	r7
   83cea:	2800      	cmp	r0, #0
   83cec:	f340 80a5 	ble.w	83e3a <__sfvwrite_r+0x19e>
   83cf0:	68b3      	ldr	r3, [r6, #8]
   83cf2:	4481      	add	r9, r0
   83cf4:	1a1b      	subs	r3, r3, r0
   83cf6:	ebc0 0808 	rsb	r8, r0, r8
   83cfa:	60b3      	str	r3, [r6, #8]
   83cfc:	2b00      	cmp	r3, #0
   83cfe:	d1e7      	bne.n	83cd0 <__sfvwrite_r+0x34>
   83d00:	2000      	movs	r0, #0
   83d02:	b005      	add	sp, #20
   83d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d08:	4621      	mov	r1, r4
   83d0a:	9802      	ldr	r0, [sp, #8]
   83d0c:	f7ff fc6a 	bl	835e4 <__swsetup_r>
   83d10:	2800      	cmp	r0, #0
   83d12:	f040 813c 	bne.w	83f8e <__sfvwrite_r+0x2f2>
   83d16:	89a3      	ldrh	r3, [r4, #12]
   83d18:	6835      	ldr	r5, [r6, #0]
   83d1a:	f003 0802 	and.w	r8, r3, #2
   83d1e:	fa1f f088 	uxth.w	r0, r8
   83d22:	2800      	cmp	r0, #0
   83d24:	d1cf      	bne.n	83cc6 <__sfvwrite_r+0x2a>
   83d26:	f013 0901 	ands.w	r9, r3, #1
   83d2a:	f040 8090 	bne.w	83e4e <__sfvwrite_r+0x1b2>
   83d2e:	464f      	mov	r7, r9
   83d30:	9601      	str	r6, [sp, #4]
   83d32:	2f00      	cmp	r7, #0
   83d34:	d056      	beq.n	83de4 <__sfvwrite_r+0x148>
   83d36:	059a      	lsls	r2, r3, #22
   83d38:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83d3c:	d55f      	bpl.n	83dfe <__sfvwrite_r+0x162>
   83d3e:	4547      	cmp	r7, r8
   83d40:	46c2      	mov	sl, r8
   83d42:	f0c0 80bf 	bcc.w	83ec4 <__sfvwrite_r+0x228>
   83d46:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83d4a:	f000 80bd 	beq.w	83ec8 <__sfvwrite_r+0x22c>
   83d4e:	6962      	ldr	r2, [r4, #20]
   83d50:	6820      	ldr	r0, [r4, #0]
   83d52:	6921      	ldr	r1, [r4, #16]
   83d54:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83d58:	ebc1 0a00 	rsb	sl, r1, r0
   83d5c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83d60:	f10a 0001 	add.w	r0, sl, #1
   83d64:	ea4f 0868 	mov.w	r8, r8, asr #1
   83d68:	4438      	add	r0, r7
   83d6a:	4540      	cmp	r0, r8
   83d6c:	4642      	mov	r2, r8
   83d6e:	bf84      	itt	hi
   83d70:	4680      	movhi	r8, r0
   83d72:	4642      	movhi	r2, r8
   83d74:	055b      	lsls	r3, r3, #21
   83d76:	f140 80f2 	bpl.w	83f5e <__sfvwrite_r+0x2c2>
   83d7a:	4611      	mov	r1, r2
   83d7c:	9802      	ldr	r0, [sp, #8]
   83d7e:	f000 f9bf 	bl	84100 <_malloc_r>
   83d82:	4683      	mov	fp, r0
   83d84:	2800      	cmp	r0, #0
   83d86:	f000 8105 	beq.w	83f94 <__sfvwrite_r+0x2f8>
   83d8a:	4652      	mov	r2, sl
   83d8c:	6921      	ldr	r1, [r4, #16]
   83d8e:	f7fe fa65 	bl	8225c <memcpy>
   83d92:	89a3      	ldrh	r3, [r4, #12]
   83d94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83d9c:	81a3      	strh	r3, [r4, #12]
   83d9e:	ebca 0308 	rsb	r3, sl, r8
   83da2:	eb0b 000a 	add.w	r0, fp, sl
   83da6:	f8c4 8014 	str.w	r8, [r4, #20]
   83daa:	46ba      	mov	sl, r7
   83dac:	46b8      	mov	r8, r7
   83dae:	f8c4 b010 	str.w	fp, [r4, #16]
   83db2:	6020      	str	r0, [r4, #0]
   83db4:	60a3      	str	r3, [r4, #8]
   83db6:	4652      	mov	r2, sl
   83db8:	4649      	mov	r1, r9
   83dba:	f000 fc93 	bl	846e4 <memmove>
   83dbe:	68a0      	ldr	r0, [r4, #8]
   83dc0:	6823      	ldr	r3, [r4, #0]
   83dc2:	ebc8 0000 	rsb	r0, r8, r0
   83dc6:	60a0      	str	r0, [r4, #8]
   83dc8:	4638      	mov	r0, r7
   83dca:	4453      	add	r3, sl
   83dcc:	6023      	str	r3, [r4, #0]
   83dce:	9a01      	ldr	r2, [sp, #4]
   83dd0:	4481      	add	r9, r0
   83dd2:	6893      	ldr	r3, [r2, #8]
   83dd4:	1a3f      	subs	r7, r7, r0
   83dd6:	1a1b      	subs	r3, r3, r0
   83dd8:	6093      	str	r3, [r2, #8]
   83dda:	2b00      	cmp	r3, #0
   83ddc:	d090      	beq.n	83d00 <__sfvwrite_r+0x64>
   83dde:	89a3      	ldrh	r3, [r4, #12]
   83de0:	2f00      	cmp	r7, #0
   83de2:	d1a8      	bne.n	83d36 <__sfvwrite_r+0x9a>
   83de4:	f8d5 9000 	ldr.w	r9, [r5]
   83de8:	686f      	ldr	r7, [r5, #4]
   83dea:	3508      	adds	r5, #8
   83dec:	e7a1      	b.n	83d32 <__sfvwrite_r+0x96>
   83dee:	f8d5 9000 	ldr.w	r9, [r5]
   83df2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83df6:	3508      	adds	r5, #8
   83df8:	e76a      	b.n	83cd0 <__sfvwrite_r+0x34>
   83dfa:	2000      	movs	r0, #0
   83dfc:	4770      	bx	lr
   83dfe:	6820      	ldr	r0, [r4, #0]
   83e00:	6923      	ldr	r3, [r4, #16]
   83e02:	4298      	cmp	r0, r3
   83e04:	d803      	bhi.n	83e0e <__sfvwrite_r+0x172>
   83e06:	6962      	ldr	r2, [r4, #20]
   83e08:	4297      	cmp	r7, r2
   83e0a:	f080 8083 	bcs.w	83f14 <__sfvwrite_r+0x278>
   83e0e:	45b8      	cmp	r8, r7
   83e10:	bf28      	it	cs
   83e12:	46b8      	movcs	r8, r7
   83e14:	4649      	mov	r1, r9
   83e16:	4642      	mov	r2, r8
   83e18:	f000 fc64 	bl	846e4 <memmove>
   83e1c:	68a3      	ldr	r3, [r4, #8]
   83e1e:	6822      	ldr	r2, [r4, #0]
   83e20:	ebc8 0303 	rsb	r3, r8, r3
   83e24:	4442      	add	r2, r8
   83e26:	60a3      	str	r3, [r4, #8]
   83e28:	6022      	str	r2, [r4, #0]
   83e2a:	2b00      	cmp	r3, #0
   83e2c:	d148      	bne.n	83ec0 <__sfvwrite_r+0x224>
   83e2e:	4621      	mov	r1, r4
   83e30:	9802      	ldr	r0, [sp, #8]
   83e32:	f7ff fcef 	bl	83814 <_fflush_r>
   83e36:	2800      	cmp	r0, #0
   83e38:	d042      	beq.n	83ec0 <__sfvwrite_r+0x224>
   83e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e42:	f04f 30ff 	mov.w	r0, #4294967295
   83e46:	81a3      	strh	r3, [r4, #12]
   83e48:	b005      	add	sp, #20
   83e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e4e:	4680      	mov	r8, r0
   83e50:	4682      	mov	sl, r0
   83e52:	4681      	mov	r9, r0
   83e54:	9001      	str	r0, [sp, #4]
   83e56:	f1b9 0f00 	cmp.w	r9, #0
   83e5a:	d029      	beq.n	83eb0 <__sfvwrite_r+0x214>
   83e5c:	9b01      	ldr	r3, [sp, #4]
   83e5e:	2b00      	cmp	r3, #0
   83e60:	d04b      	beq.n	83efa <__sfvwrite_r+0x25e>
   83e62:	45c8      	cmp	r8, r9
   83e64:	46c3      	mov	fp, r8
   83e66:	bf28      	it	cs
   83e68:	46cb      	movcs	fp, r9
   83e6a:	6820      	ldr	r0, [r4, #0]
   83e6c:	6923      	ldr	r3, [r4, #16]
   83e6e:	465f      	mov	r7, fp
   83e70:	4298      	cmp	r0, r3
   83e72:	6962      	ldr	r2, [r4, #20]
   83e74:	d903      	bls.n	83e7e <__sfvwrite_r+0x1e2>
   83e76:	68a3      	ldr	r3, [r4, #8]
   83e78:	4413      	add	r3, r2
   83e7a:	459b      	cmp	fp, r3
   83e7c:	dc5c      	bgt.n	83f38 <__sfvwrite_r+0x29c>
   83e7e:	4593      	cmp	fp, r2
   83e80:	db24      	blt.n	83ecc <__sfvwrite_r+0x230>
   83e82:	4613      	mov	r3, r2
   83e84:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83e86:	4652      	mov	r2, sl
   83e88:	69e1      	ldr	r1, [r4, #28]
   83e8a:	9802      	ldr	r0, [sp, #8]
   83e8c:	47b8      	blx	r7
   83e8e:	1e07      	subs	r7, r0, #0
   83e90:	ddd3      	ble.n	83e3a <__sfvwrite_r+0x19e>
   83e92:	ebb8 0807 	subs.w	r8, r8, r7
   83e96:	d027      	beq.n	83ee8 <__sfvwrite_r+0x24c>
   83e98:	68b3      	ldr	r3, [r6, #8]
   83e9a:	44ba      	add	sl, r7
   83e9c:	1bdb      	subs	r3, r3, r7
   83e9e:	ebc7 0909 	rsb	r9, r7, r9
   83ea2:	60b3      	str	r3, [r6, #8]
   83ea4:	2b00      	cmp	r3, #0
   83ea6:	f43f af2b 	beq.w	83d00 <__sfvwrite_r+0x64>
   83eaa:	f1b9 0f00 	cmp.w	r9, #0
   83eae:	d1d5      	bne.n	83e5c <__sfvwrite_r+0x1c0>
   83eb0:	2300      	movs	r3, #0
   83eb2:	f8d5 a000 	ldr.w	sl, [r5]
   83eb6:	f8d5 9004 	ldr.w	r9, [r5, #4]
   83eba:	9301      	str	r3, [sp, #4]
   83ebc:	3508      	adds	r5, #8
   83ebe:	e7ca      	b.n	83e56 <__sfvwrite_r+0x1ba>
   83ec0:	4640      	mov	r0, r8
   83ec2:	e784      	b.n	83dce <__sfvwrite_r+0x132>
   83ec4:	46b8      	mov	r8, r7
   83ec6:	46ba      	mov	sl, r7
   83ec8:	6820      	ldr	r0, [r4, #0]
   83eca:	e774      	b.n	83db6 <__sfvwrite_r+0x11a>
   83ecc:	465a      	mov	r2, fp
   83ece:	4651      	mov	r1, sl
   83ed0:	f000 fc08 	bl	846e4 <memmove>
   83ed4:	68a2      	ldr	r2, [r4, #8]
   83ed6:	6823      	ldr	r3, [r4, #0]
   83ed8:	ebcb 0202 	rsb	r2, fp, r2
   83edc:	445b      	add	r3, fp
   83ede:	ebb8 0807 	subs.w	r8, r8, r7
   83ee2:	60a2      	str	r2, [r4, #8]
   83ee4:	6023      	str	r3, [r4, #0]
   83ee6:	d1d7      	bne.n	83e98 <__sfvwrite_r+0x1fc>
   83ee8:	4621      	mov	r1, r4
   83eea:	9802      	ldr	r0, [sp, #8]
   83eec:	f7ff fc92 	bl	83814 <_fflush_r>
   83ef0:	2800      	cmp	r0, #0
   83ef2:	d1a2      	bne.n	83e3a <__sfvwrite_r+0x19e>
   83ef4:	f8cd 8004 	str.w	r8, [sp, #4]
   83ef8:	e7ce      	b.n	83e98 <__sfvwrite_r+0x1fc>
   83efa:	464a      	mov	r2, r9
   83efc:	210a      	movs	r1, #10
   83efe:	4650      	mov	r0, sl
   83f00:	f000 fbaa 	bl	84658 <memchr>
   83f04:	2800      	cmp	r0, #0
   83f06:	d03d      	beq.n	83f84 <__sfvwrite_r+0x2e8>
   83f08:	3001      	adds	r0, #1
   83f0a:	2301      	movs	r3, #1
   83f0c:	ebca 0800 	rsb	r8, sl, r0
   83f10:	9301      	str	r3, [sp, #4]
   83f12:	e7a6      	b.n	83e62 <__sfvwrite_r+0x1c6>
   83f14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   83f18:	42bb      	cmp	r3, r7
   83f1a:	bf28      	it	cs
   83f1c:	463b      	movcs	r3, r7
   83f1e:	fb93 f3f2 	sdiv	r3, r3, r2
   83f22:	69e1      	ldr	r1, [r4, #28]
   83f24:	fb02 f303 	mul.w	r3, r2, r3
   83f28:	9802      	ldr	r0, [sp, #8]
   83f2a:	464a      	mov	r2, r9
   83f2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83f2e:	47b0      	blx	r6
   83f30:	2800      	cmp	r0, #0
   83f32:	f73f af4c 	bgt.w	83dce <__sfvwrite_r+0x132>
   83f36:	e780      	b.n	83e3a <__sfvwrite_r+0x19e>
   83f38:	461a      	mov	r2, r3
   83f3a:	4651      	mov	r1, sl
   83f3c:	9303      	str	r3, [sp, #12]
   83f3e:	f000 fbd1 	bl	846e4 <memmove>
   83f42:	6822      	ldr	r2, [r4, #0]
   83f44:	9b03      	ldr	r3, [sp, #12]
   83f46:	4621      	mov	r1, r4
   83f48:	441a      	add	r2, r3
   83f4a:	6022      	str	r2, [r4, #0]
   83f4c:	9802      	ldr	r0, [sp, #8]
   83f4e:	f7ff fc61 	bl	83814 <_fflush_r>
   83f52:	9b03      	ldr	r3, [sp, #12]
   83f54:	2800      	cmp	r0, #0
   83f56:	f47f af70 	bne.w	83e3a <__sfvwrite_r+0x19e>
   83f5a:	461f      	mov	r7, r3
   83f5c:	e799      	b.n	83e92 <__sfvwrite_r+0x1f6>
   83f5e:	9802      	ldr	r0, [sp, #8]
   83f60:	f000 fc28 	bl	847b4 <_realloc_r>
   83f64:	4683      	mov	fp, r0
   83f66:	2800      	cmp	r0, #0
   83f68:	f47f af19 	bne.w	83d9e <__sfvwrite_r+0x102>
   83f6c:	9d02      	ldr	r5, [sp, #8]
   83f6e:	6921      	ldr	r1, [r4, #16]
   83f70:	4628      	mov	r0, r5
   83f72:	f7ff fdab 	bl	83acc <_free_r>
   83f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f7a:	220c      	movs	r2, #12
   83f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83f80:	602a      	str	r2, [r5, #0]
   83f82:	e75c      	b.n	83e3e <__sfvwrite_r+0x1a2>
   83f84:	2301      	movs	r3, #1
   83f86:	f109 0801 	add.w	r8, r9, #1
   83f8a:	9301      	str	r3, [sp, #4]
   83f8c:	e769      	b.n	83e62 <__sfvwrite_r+0x1c6>
   83f8e:	f04f 30ff 	mov.w	r0, #4294967295
   83f92:	e6b6      	b.n	83d02 <__sfvwrite_r+0x66>
   83f94:	9a02      	ldr	r2, [sp, #8]
   83f96:	230c      	movs	r3, #12
   83f98:	6013      	str	r3, [r2, #0]
   83f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f9e:	e74e      	b.n	83e3e <__sfvwrite_r+0x1a2>
   83fa0:	7ffffc00 	.word	0x7ffffc00

00083fa4 <_fwalk_reent>:
   83fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83fa8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83fac:	d01e      	beq.n	83fec <_fwalk_reent+0x48>
   83fae:	4688      	mov	r8, r1
   83fb0:	4607      	mov	r7, r0
   83fb2:	f04f 0900 	mov.w	r9, #0
   83fb6:	6875      	ldr	r5, [r6, #4]
   83fb8:	68b4      	ldr	r4, [r6, #8]
   83fba:	3d01      	subs	r5, #1
   83fbc:	d410      	bmi.n	83fe0 <_fwalk_reent+0x3c>
   83fbe:	89a3      	ldrh	r3, [r4, #12]
   83fc0:	3d01      	subs	r5, #1
   83fc2:	2b01      	cmp	r3, #1
   83fc4:	d908      	bls.n	83fd8 <_fwalk_reent+0x34>
   83fc6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83fca:	3301      	adds	r3, #1
   83fcc:	d004      	beq.n	83fd8 <_fwalk_reent+0x34>
   83fce:	4621      	mov	r1, r4
   83fd0:	4638      	mov	r0, r7
   83fd2:	47c0      	blx	r8
   83fd4:	ea49 0900 	orr.w	r9, r9, r0
   83fd8:	1c6b      	adds	r3, r5, #1
   83fda:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83fde:	d1ee      	bne.n	83fbe <_fwalk_reent+0x1a>
   83fe0:	6836      	ldr	r6, [r6, #0]
   83fe2:	2e00      	cmp	r6, #0
   83fe4:	d1e7      	bne.n	83fb6 <_fwalk_reent+0x12>
   83fe6:	4648      	mov	r0, r9
   83fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83fec:	46b1      	mov	r9, r6
   83fee:	4648      	mov	r0, r9
   83ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083ff4 <__locale_charset>:
   83ff4:	4800      	ldr	r0, [pc, #0]	; (83ff8 <__locale_charset+0x4>)
   83ff6:	4770      	bx	lr
   83ff8:	2007056c 	.word	0x2007056c

00083ffc <__locale_mb_cur_max>:
   83ffc:	4b01      	ldr	r3, [pc, #4]	; (84004 <__locale_mb_cur_max+0x8>)
   83ffe:	6818      	ldr	r0, [r3, #0]
   84000:	4770      	bx	lr
   84002:	bf00      	nop
   84004:	2007058c 	.word	0x2007058c

00084008 <__swhatbuf_r>:
   84008:	b570      	push	{r4, r5, r6, lr}
   8400a:	460e      	mov	r6, r1
   8400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84010:	b090      	sub	sp, #64	; 0x40
   84012:	2900      	cmp	r1, #0
   84014:	4614      	mov	r4, r2
   84016:	461d      	mov	r5, r3
   84018:	db14      	blt.n	84044 <__swhatbuf_r+0x3c>
   8401a:	aa01      	add	r2, sp, #4
   8401c:	f000 ff54 	bl	84ec8 <_fstat_r>
   84020:	2800      	cmp	r0, #0
   84022:	db0f      	blt.n	84044 <__swhatbuf_r+0x3c>
   84024:	9a02      	ldr	r2, [sp, #8]
   84026:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8402a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8402e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   84032:	fab2 f282 	clz	r2, r2
   84036:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8403a:	0952      	lsrs	r2, r2, #5
   8403c:	602a      	str	r2, [r5, #0]
   8403e:	6023      	str	r3, [r4, #0]
   84040:	b010      	add	sp, #64	; 0x40
   84042:	bd70      	pop	{r4, r5, r6, pc}
   84044:	89b2      	ldrh	r2, [r6, #12]
   84046:	2000      	movs	r0, #0
   84048:	f002 0280 	and.w	r2, r2, #128	; 0x80
   8404c:	b292      	uxth	r2, r2
   8404e:	6028      	str	r0, [r5, #0]
   84050:	b11a      	cbz	r2, 8405a <__swhatbuf_r+0x52>
   84052:	2340      	movs	r3, #64	; 0x40
   84054:	6023      	str	r3, [r4, #0]
   84056:	b010      	add	sp, #64	; 0x40
   84058:	bd70      	pop	{r4, r5, r6, pc}
   8405a:	4610      	mov	r0, r2
   8405c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84060:	6023      	str	r3, [r4, #0]
   84062:	b010      	add	sp, #64	; 0x40
   84064:	bd70      	pop	{r4, r5, r6, pc}
   84066:	bf00      	nop

00084068 <__smakebuf_r>:
   84068:	898a      	ldrh	r2, [r1, #12]
   8406a:	460b      	mov	r3, r1
   8406c:	0792      	lsls	r2, r2, #30
   8406e:	d506      	bpl.n	8407e <__smakebuf_r+0x16>
   84070:	f101 0243 	add.w	r2, r1, #67	; 0x43
   84074:	2101      	movs	r1, #1
   84076:	601a      	str	r2, [r3, #0]
   84078:	611a      	str	r2, [r3, #16]
   8407a:	6159      	str	r1, [r3, #20]
   8407c:	4770      	bx	lr
   8407e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84080:	b083      	sub	sp, #12
   84082:	ab01      	add	r3, sp, #4
   84084:	466a      	mov	r2, sp
   84086:	460c      	mov	r4, r1
   84088:	4605      	mov	r5, r0
   8408a:	f7ff ffbd 	bl	84008 <__swhatbuf_r>
   8408e:	9900      	ldr	r1, [sp, #0]
   84090:	4606      	mov	r6, r0
   84092:	4628      	mov	r0, r5
   84094:	f000 f834 	bl	84100 <_malloc_r>
   84098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8409c:	b1d0      	cbz	r0, 840d4 <__smakebuf_r+0x6c>
   8409e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   840a2:	4f12      	ldr	r7, [pc, #72]	; (840ec <__smakebuf_r+0x84>)
   840a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   840a8:	63ef      	str	r7, [r5, #60]	; 0x3c
   840aa:	81a3      	strh	r3, [r4, #12]
   840ac:	6020      	str	r0, [r4, #0]
   840ae:	6120      	str	r0, [r4, #16]
   840b0:	6161      	str	r1, [r4, #20]
   840b2:	b91a      	cbnz	r2, 840bc <__smakebuf_r+0x54>
   840b4:	4333      	orrs	r3, r6
   840b6:	81a3      	strh	r3, [r4, #12]
   840b8:	b003      	add	sp, #12
   840ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   840bc:	4628      	mov	r0, r5
   840be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   840c2:	f000 ff15 	bl	84ef0 <_isatty_r>
   840c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   840ca:	2800      	cmp	r0, #0
   840cc:	d0f2      	beq.n	840b4 <__smakebuf_r+0x4c>
   840ce:	f043 0301 	orr.w	r3, r3, #1
   840d2:	e7ef      	b.n	840b4 <__smakebuf_r+0x4c>
   840d4:	059a      	lsls	r2, r3, #22
   840d6:	d4ef      	bmi.n	840b8 <__smakebuf_r+0x50>
   840d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   840dc:	f043 0302 	orr.w	r3, r3, #2
   840e0:	2101      	movs	r1, #1
   840e2:	81a3      	strh	r3, [r4, #12]
   840e4:	6022      	str	r2, [r4, #0]
   840e6:	6122      	str	r2, [r4, #16]
   840e8:	6161      	str	r1, [r4, #20]
   840ea:	e7e5      	b.n	840b8 <__smakebuf_r+0x50>
   840ec:	00083841 	.word	0x00083841

000840f0 <malloc>:
   840f0:	4b02      	ldr	r3, [pc, #8]	; (840fc <malloc+0xc>)
   840f2:	4601      	mov	r1, r0
   840f4:	6818      	ldr	r0, [r3, #0]
   840f6:	f000 b803 	b.w	84100 <_malloc_r>
   840fa:	bf00      	nop
   840fc:	20070568 	.word	0x20070568

00084100 <_malloc_r>:
   84100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84104:	f101 050b 	add.w	r5, r1, #11
   84108:	2d16      	cmp	r5, #22
   8410a:	b083      	sub	sp, #12
   8410c:	4606      	mov	r6, r0
   8410e:	f240 80a0 	bls.w	84252 <_malloc_r+0x152>
   84112:	f035 0507 	bics.w	r5, r5, #7
   84116:	f100 80c0 	bmi.w	8429a <_malloc_r+0x19a>
   8411a:	42a9      	cmp	r1, r5
   8411c:	f200 80bd 	bhi.w	8429a <_malloc_r+0x19a>
   84120:	f000 fb44 	bl	847ac <__malloc_lock>
   84124:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84128:	f0c0 8290 	bcc.w	8464c <_malloc_r+0x54c>
   8412c:	0a6b      	lsrs	r3, r5, #9
   8412e:	f000 80bb 	beq.w	842a8 <_malloc_r+0x1a8>
   84132:	2b04      	cmp	r3, #4
   84134:	f200 8177 	bhi.w	84426 <_malloc_r+0x326>
   84138:	09a8      	lsrs	r0, r5, #6
   8413a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   8413e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84142:	3038      	adds	r0, #56	; 0x38
   84144:	4fbe      	ldr	r7, [pc, #760]	; (84440 <_malloc_r+0x340>)
   84146:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8414a:	684c      	ldr	r4, [r1, #4]
   8414c:	3908      	subs	r1, #8
   8414e:	42a1      	cmp	r1, r4
   84150:	d107      	bne.n	84162 <_malloc_r+0x62>
   84152:	e0ae      	b.n	842b2 <_malloc_r+0x1b2>
   84154:	2a00      	cmp	r2, #0
   84156:	f280 80ae 	bge.w	842b6 <_malloc_r+0x1b6>
   8415a:	68e4      	ldr	r4, [r4, #12]
   8415c:	42a1      	cmp	r1, r4
   8415e:	f000 80a8 	beq.w	842b2 <_malloc_r+0x1b2>
   84162:	6863      	ldr	r3, [r4, #4]
   84164:	f023 0303 	bic.w	r3, r3, #3
   84168:	1b5a      	subs	r2, r3, r5
   8416a:	2a0f      	cmp	r2, #15
   8416c:	ddf2      	ble.n	84154 <_malloc_r+0x54>
   8416e:	49b4      	ldr	r1, [pc, #720]	; (84440 <_malloc_r+0x340>)
   84170:	693c      	ldr	r4, [r7, #16]
   84172:	f101 0e08 	add.w	lr, r1, #8
   84176:	4574      	cmp	r4, lr
   84178:	f000 81a8 	beq.w	844cc <_malloc_r+0x3cc>
   8417c:	6863      	ldr	r3, [r4, #4]
   8417e:	f023 0303 	bic.w	r3, r3, #3
   84182:	1b5a      	subs	r2, r3, r5
   84184:	2a0f      	cmp	r2, #15
   84186:	f300 818e 	bgt.w	844a6 <_malloc_r+0x3a6>
   8418a:	2a00      	cmp	r2, #0
   8418c:	f8c1 e014 	str.w	lr, [r1, #20]
   84190:	f8c1 e010 	str.w	lr, [r1, #16]
   84194:	f280 8093 	bge.w	842be <_malloc_r+0x1be>
   84198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8419c:	f080 815c 	bcs.w	84458 <_malloc_r+0x358>
   841a0:	08db      	lsrs	r3, r3, #3
   841a2:	684a      	ldr	r2, [r1, #4]
   841a4:	ea4f 09a3 	mov.w	r9, r3, asr #2
   841a8:	f04f 0c01 	mov.w	ip, #1
   841ac:	3301      	adds	r3, #1
   841ae:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   841b2:	fa0c f909 	lsl.w	r9, ip, r9
   841b6:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   841ba:	ea49 0202 	orr.w	r2, r9, r2
   841be:	f1ac 0c08 	sub.w	ip, ip, #8
   841c2:	f8c4 c00c 	str.w	ip, [r4, #12]
   841c6:	f8c4 8008 	str.w	r8, [r4, #8]
   841ca:	604a      	str	r2, [r1, #4]
   841cc:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   841d0:	f8c8 400c 	str.w	r4, [r8, #12]
   841d4:	1083      	asrs	r3, r0, #2
   841d6:	2401      	movs	r4, #1
   841d8:	409c      	lsls	r4, r3
   841da:	4294      	cmp	r4, r2
   841dc:	d87c      	bhi.n	842d8 <_malloc_r+0x1d8>
   841de:	4214      	tst	r4, r2
   841e0:	d106      	bne.n	841f0 <_malloc_r+0xf0>
   841e2:	f020 0003 	bic.w	r0, r0, #3
   841e6:	0064      	lsls	r4, r4, #1
   841e8:	4214      	tst	r4, r2
   841ea:	f100 0004 	add.w	r0, r0, #4
   841ee:	d0fa      	beq.n	841e6 <_malloc_r+0xe6>
   841f0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   841f4:	46cc      	mov	ip, r9
   841f6:	4680      	mov	r8, r0
   841f8:	f8dc 100c 	ldr.w	r1, [ip, #12]
   841fc:	458c      	cmp	ip, r1
   841fe:	d107      	bne.n	84210 <_malloc_r+0x110>
   84200:	e166      	b.n	844d0 <_malloc_r+0x3d0>
   84202:	2a00      	cmp	r2, #0
   84204:	f280 8174 	bge.w	844f0 <_malloc_r+0x3f0>
   84208:	68c9      	ldr	r1, [r1, #12]
   8420a:	458c      	cmp	ip, r1
   8420c:	f000 8160 	beq.w	844d0 <_malloc_r+0x3d0>
   84210:	684b      	ldr	r3, [r1, #4]
   84212:	f023 0303 	bic.w	r3, r3, #3
   84216:	1b5a      	subs	r2, r3, r5
   84218:	2a0f      	cmp	r2, #15
   8421a:	ddf2      	ble.n	84202 <_malloc_r+0x102>
   8421c:	460c      	mov	r4, r1
   8421e:	68cb      	ldr	r3, [r1, #12]
   84220:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84224:	f045 0801 	orr.w	r8, r5, #1
   84228:	f8c1 8004 	str.w	r8, [r1, #4]
   8422c:	440d      	add	r5, r1
   8422e:	f042 0101 	orr.w	r1, r2, #1
   84232:	f8cc 300c 	str.w	r3, [ip, #12]
   84236:	4630      	mov	r0, r6
   84238:	f8c3 c008 	str.w	ip, [r3, #8]
   8423c:	617d      	str	r5, [r7, #20]
   8423e:	613d      	str	r5, [r7, #16]
   84240:	f8c5 e00c 	str.w	lr, [r5, #12]
   84244:	f8c5 e008 	str.w	lr, [r5, #8]
   84248:	6069      	str	r1, [r5, #4]
   8424a:	50aa      	str	r2, [r5, r2]
   8424c:	f000 fab0 	bl	847b0 <__malloc_unlock>
   84250:	e01f      	b.n	84292 <_malloc_r+0x192>
   84252:	2910      	cmp	r1, #16
   84254:	d821      	bhi.n	8429a <_malloc_r+0x19a>
   84256:	f000 faa9 	bl	847ac <__malloc_lock>
   8425a:	2510      	movs	r5, #16
   8425c:	2306      	movs	r3, #6
   8425e:	2002      	movs	r0, #2
   84260:	4f77      	ldr	r7, [pc, #476]	; (84440 <_malloc_r+0x340>)
   84262:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   84266:	685c      	ldr	r4, [r3, #4]
   84268:	f1a3 0208 	sub.w	r2, r3, #8
   8426c:	4294      	cmp	r4, r2
   8426e:	f000 8138 	beq.w	844e2 <_malloc_r+0x3e2>
   84272:	6863      	ldr	r3, [r4, #4]
   84274:	68e1      	ldr	r1, [r4, #12]
   84276:	f023 0303 	bic.w	r3, r3, #3
   8427a:	4423      	add	r3, r4
   8427c:	685a      	ldr	r2, [r3, #4]
   8427e:	68a5      	ldr	r5, [r4, #8]
   84280:	f042 0201 	orr.w	r2, r2, #1
   84284:	60e9      	str	r1, [r5, #12]
   84286:	4630      	mov	r0, r6
   84288:	608d      	str	r5, [r1, #8]
   8428a:	605a      	str	r2, [r3, #4]
   8428c:	f000 fa90 	bl	847b0 <__malloc_unlock>
   84290:	3408      	adds	r4, #8
   84292:	4620      	mov	r0, r4
   84294:	b003      	add	sp, #12
   84296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8429a:	2400      	movs	r4, #0
   8429c:	4620      	mov	r0, r4
   8429e:	230c      	movs	r3, #12
   842a0:	6033      	str	r3, [r6, #0]
   842a2:	b003      	add	sp, #12
   842a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842a8:	2180      	movs	r1, #128	; 0x80
   842aa:	f04f 0e40 	mov.w	lr, #64	; 0x40
   842ae:	203f      	movs	r0, #63	; 0x3f
   842b0:	e748      	b.n	84144 <_malloc_r+0x44>
   842b2:	4670      	mov	r0, lr
   842b4:	e75b      	b.n	8416e <_malloc_r+0x6e>
   842b6:	4423      	add	r3, r4
   842b8:	685a      	ldr	r2, [r3, #4]
   842ba:	68e1      	ldr	r1, [r4, #12]
   842bc:	e7df      	b.n	8427e <_malloc_r+0x17e>
   842be:	4423      	add	r3, r4
   842c0:	685a      	ldr	r2, [r3, #4]
   842c2:	4630      	mov	r0, r6
   842c4:	f042 0201 	orr.w	r2, r2, #1
   842c8:	605a      	str	r2, [r3, #4]
   842ca:	3408      	adds	r4, #8
   842cc:	f000 fa70 	bl	847b0 <__malloc_unlock>
   842d0:	4620      	mov	r0, r4
   842d2:	b003      	add	sp, #12
   842d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842d8:	68bc      	ldr	r4, [r7, #8]
   842da:	6863      	ldr	r3, [r4, #4]
   842dc:	f023 0803 	bic.w	r8, r3, #3
   842e0:	45a8      	cmp	r8, r5
   842e2:	d304      	bcc.n	842ee <_malloc_r+0x1ee>
   842e4:	ebc5 0308 	rsb	r3, r5, r8
   842e8:	2b0f      	cmp	r3, #15
   842ea:	f300 808c 	bgt.w	84406 <_malloc_r+0x306>
   842ee:	4b55      	ldr	r3, [pc, #340]	; (84444 <_malloc_r+0x344>)
   842f0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 84454 <_malloc_r+0x354>
   842f4:	681a      	ldr	r2, [r3, #0]
   842f6:	f8d9 3000 	ldr.w	r3, [r9]
   842fa:	442a      	add	r2, r5
   842fc:	3301      	adds	r3, #1
   842fe:	eb04 0a08 	add.w	sl, r4, r8
   84302:	f000 8160 	beq.w	845c6 <_malloc_r+0x4c6>
   84306:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8430a:	320f      	adds	r2, #15
   8430c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   84310:	f022 020f 	bic.w	r2, r2, #15
   84314:	4611      	mov	r1, r2
   84316:	4630      	mov	r0, r6
   84318:	9201      	str	r2, [sp, #4]
   8431a:	f000 fc35 	bl	84b88 <_sbrk_r>
   8431e:	f1b0 3fff 	cmp.w	r0, #4294967295
   84322:	4683      	mov	fp, r0
   84324:	9a01      	ldr	r2, [sp, #4]
   84326:	f000 8158 	beq.w	845da <_malloc_r+0x4da>
   8432a:	4582      	cmp	sl, r0
   8432c:	f200 80fc 	bhi.w	84528 <_malloc_r+0x428>
   84330:	4b45      	ldr	r3, [pc, #276]	; (84448 <_malloc_r+0x348>)
   84332:	45da      	cmp	sl, fp
   84334:	6819      	ldr	r1, [r3, #0]
   84336:	4411      	add	r1, r2
   84338:	6019      	str	r1, [r3, #0]
   8433a:	f000 8153 	beq.w	845e4 <_malloc_r+0x4e4>
   8433e:	f8d9 0000 	ldr.w	r0, [r9]
   84342:	f8df e110 	ldr.w	lr, [pc, #272]	; 84454 <_malloc_r+0x354>
   84346:	3001      	adds	r0, #1
   84348:	bf1b      	ittet	ne
   8434a:	ebca 0a0b 	rsbne	sl, sl, fp
   8434e:	4451      	addne	r1, sl
   84350:	f8ce b000 	streq.w	fp, [lr]
   84354:	6019      	strne	r1, [r3, #0]
   84356:	f01b 0107 	ands.w	r1, fp, #7
   8435a:	f000 8117 	beq.w	8458c <_malloc_r+0x48c>
   8435e:	f1c1 0008 	rsb	r0, r1, #8
   84362:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84366:	4483      	add	fp, r0
   84368:	3108      	adds	r1, #8
   8436a:	445a      	add	r2, fp
   8436c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   84370:	ebc2 0901 	rsb	r9, r2, r1
   84374:	4649      	mov	r1, r9
   84376:	4630      	mov	r0, r6
   84378:	9301      	str	r3, [sp, #4]
   8437a:	f000 fc05 	bl	84b88 <_sbrk_r>
   8437e:	1c43      	adds	r3, r0, #1
   84380:	9b01      	ldr	r3, [sp, #4]
   84382:	f000 813f 	beq.w	84604 <_malloc_r+0x504>
   84386:	ebcb 0200 	rsb	r2, fp, r0
   8438a:	444a      	add	r2, r9
   8438c:	f042 0201 	orr.w	r2, r2, #1
   84390:	6819      	ldr	r1, [r3, #0]
   84392:	42bc      	cmp	r4, r7
   84394:	4449      	add	r1, r9
   84396:	f8c7 b008 	str.w	fp, [r7, #8]
   8439a:	6019      	str	r1, [r3, #0]
   8439c:	f8cb 2004 	str.w	r2, [fp, #4]
   843a0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 84448 <_malloc_r+0x348>
   843a4:	d016      	beq.n	843d4 <_malloc_r+0x2d4>
   843a6:	f1b8 0f0f 	cmp.w	r8, #15
   843aa:	f240 80fd 	bls.w	845a8 <_malloc_r+0x4a8>
   843ae:	6862      	ldr	r2, [r4, #4]
   843b0:	f1a8 030c 	sub.w	r3, r8, #12
   843b4:	f023 0307 	bic.w	r3, r3, #7
   843b8:	f002 0201 	and.w	r2, r2, #1
   843bc:	18e0      	adds	r0, r4, r3
   843be:	f04f 0e05 	mov.w	lr, #5
   843c2:	431a      	orrs	r2, r3
   843c4:	2b0f      	cmp	r3, #15
   843c6:	6062      	str	r2, [r4, #4]
   843c8:	f8c0 e004 	str.w	lr, [r0, #4]
   843cc:	f8c0 e008 	str.w	lr, [r0, #8]
   843d0:	f200 811c 	bhi.w	8460c <_malloc_r+0x50c>
   843d4:	4b1d      	ldr	r3, [pc, #116]	; (8444c <_malloc_r+0x34c>)
   843d6:	68bc      	ldr	r4, [r7, #8]
   843d8:	681a      	ldr	r2, [r3, #0]
   843da:	4291      	cmp	r1, r2
   843dc:	bf88      	it	hi
   843de:	6019      	strhi	r1, [r3, #0]
   843e0:	4b1b      	ldr	r3, [pc, #108]	; (84450 <_malloc_r+0x350>)
   843e2:	681a      	ldr	r2, [r3, #0]
   843e4:	4291      	cmp	r1, r2
   843e6:	6862      	ldr	r2, [r4, #4]
   843e8:	bf88      	it	hi
   843ea:	6019      	strhi	r1, [r3, #0]
   843ec:	f022 0203 	bic.w	r2, r2, #3
   843f0:	4295      	cmp	r5, r2
   843f2:	eba2 0305 	sub.w	r3, r2, r5
   843f6:	d801      	bhi.n	843fc <_malloc_r+0x2fc>
   843f8:	2b0f      	cmp	r3, #15
   843fa:	dc04      	bgt.n	84406 <_malloc_r+0x306>
   843fc:	4630      	mov	r0, r6
   843fe:	f000 f9d7 	bl	847b0 <__malloc_unlock>
   84402:	2400      	movs	r4, #0
   84404:	e745      	b.n	84292 <_malloc_r+0x192>
   84406:	f045 0201 	orr.w	r2, r5, #1
   8440a:	f043 0301 	orr.w	r3, r3, #1
   8440e:	4425      	add	r5, r4
   84410:	6062      	str	r2, [r4, #4]
   84412:	4630      	mov	r0, r6
   84414:	60bd      	str	r5, [r7, #8]
   84416:	3408      	adds	r4, #8
   84418:	606b      	str	r3, [r5, #4]
   8441a:	f000 f9c9 	bl	847b0 <__malloc_unlock>
   8441e:	4620      	mov	r0, r4
   84420:	b003      	add	sp, #12
   84422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84426:	2b14      	cmp	r3, #20
   84428:	d971      	bls.n	8450e <_malloc_r+0x40e>
   8442a:	2b54      	cmp	r3, #84	; 0x54
   8442c:	f200 80a4 	bhi.w	84578 <_malloc_r+0x478>
   84430:	0b28      	lsrs	r0, r5, #12
   84432:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   84436:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8443a:	306e      	adds	r0, #110	; 0x6e
   8443c:	e682      	b.n	84144 <_malloc_r+0x44>
   8443e:	bf00      	nop
   84440:	20070590 	.word	0x20070590
   84444:	2007abd8 	.word	0x2007abd8
   84448:	2007abdc 	.word	0x2007abdc
   8444c:	2007abd4 	.word	0x2007abd4
   84450:	2007abd0 	.word	0x2007abd0
   84454:	2007099c 	.word	0x2007099c
   84458:	0a5a      	lsrs	r2, r3, #9
   8445a:	2a04      	cmp	r2, #4
   8445c:	d95e      	bls.n	8451c <_malloc_r+0x41c>
   8445e:	2a14      	cmp	r2, #20
   84460:	f200 80b3 	bhi.w	845ca <_malloc_r+0x4ca>
   84464:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84468:	0049      	lsls	r1, r1, #1
   8446a:	325b      	adds	r2, #91	; 0x5b
   8446c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   84470:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   84474:	f1ac 0c08 	sub.w	ip, ip, #8
   84478:	458c      	cmp	ip, r1
   8447a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 84654 <_malloc_r+0x554>
   8447e:	f000 8088 	beq.w	84592 <_malloc_r+0x492>
   84482:	684a      	ldr	r2, [r1, #4]
   84484:	f022 0203 	bic.w	r2, r2, #3
   84488:	4293      	cmp	r3, r2
   8448a:	d202      	bcs.n	84492 <_malloc_r+0x392>
   8448c:	6889      	ldr	r1, [r1, #8]
   8448e:	458c      	cmp	ip, r1
   84490:	d1f7      	bne.n	84482 <_malloc_r+0x382>
   84492:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   84496:	687a      	ldr	r2, [r7, #4]
   84498:	f8c4 c00c 	str.w	ip, [r4, #12]
   8449c:	60a1      	str	r1, [r4, #8]
   8449e:	f8cc 4008 	str.w	r4, [ip, #8]
   844a2:	60cc      	str	r4, [r1, #12]
   844a4:	e696      	b.n	841d4 <_malloc_r+0xd4>
   844a6:	f045 0701 	orr.w	r7, r5, #1
   844aa:	f042 0301 	orr.w	r3, r2, #1
   844ae:	4425      	add	r5, r4
   844b0:	6067      	str	r7, [r4, #4]
   844b2:	4630      	mov	r0, r6
   844b4:	614d      	str	r5, [r1, #20]
   844b6:	610d      	str	r5, [r1, #16]
   844b8:	f8c5 e00c 	str.w	lr, [r5, #12]
   844bc:	f8c5 e008 	str.w	lr, [r5, #8]
   844c0:	606b      	str	r3, [r5, #4]
   844c2:	50aa      	str	r2, [r5, r2]
   844c4:	3408      	adds	r4, #8
   844c6:	f000 f973 	bl	847b0 <__malloc_unlock>
   844ca:	e6e2      	b.n	84292 <_malloc_r+0x192>
   844cc:	684a      	ldr	r2, [r1, #4]
   844ce:	e681      	b.n	841d4 <_malloc_r+0xd4>
   844d0:	f108 0801 	add.w	r8, r8, #1
   844d4:	f018 0f03 	tst.w	r8, #3
   844d8:	f10c 0c08 	add.w	ip, ip, #8
   844dc:	f47f ae8c 	bne.w	841f8 <_malloc_r+0xf8>
   844e0:	e030      	b.n	84544 <_malloc_r+0x444>
   844e2:	68dc      	ldr	r4, [r3, #12]
   844e4:	42a3      	cmp	r3, r4
   844e6:	bf08      	it	eq
   844e8:	3002      	addeq	r0, #2
   844ea:	f43f ae40 	beq.w	8416e <_malloc_r+0x6e>
   844ee:	e6c0      	b.n	84272 <_malloc_r+0x172>
   844f0:	460c      	mov	r4, r1
   844f2:	440b      	add	r3, r1
   844f4:	685a      	ldr	r2, [r3, #4]
   844f6:	68c9      	ldr	r1, [r1, #12]
   844f8:	f854 5f08 	ldr.w	r5, [r4, #8]!
   844fc:	f042 0201 	orr.w	r2, r2, #1
   84500:	605a      	str	r2, [r3, #4]
   84502:	4630      	mov	r0, r6
   84504:	60e9      	str	r1, [r5, #12]
   84506:	608d      	str	r5, [r1, #8]
   84508:	f000 f952 	bl	847b0 <__malloc_unlock>
   8450c:	e6c1      	b.n	84292 <_malloc_r+0x192>
   8450e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   84512:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   84516:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8451a:	e613      	b.n	84144 <_malloc_r+0x44>
   8451c:	099a      	lsrs	r2, r3, #6
   8451e:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84522:	0049      	lsls	r1, r1, #1
   84524:	3238      	adds	r2, #56	; 0x38
   84526:	e7a1      	b.n	8446c <_malloc_r+0x36c>
   84528:	42bc      	cmp	r4, r7
   8452a:	4b4a      	ldr	r3, [pc, #296]	; (84654 <_malloc_r+0x554>)
   8452c:	f43f af00 	beq.w	84330 <_malloc_r+0x230>
   84530:	689c      	ldr	r4, [r3, #8]
   84532:	6862      	ldr	r2, [r4, #4]
   84534:	f022 0203 	bic.w	r2, r2, #3
   84538:	e75a      	b.n	843f0 <_malloc_r+0x2f0>
   8453a:	f859 3908 	ldr.w	r3, [r9], #-8
   8453e:	4599      	cmp	r9, r3
   84540:	f040 8082 	bne.w	84648 <_malloc_r+0x548>
   84544:	f010 0f03 	tst.w	r0, #3
   84548:	f100 30ff 	add.w	r0, r0, #4294967295
   8454c:	d1f5      	bne.n	8453a <_malloc_r+0x43a>
   8454e:	687b      	ldr	r3, [r7, #4]
   84550:	ea23 0304 	bic.w	r3, r3, r4
   84554:	607b      	str	r3, [r7, #4]
   84556:	0064      	lsls	r4, r4, #1
   84558:	429c      	cmp	r4, r3
   8455a:	f63f aebd 	bhi.w	842d8 <_malloc_r+0x1d8>
   8455e:	2c00      	cmp	r4, #0
   84560:	f43f aeba 	beq.w	842d8 <_malloc_r+0x1d8>
   84564:	421c      	tst	r4, r3
   84566:	4640      	mov	r0, r8
   84568:	f47f ae42 	bne.w	841f0 <_malloc_r+0xf0>
   8456c:	0064      	lsls	r4, r4, #1
   8456e:	421c      	tst	r4, r3
   84570:	f100 0004 	add.w	r0, r0, #4
   84574:	d0fa      	beq.n	8456c <_malloc_r+0x46c>
   84576:	e63b      	b.n	841f0 <_malloc_r+0xf0>
   84578:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8457c:	d818      	bhi.n	845b0 <_malloc_r+0x4b0>
   8457e:	0be8      	lsrs	r0, r5, #15
   84580:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   84584:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84588:	3077      	adds	r0, #119	; 0x77
   8458a:	e5db      	b.n	84144 <_malloc_r+0x44>
   8458c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84590:	e6eb      	b.n	8436a <_malloc_r+0x26a>
   84592:	2101      	movs	r1, #1
   84594:	f8d8 3004 	ldr.w	r3, [r8, #4]
   84598:	1092      	asrs	r2, r2, #2
   8459a:	fa01 f202 	lsl.w	r2, r1, r2
   8459e:	431a      	orrs	r2, r3
   845a0:	f8c8 2004 	str.w	r2, [r8, #4]
   845a4:	4661      	mov	r1, ip
   845a6:	e777      	b.n	84498 <_malloc_r+0x398>
   845a8:	2301      	movs	r3, #1
   845aa:	f8cb 3004 	str.w	r3, [fp, #4]
   845ae:	e725      	b.n	843fc <_malloc_r+0x2fc>
   845b0:	f240 5254 	movw	r2, #1364	; 0x554
   845b4:	4293      	cmp	r3, r2
   845b6:	d820      	bhi.n	845fa <_malloc_r+0x4fa>
   845b8:	0ca8      	lsrs	r0, r5, #18
   845ba:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   845be:	ea4f 014e 	mov.w	r1, lr, lsl #1
   845c2:	307c      	adds	r0, #124	; 0x7c
   845c4:	e5be      	b.n	84144 <_malloc_r+0x44>
   845c6:	3210      	adds	r2, #16
   845c8:	e6a4      	b.n	84314 <_malloc_r+0x214>
   845ca:	2a54      	cmp	r2, #84	; 0x54
   845cc:	d826      	bhi.n	8461c <_malloc_r+0x51c>
   845ce:	0b1a      	lsrs	r2, r3, #12
   845d0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   845d4:	0049      	lsls	r1, r1, #1
   845d6:	326e      	adds	r2, #110	; 0x6e
   845d8:	e748      	b.n	8446c <_malloc_r+0x36c>
   845da:	68bc      	ldr	r4, [r7, #8]
   845dc:	6862      	ldr	r2, [r4, #4]
   845de:	f022 0203 	bic.w	r2, r2, #3
   845e2:	e705      	b.n	843f0 <_malloc_r+0x2f0>
   845e4:	f3ca 000b 	ubfx	r0, sl, #0, #12
   845e8:	2800      	cmp	r0, #0
   845ea:	f47f aea8 	bne.w	8433e <_malloc_r+0x23e>
   845ee:	4442      	add	r2, r8
   845f0:	68bb      	ldr	r3, [r7, #8]
   845f2:	f042 0201 	orr.w	r2, r2, #1
   845f6:	605a      	str	r2, [r3, #4]
   845f8:	e6ec      	b.n	843d4 <_malloc_r+0x2d4>
   845fa:	21fe      	movs	r1, #254	; 0xfe
   845fc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   84600:	207e      	movs	r0, #126	; 0x7e
   84602:	e59f      	b.n	84144 <_malloc_r+0x44>
   84604:	2201      	movs	r2, #1
   84606:	f04f 0900 	mov.w	r9, #0
   8460a:	e6c1      	b.n	84390 <_malloc_r+0x290>
   8460c:	f104 0108 	add.w	r1, r4, #8
   84610:	4630      	mov	r0, r6
   84612:	f7ff fa5b 	bl	83acc <_free_r>
   84616:	f8d9 1000 	ldr.w	r1, [r9]
   8461a:	e6db      	b.n	843d4 <_malloc_r+0x2d4>
   8461c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84620:	d805      	bhi.n	8462e <_malloc_r+0x52e>
   84622:	0bda      	lsrs	r2, r3, #15
   84624:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84628:	0049      	lsls	r1, r1, #1
   8462a:	3277      	adds	r2, #119	; 0x77
   8462c:	e71e      	b.n	8446c <_malloc_r+0x36c>
   8462e:	f240 5154 	movw	r1, #1364	; 0x554
   84632:	428a      	cmp	r2, r1
   84634:	d805      	bhi.n	84642 <_malloc_r+0x542>
   84636:	0c9a      	lsrs	r2, r3, #18
   84638:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8463c:	0049      	lsls	r1, r1, #1
   8463e:	327c      	adds	r2, #124	; 0x7c
   84640:	e714      	b.n	8446c <_malloc_r+0x36c>
   84642:	21fe      	movs	r1, #254	; 0xfe
   84644:	227e      	movs	r2, #126	; 0x7e
   84646:	e711      	b.n	8446c <_malloc_r+0x36c>
   84648:	687b      	ldr	r3, [r7, #4]
   8464a:	e784      	b.n	84556 <_malloc_r+0x456>
   8464c:	08e8      	lsrs	r0, r5, #3
   8464e:	1c43      	adds	r3, r0, #1
   84650:	005b      	lsls	r3, r3, #1
   84652:	e605      	b.n	84260 <_malloc_r+0x160>
   84654:	20070590 	.word	0x20070590

00084658 <memchr>:
   84658:	0783      	lsls	r3, r0, #30
   8465a:	b470      	push	{r4, r5, r6}
   8465c:	b2cd      	uxtb	r5, r1
   8465e:	d03d      	beq.n	846dc <memchr+0x84>
   84660:	1e53      	subs	r3, r2, #1
   84662:	b302      	cbz	r2, 846a6 <memchr+0x4e>
   84664:	7802      	ldrb	r2, [r0, #0]
   84666:	42aa      	cmp	r2, r5
   84668:	d01e      	beq.n	846a8 <memchr+0x50>
   8466a:	1c42      	adds	r2, r0, #1
   8466c:	e004      	b.n	84678 <memchr+0x20>
   8466e:	b1d3      	cbz	r3, 846a6 <memchr+0x4e>
   84670:	7804      	ldrb	r4, [r0, #0]
   84672:	3b01      	subs	r3, #1
   84674:	42ac      	cmp	r4, r5
   84676:	d017      	beq.n	846a8 <memchr+0x50>
   84678:	f012 0f03 	tst.w	r2, #3
   8467c:	4610      	mov	r0, r2
   8467e:	f102 0201 	add.w	r2, r2, #1
   84682:	d1f4      	bne.n	8466e <memchr+0x16>
   84684:	2b03      	cmp	r3, #3
   84686:	d811      	bhi.n	846ac <memchr+0x54>
   84688:	b353      	cbz	r3, 846e0 <memchr+0x88>
   8468a:	7802      	ldrb	r2, [r0, #0]
   8468c:	42aa      	cmp	r2, r5
   8468e:	d00b      	beq.n	846a8 <memchr+0x50>
   84690:	4403      	add	r3, r0
   84692:	1c42      	adds	r2, r0, #1
   84694:	e002      	b.n	8469c <memchr+0x44>
   84696:	7801      	ldrb	r1, [r0, #0]
   84698:	42a9      	cmp	r1, r5
   8469a:	d005      	beq.n	846a8 <memchr+0x50>
   8469c:	4293      	cmp	r3, r2
   8469e:	4610      	mov	r0, r2
   846a0:	f102 0201 	add.w	r2, r2, #1
   846a4:	d1f7      	bne.n	84696 <memchr+0x3e>
   846a6:	2000      	movs	r0, #0
   846a8:	bc70      	pop	{r4, r5, r6}
   846aa:	4770      	bx	lr
   846ac:	4604      	mov	r4, r0
   846ae:	020e      	lsls	r6, r1, #8
   846b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   846b4:	432e      	orrs	r6, r5
   846b6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   846ba:	6822      	ldr	r2, [r4, #0]
   846bc:	4620      	mov	r0, r4
   846be:	4072      	eors	r2, r6
   846c0:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   846c4:	ea21 0202 	bic.w	r2, r1, r2
   846c8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   846cc:	f104 0404 	add.w	r4, r4, #4
   846d0:	d1db      	bne.n	8468a <memchr+0x32>
   846d2:	3b04      	subs	r3, #4
   846d4:	2b03      	cmp	r3, #3
   846d6:	4620      	mov	r0, r4
   846d8:	d8ef      	bhi.n	846ba <memchr+0x62>
   846da:	e7d5      	b.n	84688 <memchr+0x30>
   846dc:	4613      	mov	r3, r2
   846de:	e7d1      	b.n	84684 <memchr+0x2c>
   846e0:	4618      	mov	r0, r3
   846e2:	e7e1      	b.n	846a8 <memchr+0x50>

000846e4 <memmove>:
   846e4:	4288      	cmp	r0, r1
   846e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   846e8:	d90d      	bls.n	84706 <memmove+0x22>
   846ea:	188b      	adds	r3, r1, r2
   846ec:	4298      	cmp	r0, r3
   846ee:	d20a      	bcs.n	84706 <memmove+0x22>
   846f0:	1881      	adds	r1, r0, r2
   846f2:	2a00      	cmp	r2, #0
   846f4:	d051      	beq.n	8479a <memmove+0xb6>
   846f6:	1a9a      	subs	r2, r3, r2
   846f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   846fc:	4293      	cmp	r3, r2
   846fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
   84702:	d1f9      	bne.n	846f8 <memmove+0x14>
   84704:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84706:	2a0f      	cmp	r2, #15
   84708:	d948      	bls.n	8479c <memmove+0xb8>
   8470a:	ea41 0300 	orr.w	r3, r1, r0
   8470e:	079b      	lsls	r3, r3, #30
   84710:	d146      	bne.n	847a0 <memmove+0xbc>
   84712:	4615      	mov	r5, r2
   84714:	f100 0410 	add.w	r4, r0, #16
   84718:	f101 0310 	add.w	r3, r1, #16
   8471c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84720:	3d10      	subs	r5, #16
   84722:	f844 6c10 	str.w	r6, [r4, #-16]
   84726:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8472a:	2d0f      	cmp	r5, #15
   8472c:	f844 6c0c 	str.w	r6, [r4, #-12]
   84730:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84734:	f104 0410 	add.w	r4, r4, #16
   84738:	f844 6c18 	str.w	r6, [r4, #-24]
   8473c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84740:	f103 0310 	add.w	r3, r3, #16
   84744:	f844 6c14 	str.w	r6, [r4, #-20]
   84748:	d8e8      	bhi.n	8471c <memmove+0x38>
   8474a:	f1a2 0310 	sub.w	r3, r2, #16
   8474e:	f023 030f 	bic.w	r3, r3, #15
   84752:	f002 0e0f 	and.w	lr, r2, #15
   84756:	3310      	adds	r3, #16
   84758:	f1be 0f03 	cmp.w	lr, #3
   8475c:	4419      	add	r1, r3
   8475e:	4403      	add	r3, r0
   84760:	d921      	bls.n	847a6 <memmove+0xc2>
   84762:	460e      	mov	r6, r1
   84764:	4674      	mov	r4, lr
   84766:	1f1d      	subs	r5, r3, #4
   84768:	f856 7b04 	ldr.w	r7, [r6], #4
   8476c:	3c04      	subs	r4, #4
   8476e:	2c03      	cmp	r4, #3
   84770:	f845 7f04 	str.w	r7, [r5, #4]!
   84774:	d8f8      	bhi.n	84768 <memmove+0x84>
   84776:	f1ae 0404 	sub.w	r4, lr, #4
   8477a:	f024 0403 	bic.w	r4, r4, #3
   8477e:	3404      	adds	r4, #4
   84780:	4423      	add	r3, r4
   84782:	4421      	add	r1, r4
   84784:	f002 0203 	and.w	r2, r2, #3
   84788:	b162      	cbz	r2, 847a4 <memmove+0xc0>
   8478a:	3b01      	subs	r3, #1
   8478c:	440a      	add	r2, r1
   8478e:	f811 4b01 	ldrb.w	r4, [r1], #1
   84792:	428a      	cmp	r2, r1
   84794:	f803 4f01 	strb.w	r4, [r3, #1]!
   84798:	d1f9      	bne.n	8478e <memmove+0xaa>
   8479a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8479c:	4603      	mov	r3, r0
   8479e:	e7f3      	b.n	84788 <memmove+0xa4>
   847a0:	4603      	mov	r3, r0
   847a2:	e7f2      	b.n	8478a <memmove+0xa6>
   847a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   847a6:	4672      	mov	r2, lr
   847a8:	e7ee      	b.n	84788 <memmove+0xa4>
   847aa:	bf00      	nop

000847ac <__malloc_lock>:
   847ac:	4770      	bx	lr
   847ae:	bf00      	nop

000847b0 <__malloc_unlock>:
   847b0:	4770      	bx	lr
   847b2:	bf00      	nop

000847b4 <_realloc_r>:
   847b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   847b8:	4617      	mov	r7, r2
   847ba:	b083      	sub	sp, #12
   847bc:	2900      	cmp	r1, #0
   847be:	f000 808f 	beq.w	848e0 <_realloc_r+0x12c>
   847c2:	460d      	mov	r5, r1
   847c4:	4681      	mov	r9, r0
   847c6:	f107 040b 	add.w	r4, r7, #11
   847ca:	f7ff ffef 	bl	847ac <__malloc_lock>
   847ce:	f855 ec04 	ldr.w	lr, [r5, #-4]
   847d2:	2c16      	cmp	r4, #22
   847d4:	f02e 0603 	bic.w	r6, lr, #3
   847d8:	f1a5 0808 	sub.w	r8, r5, #8
   847dc:	d83c      	bhi.n	84858 <_realloc_r+0xa4>
   847de:	2210      	movs	r2, #16
   847e0:	4614      	mov	r4, r2
   847e2:	42a7      	cmp	r7, r4
   847e4:	d83d      	bhi.n	84862 <_realloc_r+0xae>
   847e6:	4296      	cmp	r6, r2
   847e8:	da42      	bge.n	84870 <_realloc_r+0xbc>
   847ea:	4bc6      	ldr	r3, [pc, #792]	; (84b04 <_realloc_r+0x350>)
   847ec:	eb08 0006 	add.w	r0, r8, r6
   847f0:	6899      	ldr	r1, [r3, #8]
   847f2:	4288      	cmp	r0, r1
   847f4:	6841      	ldr	r1, [r0, #4]
   847f6:	f000 80d7 	beq.w	849a8 <_realloc_r+0x1f4>
   847fa:	f021 0301 	bic.w	r3, r1, #1
   847fe:	4403      	add	r3, r0
   84800:	685b      	ldr	r3, [r3, #4]
   84802:	07db      	lsls	r3, r3, #31
   84804:	d54c      	bpl.n	848a0 <_realloc_r+0xec>
   84806:	f01e 0f01 	tst.w	lr, #1
   8480a:	f000 809d 	beq.w	84948 <_realloc_r+0x194>
   8480e:	4639      	mov	r1, r7
   84810:	4648      	mov	r0, r9
   84812:	f7ff fc75 	bl	84100 <_malloc_r>
   84816:	4607      	mov	r7, r0
   84818:	2800      	cmp	r0, #0
   8481a:	d03a      	beq.n	84892 <_realloc_r+0xde>
   8481c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   84820:	f1a0 0208 	sub.w	r2, r0, #8
   84824:	f023 0301 	bic.w	r3, r3, #1
   84828:	4443      	add	r3, r8
   8482a:	429a      	cmp	r2, r3
   8482c:	f000 813e 	beq.w	84aac <_realloc_r+0x2f8>
   84830:	1f32      	subs	r2, r6, #4
   84832:	2a24      	cmp	r2, #36	; 0x24
   84834:	f200 812b 	bhi.w	84a8e <_realloc_r+0x2da>
   84838:	2a13      	cmp	r2, #19
   8483a:	f200 80ff 	bhi.w	84a3c <_realloc_r+0x288>
   8483e:	4603      	mov	r3, r0
   84840:	462a      	mov	r2, r5
   84842:	6811      	ldr	r1, [r2, #0]
   84844:	6019      	str	r1, [r3, #0]
   84846:	6851      	ldr	r1, [r2, #4]
   84848:	6059      	str	r1, [r3, #4]
   8484a:	6892      	ldr	r2, [r2, #8]
   8484c:	609a      	str	r2, [r3, #8]
   8484e:	4629      	mov	r1, r5
   84850:	4648      	mov	r0, r9
   84852:	f7ff f93b 	bl	83acc <_free_r>
   84856:	e01c      	b.n	84892 <_realloc_r+0xde>
   84858:	f024 0407 	bic.w	r4, r4, #7
   8485c:	2c00      	cmp	r4, #0
   8485e:	4622      	mov	r2, r4
   84860:	dabf      	bge.n	847e2 <_realloc_r+0x2e>
   84862:	230c      	movs	r3, #12
   84864:	2000      	movs	r0, #0
   84866:	f8c9 3000 	str.w	r3, [r9]
   8486a:	b003      	add	sp, #12
   8486c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84870:	462f      	mov	r7, r5
   84872:	1b33      	subs	r3, r6, r4
   84874:	2b0f      	cmp	r3, #15
   84876:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8487a:	d81d      	bhi.n	848b8 <_realloc_r+0x104>
   8487c:	f002 0201 	and.w	r2, r2, #1
   84880:	4332      	orrs	r2, r6
   84882:	eb08 0106 	add.w	r1, r8, r6
   84886:	f8c8 2004 	str.w	r2, [r8, #4]
   8488a:	684b      	ldr	r3, [r1, #4]
   8488c:	f043 0301 	orr.w	r3, r3, #1
   84890:	604b      	str	r3, [r1, #4]
   84892:	4648      	mov	r0, r9
   84894:	f7ff ff8c 	bl	847b0 <__malloc_unlock>
   84898:	4638      	mov	r0, r7
   8489a:	b003      	add	sp, #12
   8489c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   848a0:	f021 0103 	bic.w	r1, r1, #3
   848a4:	4431      	add	r1, r6
   848a6:	4291      	cmp	r1, r2
   848a8:	db20      	blt.n	848ec <_realloc_r+0x138>
   848aa:	68c3      	ldr	r3, [r0, #12]
   848ac:	6882      	ldr	r2, [r0, #8]
   848ae:	462f      	mov	r7, r5
   848b0:	60d3      	str	r3, [r2, #12]
   848b2:	460e      	mov	r6, r1
   848b4:	609a      	str	r2, [r3, #8]
   848b6:	e7dc      	b.n	84872 <_realloc_r+0xbe>
   848b8:	f002 0201 	and.w	r2, r2, #1
   848bc:	eb08 0104 	add.w	r1, r8, r4
   848c0:	4314      	orrs	r4, r2
   848c2:	f043 0201 	orr.w	r2, r3, #1
   848c6:	f8c8 4004 	str.w	r4, [r8, #4]
   848ca:	440b      	add	r3, r1
   848cc:	604a      	str	r2, [r1, #4]
   848ce:	685a      	ldr	r2, [r3, #4]
   848d0:	3108      	adds	r1, #8
   848d2:	f042 0201 	orr.w	r2, r2, #1
   848d6:	605a      	str	r2, [r3, #4]
   848d8:	4648      	mov	r0, r9
   848da:	f7ff f8f7 	bl	83acc <_free_r>
   848de:	e7d8      	b.n	84892 <_realloc_r+0xde>
   848e0:	4611      	mov	r1, r2
   848e2:	b003      	add	sp, #12
   848e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   848e8:	f7ff bc0a 	b.w	84100 <_malloc_r>
   848ec:	f01e 0f01 	tst.w	lr, #1
   848f0:	d18d      	bne.n	8480e <_realloc_r+0x5a>
   848f2:	f855 3c08 	ldr.w	r3, [r5, #-8]
   848f6:	ebc3 0a08 	rsb	sl, r3, r8
   848fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   848fe:	f023 0c03 	bic.w	ip, r3, #3
   84902:	eb01 0e0c 	add.w	lr, r1, ip
   84906:	4596      	cmp	lr, r2
   84908:	db26      	blt.n	84958 <_realloc_r+0x1a4>
   8490a:	4657      	mov	r7, sl
   8490c:	68c3      	ldr	r3, [r0, #12]
   8490e:	6881      	ldr	r1, [r0, #8]
   84910:	1f32      	subs	r2, r6, #4
   84912:	60cb      	str	r3, [r1, #12]
   84914:	6099      	str	r1, [r3, #8]
   84916:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8491a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8491e:	2a24      	cmp	r2, #36	; 0x24
   84920:	60cb      	str	r3, [r1, #12]
   84922:	6099      	str	r1, [r3, #8]
   84924:	f200 80c9 	bhi.w	84aba <_realloc_r+0x306>
   84928:	2a13      	cmp	r2, #19
   8492a:	f240 8092 	bls.w	84a52 <_realloc_r+0x29e>
   8492e:	682b      	ldr	r3, [r5, #0]
   84930:	2a1b      	cmp	r2, #27
   84932:	f8ca 3008 	str.w	r3, [sl, #8]
   84936:	686b      	ldr	r3, [r5, #4]
   84938:	f8ca 300c 	str.w	r3, [sl, #12]
   8493c:	f200 80cd 	bhi.w	84ada <_realloc_r+0x326>
   84940:	3508      	adds	r5, #8
   84942:	f10a 0310 	add.w	r3, sl, #16
   84946:	e085      	b.n	84a54 <_realloc_r+0x2a0>
   84948:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8494c:	ebc3 0a08 	rsb	sl, r3, r8
   84950:	f8da 3004 	ldr.w	r3, [sl, #4]
   84954:	f023 0c03 	bic.w	ip, r3, #3
   84958:	eb06 030c 	add.w	r3, r6, ip
   8495c:	4293      	cmp	r3, r2
   8495e:	f6ff af56 	blt.w	8480e <_realloc_r+0x5a>
   84962:	4657      	mov	r7, sl
   84964:	f8da 100c 	ldr.w	r1, [sl, #12]
   84968:	f857 0f08 	ldr.w	r0, [r7, #8]!
   8496c:	1f32      	subs	r2, r6, #4
   8496e:	2a24      	cmp	r2, #36	; 0x24
   84970:	60c1      	str	r1, [r0, #12]
   84972:	6088      	str	r0, [r1, #8]
   84974:	f200 80aa 	bhi.w	84acc <_realloc_r+0x318>
   84978:	2a13      	cmp	r2, #19
   8497a:	f240 80a5 	bls.w	84ac8 <_realloc_r+0x314>
   8497e:	6829      	ldr	r1, [r5, #0]
   84980:	2a1b      	cmp	r2, #27
   84982:	f8ca 1008 	str.w	r1, [sl, #8]
   84986:	6869      	ldr	r1, [r5, #4]
   84988:	f8ca 100c 	str.w	r1, [sl, #12]
   8498c:	f200 80bc 	bhi.w	84b08 <_realloc_r+0x354>
   84990:	3508      	adds	r5, #8
   84992:	f10a 0210 	add.w	r2, sl, #16
   84996:	6829      	ldr	r1, [r5, #0]
   84998:	461e      	mov	r6, r3
   8499a:	6011      	str	r1, [r2, #0]
   8499c:	6869      	ldr	r1, [r5, #4]
   8499e:	46d0      	mov	r8, sl
   849a0:	6051      	str	r1, [r2, #4]
   849a2:	68ab      	ldr	r3, [r5, #8]
   849a4:	6093      	str	r3, [r2, #8]
   849a6:	e764      	b.n	84872 <_realloc_r+0xbe>
   849a8:	f021 0b03 	bic.w	fp, r1, #3
   849ac:	f104 0010 	add.w	r0, r4, #16
   849b0:	44b3      	add	fp, r6
   849b2:	4583      	cmp	fp, r0
   849b4:	da57      	bge.n	84a66 <_realloc_r+0x2b2>
   849b6:	f01e 0f01 	tst.w	lr, #1
   849ba:	f47f af28 	bne.w	8480e <_realloc_r+0x5a>
   849be:	f855 1c08 	ldr.w	r1, [r5, #-8]
   849c2:	ebc1 0a08 	rsb	sl, r1, r8
   849c6:	f8da 1004 	ldr.w	r1, [sl, #4]
   849ca:	f021 0c03 	bic.w	ip, r1, #3
   849ce:	44e3      	add	fp, ip
   849d0:	4558      	cmp	r0, fp
   849d2:	dcc1      	bgt.n	84958 <_realloc_r+0x1a4>
   849d4:	4657      	mov	r7, sl
   849d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   849da:	f857 0f08 	ldr.w	r0, [r7, #8]!
   849de:	1f32      	subs	r2, r6, #4
   849e0:	2a24      	cmp	r2, #36	; 0x24
   849e2:	60c1      	str	r1, [r0, #12]
   849e4:	6088      	str	r0, [r1, #8]
   849e6:	f200 80b1 	bhi.w	84b4c <_realloc_r+0x398>
   849ea:	2a13      	cmp	r2, #19
   849ec:	f240 80a2 	bls.w	84b34 <_realloc_r+0x380>
   849f0:	6829      	ldr	r1, [r5, #0]
   849f2:	2a1b      	cmp	r2, #27
   849f4:	f8ca 1008 	str.w	r1, [sl, #8]
   849f8:	6869      	ldr	r1, [r5, #4]
   849fa:	f8ca 100c 	str.w	r1, [sl, #12]
   849fe:	f200 80ac 	bhi.w	84b5a <_realloc_r+0x3a6>
   84a02:	3508      	adds	r5, #8
   84a04:	f10a 0210 	add.w	r2, sl, #16
   84a08:	6829      	ldr	r1, [r5, #0]
   84a0a:	6011      	str	r1, [r2, #0]
   84a0c:	6869      	ldr	r1, [r5, #4]
   84a0e:	6051      	str	r1, [r2, #4]
   84a10:	68a9      	ldr	r1, [r5, #8]
   84a12:	6091      	str	r1, [r2, #8]
   84a14:	ebc4 020b 	rsb	r2, r4, fp
   84a18:	eb0a 0104 	add.w	r1, sl, r4
   84a1c:	f042 0201 	orr.w	r2, r2, #1
   84a20:	6099      	str	r1, [r3, #8]
   84a22:	604a      	str	r2, [r1, #4]
   84a24:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a28:	4648      	mov	r0, r9
   84a2a:	f003 0301 	and.w	r3, r3, #1
   84a2e:	431c      	orrs	r4, r3
   84a30:	f8ca 4004 	str.w	r4, [sl, #4]
   84a34:	f7ff febc 	bl	847b0 <__malloc_unlock>
   84a38:	4638      	mov	r0, r7
   84a3a:	e72e      	b.n	8489a <_realloc_r+0xe6>
   84a3c:	682b      	ldr	r3, [r5, #0]
   84a3e:	2a1b      	cmp	r2, #27
   84a40:	6003      	str	r3, [r0, #0]
   84a42:	686b      	ldr	r3, [r5, #4]
   84a44:	6043      	str	r3, [r0, #4]
   84a46:	d826      	bhi.n	84a96 <_realloc_r+0x2e2>
   84a48:	f100 0308 	add.w	r3, r0, #8
   84a4c:	f105 0208 	add.w	r2, r5, #8
   84a50:	e6f7      	b.n	84842 <_realloc_r+0x8e>
   84a52:	463b      	mov	r3, r7
   84a54:	682a      	ldr	r2, [r5, #0]
   84a56:	4676      	mov	r6, lr
   84a58:	601a      	str	r2, [r3, #0]
   84a5a:	686a      	ldr	r2, [r5, #4]
   84a5c:	46d0      	mov	r8, sl
   84a5e:	605a      	str	r2, [r3, #4]
   84a60:	68aa      	ldr	r2, [r5, #8]
   84a62:	609a      	str	r2, [r3, #8]
   84a64:	e705      	b.n	84872 <_realloc_r+0xbe>
   84a66:	ebc4 0b0b 	rsb	fp, r4, fp
   84a6a:	eb08 0104 	add.w	r1, r8, r4
   84a6e:	f04b 0201 	orr.w	r2, fp, #1
   84a72:	6099      	str	r1, [r3, #8]
   84a74:	604a      	str	r2, [r1, #4]
   84a76:	f855 3c04 	ldr.w	r3, [r5, #-4]
   84a7a:	4648      	mov	r0, r9
   84a7c:	f003 0301 	and.w	r3, r3, #1
   84a80:	431c      	orrs	r4, r3
   84a82:	f845 4c04 	str.w	r4, [r5, #-4]
   84a86:	f7ff fe93 	bl	847b0 <__malloc_unlock>
   84a8a:	4628      	mov	r0, r5
   84a8c:	e705      	b.n	8489a <_realloc_r+0xe6>
   84a8e:	4629      	mov	r1, r5
   84a90:	f7ff fe28 	bl	846e4 <memmove>
   84a94:	e6db      	b.n	8484e <_realloc_r+0x9a>
   84a96:	68ab      	ldr	r3, [r5, #8]
   84a98:	2a24      	cmp	r2, #36	; 0x24
   84a9a:	6083      	str	r3, [r0, #8]
   84a9c:	68eb      	ldr	r3, [r5, #12]
   84a9e:	60c3      	str	r3, [r0, #12]
   84aa0:	d027      	beq.n	84af2 <_realloc_r+0x33e>
   84aa2:	f100 0310 	add.w	r3, r0, #16
   84aa6:	f105 0210 	add.w	r2, r5, #16
   84aaa:	e6ca      	b.n	84842 <_realloc_r+0x8e>
   84aac:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84ab0:	462f      	mov	r7, r5
   84ab2:	f023 0303 	bic.w	r3, r3, #3
   84ab6:	441e      	add	r6, r3
   84ab8:	e6db      	b.n	84872 <_realloc_r+0xbe>
   84aba:	4629      	mov	r1, r5
   84abc:	4638      	mov	r0, r7
   84abe:	4676      	mov	r6, lr
   84ac0:	46d0      	mov	r8, sl
   84ac2:	f7ff fe0f 	bl	846e4 <memmove>
   84ac6:	e6d4      	b.n	84872 <_realloc_r+0xbe>
   84ac8:	463a      	mov	r2, r7
   84aca:	e764      	b.n	84996 <_realloc_r+0x1e2>
   84acc:	4629      	mov	r1, r5
   84ace:	4638      	mov	r0, r7
   84ad0:	461e      	mov	r6, r3
   84ad2:	46d0      	mov	r8, sl
   84ad4:	f7ff fe06 	bl	846e4 <memmove>
   84ad8:	e6cb      	b.n	84872 <_realloc_r+0xbe>
   84ada:	68ab      	ldr	r3, [r5, #8]
   84adc:	2a24      	cmp	r2, #36	; 0x24
   84ade:	f8ca 3010 	str.w	r3, [sl, #16]
   84ae2:	68eb      	ldr	r3, [r5, #12]
   84ae4:	f8ca 3014 	str.w	r3, [sl, #20]
   84ae8:	d01a      	beq.n	84b20 <_realloc_r+0x36c>
   84aea:	3510      	adds	r5, #16
   84aec:	f10a 0318 	add.w	r3, sl, #24
   84af0:	e7b0      	b.n	84a54 <_realloc_r+0x2a0>
   84af2:	692a      	ldr	r2, [r5, #16]
   84af4:	f100 0318 	add.w	r3, r0, #24
   84af8:	6102      	str	r2, [r0, #16]
   84afa:	6969      	ldr	r1, [r5, #20]
   84afc:	f105 0218 	add.w	r2, r5, #24
   84b00:	6141      	str	r1, [r0, #20]
   84b02:	e69e      	b.n	84842 <_realloc_r+0x8e>
   84b04:	20070590 	.word	0x20070590
   84b08:	68a9      	ldr	r1, [r5, #8]
   84b0a:	2a24      	cmp	r2, #36	; 0x24
   84b0c:	f8ca 1010 	str.w	r1, [sl, #16]
   84b10:	68e9      	ldr	r1, [r5, #12]
   84b12:	f8ca 1014 	str.w	r1, [sl, #20]
   84b16:	d00f      	beq.n	84b38 <_realloc_r+0x384>
   84b18:	3510      	adds	r5, #16
   84b1a:	f10a 0218 	add.w	r2, sl, #24
   84b1e:	e73a      	b.n	84996 <_realloc_r+0x1e2>
   84b20:	692a      	ldr	r2, [r5, #16]
   84b22:	f10a 0320 	add.w	r3, sl, #32
   84b26:	f8ca 2018 	str.w	r2, [sl, #24]
   84b2a:	696a      	ldr	r2, [r5, #20]
   84b2c:	3518      	adds	r5, #24
   84b2e:	f8ca 201c 	str.w	r2, [sl, #28]
   84b32:	e78f      	b.n	84a54 <_realloc_r+0x2a0>
   84b34:	463a      	mov	r2, r7
   84b36:	e767      	b.n	84a08 <_realloc_r+0x254>
   84b38:	6929      	ldr	r1, [r5, #16]
   84b3a:	f10a 0220 	add.w	r2, sl, #32
   84b3e:	f8ca 1018 	str.w	r1, [sl, #24]
   84b42:	6969      	ldr	r1, [r5, #20]
   84b44:	3518      	adds	r5, #24
   84b46:	f8ca 101c 	str.w	r1, [sl, #28]
   84b4a:	e724      	b.n	84996 <_realloc_r+0x1e2>
   84b4c:	4629      	mov	r1, r5
   84b4e:	4638      	mov	r0, r7
   84b50:	9301      	str	r3, [sp, #4]
   84b52:	f7ff fdc7 	bl	846e4 <memmove>
   84b56:	9b01      	ldr	r3, [sp, #4]
   84b58:	e75c      	b.n	84a14 <_realloc_r+0x260>
   84b5a:	68a9      	ldr	r1, [r5, #8]
   84b5c:	2a24      	cmp	r2, #36	; 0x24
   84b5e:	f8ca 1010 	str.w	r1, [sl, #16]
   84b62:	68e9      	ldr	r1, [r5, #12]
   84b64:	f8ca 1014 	str.w	r1, [sl, #20]
   84b68:	d003      	beq.n	84b72 <_realloc_r+0x3be>
   84b6a:	3510      	adds	r5, #16
   84b6c:	f10a 0218 	add.w	r2, sl, #24
   84b70:	e74a      	b.n	84a08 <_realloc_r+0x254>
   84b72:	6929      	ldr	r1, [r5, #16]
   84b74:	f10a 0220 	add.w	r2, sl, #32
   84b78:	f8ca 1018 	str.w	r1, [sl, #24]
   84b7c:	6969      	ldr	r1, [r5, #20]
   84b7e:	3518      	adds	r5, #24
   84b80:	f8ca 101c 	str.w	r1, [sl, #28]
   84b84:	e740      	b.n	84a08 <_realloc_r+0x254>
   84b86:	bf00      	nop

00084b88 <_sbrk_r>:
   84b88:	b538      	push	{r3, r4, r5, lr}
   84b8a:	4c07      	ldr	r4, [pc, #28]	; (84ba8 <_sbrk_r+0x20>)
   84b8c:	2300      	movs	r3, #0
   84b8e:	4605      	mov	r5, r0
   84b90:	4608      	mov	r0, r1
   84b92:	6023      	str	r3, [r4, #0]
   84b94:	f7fd f9aa 	bl	81eec <_sbrk>
   84b98:	1c43      	adds	r3, r0, #1
   84b9a:	d000      	beq.n	84b9e <_sbrk_r+0x16>
   84b9c:	bd38      	pop	{r3, r4, r5, pc}
   84b9e:	6823      	ldr	r3, [r4, #0]
   84ba0:	2b00      	cmp	r3, #0
   84ba2:	d0fb      	beq.n	84b9c <_sbrk_r+0x14>
   84ba4:	602b      	str	r3, [r5, #0]
   84ba6:	bd38      	pop	{r3, r4, r5, pc}
   84ba8:	2007ac14 	.word	0x2007ac14

00084bac <__sread>:
   84bac:	b510      	push	{r4, lr}
   84bae:	460c      	mov	r4, r1
   84bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84bb4:	f000 f9c4 	bl	84f40 <_read_r>
   84bb8:	2800      	cmp	r0, #0
   84bba:	db03      	blt.n	84bc4 <__sread+0x18>
   84bbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84bbe:	4403      	add	r3, r0
   84bc0:	6523      	str	r3, [r4, #80]	; 0x50
   84bc2:	bd10      	pop	{r4, pc}
   84bc4:	89a3      	ldrh	r3, [r4, #12]
   84bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84bca:	81a3      	strh	r3, [r4, #12]
   84bcc:	bd10      	pop	{r4, pc}
   84bce:	bf00      	nop

00084bd0 <__swrite>:
   84bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84bd4:	460c      	mov	r4, r1
   84bd6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84bda:	461f      	mov	r7, r3
   84bdc:	05cb      	lsls	r3, r1, #23
   84bde:	4616      	mov	r6, r2
   84be0:	4605      	mov	r5, r0
   84be2:	d507      	bpl.n	84bf4 <__swrite+0x24>
   84be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84be8:	2302      	movs	r3, #2
   84bea:	2200      	movs	r2, #0
   84bec:	f000 f992 	bl	84f14 <_lseek_r>
   84bf0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84bf4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84bf8:	81a1      	strh	r1, [r4, #12]
   84bfa:	463b      	mov	r3, r7
   84bfc:	4632      	mov	r2, r6
   84bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c02:	4628      	mov	r0, r5
   84c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84c08:	f000 b8a2 	b.w	84d50 <_write_r>

00084c0c <__sseek>:
   84c0c:	b510      	push	{r4, lr}
   84c0e:	460c      	mov	r4, r1
   84c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c14:	f000 f97e 	bl	84f14 <_lseek_r>
   84c18:	89a3      	ldrh	r3, [r4, #12]
   84c1a:	1c42      	adds	r2, r0, #1
   84c1c:	bf0e      	itee	eq
   84c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84c26:	6520      	strne	r0, [r4, #80]	; 0x50
   84c28:	81a3      	strh	r3, [r4, #12]
   84c2a:	bd10      	pop	{r4, pc}

00084c2c <__sclose>:
   84c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c30:	f000 b8f6 	b.w	84e20 <_close_r>

00084c34 <__swbuf_r>:
   84c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84c36:	460e      	mov	r6, r1
   84c38:	4614      	mov	r4, r2
   84c3a:	4607      	mov	r7, r0
   84c3c:	b110      	cbz	r0, 84c44 <__swbuf_r+0x10>
   84c3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84c40:	2b00      	cmp	r3, #0
   84c42:	d04a      	beq.n	84cda <__swbuf_r+0xa6>
   84c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84c48:	69a3      	ldr	r3, [r4, #24]
   84c4a:	b291      	uxth	r1, r2
   84c4c:	0708      	lsls	r0, r1, #28
   84c4e:	60a3      	str	r3, [r4, #8]
   84c50:	d538      	bpl.n	84cc4 <__swbuf_r+0x90>
   84c52:	6923      	ldr	r3, [r4, #16]
   84c54:	2b00      	cmp	r3, #0
   84c56:	d035      	beq.n	84cc4 <__swbuf_r+0x90>
   84c58:	0489      	lsls	r1, r1, #18
   84c5a:	b2f5      	uxtb	r5, r6
   84c5c:	d515      	bpl.n	84c8a <__swbuf_r+0x56>
   84c5e:	6822      	ldr	r2, [r4, #0]
   84c60:	6961      	ldr	r1, [r4, #20]
   84c62:	1ad3      	subs	r3, r2, r3
   84c64:	428b      	cmp	r3, r1
   84c66:	da1c      	bge.n	84ca2 <__swbuf_r+0x6e>
   84c68:	3301      	adds	r3, #1
   84c6a:	68a1      	ldr	r1, [r4, #8]
   84c6c:	1c50      	adds	r0, r2, #1
   84c6e:	3901      	subs	r1, #1
   84c70:	60a1      	str	r1, [r4, #8]
   84c72:	6020      	str	r0, [r4, #0]
   84c74:	7016      	strb	r6, [r2, #0]
   84c76:	6962      	ldr	r2, [r4, #20]
   84c78:	429a      	cmp	r2, r3
   84c7a:	d01a      	beq.n	84cb2 <__swbuf_r+0x7e>
   84c7c:	89a3      	ldrh	r3, [r4, #12]
   84c7e:	07db      	lsls	r3, r3, #31
   84c80:	d501      	bpl.n	84c86 <__swbuf_r+0x52>
   84c82:	2d0a      	cmp	r5, #10
   84c84:	d015      	beq.n	84cb2 <__swbuf_r+0x7e>
   84c86:	4628      	mov	r0, r5
   84c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84c90:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84c94:	81a2      	strh	r2, [r4, #12]
   84c96:	6822      	ldr	r2, [r4, #0]
   84c98:	6661      	str	r1, [r4, #100]	; 0x64
   84c9a:	6961      	ldr	r1, [r4, #20]
   84c9c:	1ad3      	subs	r3, r2, r3
   84c9e:	428b      	cmp	r3, r1
   84ca0:	dbe2      	blt.n	84c68 <__swbuf_r+0x34>
   84ca2:	4621      	mov	r1, r4
   84ca4:	4638      	mov	r0, r7
   84ca6:	f7fe fdb5 	bl	83814 <_fflush_r>
   84caa:	b940      	cbnz	r0, 84cbe <__swbuf_r+0x8a>
   84cac:	6822      	ldr	r2, [r4, #0]
   84cae:	2301      	movs	r3, #1
   84cb0:	e7db      	b.n	84c6a <__swbuf_r+0x36>
   84cb2:	4621      	mov	r1, r4
   84cb4:	4638      	mov	r0, r7
   84cb6:	f7fe fdad 	bl	83814 <_fflush_r>
   84cba:	2800      	cmp	r0, #0
   84cbc:	d0e3      	beq.n	84c86 <__swbuf_r+0x52>
   84cbe:	f04f 30ff 	mov.w	r0, #4294967295
   84cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84cc4:	4621      	mov	r1, r4
   84cc6:	4638      	mov	r0, r7
   84cc8:	f7fe fc8c 	bl	835e4 <__swsetup_r>
   84ccc:	2800      	cmp	r0, #0
   84cce:	d1f6      	bne.n	84cbe <__swbuf_r+0x8a>
   84cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84cd4:	6923      	ldr	r3, [r4, #16]
   84cd6:	b291      	uxth	r1, r2
   84cd8:	e7be      	b.n	84c58 <__swbuf_r+0x24>
   84cda:	f7fe fe2f 	bl	8393c <__sinit>
   84cde:	e7b1      	b.n	84c44 <__swbuf_r+0x10>

00084ce0 <_wcrtomb_r>:
   84ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ce4:	4605      	mov	r5, r0
   84ce6:	b086      	sub	sp, #24
   84ce8:	461e      	mov	r6, r3
   84cea:	460c      	mov	r4, r1
   84cec:	b1a1      	cbz	r1, 84d18 <_wcrtomb_r+0x38>
   84cee:	4b10      	ldr	r3, [pc, #64]	; (84d30 <_wcrtomb_r+0x50>)
   84cf0:	4617      	mov	r7, r2
   84cf2:	f8d3 8000 	ldr.w	r8, [r3]
   84cf6:	f7ff f97d 	bl	83ff4 <__locale_charset>
   84cfa:	9600      	str	r6, [sp, #0]
   84cfc:	4603      	mov	r3, r0
   84cfe:	463a      	mov	r2, r7
   84d00:	4621      	mov	r1, r4
   84d02:	4628      	mov	r0, r5
   84d04:	47c0      	blx	r8
   84d06:	1c43      	adds	r3, r0, #1
   84d08:	d103      	bne.n	84d12 <_wcrtomb_r+0x32>
   84d0a:	2200      	movs	r2, #0
   84d0c:	238a      	movs	r3, #138	; 0x8a
   84d0e:	6032      	str	r2, [r6, #0]
   84d10:	602b      	str	r3, [r5, #0]
   84d12:	b006      	add	sp, #24
   84d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d18:	4b05      	ldr	r3, [pc, #20]	; (84d30 <_wcrtomb_r+0x50>)
   84d1a:	681f      	ldr	r7, [r3, #0]
   84d1c:	f7ff f96a 	bl	83ff4 <__locale_charset>
   84d20:	9600      	str	r6, [sp, #0]
   84d22:	4603      	mov	r3, r0
   84d24:	4622      	mov	r2, r4
   84d26:	a903      	add	r1, sp, #12
   84d28:	4628      	mov	r0, r5
   84d2a:	47b8      	blx	r7
   84d2c:	e7eb      	b.n	84d06 <_wcrtomb_r+0x26>
   84d2e:	bf00      	nop
   84d30:	200709a0 	.word	0x200709a0

00084d34 <__ascii_wctomb>:
   84d34:	b121      	cbz	r1, 84d40 <__ascii_wctomb+0xc>
   84d36:	2aff      	cmp	r2, #255	; 0xff
   84d38:	d804      	bhi.n	84d44 <__ascii_wctomb+0x10>
   84d3a:	700a      	strb	r2, [r1, #0]
   84d3c:	2001      	movs	r0, #1
   84d3e:	4770      	bx	lr
   84d40:	4608      	mov	r0, r1
   84d42:	4770      	bx	lr
   84d44:	238a      	movs	r3, #138	; 0x8a
   84d46:	6003      	str	r3, [r0, #0]
   84d48:	f04f 30ff 	mov.w	r0, #4294967295
   84d4c:	4770      	bx	lr
   84d4e:	bf00      	nop

00084d50 <_write_r>:
   84d50:	b570      	push	{r4, r5, r6, lr}
   84d52:	460d      	mov	r5, r1
   84d54:	4c08      	ldr	r4, [pc, #32]	; (84d78 <_write_r+0x28>)
   84d56:	4611      	mov	r1, r2
   84d58:	4606      	mov	r6, r0
   84d5a:	461a      	mov	r2, r3
   84d5c:	4628      	mov	r0, r5
   84d5e:	2300      	movs	r3, #0
   84d60:	6023      	str	r3, [r4, #0]
   84d62:	f7fc fd19 	bl	81798 <_write>
   84d66:	1c43      	adds	r3, r0, #1
   84d68:	d000      	beq.n	84d6c <_write_r+0x1c>
   84d6a:	bd70      	pop	{r4, r5, r6, pc}
   84d6c:	6823      	ldr	r3, [r4, #0]
   84d6e:	2b00      	cmp	r3, #0
   84d70:	d0fb      	beq.n	84d6a <_write_r+0x1a>
   84d72:	6033      	str	r3, [r6, #0]
   84d74:	bd70      	pop	{r4, r5, r6, pc}
   84d76:	bf00      	nop
   84d78:	2007ac14 	.word	0x2007ac14

00084d7c <__register_exitproc>:
   84d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84d80:	4c25      	ldr	r4, [pc, #148]	; (84e18 <__register_exitproc+0x9c>)
   84d82:	4606      	mov	r6, r0
   84d84:	6825      	ldr	r5, [r4, #0]
   84d86:	4688      	mov	r8, r1
   84d88:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   84d8c:	4692      	mov	sl, r2
   84d8e:	4699      	mov	r9, r3
   84d90:	b3c4      	cbz	r4, 84e04 <__register_exitproc+0x88>
   84d92:	6860      	ldr	r0, [r4, #4]
   84d94:	281f      	cmp	r0, #31
   84d96:	dc17      	bgt.n	84dc8 <__register_exitproc+0x4c>
   84d98:	1c41      	adds	r1, r0, #1
   84d9a:	b176      	cbz	r6, 84dba <__register_exitproc+0x3e>
   84d9c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   84da0:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   84da4:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   84da8:	2201      	movs	r2, #1
   84daa:	4082      	lsls	r2, r0
   84dac:	4315      	orrs	r5, r2
   84dae:	2e02      	cmp	r6, #2
   84db0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   84db4:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   84db8:	d01e      	beq.n	84df8 <__register_exitproc+0x7c>
   84dba:	1c83      	adds	r3, r0, #2
   84dbc:	6061      	str	r1, [r4, #4]
   84dbe:	2000      	movs	r0, #0
   84dc0:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   84dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84dc8:	4b14      	ldr	r3, [pc, #80]	; (84e1c <__register_exitproc+0xa0>)
   84dca:	b303      	cbz	r3, 84e0e <__register_exitproc+0x92>
   84dcc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84dd0:	f7ff f98e 	bl	840f0 <malloc>
   84dd4:	4604      	mov	r4, r0
   84dd6:	b1d0      	cbz	r0, 84e0e <__register_exitproc+0x92>
   84dd8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   84ddc:	2700      	movs	r7, #0
   84dde:	e884 0088 	stmia.w	r4, {r3, r7}
   84de2:	4638      	mov	r0, r7
   84de4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84de8:	2101      	movs	r1, #1
   84dea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   84dee:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   84df2:	2e00      	cmp	r6, #0
   84df4:	d0e1      	beq.n	84dba <__register_exitproc+0x3e>
   84df6:	e7d1      	b.n	84d9c <__register_exitproc+0x20>
   84df8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84dfc:	431a      	orrs	r2, r3
   84dfe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   84e02:	e7da      	b.n	84dba <__register_exitproc+0x3e>
   84e04:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   84e08:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   84e0c:	e7c1      	b.n	84d92 <__register_exitproc+0x16>
   84e0e:	f04f 30ff 	mov.w	r0, #4294967295
   84e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84e16:	bf00      	nop
   84e18:	00085330 	.word	0x00085330
   84e1c:	000840f1 	.word	0x000840f1

00084e20 <_close_r>:
   84e20:	b538      	push	{r3, r4, r5, lr}
   84e22:	4c07      	ldr	r4, [pc, #28]	; (84e40 <_close_r+0x20>)
   84e24:	2300      	movs	r3, #0
   84e26:	4605      	mov	r5, r0
   84e28:	4608      	mov	r0, r1
   84e2a:	6023      	str	r3, [r4, #0]
   84e2c:	f7fd f878 	bl	81f20 <_close>
   84e30:	1c43      	adds	r3, r0, #1
   84e32:	d000      	beq.n	84e36 <_close_r+0x16>
   84e34:	bd38      	pop	{r3, r4, r5, pc}
   84e36:	6823      	ldr	r3, [r4, #0]
   84e38:	2b00      	cmp	r3, #0
   84e3a:	d0fb      	beq.n	84e34 <_close_r+0x14>
   84e3c:	602b      	str	r3, [r5, #0]
   84e3e:	bd38      	pop	{r3, r4, r5, pc}
   84e40:	2007ac14 	.word	0x2007ac14

00084e44 <_fclose_r>:
   84e44:	2900      	cmp	r1, #0
   84e46:	d03d      	beq.n	84ec4 <_fclose_r+0x80>
   84e48:	b570      	push	{r4, r5, r6, lr}
   84e4a:	4605      	mov	r5, r0
   84e4c:	460c      	mov	r4, r1
   84e4e:	b108      	cbz	r0, 84e54 <_fclose_r+0x10>
   84e50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e52:	b37b      	cbz	r3, 84eb4 <_fclose_r+0x70>
   84e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84e58:	b90b      	cbnz	r3, 84e5e <_fclose_r+0x1a>
   84e5a:	2000      	movs	r0, #0
   84e5c:	bd70      	pop	{r4, r5, r6, pc}
   84e5e:	4621      	mov	r1, r4
   84e60:	4628      	mov	r0, r5
   84e62:	f7fe fc33 	bl	836cc <__sflush_r>
   84e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84e68:	4606      	mov	r6, r0
   84e6a:	b133      	cbz	r3, 84e7a <_fclose_r+0x36>
   84e6c:	69e1      	ldr	r1, [r4, #28]
   84e6e:	4628      	mov	r0, r5
   84e70:	4798      	blx	r3
   84e72:	2800      	cmp	r0, #0
   84e74:	bfb8      	it	lt
   84e76:	f04f 36ff 	movlt.w	r6, #4294967295
   84e7a:	89a3      	ldrh	r3, [r4, #12]
   84e7c:	061b      	lsls	r3, r3, #24
   84e7e:	d41c      	bmi.n	84eba <_fclose_r+0x76>
   84e80:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84e82:	b141      	cbz	r1, 84e96 <_fclose_r+0x52>
   84e84:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84e88:	4299      	cmp	r1, r3
   84e8a:	d002      	beq.n	84e92 <_fclose_r+0x4e>
   84e8c:	4628      	mov	r0, r5
   84e8e:	f7fe fe1d 	bl	83acc <_free_r>
   84e92:	2300      	movs	r3, #0
   84e94:	6323      	str	r3, [r4, #48]	; 0x30
   84e96:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84e98:	b121      	cbz	r1, 84ea4 <_fclose_r+0x60>
   84e9a:	4628      	mov	r0, r5
   84e9c:	f7fe fe16 	bl	83acc <_free_r>
   84ea0:	2300      	movs	r3, #0
   84ea2:	6463      	str	r3, [r4, #68]	; 0x44
   84ea4:	f7fe fd50 	bl	83948 <__sfp_lock_acquire>
   84ea8:	2300      	movs	r3, #0
   84eaa:	81a3      	strh	r3, [r4, #12]
   84eac:	f7fe fd4e 	bl	8394c <__sfp_lock_release>
   84eb0:	4630      	mov	r0, r6
   84eb2:	bd70      	pop	{r4, r5, r6, pc}
   84eb4:	f7fe fd42 	bl	8393c <__sinit>
   84eb8:	e7cc      	b.n	84e54 <_fclose_r+0x10>
   84eba:	6921      	ldr	r1, [r4, #16]
   84ebc:	4628      	mov	r0, r5
   84ebe:	f7fe fe05 	bl	83acc <_free_r>
   84ec2:	e7dd      	b.n	84e80 <_fclose_r+0x3c>
   84ec4:	2000      	movs	r0, #0
   84ec6:	4770      	bx	lr

00084ec8 <_fstat_r>:
   84ec8:	b538      	push	{r3, r4, r5, lr}
   84eca:	460b      	mov	r3, r1
   84ecc:	4c07      	ldr	r4, [pc, #28]	; (84eec <_fstat_r+0x24>)
   84ece:	4605      	mov	r5, r0
   84ed0:	4611      	mov	r1, r2
   84ed2:	4618      	mov	r0, r3
   84ed4:	2300      	movs	r3, #0
   84ed6:	6023      	str	r3, [r4, #0]
   84ed8:	f7fd f826 	bl	81f28 <_fstat>
   84edc:	1c43      	adds	r3, r0, #1
   84ede:	d000      	beq.n	84ee2 <_fstat_r+0x1a>
   84ee0:	bd38      	pop	{r3, r4, r5, pc}
   84ee2:	6823      	ldr	r3, [r4, #0]
   84ee4:	2b00      	cmp	r3, #0
   84ee6:	d0fb      	beq.n	84ee0 <_fstat_r+0x18>
   84ee8:	602b      	str	r3, [r5, #0]
   84eea:	bd38      	pop	{r3, r4, r5, pc}
   84eec:	2007ac14 	.word	0x2007ac14

00084ef0 <_isatty_r>:
   84ef0:	b538      	push	{r3, r4, r5, lr}
   84ef2:	4c07      	ldr	r4, [pc, #28]	; (84f10 <_isatty_r+0x20>)
   84ef4:	2300      	movs	r3, #0
   84ef6:	4605      	mov	r5, r0
   84ef8:	4608      	mov	r0, r1
   84efa:	6023      	str	r3, [r4, #0]
   84efc:	f7fd f81a 	bl	81f34 <_isatty>
   84f00:	1c43      	adds	r3, r0, #1
   84f02:	d000      	beq.n	84f06 <_isatty_r+0x16>
   84f04:	bd38      	pop	{r3, r4, r5, pc}
   84f06:	6823      	ldr	r3, [r4, #0]
   84f08:	2b00      	cmp	r3, #0
   84f0a:	d0fb      	beq.n	84f04 <_isatty_r+0x14>
   84f0c:	602b      	str	r3, [r5, #0]
   84f0e:	bd38      	pop	{r3, r4, r5, pc}
   84f10:	2007ac14 	.word	0x2007ac14

00084f14 <_lseek_r>:
   84f14:	b570      	push	{r4, r5, r6, lr}
   84f16:	460d      	mov	r5, r1
   84f18:	4c08      	ldr	r4, [pc, #32]	; (84f3c <_lseek_r+0x28>)
   84f1a:	4611      	mov	r1, r2
   84f1c:	4606      	mov	r6, r0
   84f1e:	461a      	mov	r2, r3
   84f20:	4628      	mov	r0, r5
   84f22:	2300      	movs	r3, #0
   84f24:	6023      	str	r3, [r4, #0]
   84f26:	f7fd f807 	bl	81f38 <_lseek>
   84f2a:	1c43      	adds	r3, r0, #1
   84f2c:	d000      	beq.n	84f30 <_lseek_r+0x1c>
   84f2e:	bd70      	pop	{r4, r5, r6, pc}
   84f30:	6823      	ldr	r3, [r4, #0]
   84f32:	2b00      	cmp	r3, #0
   84f34:	d0fb      	beq.n	84f2e <_lseek_r+0x1a>
   84f36:	6033      	str	r3, [r6, #0]
   84f38:	bd70      	pop	{r4, r5, r6, pc}
   84f3a:	bf00      	nop
   84f3c:	2007ac14 	.word	0x2007ac14

00084f40 <_read_r>:
   84f40:	b570      	push	{r4, r5, r6, lr}
   84f42:	460d      	mov	r5, r1
   84f44:	4c08      	ldr	r4, [pc, #32]	; (84f68 <_read_r+0x28>)
   84f46:	4611      	mov	r1, r2
   84f48:	4606      	mov	r6, r0
   84f4a:	461a      	mov	r2, r3
   84f4c:	4628      	mov	r0, r5
   84f4e:	2300      	movs	r3, #0
   84f50:	6023      	str	r3, [r4, #0]
   84f52:	f7fb f8fd 	bl	80150 <_read>
   84f56:	1c43      	adds	r3, r0, #1
   84f58:	d000      	beq.n	84f5c <_read_r+0x1c>
   84f5a:	bd70      	pop	{r4, r5, r6, pc}
   84f5c:	6823      	ldr	r3, [r4, #0]
   84f5e:	2b00      	cmp	r3, #0
   84f60:	d0fb      	beq.n	84f5a <_read_r+0x1a>
   84f62:	6033      	str	r3, [r6, #0]
   84f64:	bd70      	pop	{r4, r5, r6, pc}
   84f66:	bf00      	nop
   84f68:	2007ac14 	.word	0x2007ac14

00084f6c <__aeabi_uldivmod>:
   84f6c:	b953      	cbnz	r3, 84f84 <__aeabi_uldivmod+0x18>
   84f6e:	b94a      	cbnz	r2, 84f84 <__aeabi_uldivmod+0x18>
   84f70:	2900      	cmp	r1, #0
   84f72:	bf08      	it	eq
   84f74:	2800      	cmpeq	r0, #0
   84f76:	bf1c      	itt	ne
   84f78:	f04f 31ff 	movne.w	r1, #4294967295
   84f7c:	f04f 30ff 	movne.w	r0, #4294967295
   84f80:	f000 b982 	b.w	85288 <__aeabi_idiv0>
   84f84:	f1ad 0c08 	sub.w	ip, sp, #8
   84f88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   84f8c:	f000 f806 	bl	84f9c <__udivmoddi4>
   84f90:	f8dd e004 	ldr.w	lr, [sp, #4]
   84f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84f98:	b004      	add	sp, #16
   84f9a:	4770      	bx	lr

00084f9c <__udivmoddi4>:
   84f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84fa0:	468c      	mov	ip, r1
   84fa2:	460c      	mov	r4, r1
   84fa4:	4605      	mov	r5, r0
   84fa6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   84fa8:	2b00      	cmp	r3, #0
   84faa:	d14f      	bne.n	8504c <__udivmoddi4+0xb0>
   84fac:	428a      	cmp	r2, r1
   84fae:	4617      	mov	r7, r2
   84fb0:	d96b      	bls.n	8508a <__udivmoddi4+0xee>
   84fb2:	fab2 fe82 	clz	lr, r2
   84fb6:	f1be 0f00 	cmp.w	lr, #0
   84fba:	d00b      	beq.n	84fd4 <__udivmoddi4+0x38>
   84fbc:	f1ce 0520 	rsb	r5, lr, #32
   84fc0:	fa20 f505 	lsr.w	r5, r0, r5
   84fc4:	fa01 f30e 	lsl.w	r3, r1, lr
   84fc8:	ea45 0c03 	orr.w	ip, r5, r3
   84fcc:	fa02 f70e 	lsl.w	r7, r2, lr
   84fd0:	fa00 f50e 	lsl.w	r5, r0, lr
   84fd4:	0c39      	lsrs	r1, r7, #16
   84fd6:	fbbc f0f1 	udiv	r0, ip, r1
   84fda:	b2ba      	uxth	r2, r7
   84fdc:	fb01 c310 	mls	r3, r1, r0, ip
   84fe0:	fb00 f802 	mul.w	r8, r0, r2
   84fe4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   84fe8:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   84fec:	45a0      	cmp	r8, r4
   84fee:	d909      	bls.n	85004 <__udivmoddi4+0x68>
   84ff0:	19e4      	adds	r4, r4, r7
   84ff2:	f100 33ff 	add.w	r3, r0, #4294967295
   84ff6:	f080 8128 	bcs.w	8524a <__udivmoddi4+0x2ae>
   84ffa:	45a0      	cmp	r8, r4
   84ffc:	f240 8125 	bls.w	8524a <__udivmoddi4+0x2ae>
   85000:	3802      	subs	r0, #2
   85002:	443c      	add	r4, r7
   85004:	ebc8 0404 	rsb	r4, r8, r4
   85008:	fbb4 f3f1 	udiv	r3, r4, r1
   8500c:	fb01 4c13 	mls	ip, r1, r3, r4
   85010:	fb03 f202 	mul.w	r2, r3, r2
   85014:	b2ac      	uxth	r4, r5
   85016:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   8501a:	428a      	cmp	r2, r1
   8501c:	d909      	bls.n	85032 <__udivmoddi4+0x96>
   8501e:	19c9      	adds	r1, r1, r7
   85020:	f103 34ff 	add.w	r4, r3, #4294967295
   85024:	f080 810f 	bcs.w	85246 <__udivmoddi4+0x2aa>
   85028:	428a      	cmp	r2, r1
   8502a:	f240 810c 	bls.w	85246 <__udivmoddi4+0x2aa>
   8502e:	3b02      	subs	r3, #2
   85030:	4439      	add	r1, r7
   85032:	1a8a      	subs	r2, r1, r2
   85034:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   85038:	2100      	movs	r1, #0
   8503a:	2e00      	cmp	r6, #0
   8503c:	d063      	beq.n	85106 <__udivmoddi4+0x16a>
   8503e:	fa22 f20e 	lsr.w	r2, r2, lr
   85042:	2300      	movs	r3, #0
   85044:	e886 000c 	stmia.w	r6, {r2, r3}
   85048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8504c:	428b      	cmp	r3, r1
   8504e:	d907      	bls.n	85060 <__udivmoddi4+0xc4>
   85050:	2e00      	cmp	r6, #0
   85052:	d056      	beq.n	85102 <__udivmoddi4+0x166>
   85054:	2100      	movs	r1, #0
   85056:	e886 0011 	stmia.w	r6, {r0, r4}
   8505a:	4608      	mov	r0, r1
   8505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85060:	fab3 f183 	clz	r1, r3
   85064:	2900      	cmp	r1, #0
   85066:	f040 8093 	bne.w	85190 <__udivmoddi4+0x1f4>
   8506a:	42a3      	cmp	r3, r4
   8506c:	d302      	bcc.n	85074 <__udivmoddi4+0xd8>
   8506e:	4282      	cmp	r2, r0
   85070:	f200 80fe 	bhi.w	85270 <__udivmoddi4+0x2d4>
   85074:	1a85      	subs	r5, r0, r2
   85076:	eb64 0303 	sbc.w	r3, r4, r3
   8507a:	469c      	mov	ip, r3
   8507c:	2001      	movs	r0, #1
   8507e:	2e00      	cmp	r6, #0
   85080:	d041      	beq.n	85106 <__udivmoddi4+0x16a>
   85082:	e886 1020 	stmia.w	r6, {r5, ip}
   85086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8508a:	b912      	cbnz	r2, 85092 <__udivmoddi4+0xf6>
   8508c:	2701      	movs	r7, #1
   8508e:	fbb7 f7f2 	udiv	r7, r7, r2
   85092:	fab7 fe87 	clz	lr, r7
   85096:	f1be 0f00 	cmp.w	lr, #0
   8509a:	d136      	bne.n	8510a <__udivmoddi4+0x16e>
   8509c:	1be4      	subs	r4, r4, r7
   8509e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   850a2:	fa1f f987 	uxth.w	r9, r7
   850a6:	2101      	movs	r1, #1
   850a8:	fbb4 f3f8 	udiv	r3, r4, r8
   850ac:	fb08 4413 	mls	r4, r8, r3, r4
   850b0:	fb09 f203 	mul.w	r2, r9, r3
   850b4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   850b8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   850bc:	42a2      	cmp	r2, r4
   850be:	d907      	bls.n	850d0 <__udivmoddi4+0x134>
   850c0:	19e4      	adds	r4, r4, r7
   850c2:	f103 30ff 	add.w	r0, r3, #4294967295
   850c6:	d202      	bcs.n	850ce <__udivmoddi4+0x132>
   850c8:	42a2      	cmp	r2, r4
   850ca:	f200 80d3 	bhi.w	85274 <__udivmoddi4+0x2d8>
   850ce:	4603      	mov	r3, r0
   850d0:	1aa4      	subs	r4, r4, r2
   850d2:	fbb4 f0f8 	udiv	r0, r4, r8
   850d6:	fb08 4810 	mls	r8, r8, r0, r4
   850da:	fb09 f900 	mul.w	r9, r9, r0
   850de:	b2ac      	uxth	r4, r5
   850e0:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   850e4:	4591      	cmp	r9, r2
   850e6:	d907      	bls.n	850f8 <__udivmoddi4+0x15c>
   850e8:	19d2      	adds	r2, r2, r7
   850ea:	f100 34ff 	add.w	r4, r0, #4294967295
   850ee:	d202      	bcs.n	850f6 <__udivmoddi4+0x15a>
   850f0:	4591      	cmp	r9, r2
   850f2:	f200 80ba 	bhi.w	8526a <__udivmoddi4+0x2ce>
   850f6:	4620      	mov	r0, r4
   850f8:	ebc9 0202 	rsb	r2, r9, r2
   850fc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   85100:	e79b      	b.n	8503a <__udivmoddi4+0x9e>
   85102:	4631      	mov	r1, r6
   85104:	4630      	mov	r0, r6
   85106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8510a:	fa07 f70e 	lsl.w	r7, r7, lr
   8510e:	f1ce 0c20 	rsb	ip, lr, #32
   85112:	fa24 f30c 	lsr.w	r3, r4, ip
   85116:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8511a:	fbb3 faf8 	udiv	sl, r3, r8
   8511e:	fa1f f987 	uxth.w	r9, r7
   85122:	fb08 351a 	mls	r5, r8, sl, r3
   85126:	fa20 fc0c 	lsr.w	ip, r0, ip
   8512a:	fa04 f40e 	lsl.w	r4, r4, lr
   8512e:	fb0a fb09 	mul.w	fp, sl, r9
   85132:	ea4c 0c04 	orr.w	ip, ip, r4
   85136:	ea4f 421c 	mov.w	r2, ip, lsr #16
   8513a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   8513e:	459b      	cmp	fp, r3
   85140:	fa00 f50e 	lsl.w	r5, r0, lr
   85144:	d90a      	bls.n	8515c <__udivmoddi4+0x1c0>
   85146:	19db      	adds	r3, r3, r7
   85148:	f10a 32ff 	add.w	r2, sl, #4294967295
   8514c:	f080 808b 	bcs.w	85266 <__udivmoddi4+0x2ca>
   85150:	459b      	cmp	fp, r3
   85152:	f240 8088 	bls.w	85266 <__udivmoddi4+0x2ca>
   85156:	f1aa 0a02 	sub.w	sl, sl, #2
   8515a:	443b      	add	r3, r7
   8515c:	ebcb 0303 	rsb	r3, fp, r3
   85160:	fbb3 f0f8 	udiv	r0, r3, r8
   85164:	fb08 3310 	mls	r3, r8, r0, r3
   85168:	fb00 f409 	mul.w	r4, r0, r9
   8516c:	fa1f fc8c 	uxth.w	ip, ip
   85170:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   85174:	429c      	cmp	r4, r3
   85176:	d907      	bls.n	85188 <__udivmoddi4+0x1ec>
   85178:	19db      	adds	r3, r3, r7
   8517a:	f100 32ff 	add.w	r2, r0, #4294967295
   8517e:	d26e      	bcs.n	8525e <__udivmoddi4+0x2c2>
   85180:	429c      	cmp	r4, r3
   85182:	d96c      	bls.n	8525e <__udivmoddi4+0x2c2>
   85184:	3802      	subs	r0, #2
   85186:	443b      	add	r3, r7
   85188:	1b1c      	subs	r4, r3, r4
   8518a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   8518e:	e78b      	b.n	850a8 <__udivmoddi4+0x10c>
   85190:	f1c1 0e20 	rsb	lr, r1, #32
   85194:	408b      	lsls	r3, r1
   85196:	fa22 fc0e 	lsr.w	ip, r2, lr
   8519a:	ea4c 0c03 	orr.w	ip, ip, r3
   8519e:	fa24 f70e 	lsr.w	r7, r4, lr
   851a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   851a6:	fbb7 faf9 	udiv	sl, r7, r9
   851aa:	fa1f f38c 	uxth.w	r3, ip
   851ae:	fb09 771a 	mls	r7, r9, sl, r7
   851b2:	fa20 f80e 	lsr.w	r8, r0, lr
   851b6:	408c      	lsls	r4, r1
   851b8:	fb0a f503 	mul.w	r5, sl, r3
   851bc:	ea48 0404 	orr.w	r4, r8, r4
   851c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   851c4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   851c8:	42bd      	cmp	r5, r7
   851ca:	fa02 f201 	lsl.w	r2, r2, r1
   851ce:	fa00 fb01 	lsl.w	fp, r0, r1
   851d2:	d909      	bls.n	851e8 <__udivmoddi4+0x24c>
   851d4:	eb17 070c 	adds.w	r7, r7, ip
   851d8:	f10a 30ff 	add.w	r0, sl, #4294967295
   851dc:	d241      	bcs.n	85262 <__udivmoddi4+0x2c6>
   851de:	42bd      	cmp	r5, r7
   851e0:	d93f      	bls.n	85262 <__udivmoddi4+0x2c6>
   851e2:	f1aa 0a02 	sub.w	sl, sl, #2
   851e6:	4467      	add	r7, ip
   851e8:	1b7f      	subs	r7, r7, r5
   851ea:	fbb7 f5f9 	udiv	r5, r7, r9
   851ee:	fb09 7715 	mls	r7, r9, r5, r7
   851f2:	fb05 f303 	mul.w	r3, r5, r3
   851f6:	b2a4      	uxth	r4, r4
   851f8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   851fc:	42bb      	cmp	r3, r7
   851fe:	d908      	bls.n	85212 <__udivmoddi4+0x276>
   85200:	eb17 070c 	adds.w	r7, r7, ip
   85204:	f105 30ff 	add.w	r0, r5, #4294967295
   85208:	d227      	bcs.n	8525a <__udivmoddi4+0x2be>
   8520a:	42bb      	cmp	r3, r7
   8520c:	d925      	bls.n	8525a <__udivmoddi4+0x2be>
   8520e:	3d02      	subs	r5, #2
   85210:	4467      	add	r7, ip
   85212:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   85216:	fba0 8902 	umull	r8, r9, r0, r2
   8521a:	1aff      	subs	r7, r7, r3
   8521c:	454f      	cmp	r7, r9
   8521e:	4645      	mov	r5, r8
   85220:	464c      	mov	r4, r9
   85222:	d314      	bcc.n	8524e <__udivmoddi4+0x2b2>
   85224:	d029      	beq.n	8527a <__udivmoddi4+0x2de>
   85226:	b366      	cbz	r6, 85282 <__udivmoddi4+0x2e6>
   85228:	ebbb 0305 	subs.w	r3, fp, r5
   8522c:	eb67 0704 	sbc.w	r7, r7, r4
   85230:	fa07 fe0e 	lsl.w	lr, r7, lr
   85234:	40cb      	lsrs	r3, r1
   85236:	40cf      	lsrs	r7, r1
   85238:	ea4e 0303 	orr.w	r3, lr, r3
   8523c:	e886 0088 	stmia.w	r6, {r3, r7}
   85240:	2100      	movs	r1, #0
   85242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85246:	4623      	mov	r3, r4
   85248:	e6f3      	b.n	85032 <__udivmoddi4+0x96>
   8524a:	4618      	mov	r0, r3
   8524c:	e6da      	b.n	85004 <__udivmoddi4+0x68>
   8524e:	ebb8 0502 	subs.w	r5, r8, r2
   85252:	eb69 040c 	sbc.w	r4, r9, ip
   85256:	3801      	subs	r0, #1
   85258:	e7e5      	b.n	85226 <__udivmoddi4+0x28a>
   8525a:	4605      	mov	r5, r0
   8525c:	e7d9      	b.n	85212 <__udivmoddi4+0x276>
   8525e:	4610      	mov	r0, r2
   85260:	e792      	b.n	85188 <__udivmoddi4+0x1ec>
   85262:	4682      	mov	sl, r0
   85264:	e7c0      	b.n	851e8 <__udivmoddi4+0x24c>
   85266:	4692      	mov	sl, r2
   85268:	e778      	b.n	8515c <__udivmoddi4+0x1c0>
   8526a:	3802      	subs	r0, #2
   8526c:	443a      	add	r2, r7
   8526e:	e743      	b.n	850f8 <__udivmoddi4+0x15c>
   85270:	4608      	mov	r0, r1
   85272:	e704      	b.n	8507e <__udivmoddi4+0xe2>
   85274:	3b02      	subs	r3, #2
   85276:	443c      	add	r4, r7
   85278:	e72a      	b.n	850d0 <__udivmoddi4+0x134>
   8527a:	45c3      	cmp	fp, r8
   8527c:	d3e7      	bcc.n	8524e <__udivmoddi4+0x2b2>
   8527e:	463c      	mov	r4, r7
   85280:	e7d1      	b.n	85226 <__udivmoddi4+0x28a>
   85282:	4631      	mov	r1, r6
   85284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085288 <__aeabi_idiv0>:
   85288:	4770      	bx	lr
   8528a:	bf00      	nop
   8528c:	09097325 	.word	0x09097325
   85290:	25096325 	.word	0x25096325
   85294:	75250975 	.word	0x75250975
   85298:	0d752509 	.word	0x0d752509
   8529c:	0000000a 	.word	0x0000000a
   852a0:	454c4449 	.word	0x454c4449
   852a4:	00000000 	.word	0x00000000
   852a8:	00000a0d 	.word	0x00000a0d
   852ac:	20726d54 	.word	0x20726d54
   852b0:	00637653 	.word	0x00637653
   852b4:	6b736154 	.word	0x6b736154
   852b8:	2a203120 	.word	0x2a203120
   852bc:	2a2a2a2a 	.word	0x2a2a2a2a
   852c0:	2a2a2a2a 	.word	0x2a2a2a2a
   852c4:	2a2a2a2a 	.word	0x2a2a2a2a
   852c8:	2a2a2a2a 	.word	0x2a2a2a2a
   852cc:	2a2a2a2a 	.word	0x2a2a2a2a
   852d0:	2a2a2a2a 	.word	0x2a2a2a2a
   852d4:	2a2a2a2a 	.word	0x2a2a2a2a
   852d8:	2a2a2a2a 	.word	0x2a2a2a2a
   852dc:	2a2a2a2a 	.word	0x2a2a2a2a
   852e0:	2a2a2a2a 	.word	0x2a2a2a2a
   852e4:	00000a2a 	.word	0x00000a2a
   852e8:	6e697250 	.word	0x6e697250
   852ec:	00003174 	.word	0x00003174
   852f0:	6b736154 	.word	0x6b736154
   852f4:	2d203220 	.word	0x2d203220
   852f8:	2d2d2d2d 	.word	0x2d2d2d2d
   852fc:	2d2d2d2d 	.word	0x2d2d2d2d
   85300:	2d2d2d2d 	.word	0x2d2d2d2d
   85304:	2d2d2d2d 	.word	0x2d2d2d2d
   85308:	2d2d2d2d 	.word	0x2d2d2d2d
   8530c:	2d2d2d2d 	.word	0x2d2d2d2d
   85310:	2d2d2d2d 	.word	0x2d2d2d2d
   85314:	2d2d2d2d 	.word	0x2d2d2d2d
   85318:	2d2d2d2d 	.word	0x2d2d2d2d
   8531c:	2d2d2d2d 	.word	0x2d2d2d2d
   85320:	00000a2d 	.word	0x00000a2d
   85324:	6e697250 	.word	0x6e697250
   85328:	00003274 	.word	0x00003274
   8532c:	00000043 	.word	0x00000043

00085330 <_global_impure_ptr>:
   85330:	20070140                                @.. 

00085334 <zeroes.6993>:
   85334:	30303030 30303030 30303030 30303030     0000000000000000
   85344:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   85354:	00000000 33323130 37363534 62613938     ....0123456789ab
   85364:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00085374 <blanks.6992>:
   85374:	20202020 20202020 20202020 20202020                     

00085384 <_init>:
   85384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85386:	bf00      	nop
   85388:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8538a:	bc08      	pop	{r3}
   8538c:	469e      	mov	lr, r3
   8538e:	4770      	bx	lr

00085390 <__init_array_start>:
   85390:	000836ad 	.word	0x000836ad

00085394 <__frame_dummy_init_array_entry>:
   85394:	00080119                                ....

00085398 <_fini>:
   85398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8539a:	bf00      	nop
   8539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8539e:	bc08      	pop	{r3}
   853a0:	469e      	mov	lr, r3
   853a2:	4770      	bx	lr

000853a4 <__fini_array_start>:
   853a4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	0008532c 00000000 00000000 00000000     ,S..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00084d35                                5M..
